// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'res', true, true);
Module['FS_createPath']('/res', 'shaders', true, true);
var fileData0 = [];
fileData0.push.apply(fileData0, [35, 32, 66, 108, 101, 110, 100, 101, 114, 32, 77, 84, 76, 32, 70, 105, 108, 101, 58, 32, 39, 78, 111, 110, 101, 39, 13, 10, 35, 32, 77, 97, 116, 101, 114, 105, 97, 108, 32, 67, 111, 117, 110, 116, 58, 32, 49, 13, 10, 13, 10, 110, 101, 119, 109, 116, 108, 32, 78, 111, 110, 101, 13, 10, 78, 115, 32, 48, 13, 10, 75, 97, 32, 48, 46, 48, 48, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 48, 48, 13, 10, 75, 100, 32, 48, 46, 56, 32, 48, 46, 56, 32, 48, 46, 56, 13, 10, 75, 115, 32, 48, 46, 56, 32, 48, 46, 56, 32, 48, 46, 56, 13, 10, 100, 32, 49, 13, 10, 105, 108, 108, 117, 109, 32, 50, 13, 10]);
Module['FS_createDataFile']('/res', 'smallercube.mtl', fileData0, true, true, false);
var fileData1 = [];
fileData1.push.apply(fileData1, [35, 32, 66, 108, 101, 110, 100, 101, 114, 32, 118, 50, 46, 55, 57, 32, 40, 115, 117, 98, 32, 48, 41, 32, 79, 66, 74, 32, 70, 105, 108, 101, 58, 32, 39, 39, 13, 10, 35, 32, 119, 119, 119, 46, 98, 108, 101, 110, 100, 101, 114, 46, 111, 114, 103, 13, 10, 109, 116, 108, 108, 105, 98, 32, 115, 109, 97, 108, 108, 101, 114, 99, 117, 98, 101, 46, 109, 116, 108, 13, 10, 111, 32, 67, 117, 98, 101, 95, 67, 117, 98, 101, 46, 48, 48, 52, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 56, 48, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 32, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 55, 48, 53, 49, 57, 13, 10, 118, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 56, 48, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 56, 48, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 55, 48, 53, 49, 57, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 55, 48, 53, 49, 57, 32, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 56, 48, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 55, 48, 53, 49, 57, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 13, 10, 118, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 56, 48, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 56, 48, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 32, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 55, 48, 53, 49, 57, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 55, 48, 53, 49, 57, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 56, 48, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 56, 48, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 56, 48, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 55, 48, 53, 49, 57, 32, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 55, 48, 53, 49, 57, 13, 10, 118, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 48, 46, 49, 55, 48, 53, 49, 57, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 56, 48, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 13, 10, 118, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 48, 46, 49, 55, 48, 53, 49, 57, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 56, 48, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 56, 48, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 56, 48, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 55, 48, 53, 49, 57, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 54, 49, 57, 55, 54, 13, 10, 118, 32, 48, 46, 49, 55, 53, 49, 57, 49, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 52, 52, 48, 48, 48, 13, 10, 118, 32, 48, 46, 49, 55, 48, 53, 49, 57, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 54, 49, 50, 49, 54, 13, 10, 118, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 48, 46, 49, 54, 49, 57, 55, 54, 32, 48, 46, 49, 52, 52, 48, 48, 48, 32, 45, 48, 46, 49, 55, 53, 49, 57, 49, 13, 10, 118, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 48, 46, 49, 54, 49, 50, 49, 54, 32, 45, 48, 46, 49, 55, 48, 53, 49, 57, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 32, 49, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 49, 46, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 49, 46, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 45, 49, 46, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 32, 45, 49, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 57, 51, 49, 56, 32, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 45, 48, 46, 50, 49, 55, 56, 32, 45, 48, 46, 54, 57, 48, 49, 32, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 50, 53, 54, 54, 32, 48, 46, 57, 51, 49, 56, 13, 10, 118, 110, 32, 45, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 50, 49, 55, 56, 32, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 45, 48, 46, 57, 51, 49, 56, 32, 45, 48, 46, 50, 53, 54, 54, 32, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 45, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 54, 57, 48, 49, 32, 48, 46, 50, 49, 55, 56, 13, 10, 118, 110, 32, 45, 48, 46, 53, 55, 55, 52, 32, 45, 48, 46, 53, 55, 55, 52, 32, 48, 46, 53, 55, 55, 52, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 54, 54, 32, 48, 46, 50, 53, 54, 54, 32, 48, 46, 57, 51, 49, 56, 13, 10, 118, 110, 32, 45, 48, 46, 50, 49, 55, 56, 32, 48, 46, 54, 57, 48, 49, 32, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 54, 54, 32, 48, 46, 57, 51, 49, 56, 32, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 45, 48, 46, 54, 57, 48, 49, 32, 48, 46, 54, 57, 48, 49, 32, 48, 46, 50, 49, 55, 56, 13, 10, 118, 110, 32, 45, 48, 46, 57, 51, 49, 56, 32, 48, 46, 50, 53, 54, 54, 32, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 45, 48, 46, 54, 57, 48, 49, 32, 48, 46, 50, 49, 55, 56, 32, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 45, 48, 46, 53, 55, 55, 52, 32, 48, 46, 53, 55, 55, 52, 32, 48, 46, 53, 55, 55, 52, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 57, 51, 49, 56, 32, 45, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 45, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 50, 49, 55, 56, 13, 10, 118, 110, 32, 45, 48, 46, 57, 51, 49, 56, 32, 45, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 45, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 50, 49, 55, 56, 32, 45, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 57, 51, 49, 56, 13, 10, 118, 110, 32, 45, 48, 46, 50, 49, 55, 56, 32, 45, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 45, 48, 46, 53, 55, 55, 52, 32, 45, 48, 46, 53, 55, 55, 52, 32, 45, 48, 46, 53, 55, 55, 52, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 54, 54, 32, 48, 46, 57, 51, 49, 56, 32, 45, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 45, 48, 46, 50, 49, 55, 56, 32, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 54, 54, 32, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 57, 51, 49, 56, 13, 10, 118, 110, 32, 45, 48, 46, 54, 57, 48, 49, 32, 48, 46, 50, 49, 55, 56, 32, 45, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 45, 48, 46, 57, 51, 49, 56, 32, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 45, 48, 46, 54, 57, 48, 49, 32, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 50, 49, 55, 56, 13, 10, 118, 110, 32, 45, 48, 46, 53, 55, 55, 52, 32, 48, 46, 53, 55, 55, 52, 32, 45, 48, 46, 53, 55, 55, 52, 13, 10, 118, 110, 32, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 57, 51, 49, 56, 32, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 54, 57, 48, 49, 32, 48, 46, 50, 49, 55, 56, 13, 10, 118, 110, 32, 48, 46, 57, 51, 49, 56, 32, 45, 48, 46, 50, 53, 54, 54, 32, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 50, 49, 55, 56, 32, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 50, 53, 54, 54, 32, 48, 46, 57, 51, 49, 56, 13, 10, 118, 110, 32, 48, 46, 50, 49, 55, 56, 32, 45, 48, 46, 54, 57, 48, 49, 32, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 48, 46, 53, 55, 55, 52, 32, 45, 48, 46, 53, 55, 55, 52, 32, 48, 46, 53, 55, 55, 52, 13, 10, 118, 110, 32, 48, 46, 50, 53, 54, 54, 32, 48, 46, 57, 51, 49, 56, 32, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 48, 46, 50, 49, 55, 56, 32, 48, 46, 54, 57, 48, 49, 32, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 48, 46, 50, 53, 54, 54, 32, 48, 46, 50, 53, 54, 54, 32, 48, 46, 57, 51, 49, 56, 13, 10, 118, 110, 32, 48, 46, 54, 57, 48, 49, 32, 48, 46, 50, 49, 55, 56, 32, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 48, 46, 57, 51, 49, 56, 32, 48, 46, 50, 53, 54, 54, 32, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 48, 46, 54, 57, 48, 49, 32, 48, 46, 54, 57, 48, 49, 32, 48, 46, 50, 49, 55, 56, 13, 10, 118, 110, 32, 48, 46, 53, 55, 55, 52, 32, 48, 46, 53, 55, 55, 52, 32, 48, 46, 53, 55, 55, 52, 13, 10, 118, 110, 32, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 57, 51, 49, 56, 32, 45, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 48, 46, 50, 49, 55, 56, 32, 45, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 57, 51, 49, 56, 13, 10, 118, 110, 32, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 50, 49, 55, 56, 32, 45, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 48, 46, 57, 51, 49, 56, 32, 45, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 50, 49, 55, 56, 13, 10, 118, 110, 32, 48, 46, 53, 55, 55, 52, 32, 45, 48, 46, 53, 55, 55, 52, 32, 45, 48, 46, 53, 55, 55, 52, 13, 10, 118, 110, 32, 48, 46, 50, 53, 54, 54, 32, 48, 46, 57, 51, 49, 56, 32, 45, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 48, 46, 54, 57, 48, 49, 32, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 50, 49, 55, 56, 13, 10, 118, 110, 32, 48, 46, 57, 51, 49, 56, 32, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 50, 53, 54, 54, 13, 10, 118, 110, 32, 48, 46, 54, 57, 48, 49, 32, 48, 46, 50, 49, 55, 56, 32, 45, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 48, 46, 50, 53, 54, 54, 32, 48, 46, 50, 53, 54, 54, 32, 45, 48, 46, 57, 51, 49, 56, 13, 10, 118, 110, 32, 48, 46, 50, 49, 55, 56, 32, 48, 46, 54, 57, 48, 49, 32, 45, 48, 46, 54, 57, 48, 49, 13, 10, 118, 110, 32, 48, 46, 53, 55, 55, 52, 32, 48, 46, 53, 55, 55, 52, 32, 45, 48, 46, 53, 55, 55, 52, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 56, 53, 32, 45, 48, 46, 57, 54, 54, 48, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 45, 48, 46, 55, 48, 55, 49, 32, 45, 48, 46, 55, 48, 55, 49, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 45, 48, 46, 57, 54, 54, 48, 32, 45, 48, 46, 50, 53, 56, 53, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 56, 53, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 57, 54, 54, 48, 13, 10, 118, 110, 32, 45, 48, 46, 55, 48, 55, 49, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 55, 48, 55, 49, 13, 10, 118, 110, 32, 45, 48, 46, 57, 54, 54, 48, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 50, 53, 56, 53, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 56, 53, 32, 48, 46, 57, 54, 54, 48, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 45, 48, 46, 55, 48, 55, 49, 32, 48, 46, 55, 48, 55, 49, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 45, 48, 46, 57, 54, 54, 48, 32, 48, 46, 50, 53, 56, 53, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 45, 48, 46, 50, 53, 56, 53, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 57, 54, 54, 48, 13, 10, 118, 110, 32, 45, 48, 46, 55, 48, 55, 49, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 55, 48, 55, 49, 13, 10, 118, 110, 32, 45, 48, 46, 57, 54, 54, 48, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 50, 53, 56, 53, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 57, 54, 54, 48, 32, 45, 48, 46, 50, 53, 56, 53, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 55, 48, 55, 49, 32, 45, 48, 46, 55, 48, 55, 49, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 50, 53, 56, 53, 32, 45, 48, 46, 57, 54, 54, 48, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 57, 54, 54, 48, 32, 45, 48, 46, 50, 53, 56, 53, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 55, 48, 55, 49, 32, 45, 48, 46, 55, 48, 55, 49, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 50, 53, 56, 53, 32, 45, 48, 46, 57, 54, 54, 48, 13, 10, 118, 110, 32, 48, 46, 57, 54, 54, 48, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 50, 53, 56, 53, 13, 10, 118, 110, 32, 48, 46, 55, 48, 55, 49, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 55, 48, 55, 49, 13, 10, 118, 110, 32, 48, 46, 50, 53, 56, 53, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 57, 54, 54, 48, 13, 10, 118, 110, 32, 48, 46, 50, 53, 56, 53, 32, 45, 48, 46, 57, 54, 54, 48, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 48, 46, 55, 48, 55, 49, 32, 45, 48, 46, 55, 48, 55, 49, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 48, 46, 57, 54, 54, 48, 32, 45, 48, 46, 50, 53, 56, 53, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 48, 46, 50, 53, 56, 53, 32, 48, 46, 57, 54, 54, 48, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 48, 46, 55, 48, 55, 49, 32, 48, 46, 55, 48, 55, 49, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 48, 46, 57, 54, 54, 48, 32, 48, 46, 50, 53, 56, 53, 32, 48, 46, 48, 48, 48, 48, 13, 10, 118, 110, 32, 48, 46, 50, 53, 56, 53, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 57, 54, 54, 48, 13, 10, 118, 110, 32, 48, 46, 55, 48, 55, 49, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 55, 48, 55, 49, 13, 10, 118, 110, 32, 48, 46, 57, 54, 54, 48, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 50, 53, 56, 53, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 57, 54, 54, 48, 32, 48, 46, 50, 53, 56, 53, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 55, 48, 55, 49, 32, 48, 46, 55, 48, 55, 49, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 45, 48, 46, 50, 53, 56, 53, 32, 48, 46, 57, 54, 54, 48, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 57, 54, 54, 48, 32, 48, 46, 50, 53, 56, 53, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 55, 48, 55, 49, 32, 48, 46, 55, 48, 55, 49, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 48, 46, 50, 53, 56, 53, 32, 48, 46, 57, 54, 54, 48, 13, 10, 118, 110, 32, 48, 46, 48, 48, 48, 48, 32, 45, 49, 46, 48, 48, 48, 48, 32, 48, 46, 48, 48, 48, 48, 13, 10, 117, 115, 101, 109, 116, 108, 32, 78, 111, 110, 101, 13, 10, 115, 32, 111, 102, 102, 13, 10, 102, 32, 53, 49, 47, 47, 49, 32, 54, 50, 47, 47, 49, 32, 49, 51, 47, 47, 49, 32, 50, 47, 47, 49, 13, 10, 102, 32, 55, 53, 47, 47, 50, 32, 56, 54, 47, 47, 50, 32, 54, 51, 47, 47, 50, 32, 53, 48, 47, 47, 50, 13, 10, 102, 32, 56, 53, 47, 47, 51, 32, 51, 55, 47, 47, 51, 32, 49, 52, 47, 47, 51, 32, 54, 49, 47, 47, 51, 13, 10, 102, 32, 51, 47, 47, 52, 32, 49, 53, 47, 47, 52, 32, 51, 57, 47, 47, 52, 32, 50, 54, 47, 47, 52, 13, 10, 102, 32, 50, 55, 47, 47, 53, 32, 51, 56, 47, 47, 53, 32, 56, 55, 47, 47, 53, 32, 55, 52, 47, 47, 53, 13, 10, 102, 32, 49, 47, 47, 54, 32, 52, 47, 47, 54, 32, 54, 47, 47, 54, 32, 53, 47, 47, 54, 13, 10, 102, 32, 52, 47, 47, 55, 32, 56, 47, 47, 55, 32, 57, 47, 47, 55, 32, 54, 47, 47, 55, 13, 10, 102, 32, 50, 47, 47, 56, 32, 55, 47, 47, 56, 32, 57, 47, 47, 56, 32, 56, 47, 47, 56, 13, 10, 102, 32, 55, 47, 47, 57, 32, 49, 49, 47, 47, 57, 32, 49, 50, 47, 47, 57, 32, 57, 47, 47, 57, 13, 10, 102, 32, 51, 47, 47, 49, 48, 32, 49, 48, 47, 47, 49, 48, 32, 49, 50, 47, 47, 49, 48, 32, 49, 49, 47, 47, 49, 48, 13, 10, 102, 32, 49, 48, 47, 47, 49, 49, 32, 53, 47, 47, 49, 49, 32, 54, 47, 47, 49, 49, 32, 49, 50, 47, 47, 49, 49, 13, 10, 102, 32, 54, 47, 47, 49, 50, 32, 57, 47, 47, 49, 50, 32, 49, 50, 47, 47, 49, 50, 13, 10, 102, 32, 49, 51, 47, 47, 49, 51, 32, 49, 54, 47, 47, 49, 51, 32, 49, 56, 47, 47, 49, 51, 32, 49, 55, 47, 47, 49, 51, 13, 10, 102, 32, 49, 54, 47, 47, 49, 52, 32, 50, 48, 47, 47, 49, 52, 32, 50, 49, 47, 47, 49, 52, 32, 49, 56, 47, 47, 49, 52, 13, 10, 102, 32, 49, 52, 47, 47, 49, 53, 32, 49, 57, 47, 47, 49, 53, 32, 50, 49, 47, 47, 49, 53, 32, 50, 48, 47, 47, 49, 53, 13, 10, 102, 32, 49, 57, 47, 47, 49, 54, 32, 50, 51, 47, 47, 49, 54, 32, 50, 52, 47, 47, 49, 54, 32, 50, 49, 47, 47, 49, 54, 13, 10, 102, 32, 49, 53, 47, 47, 49, 55, 32, 50, 50, 47, 47, 49, 55, 32, 50, 52, 47, 47, 49, 55, 32, 50, 51, 47, 47, 49, 55, 13, 10, 102, 32, 50, 50, 47, 47, 49, 56, 32, 49, 55, 47, 47, 49, 56, 32, 49, 56, 47, 47, 49, 56, 32, 50, 52, 47, 47, 49, 56, 13, 10, 102, 32, 49, 56, 47, 47, 49, 57, 32, 50, 49, 47, 47, 49, 57, 32, 50, 52, 47, 47, 49, 57, 13, 10, 102, 32, 50, 53, 47, 47, 50, 48, 32, 50, 56, 47, 47, 50, 48, 32, 51, 48, 47, 47, 50, 48, 32, 50, 57, 47, 47, 50, 48, 13, 10, 102, 32, 50, 56, 47, 47, 50, 49, 32, 51, 50, 47, 47, 50, 49, 32, 51, 51, 47, 47, 50, 49, 32, 51, 48, 47, 47, 50, 49, 13, 10, 102, 32, 50, 54, 47, 47, 50, 50, 32, 51, 49, 47, 47, 50, 50, 32, 51, 51, 47, 47, 50, 50, 32, 51, 50, 47, 47, 50, 50, 13, 10, 102, 32, 51, 49, 47, 47, 50, 51, 32, 51, 53, 47, 47, 50, 51, 32, 51, 54, 47, 47, 50, 51, 32, 51, 51, 47, 47, 50, 51, 13, 10, 102, 32, 50, 55, 47, 47, 50, 52, 32, 51, 52, 47, 47, 50, 52, 32, 51, 54, 47, 47, 50, 52, 32, 51, 53, 47, 47, 50, 52, 13, 10, 102, 32, 51, 52, 47, 47, 50, 53, 32, 50, 57, 47, 47, 50, 53, 32, 51, 48, 47, 47, 50, 53, 32, 51, 54, 47, 47, 50, 53, 13, 10, 102, 32, 51, 48, 47, 47, 50, 54, 32, 51, 51, 47, 47, 50, 54, 32, 51, 54, 47, 47, 50, 54, 13, 10, 102, 32, 51, 55, 47, 47, 50, 55, 32, 52, 48, 47, 47, 50, 55, 32, 52, 50, 47, 47, 50, 55, 32, 52, 49, 47, 47, 50, 55, 13, 10, 102, 32, 52, 48, 47, 47, 50, 56, 32, 52, 52, 47, 47, 50, 56, 32, 52, 53, 47, 47, 50, 56, 32, 52, 50, 47, 47, 50, 56, 13, 10, 102, 32, 51, 56, 47, 47, 50, 57, 32, 52, 51, 47, 47, 50, 57, 32, 52, 53, 47, 47, 50, 57, 32, 52, 52, 47, 47, 50, 57, 13, 10, 102, 32, 52, 51, 47, 47, 51, 48, 32, 52, 55, 47, 47, 51, 48, 32, 52, 56, 47, 47, 51, 48, 32, 52, 53, 47, 47, 51, 48, 13, 10, 102, 32, 51, 57, 47, 47, 51, 49, 32, 52, 54, 47, 47, 51, 49, 32, 52, 56, 47, 47, 51, 49, 32, 52, 55, 47, 47, 51, 49, 13, 10, 102, 32, 52, 54, 47, 47, 51, 50, 32, 52, 49, 47, 47, 51, 50, 32, 52, 50, 47, 47, 51, 50, 32, 52, 56, 47, 47, 51, 50, 13, 10, 102, 32, 52, 50, 47, 47, 51, 51, 32, 52, 53, 47, 47, 51, 51, 32, 52, 56, 47, 47, 51, 51, 13, 10, 102, 32, 52, 57, 47, 47, 51, 52, 32, 53, 50, 47, 47, 51, 52, 32, 53, 52, 47, 47, 51, 52, 32, 53, 51, 47, 47, 51, 52, 13, 10, 102, 32, 53, 50, 47, 47, 51, 53, 32, 53, 54, 47, 47, 51, 53, 32, 53, 55, 47, 47, 51, 53, 32, 53, 52, 47, 47, 51, 53, 13, 10, 102, 32, 53, 48, 47, 47, 51, 54, 32, 53, 53, 47, 47, 51, 54, 32, 53, 55, 47, 47, 51, 54, 32, 53, 54, 47, 47, 51, 54, 13, 10, 102, 32, 53, 53, 47, 47, 51, 55, 32, 53, 57, 47, 47, 51, 55, 32, 54, 48, 47, 47, 51, 55, 32, 53, 55, 47, 47, 51, 55, 13, 10, 102, 32, 53, 49, 47, 47, 51, 56, 32, 53, 56, 47, 47, 51, 56, 32, 54, 48, 47, 47, 51, 56, 32, 53, 57, 47, 47, 51, 56, 13, 10, 102, 32, 53, 56, 47, 47, 51, 57, 32, 53, 51, 47, 47, 51, 57, 32, 53, 52, 47, 47, 51, 57, 32, 54, 48, 47, 47, 51, 57, 13, 10, 102, 32, 53, 52, 47, 47, 52, 48, 32, 53, 55, 47, 47, 52, 48, 32, 54, 48, 47, 47, 52, 48, 13, 10, 102, 32, 54, 49, 47, 47, 52, 49, 32, 54, 52, 47, 47, 52, 49, 32, 54, 54, 47, 47, 52, 49, 32, 54, 53, 47, 47, 52, 49, 13, 10, 102, 32, 54, 52, 47, 47, 52, 50, 32, 54, 56, 47, 47, 52, 50, 32, 54, 57, 47, 47, 52, 50, 32, 54, 54, 47, 47, 52, 50, 13, 10, 102, 32, 54, 50, 47, 47, 52, 51, 32, 54, 55, 47, 47, 52, 51, 32, 54, 57, 47, 47, 52, 51, 32, 54, 56, 47, 47, 52, 51, 13, 10, 102, 32, 54, 55, 47, 47, 52, 52, 32, 55, 49, 47, 47, 52, 52, 32, 55, 50, 47, 47, 52, 52, 32, 54, 57, 47, 47, 52, 52, 13, 10, 102, 32, 54, 51, 47, 47, 52, 53, 32, 55, 48, 47, 47, 52, 53, 32, 55, 50, 47, 47, 52, 53, 32, 55, 49, 47, 47, 52, 53, 13, 10, 102, 32, 55, 48, 47, 47, 52, 54, 32, 54, 53, 47, 47, 52, 54, 32, 54, 54, 47, 47, 52, 54, 32, 55, 50, 47, 47, 52, 54, 13, 10, 102, 32, 54, 54, 47, 47, 52, 55, 32, 54, 57, 47, 47, 52, 55, 32, 55, 50, 47, 47, 52, 55, 13, 10, 102, 32, 55, 51, 47, 47, 52, 56, 32, 55, 54, 47, 47, 52, 56, 32, 55, 56, 47, 47, 52, 56, 32, 55, 55, 47, 47, 52, 56, 13, 10, 102, 32, 55, 54, 47, 47, 52, 57, 32, 56, 48, 47, 47, 52, 57, 32, 56, 49, 47, 47, 52, 57, 32, 55, 56, 47, 47, 52, 57, 13, 10, 102, 32, 55, 52, 47, 47, 53, 48, 32, 55, 57, 47, 47, 53, 48, 32, 56, 49, 47, 47, 53, 48, 32, 56, 48, 47, 47, 53, 48, 13, 10, 102, 32, 55, 57, 47, 47, 53, 49, 32, 56, 51, 47, 47, 53, 49, 32, 56, 52, 47, 47, 53, 49, 32, 56, 49, 47, 47, 53, 49, 13, 10, 102, 32, 55, 53, 47, 47, 53, 50, 32, 56, 50, 47, 47, 53, 50, 32, 56, 52, 47, 47, 53, 50, 32, 56, 51, 47, 47, 53, 50, 13, 10, 102, 32, 56, 50, 47, 47, 53, 51, 32, 55, 55, 47, 47, 53, 51, 32, 55, 56, 47, 47, 53, 51, 32, 56, 52, 47, 47, 53, 51, 13, 10, 102, 32, 55, 56, 47, 47, 53, 52, 32, 56, 49, 47, 47, 53, 52, 32, 56, 52, 47, 47, 53, 52, 13, 10, 102, 32, 56, 53, 47, 47, 53, 53, 32, 56, 56, 47, 47, 53, 53, 32, 57, 48, 47, 47, 53, 53, 32, 56, 57, 47, 47, 53, 53, 13, 10, 102, 32, 56, 56, 47, 47, 53, 54, 32, 57, 50, 47, 47, 53, 54, 32, 57, 51, 47, 47, 53, 54, 32, 57, 48, 47, 47, 53, 54, 13, 10, 102, 32, 56, 54, 47, 47, 53, 55, 32, 57, 49, 47, 47, 53, 55, 32, 57, 51, 47, 47, 53, 55, 32, 57, 50, 47, 47, 53, 55, 13, 10, 102, 32, 57, 49, 47, 47, 53, 56, 32, 57, 53, 47, 47, 53, 56, 32, 57, 54, 47, 47, 53, 56, 32, 57, 51, 47, 47, 53, 56, 13, 10, 102, 32, 56, 55, 47, 47, 53, 57, 32, 57, 52, 47, 47, 53, 57, 32, 57, 54, 47, 47, 53, 57, 32, 57, 53, 47, 47, 53, 57, 13, 10, 102, 32, 57, 52, 47, 47, 54, 48, 32, 56, 57, 47, 47, 54, 48, 32, 57, 48, 47, 47, 54, 48, 32, 57, 54, 47, 47, 54, 48, 13, 10, 102, 32, 57, 48, 47, 47, 54, 49, 32, 57, 51, 47, 47, 54, 49, 32, 57, 54, 47, 47, 54, 49, 13, 10, 102, 32, 50, 53, 47, 47, 54, 50, 32, 49, 47, 47, 54, 50, 32, 53, 47, 47, 54, 50, 32, 50, 56, 47, 47, 54, 50, 13, 10, 102, 32, 50, 56, 47, 47, 54, 51, 32, 53, 47, 47, 54, 51, 32, 49, 48, 47, 47, 54, 51, 32, 51, 50, 47, 47, 54, 51, 13, 10, 102, 32, 51, 50, 47, 47, 54, 52, 32, 49, 48, 47, 47, 54, 52, 32, 51, 47, 47, 54, 52, 32, 50, 54, 47, 47, 54, 52, 13, 10, 102, 32, 50, 47, 47, 54, 53, 32, 49, 51, 47, 47, 54, 53, 32, 49, 55, 47, 47, 54, 53, 32, 55, 47, 47, 54, 53, 13, 10, 102, 32, 55, 47, 47, 54, 54, 32, 49, 55, 47, 47, 54, 54, 32, 50, 50, 47, 47, 54, 54, 32, 49, 49, 47, 47, 54, 54, 13, 10, 102, 32, 49, 49, 47, 47, 54, 55, 32, 50, 50, 47, 47, 54, 55, 32, 49, 53, 47, 47, 54, 55, 32, 51, 47, 47, 54, 55, 13, 10, 102, 32, 49, 52, 47, 47, 54, 56, 32, 51, 55, 47, 47, 54, 56, 32, 52, 49, 47, 47, 54, 56, 32, 49, 57, 47, 47, 54, 56, 13, 10, 102, 32, 49, 57, 47, 47, 54, 57, 32, 52, 49, 47, 47, 54, 57, 32, 52, 54, 47, 47, 54, 57, 32, 50, 51, 47, 47, 54, 57, 13, 10, 102, 32, 50, 51, 47, 47, 55, 48, 32, 52, 54, 47, 47, 55, 48, 32, 51, 57, 47, 47, 55, 48, 32, 49, 53, 47, 47, 55, 48, 13, 10, 102, 32, 51, 56, 47, 47, 55, 49, 32, 50, 55, 47, 47, 55, 49, 32, 51, 53, 47, 47, 55, 49, 32, 52, 51, 47, 47, 55, 49, 13, 10, 102, 32, 52, 51, 47, 47, 55, 50, 32, 51, 53, 47, 47, 55, 50, 32, 51, 49, 47, 47, 55, 50, 32, 52, 55, 47, 47, 55, 50, 13, 10, 102, 32, 52, 55, 47, 47, 55, 51, 32, 51, 49, 47, 47, 55, 51, 32, 50, 54, 47, 47, 55, 51, 32, 51, 57, 47, 47, 55, 51, 13, 10, 102, 32, 55, 51, 47, 47, 55, 52, 32, 50, 53, 47, 47, 55, 52, 32, 50, 57, 47, 47, 55, 52, 32, 55, 54, 47, 47, 55, 52, 13, 10, 102, 32, 55, 54, 47, 47, 55, 53, 32, 50, 57, 47, 47, 55, 53, 32, 51, 52, 47, 47, 55, 53, 32, 56, 48, 47, 47, 55, 53, 13, 10, 102, 32, 56, 48, 47, 47, 55, 54, 32, 51, 52, 47, 47, 55, 54, 32, 50, 55, 47, 47, 55, 54, 32, 55, 52, 47, 47, 55, 54, 13, 10, 102, 32, 51, 55, 47, 47, 55, 55, 32, 56, 53, 47, 47, 55, 55, 32, 56, 57, 47, 47, 55, 55, 32, 52, 48, 47, 47, 55, 55, 13, 10, 102, 32, 52, 48, 47, 47, 55, 56, 32, 56, 57, 47, 47, 55, 56, 32, 57, 52, 47, 47, 55, 56, 32, 52, 52, 47, 47, 55, 56, 13, 10, 102, 32, 52, 52, 47, 47, 55, 57, 32, 57, 52, 47, 47, 55, 57, 32, 56, 55, 47, 47, 55, 57, 32, 51, 56, 47, 47, 55, 57, 13, 10, 102, 32, 56, 54, 47, 47, 56, 48, 32, 55, 53, 47, 47, 56, 48, 32, 56, 51, 47, 47, 56, 48, 32, 57, 49, 47, 47, 56, 48, 13, 10, 102, 32, 57, 49, 47, 47, 56, 49, 32, 56, 51, 47, 47, 56, 49, 32, 55, 57, 47, 47, 56, 49, 32, 57, 53, 47, 47, 56, 49, 13, 10, 102, 32, 57, 53, 47, 47, 56, 50, 32, 55, 57, 47, 47, 56, 50, 32, 55, 52, 47, 47, 56, 50, 32, 56, 55, 47, 47, 56, 50, 13, 10, 102, 32, 52, 57, 47, 47, 56, 51, 32, 55, 51, 47, 47, 56, 51, 32, 55, 55, 47, 47, 56, 51, 32, 53, 50, 47, 47, 56, 51, 13, 10, 102, 32, 53, 50, 47, 47, 56, 52, 32, 55, 55, 47, 47, 56, 52, 32, 56, 50, 47, 47, 56, 52, 32, 53, 54, 47, 47, 56, 52, 13, 10, 102, 32, 53, 54, 47, 47, 56, 53, 32, 56, 50, 47, 47, 56, 53, 32, 55, 53, 47, 47, 56, 53, 32, 53, 48, 47, 47, 56, 53, 13, 10, 102, 32, 56, 53, 47, 47, 56, 54, 32, 54, 49, 47, 47, 56, 54, 32, 54, 53, 47, 47, 56, 54, 32, 56, 56, 47, 47, 56, 54, 13, 10, 102, 32, 56, 56, 47, 47, 56, 55, 32, 54, 53, 47, 47, 56, 55, 32, 55, 48, 47, 47, 56, 55, 32, 57, 50, 47, 47, 56, 55, 13, 10, 102, 32, 57, 50, 47, 47, 56, 56, 32, 55, 48, 47, 47, 56, 56, 32, 54, 51, 47, 47, 56, 56, 32, 56, 54, 47, 47, 56, 56, 13, 10, 102, 32, 54, 50, 47, 47, 56, 57, 32, 53, 49, 47, 47, 56, 57, 32, 53, 57, 47, 47, 56, 57, 32, 54, 55, 47, 47, 56, 57, 13, 10, 102, 32, 54, 55, 47, 47, 57, 48, 32, 53, 57, 47, 47, 57, 48, 32, 53, 53, 47, 47, 57, 48, 32, 55, 49, 47, 47, 57, 48, 13, 10, 102, 32, 55, 49, 47, 47, 57, 49, 32, 53, 53, 47, 47, 57, 49, 32, 53, 48, 47, 47, 57, 49, 32, 54, 51, 47, 47, 57, 49, 13, 10, 102, 32, 49, 47, 47, 57, 50, 32, 52, 57, 47, 47, 57, 50, 32, 53, 51, 47, 47, 57, 50, 32, 52, 47, 47, 57, 50, 13, 10, 102, 32, 52, 47, 47, 57, 51, 32, 53, 51, 47, 47, 57, 51, 32, 53, 56, 47, 47, 57, 51, 32, 56, 47, 47, 57, 51, 13, 10, 102, 32, 56, 47, 47, 57, 52, 32, 53, 56, 47, 47, 57, 52, 32, 53, 49, 47, 47, 57, 52, 32, 50, 47, 47, 57, 52, 13, 10, 102, 32, 54, 49, 47, 47, 57, 53, 32, 49, 52, 47, 47, 57, 53, 32, 50, 48, 47, 47, 57, 53, 32, 54, 52, 47, 47, 57, 53, 13, 10, 102, 32, 54, 52, 47, 47, 57, 54, 32, 50, 48, 47, 47, 57, 54, 32, 49, 54, 47, 47, 57, 54, 32, 54, 56, 47, 47, 57, 54, 13, 10, 102, 32, 54, 56, 47, 47, 57, 55, 32, 49, 54, 47, 47, 57, 55, 32, 49, 51, 47, 47, 57, 55, 32, 54, 50, 47, 47, 57, 55, 13, 10, 102, 32, 50, 53, 47, 47, 57, 56, 32, 55, 51, 47, 47, 57, 56, 32, 52, 57, 47, 47, 57, 56, 32, 49, 47, 47, 57, 56, 13, 10]);
Module['FS_createDataFile']('/res', 'smallercube.obj', fileData1, true, true, false);
var fileData2 = [];
fileData2.push.apply(fileData2, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 0, 0, 0, 1, 0, 1, 3, 0, 0, 0, 102, 188, 58, 37, 0, 0, 0, 6, 80, 76, 84, 69, 43, 46, 49, 113, 126, 135, 105, 57, 2, 7, 0, 0, 0, 59, 73, 68, 65, 84, 120, 156, 237, 206, 33, 14, 0, 0, 8, 3, 49, 254, 255, 105, 240, 115, 56, 66, 122, 118, 21, 171, 138, 58, 202, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 11, 78, 158, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 19, 24, 138, 105, 240, 226, 159, 215, 204, 142, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/res', 'tile.png', fileData2, true, true, false);
var fileData3 = [];
fileData3.push.apply(fileData3, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 32, 0, 0, 0, 32, 1, 3, 0, 0, 0, 73, 180, 232, 183, 0, 0, 0, 3, 80, 76, 84, 69, 255, 255, 255, 167, 196, 27, 200, 0, 0, 0, 12, 73, 68, 65, 84, 120, 156, 99, 96, 24, 220, 0, 0, 0, 160, 0, 1, 176, 6, 98, 24, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/res', 'white.png', fileData3, true, true, false);
var fileData4 = [];
fileData4.push.apply(fileData4, [35, 115, 104, 97, 100, 101, 114, 32, 118, 101, 114, 116, 101, 120, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 49, 48, 48, 13, 10, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 99, 111, 108, 111, 114, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 117, 118, 59, 13, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 102, 108, 111, 97, 116, 32, 116, 105, 100, 59, 13, 10, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 102, 95, 99, 111, 108, 111, 114, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 32, 102, 95, 117, 118, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 95, 116, 105, 100, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 80, 114, 111, 106, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 80, 114, 111, 106, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 13, 10, 32, 32, 32, 32, 102, 95, 99, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 59, 13, 10, 9, 102, 95, 117, 118, 32, 61, 32, 117, 118, 59, 13, 10, 9, 102, 95, 116, 105, 100, 32, 61, 32, 116, 105, 100, 59, 13, 10, 125, 13, 10, 13, 10, 35, 115, 104, 97, 100, 101, 114, 32, 102, 114, 97, 103, 109, 101, 110, 116, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 49, 48, 48, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 102, 95, 83, 97, 109, 112, 108, 101, 114, 91, 49, 54, 93, 59, 13, 10, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 32, 102, 95, 99, 111, 108, 111, 114, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 32, 102, 95, 117, 118, 59, 13, 10, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 102, 95, 116, 105, 100, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 9, 105, 110, 116, 32, 116, 105, 100, 32, 61, 32, 105, 110, 116, 40, 102, 95, 116, 105, 100, 41, 59, 13, 10, 9, 102, 111, 114, 32, 40, 105, 110, 116, 32, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 49, 54, 59, 32, 105, 43, 43, 41, 32, 123, 13, 10, 9, 9, 105, 102, 32, 40, 116, 105, 100, 32, 61, 61, 32, 105, 41, 13, 10, 9, 9, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 102, 95, 83, 97, 109, 112, 108, 101, 114, 91, 105, 93, 44, 32, 102, 95, 117, 118, 41, 59, 13, 10, 9, 125, 13, 10, 125]);
Module['FS_createDataFile']('/res/shaders', '2D.gles.shader', fileData4, true, true, false);
var fileData5 = [];
fileData5.push.apply(fileData5, [35, 115, 104, 97, 100, 101, 114, 32, 118, 101, 114, 116, 101, 120, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 13, 10, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 48, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 49, 41, 32, 105, 110, 32, 118, 101, 99, 52, 32, 99, 111, 108, 111, 114, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 50, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 117, 118, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 51, 41, 32, 105, 110, 32, 102, 108, 111, 97, 116, 32, 116, 105, 100, 59, 13, 10, 13, 10, 111, 117, 116, 32, 118, 101, 99, 52, 32, 32, 102, 95, 99, 111, 108, 111, 114, 59, 13, 10, 111, 117, 116, 32, 118, 101, 99, 50, 32, 32, 102, 95, 117, 118, 59, 13, 10, 111, 117, 116, 32, 102, 108, 111, 97, 116, 32, 102, 95, 116, 105, 100, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 80, 114, 111, 106, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 80, 114, 111, 106, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 13, 10, 32, 32, 32, 32, 102, 95, 99, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 59, 13, 10, 9, 102, 95, 117, 118, 32, 61, 32, 117, 118, 59, 13, 10, 9, 102, 95, 116, 105, 100, 32, 61, 32, 116, 105, 100, 59, 13, 10, 125, 13, 10, 13, 10, 35, 115, 104, 97, 100, 101, 114, 32, 102, 114, 97, 103, 109, 101, 110, 116, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 102, 95, 83, 97, 109, 112, 108, 101, 114, 91, 49, 54, 93, 59, 13, 10, 13, 10, 111, 117, 116, 32, 118, 101, 99, 52, 32, 102, 114, 97, 103, 67, 111, 108, 111, 114, 59, 13, 10, 13, 10, 105, 110, 32, 118, 101, 99, 52, 32, 32, 102, 95, 99, 111, 108, 111, 114, 59, 13, 10, 105, 110, 32, 118, 101, 99, 50, 32, 32, 102, 95, 117, 118, 59, 13, 10, 105, 110, 32, 102, 108, 111, 97, 116, 32, 102, 95, 116, 105, 100, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 9, 105, 110, 116, 32, 116, 105, 100, 32, 61, 32, 105, 110, 116, 40, 102, 95, 116, 105, 100, 41, 59, 13, 10, 9, 102, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 40, 102, 95, 83, 97, 109, 112, 108, 101, 114, 91, 116, 105, 100, 93, 44, 32, 102, 95, 117, 118, 41, 59, 13, 10, 125]);
Module['FS_createDataFile']('/res/shaders', '2D.shader', fileData5, true, true, false);
var fileData6 = [];
fileData6.push.apply(fileData6, [35, 115, 104, 97, 100, 101, 114, 32, 118, 101, 114, 116, 101, 120, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 48, 48, 32, 101, 115, 13, 10, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 48, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 49, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 50, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 116, 101, 120, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 80, 114, 111, 106, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 80, 114, 111, 106, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 13, 10, 13, 10, 125, 13, 10, 13, 10, 35, 115, 104, 97, 100, 101, 114, 32, 102, 114, 97, 103, 109, 101, 110, 116, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 48, 48, 32, 101, 115, 13, 10, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 104, 105, 103, 104, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 13, 10, 111, 117, 116, 32, 118, 101, 99, 52, 32, 102, 114, 97, 103, 67, 111, 108, 111, 114, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 102, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 49, 46, 48, 41, 59, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/res/shaders', 'Lamp.gles.shader', fileData6, true, true, false);
var fileData7 = [];
fileData7.push.apply(fileData7, [35, 115, 104, 97, 100, 101, 114, 32, 118, 101, 114, 116, 101, 120, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 13, 10, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 48, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 49, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 50, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 116, 101, 120, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 80, 114, 111, 106, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 80, 114, 111, 106, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 13, 10, 13, 10, 125, 13, 10, 13, 10, 35, 115, 104, 97, 100, 101, 114, 32, 102, 114, 97, 103, 109, 101, 110, 116, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 13, 10, 13, 10, 111, 117, 116, 32, 118, 101, 99, 52, 32, 102, 114, 97, 103, 67, 111, 108, 111, 114, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 102, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 49, 46, 48, 41, 59, 13, 10, 125]);
Module['FS_createDataFile']('/res/shaders', 'Lamp.shader', fileData7, true, true, false);
var fileData8 = [];
fileData8.push.apply(fileData8, [35, 115, 104, 97, 100, 101, 114, 32, 118, 101, 114, 116, 101, 120, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 48, 48, 32, 101, 115, 13, 10, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 48, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 49, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 50, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 116, 101, 120, 116, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 111, 117, 116, 32, 118, 101, 99, 51, 32, 102, 95, 78, 111, 114, 109, 97, 108, 59, 13, 10, 111, 117, 116, 32, 118, 101, 99, 51, 32, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 111, 117, 116, 32, 118, 101, 99, 50, 32, 102, 95, 84, 101, 120, 116, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 80, 114, 111, 106, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 77, 111, 100, 101, 108, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 80, 114, 111, 106, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 13, 10, 9, 102, 95, 78, 111, 114, 109, 97, 108, 32, 61, 32, 110, 111, 114, 109, 97, 108, 59, 13, 10, 9, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 118, 101, 99, 51, 40, 117, 95, 77, 111, 100, 101, 108, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 41, 59, 13, 10, 9, 102, 95, 84, 101, 120, 116, 67, 111, 111, 114, 100, 32, 61, 32, 116, 101, 120, 116, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 125, 13, 10, 13, 10, 35, 115, 104, 97, 100, 101, 114, 32, 102, 114, 97, 103, 109, 101, 110, 116, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 48, 48, 32, 101, 115, 13, 10, 13, 10, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 104, 105, 103, 104, 112, 32, 102, 108, 111, 97, 116, 59, 13, 10, 13, 10, 115, 116, 114, 117, 99, 116, 32, 77, 97, 116, 101, 114, 105, 97, 108, 32, 123, 13, 10, 9, 118, 101, 99, 51, 32, 97, 109, 98, 105, 101, 110, 116, 59, 13, 10, 9, 118, 101, 99, 51, 32, 100, 105, 102, 102, 117, 115, 101, 59, 13, 10, 9, 118, 101, 99, 51, 32, 115, 112, 101, 99, 117, 108, 97, 114, 59, 13, 10, 9, 102, 108, 111, 97, 116, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 59, 13, 10, 125, 59, 13, 10, 13, 10, 115, 116, 114, 117, 99, 116, 32, 76, 105, 103, 104, 116, 32, 123, 13, 10, 9, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 13, 10, 9, 118, 101, 99, 51, 32, 97, 109, 98, 105, 101, 110, 116, 59, 13, 10, 9, 118, 101, 99, 51, 32, 100, 105, 102, 102, 117, 115, 101, 59, 13, 10, 9, 118, 101, 99, 51, 32, 115, 112, 101, 99, 117, 108, 97, 114, 59, 13, 10, 125, 59, 13, 10, 13, 10, 105, 110, 32, 118, 101, 99, 51, 32, 102, 95, 78, 111, 114, 109, 97, 108, 59, 13, 10, 105, 110, 32, 118, 101, 99, 51, 32, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 105, 110, 32, 118, 101, 99, 50, 32, 102, 95, 84, 101, 120, 116, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 111, 117, 116, 32, 118, 101, 99, 52, 32, 102, 114, 97, 103, 67, 111, 108, 111, 114, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 117, 95, 67, 97, 109, 101, 114, 97, 80, 111, 115, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 76, 105, 103, 104, 116, 32, 117, 95, 76, 105, 103, 104, 116, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 77, 97, 116, 101, 114, 105, 97, 108, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 117, 95, 83, 108, 111, 116, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 118, 101, 99, 51, 32, 97, 109, 98, 105, 101, 110, 116, 32, 61, 32, 117, 95, 76, 105, 103, 104, 116, 46, 97, 109, 98, 105, 101, 110, 116, 32, 42, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 46, 97, 109, 98, 105, 101, 110, 116, 59, 13, 10, 9, 47, 47, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 97, 109, 98, 105, 101, 110, 116, 13, 10, 13, 10, 9, 118, 101, 99, 51, 32, 117, 110, 105, 116, 78, 111, 114, 109, 97, 108, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 102, 95, 78, 111, 114, 109, 97, 108, 41, 59, 13, 10, 9, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 68, 105, 114, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 117, 95, 76, 105, 103, 104, 116, 46, 112, 111, 115, 105, 116, 105, 111, 110, 32, 45, 32, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 41, 59, 13, 10, 13, 10, 9, 102, 108, 111, 97, 116, 32, 100, 105, 102, 102, 32, 61, 32, 109, 97, 120, 40, 100, 111, 116, 40, 117, 110, 105, 116, 78, 111, 114, 109, 97, 108, 44, 32, 108, 105, 103, 104, 116, 68, 105, 114, 41, 44, 32, 48, 46, 48, 41, 59, 13, 10, 9, 118, 101, 99, 51, 32, 100, 105, 102, 102, 117, 115, 101, 32, 61, 32, 117, 95, 76, 105, 103, 104, 116, 46, 100, 105, 102, 102, 117, 115, 101, 32, 42, 32, 40, 100, 105, 102, 102, 32, 42, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 46, 100, 105, 102, 102, 117, 115, 101, 41, 59, 13, 10, 9, 47, 47, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 100, 105, 102, 102, 117, 115, 101, 13, 10, 13, 10, 9, 118, 101, 99, 51, 32, 118, 105, 101, 119, 68, 105, 114, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 117, 95, 67, 97, 109, 101, 114, 97, 80, 111, 115, 32, 45, 32, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 41, 59, 13, 10, 9, 118, 101, 99, 51, 32, 114, 101, 102, 108, 101, 99, 116, 68, 105, 114, 32, 61, 32, 114, 101, 102, 108, 101, 99, 116, 40, 45, 108, 105, 103, 104, 116, 68, 105, 114, 44, 32, 117, 110, 105, 116, 78, 111, 114, 109, 97, 108, 41, 59, 13, 10, 13, 10, 9, 102, 108, 111, 97, 116, 32, 115, 112, 101, 99, 32, 61, 32, 112, 111, 119, 40, 109, 97, 120, 40, 100, 111, 116, 40, 118, 105, 101, 119, 68, 105, 114, 44, 32, 114, 101, 102, 108, 101, 99, 116, 68, 105, 114, 41, 44, 32, 48, 46, 48, 41, 44, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 46, 115, 104, 105, 110, 105, 110, 101, 115, 115, 41, 59, 13, 10, 9, 118, 101, 99, 51, 32, 115, 112, 101, 99, 117, 108, 97, 114, 32, 61, 32, 117, 95, 76, 105, 103, 104, 116, 46, 115, 112, 101, 99, 117, 108, 97, 114, 32, 42, 32, 40, 115, 112, 101, 99, 32, 42, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 46, 115, 112, 101, 99, 117, 108, 97, 114, 41, 59, 13, 10, 9, 47, 47, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 115, 112, 101, 99, 117, 108, 97, 114, 13, 10, 13, 10, 9, 102, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 97, 109, 98, 105, 101, 110, 116, 32, 43, 32, 100, 105, 102, 102, 117, 115, 101, 32, 43, 32, 115, 112, 101, 99, 117, 108, 97, 114, 44, 32, 49, 46, 48, 41, 32, 42, 32, 116, 101, 120, 116, 117, 114, 101, 40, 117, 95, 83, 108, 111, 116, 44, 32, 102, 95, 84, 101, 120, 116, 67, 111, 111, 114, 100, 41, 59, 32, 47, 47, 32, 111, 110, 108, 121, 32, 116, 101, 120, 116, 117, 114, 101, 115, 32, 97, 108, 108, 111, 119, 101, 100, 13, 10, 125, 13, 10]);
Module['FS_createDataFile']('/res/shaders', 'Simple.gles.shader', fileData8, true, true, false);
var fileData9 = [];
fileData9.push.apply(fileData9, [35, 115, 104, 97, 100, 101, 114, 32, 118, 101, 114, 116, 101, 120, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 13, 10, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 48, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 49, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 59, 13, 10, 108, 97, 121, 111, 117, 116, 40, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 50, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 116, 101, 120, 116, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 111, 117, 116, 32, 118, 101, 99, 51, 32, 102, 95, 78, 111, 114, 109, 97, 108, 59, 13, 10, 111, 117, 116, 32, 118, 101, 99, 51, 32, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 111, 117, 116, 32, 118, 101, 99, 50, 32, 102, 95, 84, 101, 120, 116, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 80, 114, 111, 106, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 77, 111, 100, 101, 108, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 80, 114, 111, 106, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 59, 13, 10, 9, 102, 95, 78, 111, 114, 109, 97, 108, 32, 61, 32, 110, 111, 114, 109, 97, 108, 59, 13, 10, 9, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 118, 101, 99, 51, 40, 117, 95, 77, 111, 100, 101, 108, 32, 42, 32, 118, 101, 99, 52, 40, 112, 111, 115, 105, 116, 105, 111, 110, 44, 32, 49, 46, 48, 41, 41, 59, 13, 10, 9, 102, 95, 84, 101, 120, 116, 67, 111, 111, 114, 100, 32, 61, 32, 116, 101, 120, 116, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 125, 13, 10, 13, 10, 35, 115, 104, 97, 100, 101, 114, 32, 102, 114, 97, 103, 109, 101, 110, 116, 13, 10, 35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 13, 10, 13, 10, 115, 116, 114, 117, 99, 116, 32, 77, 97, 116, 101, 114, 105, 97, 108, 32, 123, 13, 10, 9, 118, 101, 99, 51, 32, 97, 109, 98, 105, 101, 110, 116, 59, 13, 10, 9, 118, 101, 99, 51, 32, 100, 105, 102, 102, 117, 115, 101, 59, 13, 10, 9, 118, 101, 99, 51, 32, 115, 112, 101, 99, 117, 108, 97, 114, 59, 13, 10, 9, 102, 108, 111, 97, 116, 32, 115, 104, 105, 110, 105, 110, 101, 115, 115, 59, 13, 10, 125, 59, 13, 10, 13, 10, 115, 116, 114, 117, 99, 116, 32, 76, 105, 103, 104, 116, 32, 123, 13, 10, 9, 118, 101, 99, 51, 32, 112, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 9, 118, 101, 99, 51, 32, 97, 109, 98, 105, 101, 110, 116, 59, 13, 10, 9, 118, 101, 99, 51, 32, 100, 105, 102, 102, 117, 115, 101, 59, 13, 10, 9, 118, 101, 99, 51, 32, 115, 112, 101, 99, 117, 108, 97, 114, 59, 13, 10, 125, 59, 13, 10, 13, 10, 105, 110, 32, 118, 101, 99, 51, 32, 102, 95, 78, 111, 114, 109, 97, 108, 59, 13, 10, 105, 110, 32, 118, 101, 99, 51, 32, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 13, 10, 105, 110, 32, 118, 101, 99, 50, 32, 102, 95, 84, 101, 120, 116, 67, 111, 111, 114, 100, 59, 13, 10, 13, 10, 111, 117, 116, 32, 118, 101, 99, 52, 32, 102, 114, 97, 103, 67, 111, 108, 111, 114, 59, 13, 10, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 117, 95, 67, 97, 109, 101, 114, 97, 80, 111, 115, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 76, 105, 103, 104, 116, 32, 117, 95, 76, 105, 103, 104, 116, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 77, 97, 116, 101, 114, 105, 97, 108, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 59, 13, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 117, 95, 83, 108, 111, 116, 59, 13, 10, 13, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 123, 13, 10, 13, 10, 9, 47, 47, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 97, 109, 98, 105, 101, 110, 116, 13, 10, 9, 118, 101, 99, 51, 32, 97, 109, 98, 105, 101, 110, 116, 32, 61, 32, 117, 95, 76, 105, 103, 104, 116, 46, 97, 109, 98, 105, 101, 110, 116, 32, 42, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 46, 97, 109, 98, 105, 101, 110, 116, 59, 13, 10, 13, 10, 9, 118, 101, 99, 51, 32, 117, 110, 105, 116, 78, 111, 114, 109, 97, 108, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 102, 95, 78, 111, 114, 109, 97, 108, 41, 59, 13, 10, 9, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 68, 105, 114, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 117, 95, 76, 105, 103, 104, 116, 46, 112, 111, 115, 105, 116, 105, 111, 110, 32, 45, 32, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 41, 59, 13, 10, 13, 10, 9, 47, 47, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 100, 105, 102, 102, 117, 115, 101, 13, 10, 9, 102, 108, 111, 97, 116, 32, 100, 105, 102, 102, 32, 61, 32, 109, 97, 120, 40, 100, 111, 116, 40, 117, 110, 105, 116, 78, 111, 114, 109, 97, 108, 44, 32, 108, 105, 103, 104, 116, 68, 105, 114, 41, 44, 32, 48, 46, 48, 41, 59, 13, 10, 9, 118, 101, 99, 51, 32, 100, 105, 102, 102, 117, 115, 101, 32, 61, 32, 117, 95, 76, 105, 103, 104, 116, 46, 100, 105, 102, 102, 117, 115, 101, 32, 42, 32, 40, 100, 105, 102, 102, 32, 42, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 46, 100, 105, 102, 102, 117, 115, 101, 41, 59, 13, 10, 13, 10, 9, 118, 101, 99, 51, 32, 118, 105, 101, 119, 68, 105, 114, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 117, 95, 67, 97, 109, 101, 114, 97, 80, 111, 115, 32, 45, 32, 102, 95, 80, 111, 115, 105, 116, 105, 111, 110, 41, 59, 13, 10, 9, 118, 101, 99, 51, 32, 114, 101, 102, 108, 101, 99, 116, 68, 105, 114, 32, 61, 32, 114, 101, 102, 108, 101, 99, 116, 40, 45, 108, 105, 103, 104, 116, 68, 105, 114, 44, 32, 117, 110, 105, 116, 78, 111, 114, 109, 97, 108, 41, 59, 13, 10, 13, 10, 9, 47, 47, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 115, 112, 101, 99, 117, 108, 97, 114, 13, 10, 9, 102, 108, 111, 97, 116, 32, 115, 112, 101, 99, 32, 61, 32, 112, 111, 119, 40, 109, 97, 120, 40, 100, 111, 116, 40, 118, 105, 101, 119, 68, 105, 114, 44, 32, 114, 101, 102, 108, 101, 99, 116, 68, 105, 114, 41, 44, 32, 48, 46, 48, 41, 44, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 46, 115, 104, 105, 110, 105, 110, 101, 115, 115, 41, 59, 13, 10, 9, 118, 101, 99, 51, 32, 115, 112, 101, 99, 117, 108, 97, 114, 32, 61, 32, 117, 95, 76, 105, 103, 104, 116, 46, 115, 112, 101, 99, 117, 108, 97, 114, 32, 42, 32, 40, 115, 112, 101, 99, 32, 42, 32, 117, 95, 77, 97, 116, 101, 114, 105, 97, 108, 46, 115, 112, 101, 99, 117, 108, 97, 114, 41, 59, 13, 10, 13, 10, 9, 102, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 97, 109, 98, 105, 101, 110, 116, 32, 43, 32, 100, 105, 102, 102, 117, 115, 101, 32, 43, 32, 115, 112, 101, 99, 117, 108, 97, 114, 44, 32, 49, 46, 48, 41, 32, 42, 32, 116, 101, 120, 116, 117, 114, 101, 40, 117, 95, 83, 108, 111, 116, 44, 32, 102, 95, 84, 101, 120, 116, 67, 111, 111, 114, 100, 41, 59, 32, 47, 47, 32, 65, 32, 116, 101, 120, 116, 117, 114, 101, 32, 105, 115, 32, 110, 101, 101, 100, 101, 100, 13, 10, 125]);
Module['FS_createDataFile']('/res/shaders', 'Simple.shader', fileData9, true, true, false);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end <= _emscripten_get_heap_size()) {
    HEAP32[DYNAMICTOP_PTR>>2] = end;
  } else {
    return 0;
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is currently only used for LLVM backend under certain
// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.
function addFunction(func, sig) {

  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html




/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 33424,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5276304,
    DYNAMIC_BASE = 5276304,
    DYNAMICTOP_PTR = 33168;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 33416;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 33408
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        err('exception during cxa_free_exception: ' + e);
      }
    }var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_deleted_virtual() {
  err('missing function: __cxa_deleted_virtual'); abort(-1);
  }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  
  
   
  
   
  
  
  var _Math_clz32=undefined;   

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(1);
      return -1;
    }

  
  
  var _Math_imul=undefined;  

   

  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var _stdin=33184;
  
  var _stdout=33200;
  
  var _stderr=33216;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
              var crypto_module = require('crypto');
              // nodejs has crypto support
              random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
              // nodejs doesn't have crypto support so fallback to Math.random
              random_device = function() { return (Math.random()*256)|0; };
          }
        } else
        {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see emscripten-core/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return (0
        || ENVIRONMENT_IS_NODE
        || (typeof dateNow !== 'undefined')
        || ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now'])
        );
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(22);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function () {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      }};
  
  function __setLetterbox(element, topBottom, leftRight) {
      if (JSEvents.isInternetExplorer()) {
        // Cannot use padding on IE11, because IE11 computes padding in addition to the size, unlike
        // other browsers, which treat padding to be part of the size.
        // e.g.
        // FF, Chrome: If CSS size = 1920x1080, padding-leftright = 460, padding-topbottomx40, then content size = (1920 - 2*460) x (1080-2*40) = 1000x1000px, and total element size = 1920x1080px.
        //       IE11: If CSS size = 1920x1080, padding-leftright = 460, padding-topbottomx40, then content size = 1920x1080px and total element size = (1920+2*460) x (1080+2*40)px.
        // IE11  treats margin like Chrome and FF treat padding.
        element.style.marginLeft = element.style.marginRight = leftRight + 'px';
        element.style.marginTop = element.style.marginBottom = topBottom + 'px';
      } else {
        // Cannot use margin to specify letterboxes in FF or Chrome, since those ignore margins in fullscreen mode.
        element.style.paddingLeft = element.style.paddingRight = leftRight + 'px';
        element.style.paddingTop = element.style.paddingBottom = topBottom + 'px';
      }
    }
  
  function __hideEverythingExceptGivenElement(onlyVisibleElement) {
      var child = onlyVisibleElement;
      var parent = child.parentNode;
      var hiddenElements = [];
      while (child != document.body) {
        var children = parent.children;
        for (var i = 0; i < children.length; ++i) {
          if (children[i] != child) {
            hiddenElements.push({ node: children[i], displayState: children[i].style.display });
            children[i].style.display = 'none';
          }
        }
        child = parent;
        parent = parent.parentNode;
      }
      return hiddenElements;
    }
  
  var __restoreOldWindowedStyle=null;
  
  
  
  
  
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      warnOnce('Rules for selecting event targets in HTML5 API are changing: instead of using document.getElementById() that only can refer to elements by their DOM ID, new event target selection mechanism uses the more flexible function document.querySelector() that can look up element names, classes, and complex CSS selectors. Build with -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1 to change to the new lookup rules. See https://github.com/emscripten-core/emscripten/pull/7977 for more details.');
      try {
        // The sensible "default" target varies between events, but use window as the default
        // since DOM events mostly can default to that. Specific callback registrations
        // override their own defaults.
        if (!target) return window;
        if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
        if (target === '#window') return window;
        else if (target === '#document') return document;
        else if (target === '#screen') return screen;
        else if (target === '#canvas') return Module['canvas'];
        return (typeof target === 'string') ? document.getElementById(target) : target;
      } catch(e) {
        // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
        // return null for them.
        return null;
      }
    }function __findCanvasEventTarget(target) {
      if (typeof target === 'number') target = UTF8ToString(target);
      if (!target || target === '#canvas') {
        if (typeof GL !== 'undefined' && GL.offscreenCanvases['canvas']) return GL.offscreenCanvases['canvas']; // TODO: Remove this line, target '#canvas' should refer only to Module['canvas'], not to GL.offscreenCanvases['canvas'] - but need stricter tests to be able to remove this line.
        return Module['canvas'];
      }
      if (typeof GL !== 'undefined' && GL.offscreenCanvases[target]) return GL.offscreenCanvases[target];
      return __findEventTarget(target);
    }function _emscripten_get_canvas_element_size(target, width, height) {
      var canvas = __findCanvasEventTarget(target);
      if (!canvas) return -4;
      HEAP32[((width)>>2)]=canvas.width;
      HEAP32[((height)>>2)]=canvas.height;
    }function __get_canvas_element_size(target) {
      var stackTop = stackSave();
      var w = stackAlloc(8);
      var h = w + 4;
  
      var targetInt = stackAlloc(target.id.length+1);
      stringToUTF8(target.id, targetInt, target.id.length+1);
      var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
      var size = [HEAP32[((w)>>2)], HEAP32[((h)>>2)]];
      stackRestore(stackTop);
      return size;
    }
  
  
  function _emscripten_set_canvas_element_size(target, width, height) {
      var canvas = __findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    }function __set_canvas_element_size(target, width, height) {
      if (!target.controlTransferredOffscreen) {
        target.width = width;
        target.height = height;
      } else {
        // This function is being called from high-level JavaScript code instead of asm.js/Wasm,
        // and it needs to synchronously proxy over to another thread, so marshal the string onto the heap to do the call.
        var stackTop = stackSave();
        var targetInt = stackAlloc(target.id.length+1);
        stringToUTF8(target.id, targetInt, target.id.length+1);
        _emscripten_set_canvas_element_size(targetInt, width, height);
        stackRestore(stackTop);
      }
    }function __registerRestoreOldStyle(canvas) {
      var canvasSize = __get_canvas_element_size(canvas);
      var oldWidth = canvasSize[0];
      var oldHeight = canvasSize[1];
      var oldCssWidth = canvas.style.width;
      var oldCssHeight = canvas.style.height;
      var oldBackgroundColor = canvas.style.backgroundColor; // Chrome reads color from here.
      var oldDocumentBackgroundColor = document.body.style.backgroundColor; // IE11 reads color from here.
      // Firefox always has black background color.
      var oldPaddingLeft = canvas.style.paddingLeft; // Chrome, FF, Safari
      var oldPaddingRight = canvas.style.paddingRight;
      var oldPaddingTop = canvas.style.paddingTop;
      var oldPaddingBottom = canvas.style.paddingBottom;
      var oldMarginLeft = canvas.style.marginLeft; // IE11
      var oldMarginRight = canvas.style.marginRight;
      var oldMarginTop = canvas.style.marginTop;
      var oldMarginBottom = canvas.style.marginBottom;
      var oldDocumentBodyMargin = document.body.style.margin;
      var oldDocumentOverflow = document.documentElement.style.overflow; // Chrome, Firefox
      var oldDocumentScroll = document.body.scroll; // IE
      var oldImageRendering = canvas.style.imageRendering;
  
      function restoreOldStyle() {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        if (!fullscreenElement) {
          document.removeEventListener('fullscreenchange', restoreOldStyle);
          document.removeEventListener('mozfullscreenchange', restoreOldStyle);
          document.removeEventListener('webkitfullscreenchange', restoreOldStyle);
          document.removeEventListener('MSFullscreenChange', restoreOldStyle);
  
          __set_canvas_element_size(canvas, oldWidth, oldHeight);
  
          canvas.style.width = oldCssWidth;
          canvas.style.height = oldCssHeight;
          canvas.style.backgroundColor = oldBackgroundColor; // Chrome
          // IE11 hack: assigning 'undefined' or an empty string to document.body.style.backgroundColor has no effect, so first assign back the default color
          // before setting the undefined value. Setting undefined value is also important, or otherwise we would later treat that as something that the user
          // had explicitly set so subsequent fullscreen transitions would not set background color properly.
          if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = 'white';
          document.body.style.backgroundColor = oldDocumentBackgroundColor; // IE11
          canvas.style.paddingLeft = oldPaddingLeft; // Chrome, FF, Safari
          canvas.style.paddingRight = oldPaddingRight;
          canvas.style.paddingTop = oldPaddingTop;
          canvas.style.paddingBottom = oldPaddingBottom;
          canvas.style.marginLeft = oldMarginLeft; // IE11
          canvas.style.marginRight = oldMarginRight;
          canvas.style.marginTop = oldMarginTop;
          canvas.style.marginBottom = oldMarginBottom;
          document.body.style.margin = oldDocumentBodyMargin;
          document.documentElement.style.overflow = oldDocumentOverflow; // Chrome, Firefox
          document.body.scroll = oldDocumentScroll; // IE
          canvas.style.imageRendering = oldImageRendering;
          if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
  
          if (__currentFullscreenStrategy.canvasResizedCallback) {
            dynCall_iiii(__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
          }
        }
      }
      document.addEventListener('fullscreenchange', restoreOldStyle);
      document.addEventListener('mozfullscreenchange', restoreOldStyle);
      document.addEventListener('webkitfullscreenchange', restoreOldStyle);
      document.addEventListener('MSFullscreenChange', restoreOldStyle);
      return restoreOldStyle;
    }
  
  function __restoreHiddenElements(hiddenElements) {
      for (var i = 0; i < hiddenElements.length; ++i) {
        hiddenElements[i].node.style.display = hiddenElements[i].displayState;
      }
    }
  
  var __currentFullscreenStrategy={};
  
  function __softFullscreenResizeWebGLRenderTarget() {
      var inHiDPIFullscreenMode = __currentFullscreenStrategy.canvasResolutionScaleMode == 2;
      var inAspectRatioFixedFullscreenMode = __currentFullscreenStrategy.scaleMode == 2;
      var inPixelPerfectFullscreenMode = __currentFullscreenStrategy.canvasResolutionScaleMode != 0;
      var inCenteredWithoutScalingFullscreenMode = __currentFullscreenStrategy.scaleMode == 3;
      var screenWidth = inHiDPIFullscreenMode ? Math.round(window.innerWidth*window.devicePixelRatio) : window.innerWidth;
      var screenHeight = inHiDPIFullscreenMode ? Math.round(window.innerHeight*window.devicePixelRatio) : window.innerHeight;
      var w = screenWidth;
      var h = screenHeight;
      var canvas = __currentFullscreenStrategy.target;
      var canvasSize = __get_canvas_element_size(canvas);
      var x = canvasSize[0];
      var y = canvasSize[1];
      var topMargin;
  
      if (inAspectRatioFixedFullscreenMode) {
        if (w*y < x*h) h = (w * y / x) | 0;
        else if (w*y > x*h) w = (h * x / y) | 0;
        topMargin = ((screenHeight - h) / 2) | 0;
      }
  
      if (inPixelPerfectFullscreenMode) {
        __set_canvas_element_size(canvas, w, h);
        if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, w, h);
      }
  
      // Back to CSS pixels.
      if (inHiDPIFullscreenMode) {
        topMargin /= window.devicePixelRatio;
        w /= window.devicePixelRatio;
        h /= window.devicePixelRatio;
        // Round to nearest 4 digits of precision.
        w = Math.round(w*1e4)/1e4;
        h = Math.round(h*1e4)/1e4;
        topMargin = Math.round(topMargin*1e4)/1e4;
      }
  
      if (inCenteredWithoutScalingFullscreenMode) {
        var t = (window.innerHeight - parseInt(canvas.style.height)) / 2;
        var b = (window.innerWidth - parseInt(canvas.style.width)) / 2;
        __setLetterbox(canvas, t, b);
      } else {
        canvas.style.width = w + 'px';
        canvas.style.height = h + 'px';
        var b = (window.innerWidth - w) / 2;
        __setLetterbox(canvas, topMargin, b);
      }
  
      if (!inCenteredWithoutScalingFullscreenMode && __currentFullscreenStrategy.canvasResizedCallback) {
        dynCall_iiii(__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
      }
    }
  
  function _JSEvents_resizeCanvasForFullscreen(target, strategy) {
      var restoreOldStyle = __registerRestoreOldStyle(target);
      var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
      var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
      var rect = target.getBoundingClientRect();
      var windowedCssWidth = rect.right - rect.left;
      var windowedCssHeight = rect.bottom - rect.top;
      var canvasSize = __get_canvas_element_size(target);
      var windowedRttWidth = canvasSize[0];
      var windowedRttHeight = canvasSize[1];
  
      if (strategy.scaleMode == 3) {
        __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
        cssWidth = windowedCssWidth;
        cssHeight = windowedCssHeight;
      } else if (strategy.scaleMode == 2) {
        if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
          var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
          __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
          cssHeight = desiredCssHeight;
        } else {
          var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
          __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
          cssWidth = desiredCssWidth;
        }
      }
  
      // If we are adding padding, must choose a background color or otherwise Chrome will give the
      // padding a default white color. Do it only if user has not customized their own background color.
      if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
      // IE11 does the same, but requires the color to be set in the document body.
      if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
      // Firefox always shows black letterboxes independent of style color.
  
      target.style.width = cssWidth + 'px';
      target.style.height = cssHeight + 'px';
  
      if (strategy.filteringMode == 1) {
        target.style.imageRendering = 'optimizeSpeed';
        target.style.imageRendering = '-moz-crisp-edges';
        target.style.imageRendering = '-o-crisp-edges';
        target.style.imageRendering = '-webkit-optimize-contrast';
        target.style.imageRendering = 'optimize-contrast';
        target.style.imageRendering = 'crisp-edges';
        target.style.imageRendering = 'pixelated';
      }
  
      var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
      if (strategy.canvasResolutionScaleMode != 0) {
        var newWidth = (cssWidth * dpiScale)|0;
        var newHeight = (cssHeight * dpiScale)|0;
        __set_canvas_element_size(target, newWidth, newHeight);
        if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
      }
      return restoreOldStyle;
    }function _emscripten_enter_soft_fullscreen(target, fullscreenStrategy) {
      if (!target) target = '#canvas';
      target = __findEventTarget(target);
      if (!target) return -4;
  
      var strategy = {};
      strategy.scaleMode = HEAP32[((fullscreenStrategy)>>2)];
      strategy.canvasResolutionScaleMode = HEAP32[(((fullscreenStrategy)+(4))>>2)];
      strategy.filteringMode = HEAP32[(((fullscreenStrategy)+(8))>>2)];
      strategy.canvasResizedCallback = HEAP32[(((fullscreenStrategy)+(12))>>2)];
      strategy.canvasResizedCallbackUserData = HEAP32[(((fullscreenStrategy)+(16))>>2)];
      strategy.target = target;
      strategy.softFullscreen = true;
  
      var restoreOldStyle = _JSEvents_resizeCanvasForFullscreen(target, strategy);
  
      document.documentElement.style.overflow = 'hidden';  // Firefox, Chrome
      document.body.scroll = "no"; // IE11
      document.body.style.margin = '0px'; // Override default document margin area on all browsers.
  
      var hiddenElements = __hideEverythingExceptGivenElement(target);
  
      function restoreWindowedState() {
        restoreOldStyle();
        __restoreHiddenElements(hiddenElements);
        window.removeEventListener('resize', __softFullscreenResizeWebGLRenderTarget);
        if (strategy.canvasResizedCallback) {
          dynCall_iiii(strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
        __currentFullscreenStrategy = 0;
      }
      __restoreOldWindowedStyle = restoreWindowedState;
      __currentFullscreenStrategy = strategy;
      window.addEventListener('resize', __softFullscreenResizeWebGLRenderTarget);
  
      // Inform the caller that the canvas size has changed.
      if (strategy.canvasResizedCallback) {
        dynCall_iiii(strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    }

  function _emscripten_exit_soft_fullscreen() {
      if (__restoreOldWindowedStyle) __restoreOldWindowedStyle();
      __restoreOldWindowedStyle = null;
  
      return 0;
    }

  function _emscripten_get_heap_size() {
      return TOTAL_MEMORY;
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  
  
  function __fillFullscreenChangeEventData(eventStruct, e) {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      HEAP32[((eventStruct)>>2)]=isFullscreen;
      HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
      stringToUTF8(nodeName, eventStruct + 8, 128);
      stringToUTF8(id, eventStruct + 136, 128);
      HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
      HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    }function __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc( 280 );
  
      var fullscreenChangeEventhandlerFunc = function(event) {
        var e = event || window.event;
  
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        __fillFullscreenChangeEventData(fullscreenChangeEvent, e);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      target = target ? __findEventTarget(target) : __specialEventTargets[1];
      if (!target) return -4;
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange", targetThread);
      return 0;
    }

  
  
  
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: (typeof WebGL2RenderingContext !== 'undefined') ? 2 : 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch(event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }function _emscripten_set_main_loop_arg(func, arg, fps, simulateInfiniteLoop) {
      _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg);
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],queries:[],samplers:[],transformFeedbacks:[],syncs:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},stringiCache:{},unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,numTempVertexBuffersPerSize:64,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for (var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads, context) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for (var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for (var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(context.GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, context.GLctx.STATIC_DRAW);
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for (var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },calcBufLength:function calcBufLength(size, type, stride, count) {
        if (stride > 0) {
          return count * stride;  // XXXvlad this is not exactly correct I don't think
        }
        var typeSize = GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        return size * typeSize * count;
      },usedTempBuffers:[],preDrawHandleClientVertexAttribBindings:function preDrawHandleClientVertexAttribBindings(count) {
        GL.resetBufferBinding = false;
  
        // TODO: initial pass to detect ranges we need to upload, might not need an upload per attrib
        for (var i = 0; i < GL.currentContext.maxVertexAttribs; ++i) {
          var cb = GL.currentContext.clientBuffers[i];
          if (!cb.clientside || !cb.enabled) continue;
  
          GL.resetBufferBinding = true;
  
          var size = GL.calcBufLength(cb.size, cb.type, cb.stride, count);
          var buf = GL.getTempVertexBuffer(size);
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, buf);
          GLctx.bufferSubData(GLctx.ARRAY_BUFFER,
                                   0,
                                   HEAPU8.subarray(cb.ptr, cb.ptr + size));
          cb.vertexAttribPointerAdaptor.call(GLctx, i, cb.size, cb.type, cb.normalized, cb.stride, 0);
        }
      },postDrawHandleClientVertexAttribBindings:function postDrawHandleClientVertexAttribBindings() {
        if (GL.resetBufferBinding) {
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, GL.buffers[GL.currArrayBuffer]);
        }
      },createContext:function (canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (webGLContextAttributes.majorVersion > 1) ? canvas.getContext("webgl2", webGLContextAttributes) :
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
        return ctx && GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
        // BUG: Workaround Chrome WebGL 2 issue: the first shipped versions of WebGL 2 in Chrome did not actually implement the new WebGL 2 functions.
        //      Those are supported only in Chrome 58 and newer.
        function getChromeVersion() {
          var raw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
          return raw ? parseInt(raw[2], 10) : false;
        }
        context.supportsWebGL2EntryPoints = (context.version >= 2) && (getChromeVersion() === false || getChromeVersion() >= 58);
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        context.maxVertexAttribs = context.GLctx.getParameter(context.GLctx.MAX_VERTEX_ATTRIBS);
        context.clientBuffers = [];
        for (var i = 0; i < context.maxVertexAttribs; i++) {
          context.clientBuffers[i] = { enabled: false, clientside: false, size: 0, type: 0, normalized: 0, stride: 0, ptr: 0, vertexAttribPointerAdaptor: null };
        }
  
        GL.generateTempBuffers(false, context);
  
  
  
        return handle;
      },makeContextCurrent:function (contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBufferData(target, size, data, usage) {
      if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (data) {
          GLctx.bufferData(target, HEAPU8, usage, data, size);
        } else {
          GLctx.bufferData(target, size, usage);
        }
      } else {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
      }
    }

  function _glBufferSubData(target, offset, size, data) {
      if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.bufferSubData(target, offset, HEAPU8, data, size);
        return;
      }
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
        if (id == GLctx.currentPixelPackBufferBinding) GLctx.currentPixelPackBufferBinding = 0;
        if (id == GLctx.currentPixelUnpackBufferBinding) GLctx.currentPixelUnpackBufferBinding = 0;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDrawElements(mode, count, type, indices) {
      var buf;
      if (!GL.currElementArrayBuffer) {
        var size = GL.calcBufLength(1, type, 0, count);
        buf = GL.getTempIndexBuffer(size);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, buf);
        GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER,
                                 0,
                                 HEAPU8.subarray(indices, indices + size));
        // the index is now 0
        indices = 0;
      }
  
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(count);
  
      GLctx.drawElements(mode, count, type, indices);
  
      GL.postDrawHandleClientVertexAttribBindings(count);
  
      if (!GL.currElementArrayBuffer) {
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
      }
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6403:1,6406:1,6407:3,6408:4,6409:1,6410:2,33319:2,33320:2,35904:3,35906:4,36244:1,36248:3,36249:4};
  
  var __sizeOfGlTextureElementType={5120:1,5121:1,5122:2,5123:2,5124:4,5125:4,5126:4,5131:2,32819:2,32820:2,33635:2,33640:4,34042:4,35899:4,35902:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      var end = pixels + bytes;
      switch(type) {
        case 0x1400 /* GL_BYTE */:
          return HEAP8.subarray(pixels, end);
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray(pixels, end);
        case 0x1402 /* GL_SHORT */:
          return HEAP16.subarray(pixels>>1, end>>1);
        case 0x1404 /* GL_INT */:
          return HEAP32.subarray(pixels>>2, end>>2);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray(pixels>>2, end>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray(pixels>>2, end>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return HEAPU16.subarray(pixels>>1, end>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }
  
  function __heapObjectForWebGLType(type) {
      switch(type) {
        case 0x1400 /* GL_BYTE */:
          return HEAP8;
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8;
        case 0x1402 /* GL_SHORT */:
          return HEAP16;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return HEAPU16;
        case 0x1404 /* GL_INT */:
          return HEAP32;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return HEAPU32;
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32;
      }
    }
  
  var __heapAccessShiftForWebGLType={5122:1,5123:1,5124:2,5125:2,5126:2,5131:1,32819:1,32820:1,33635:1,33640:2,34042:2,35899:2,35902:2,36193:1};function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.supportsWebGL2EntryPoints) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels != 0) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, __heapObjectForWebGLType(type), pixels >> (__heapAccessShiftForWebGLType[type]|0));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1iv(location, count, value) {
  
      if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform1iv(GL.uniforms[location], HEAP32, value>>2, count);
        return;
      }
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
      if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*16);
        return;
      }
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      var cb = GL.currentContext.clientBuffers[index];
      if (!GL.currArrayBuffer) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        cb.vertexAttribPointerAdaptor = function(index, size, type, normalized, stride, ptr) {
          this.vertexAttribPointer(index, size, type, normalized, stride, ptr);
        };
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        dynCall_vii(GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        dynCall_viiiii(GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        dynCall_vidd(GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        dynCall_viiii(GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        dynCall_vidd(GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        dynCall_viii(GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        dynCall_viii(GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        err('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        err('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              dynCall_viii(GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        dynCall_viii(win.windowSizeFunc, win.id, width, height);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          dynCall_vi(win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetJoystickAxes(joy, count) {
      GLFW.refreshJoysticks();
  
      var state = GLFW.joys[joy];
      if (!state || !state.axes) {
        setValue(count, 0, 'i32');
        return;
      }
  
      setValue(count, state.axesCount, 'i32');
      return state.axes;
    }

  function _glfwGetJoystickButtons(joy, count) {
      GLFW.refreshJoysticks();
  
      var state = GLFW.joys[joy];
      if (!state || !state.buttons) {
        setValue(count, 0, 'i32');
        return;
      }
  
      setValue(count, state.buttonsCount, 'i32');
      return state.buttons;
    }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  function _glfwGetMouseButton(winid, button) {
      return GLFW.getMouseButton(winid, button);
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetWindowUserPointer(winid) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return 0;
      return win.userptr;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwJoystickPresent(joy) {
      GLFW.refreshJoysticks();
  
      return GLFW.joys[joy] !== undefined;
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwPollEvents() {}

  function _glfwSetDropCallback(winid, cbfun) {
      GLFW.setDropCallback(winid, cbfun);
    }

  function _glfwSetFramebufferSizeCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.framebufferSizeFunc = cbfun;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetWindowCloseCallback(winid, cbfun) {
      GLFW.setWindowCloseCallback(winid, cbfun);
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSetWindowUserPointer(winid, ptr) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.userptr = ptr;
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function _glfwWindowShouldClose(winid) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return 0;
      return win.shouldClose;
    }

  
  var ___tm_timezone=(stringToUTF8("GMT", 33312, 4), 33312);function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }



   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__get_daylight())>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
  var _Int8Array=undefined;
  
  var _Int32Array=undefined; 

   

   

   

  function _pthread_cond_destroy() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_wait() { return 0; }

  function _pthread_join() {}

  function _pthread_mutexattr_destroy() {}

  function _pthread_mutexattr_init() {}

  function _pthread_mutexattr_settype() {}

   

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
var GLctx; GL.init();
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_clz32,Math_imul,Int8Array,Int32Array


function nullFunc_di(x) { err("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { err("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { err("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { err("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity }

var asmLibraryArg = { "abort": abort, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortStackOverflow": abortStackOverflow, "nullFunc_di": nullFunc_di, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "_JSEvents_resizeCanvasForFullscreen": _JSEvents_resizeCanvasForFullscreen, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_deleted_virtual": ___cxa_deleted_virtual, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_free_exception": ___cxa_free_exception, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_throw": ___cxa_throw, "___cxa_uncaught_exception": ___cxa_uncaught_exception, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall20": ___syscall20, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize, "__fillFullscreenChangeEventData": __fillFullscreenChangeEventData, "__findCanvasEventTarget": __findCanvasEventTarget, "__findEventTarget": __findEventTarget, "__get_canvas_element_size": __get_canvas_element_size, "__glGenObject": __glGenObject, "__heapObjectForWebGLType": __heapObjectForWebGLType, "__hideEverythingExceptGivenElement": __hideEverythingExceptGivenElement, "__isLeapYear": __isLeapYear, "__registerFullscreenChangeEventCallback": __registerFullscreenChangeEventCallback, "__registerRestoreOldStyle": __registerRestoreOldStyle, "__restoreHiddenElements": __restoreHiddenElements, "__setLetterbox": __setLetterbox, "__set_canvas_element_size": __set_canvas_element_size, "__softFullscreenResizeWebGLRenderTarget": __softFullscreenResizeWebGLRenderTarget, "_abort": _abort, "_clock_gettime": _clock_gettime, "_emscripten_enter_soft_fullscreen": _emscripten_enter_soft_fullscreen, "_emscripten_exit_soft_fullscreen": _emscripten_exit_soft_fullscreen, "_emscripten_get_canvas_element_size": _emscripten_get_canvas_element_size, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size, "_emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_arg": _emscripten_set_main_loop_arg, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_getenv": _getenv, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBufferData": _glBufferData, "_glBufferSubData": _glBufferSubData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glCompileShader": _glCompileShader, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glCullFace": _glCullFace, "_glDeleteBuffers": _glDeleteBuffers, "_glDeleteProgram": _glDeleteProgram, "_glDeleteShader": _glDeleteShader, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_glDrawElements": _glDrawElements, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1iv": _glUniform1iv, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glValidateProgram": _glValidateProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glfwCreateWindow": _glfwCreateWindow, "_glfwDestroyWindow": _glfwDestroyWindow, "_glfwGetCursorPos": _glfwGetCursorPos, "_glfwGetJoystickAxes": _glfwGetJoystickAxes, "_glfwGetJoystickButtons": _glfwGetJoystickButtons, "_glfwGetKey": _glfwGetKey, "_glfwGetMouseButton": _glfwGetMouseButton, "_glfwGetTime": _glfwGetTime, "_glfwGetWindowUserPointer": _glfwGetWindowUserPointer, "_glfwInit": _glfwInit, "_glfwJoystickPresent": _glfwJoystickPresent, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwPollEvents": _glfwPollEvents, "_glfwSetDropCallback": _glfwSetDropCallback, "_glfwSetFramebufferSizeCallback": _glfwSetFramebufferSizeCallback, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwSetWindowCloseCallback": _glfwSetWindowCloseCallback, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwSetWindowUserPointer": _glfwSetWindowUserPointer, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwSwapInterval": _glfwSwapInterval, "_glfwTerminate": _glfwTerminate, "_glfwWindowHint": _glfwWindowHint, "_glfwWindowShouldClose": _glfwWindowShouldClose, "_gmtime_r": _gmtime_r, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_localtime_r": _localtime_r, "_pthread_cond_destroy": _pthread_cond_destroy, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_join": _pthread_join, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_strftime": _strftime, "_strftime_l": _strftime_l, "_time": _time, "_tzset": _tzset, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "tempDoublePtr": tempDoublePtr, "DYNAMICTOP_PTR": DYNAMICTOP_PTR }
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_abs=global.Math.abs,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_di=env.nullFunc_di,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_iiiiid=env.nullFunc_iiiiid,
  nullFunc_iiiiii=env.nullFunc_iiiiii,
  nullFunc_iiiiiid=env.nullFunc_iiiiiid,
  nullFunc_iiiiiii=env.nullFunc_iiiiiii,
  nullFunc_iiiiiiii=env.nullFunc_iiiiiiii,
  nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  _JSEvents_resizeCanvasForFullscreen=env._JSEvents_resizeCanvasForFullscreen,
  ___assert_fail=env.___assert_fail,
  ___buildEnvironment=env.___buildEnvironment,
  ___cxa_allocate_exception=env.___cxa_allocate_exception,
  ___cxa_begin_catch=env.___cxa_begin_catch,
  ___cxa_deleted_virtual=env.___cxa_deleted_virtual,
  ___cxa_find_matching_catch=env.___cxa_find_matching_catch,
  ___cxa_free_exception=env.___cxa_free_exception,
  ___cxa_pure_virtual=env.___cxa_pure_virtual,
  ___cxa_throw=env.___cxa_throw,
  ___cxa_uncaught_exception=env.___cxa_uncaught_exception,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___map_file=env.___map_file,
  ___resumeException=env.___resumeException,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall20=env.___syscall20,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___syscall91=env.___syscall91,
  ___unlock=env.___unlock,
  __addDays=env.__addDays,
  __arraySum=env.__arraySum,
  __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize,
  __fillFullscreenChangeEventData=env.__fillFullscreenChangeEventData,
  __findCanvasEventTarget=env.__findCanvasEventTarget,
  __findEventTarget=env.__findEventTarget,
  __get_canvas_element_size=env.__get_canvas_element_size,
  __glGenObject=env.__glGenObject,
  __heapObjectForWebGLType=env.__heapObjectForWebGLType,
  __hideEverythingExceptGivenElement=env.__hideEverythingExceptGivenElement,
  __isLeapYear=env.__isLeapYear,
  __registerFullscreenChangeEventCallback=env.__registerFullscreenChangeEventCallback,
  __registerRestoreOldStyle=env.__registerRestoreOldStyle,
  __restoreHiddenElements=env.__restoreHiddenElements,
  __setLetterbox=env.__setLetterbox,
  __set_canvas_element_size=env.__set_canvas_element_size,
  __softFullscreenResizeWebGLRenderTarget=env.__softFullscreenResizeWebGLRenderTarget,
  _abort=env._abort,
  _clock_gettime=env._clock_gettime,
  _emscripten_enter_soft_fullscreen=env._emscripten_enter_soft_fullscreen,
  _emscripten_exit_soft_fullscreen=env._emscripten_exit_soft_fullscreen,
  _emscripten_get_canvas_element_size=env._emscripten_get_canvas_element_size,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_get_now=env._emscripten_get_now,
  _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _emscripten_set_canvas_element_size=env._emscripten_set_canvas_element_size,
  _emscripten_set_fullscreenchange_callback_on_thread=env._emscripten_set_fullscreenchange_callback_on_thread,
  _emscripten_set_main_loop=env._emscripten_set_main_loop,
  _emscripten_set_main_loop_arg=env._emscripten_set_main_loop_arg,
  _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing,
  _getenv=env._getenv,
  _glActiveTexture=env._glActiveTexture,
  _glAttachShader=env._glAttachShader,
  _glBindBuffer=env._glBindBuffer,
  _glBindTexture=env._glBindTexture,
  _glBufferData=env._glBufferData,
  _glBufferSubData=env._glBufferSubData,
  _glClear=env._glClear,
  _glClearColor=env._glClearColor,
  _glCompileShader=env._glCompileShader,
  _glCreateProgram=env._glCreateProgram,
  _glCreateShader=env._glCreateShader,
  _glCullFace=env._glCullFace,
  _glDeleteBuffers=env._glDeleteBuffers,
  _glDeleteProgram=env._glDeleteProgram,
  _glDeleteShader=env._glDeleteShader,
  _glDeleteTextures=env._glDeleteTextures,
  _glDepthFunc=env._glDepthFunc,
  _glDrawElements=env._glDrawElements,
  _glEnable=env._glEnable,
  _glEnableVertexAttribArray=env._glEnableVertexAttribArray,
  _glGenBuffers=env._glGenBuffers,
  _glGenTextures=env._glGenTextures,
  _glGetShaderInfoLog=env._glGetShaderInfoLog,
  _glGetShaderiv=env._glGetShaderiv,
  _glGetUniformLocation=env._glGetUniformLocation,
  _glLinkProgram=env._glLinkProgram,
  _glShaderSource=env._glShaderSource,
  _glTexImage2D=env._glTexImage2D,
  _glTexParameteri=env._glTexParameteri,
  _glUniform1iv=env._glUniform1iv,
  _glUniformMatrix4fv=env._glUniformMatrix4fv,
  _glUseProgram=env._glUseProgram,
  _glValidateProgram=env._glValidateProgram,
  _glVertexAttribPointer=env._glVertexAttribPointer,
  _glViewport=env._glViewport,
  _glfwCreateWindow=env._glfwCreateWindow,
  _glfwDestroyWindow=env._glfwDestroyWindow,
  _glfwGetCursorPos=env._glfwGetCursorPos,
  _glfwGetJoystickAxes=env._glfwGetJoystickAxes,
  _glfwGetJoystickButtons=env._glfwGetJoystickButtons,
  _glfwGetKey=env._glfwGetKey,
  _glfwGetMouseButton=env._glfwGetMouseButton,
  _glfwGetTime=env._glfwGetTime,
  _glfwGetWindowUserPointer=env._glfwGetWindowUserPointer,
  _glfwInit=env._glfwInit,
  _glfwJoystickPresent=env._glfwJoystickPresent,
  _glfwMakeContextCurrent=env._glfwMakeContextCurrent,
  _glfwPollEvents=env._glfwPollEvents,
  _glfwSetDropCallback=env._glfwSetDropCallback,
  _glfwSetFramebufferSizeCallback=env._glfwSetFramebufferSizeCallback,
  _glfwSetKeyCallback=env._glfwSetKeyCallback,
  _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback,
  _glfwSetWindowCloseCallback=env._glfwSetWindowCloseCallback,
  _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback,
  _glfwSetWindowUserPointer=env._glfwSetWindowUserPointer,
  _glfwSwapBuffers=env._glfwSwapBuffers,
  _glfwSwapInterval=env._glfwSwapInterval,
  _glfwTerminate=env._glfwTerminate,
  _glfwWindowHint=env._glfwWindowHint,
  _glfwWindowShouldClose=env._glfwWindowShouldClose,
  _gmtime_r=env._gmtime_r,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _llvm_trap=env._llvm_trap,
  _localtime_r=env._localtime_r,
  _pthread_cond_destroy=env._pthread_cond_destroy,
  _pthread_cond_signal=env._pthread_cond_signal,
  _pthread_cond_wait=env._pthread_cond_wait,
  _pthread_join=env._pthread_join,
  _pthread_mutexattr_destroy=env._pthread_mutexattr_destroy,
  _pthread_mutexattr_init=env._pthread_mutexattr_init,
  _pthread_mutexattr_settype=env._pthread_mutexattr_settype,
  _strftime=env._strftime,
  _strftime_l=env._strftime_l,
  _time=env._time,
  _tzset=env._tzset,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData,
  STACKTOP = 33424,
  STACK_MAX = 5276304,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _malloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0, $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1000 = 0, $1003 = 0, $1008 = 0, $101 = 0, $1014 = 0, $1017 = 0, $1018 = 0, $102 = 0, $1025 = 0, $1037 = 0, $1042 = 0, $1049 = 0, $1050 = 0, $1051 = 0, $1060 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $14 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $19 = 0, $193 = 0, $198 = 0, $20 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $27 = 0, $276 = 0, $286 = 0, $290 = 0, $299 = 0, $30 = 0, $302 = 0, $306 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $333 = 0, $334 = 0, $336 = 0, $34 = 0, $340 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $380 = 0, $385 = 0, $388 = 0, $393 = 0, $397 = 0, $403 = 0, $41 = 0, $410 = 0, $414 = 0, $422 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $463 = 0, $465 = 0, $467 = 0, $469 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $510 = 0, $512 = 0, $513 = 0, $515 = 0, $52 = 0, $524 = 0, $528 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $550 = 0, $552 = 0, $553 = 0, $559 = 0, $56 = 0, $561 = 0, $568 = 0, $570 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $582 = 0, $583 = 0, $586 = 0, $590 = 0, $593 = 0, $596 = 0, $6 = 0, $60 = 0, $602 = 0, $606 = 0, $610 = 0, $619 = 0, $62 = 0, $620 = 0, $626 = 0, $628 = 0, $632 = 0, $635 = 0, $637 = 0, $64 = 0, $641 = 0, $643 = 0, $648 = 0, $649 = 0, $650 = 0, $656 = 0, $658 = 0, $662 = 0, $664 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $752 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $807 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $889 = 0, $9 = 0, $901 = 0, $906 = 0, $913 = 0, $914 = 0, $915 = 0, $92 = 0, $923 = 0, $927 = 0, $93 = 0, $931 = 0, $933 = 0, $939 = 0, $940 = 0, $942 = 0, $943 = 0, $945 = 0, $947 = 0, $95 = 0, $952 = 0, $953 = 0, $954 = 0, $96 = 0, $960 = 0, $962 = 0, $968 = 0, $973 = 0, $976 = 0, $977 = 0, $978 = 0, $98 = 0, $982 = 0, $983 = 0, $989 = 0, $994 = 0, $995 = 0, $998 = 0, $spec$select$i205 = 0, $spec$select3$i = 0, $spec$select49$i = 0, label = 0, sp = 0, $962$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 do if ($0 >>> 0 < 245) {
  $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
  $7 = $6 >>> 3;
  $8 = HEAP32[7781] | 0;
  $9 = $8 >>> $7;
  if ($9 & 3 | 0) {
   $14 = ($9 & 1 ^ 1) + $7 | 0;
   $16 = 31164 + ($14 << 1 << 2) | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   do if (($20 | 0) == ($16 | 0)) HEAP32[7781] = $8 & ~(1 << $14); else {
    if ((HEAP32[7785] | 0) >>> 0 > $20 >>> 0) _abort();
    $27 = $20 + 12 | 0;
    if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$27 >> 2] = $16;
     HEAP32[$17 >> 2] = $20;
     break;
    } else _abort();
   } while (0);
   $30 = $14 << 3;
   HEAP32[$18 + 4 >> 2] = $30 | 3;
   $34 = $18 + $30 + 4 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
   $$0 = $19;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $37 = HEAP32[7783] | 0;
  if ($6 >>> 0 > $37 >>> 0) {
   if ($9 | 0) {
    $41 = 2 << $7;
    $44 = $9 << $7 & ($41 | 0 - $41);
    $47 = ($44 & 0 - $44) + -1 | 0;
    $49 = $47 >>> 12 & 16;
    $50 = $47 >>> $49;
    $52 = $50 >>> 5 & 8;
    $54 = $50 >>> $52;
    $56 = $54 >>> 2 & 4;
    $58 = $54 >>> $56;
    $60 = $58 >>> 1 & 2;
    $62 = $58 >>> $60;
    $64 = $62 >>> 1 & 1;
    $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0;
    $69 = 31164 + ($67 << 1 << 2) | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 + 8 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    do if (($73 | 0) == ($69 | 0)) {
     $77 = $8 & ~(1 << $67);
     HEAP32[7781] = $77;
     $98 = $77;
    } else {
     if ((HEAP32[7785] | 0) >>> 0 > $73 >>> 0) _abort();
     $80 = $73 + 12 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
      HEAP32[$80 >> 2] = $69;
      HEAP32[$70 >> 2] = $73;
      $98 = $8;
      break;
     } else _abort();
    } while (0);
    $83 = $67 << 3;
    $84 = $83 - $6 | 0;
    HEAP32[$71 + 4 >> 2] = $6 | 3;
    $87 = $71 + $6 | 0;
    HEAP32[$87 + 4 >> 2] = $84 | 1;
    HEAP32[$71 + $83 >> 2] = $84;
    if ($37 | 0) {
     $92 = HEAP32[7786] | 0;
     $93 = $37 >>> 3;
     $95 = 31164 + ($93 << 1 << 2) | 0;
     $96 = 1 << $93;
     if (!($98 & $96)) {
      HEAP32[7781] = $98 | $96;
      $$0199 = $95;
      $$pre$phiZ2D = $95 + 8 | 0;
     } else {
      $101 = $95 + 8 | 0;
      $102 = HEAP32[$101 >> 2] | 0;
      if ((HEAP32[7785] | 0) >>> 0 > $102 >>> 0) _abort(); else {
       $$0199 = $102;
       $$pre$phiZ2D = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $92;
     HEAP32[$$0199 + 12 >> 2] = $92;
     HEAP32[$92 + 8 >> 2] = $$0199;
     HEAP32[$92 + 12 >> 2] = $95;
    }
    HEAP32[7783] = $84;
    HEAP32[7786] = $87;
    $$0 = $72;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $108 = HEAP32[7782] | 0;
   if (!$108) $$0197 = $6; else {
    $112 = ($108 & 0 - $108) + -1 | 0;
    $114 = $112 >>> 12 & 16;
    $115 = $112 >>> $114;
    $117 = $115 >>> 5 & 8;
    $119 = $115 >>> $117;
    $121 = $119 >>> 2 & 4;
    $123 = $119 >>> $121;
    $125 = $123 >>> 1 & 2;
    $127 = $123 >>> $125;
    $129 = $127 >>> 1 & 1;
    $134 = HEAP32[31428 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0;
    $$0189$i = $134;
    $$0190$i = $134;
    $$0191$i = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0;
    while (1) {
     $140 = HEAP32[$$0189$i + 16 >> 2] | 0;
     if (!$140) {
      $143 = HEAP32[$$0189$i + 20 >> 2] | 0;
      if (!$143) break; else $146 = $143;
     } else $146 = $140;
     $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0;
     $150 = $149 >>> 0 < $$0191$i >>> 0;
     $$0189$i = $146;
     $$0190$i = $150 ? $146 : $$0190$i;
     $$0191$i = $150 ? $149 : $$0191$i;
    }
    $151 = HEAP32[7785] | 0;
    if ($151 >>> 0 > $$0190$i >>> 0) _abort();
    $153 = $$0190$i + $6 | 0;
    if ($153 >>> 0 <= $$0190$i >>> 0) _abort();
    $156 = HEAP32[$$0190$i + 24 >> 2] | 0;
    $158 = HEAP32[$$0190$i + 12 >> 2] | 0;
    do if (($158 | 0) == ($$0190$i | 0)) {
     $169 = $$0190$i + 20 | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     if (!$170) {
      $172 = $$0190$i + 16 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      if (!$173) {
       $$3$i = 0;
       break;
      } else {
       $$1194$i$ph = $173;
       $$1196$i$ph = $172;
      }
     } else {
      $$1194$i$ph = $170;
      $$1196$i$ph = $169;
     }
     $$1194$i = $$1194$i$ph;
     $$1196$i = $$1196$i$ph;
     while (1) {
      $175 = $$1194$i + 20 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      if (!$176) {
       $178 = $$1194$i + 16 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       if (!$179) break; else {
        $$1194$i$be = $179;
        $$1196$i$be = $178;
       }
      } else {
       $$1194$i$be = $176;
       $$1196$i$be = $175;
      }
      $$1194$i = $$1194$i$be;
      $$1196$i = $$1196$i$be;
     }
     if ($151 >>> 0 > $$1196$i >>> 0) _abort(); else {
      HEAP32[$$1196$i >> 2] = 0;
      $$3$i = $$1194$i;
      break;
     }
    } else {
     $161 = HEAP32[$$0190$i + 8 >> 2] | 0;
     if ($151 >>> 0 > $161 >>> 0) _abort();
     $163 = $161 + 12 | 0;
     if ((HEAP32[$163 >> 2] | 0) != ($$0190$i | 0)) _abort();
     $166 = $158 + 8 | 0;
     if ((HEAP32[$166 >> 2] | 0) == ($$0190$i | 0)) {
      HEAP32[$163 >> 2] = $158;
      HEAP32[$166 >> 2] = $161;
      $$3$i = $158;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($156 | 0) {
     $184 = HEAP32[$$0190$i + 28 >> 2] | 0;
     $185 = 31428 + ($184 << 2) | 0;
     do if (($$0190$i | 0) == (HEAP32[$185 >> 2] | 0)) {
      HEAP32[$185 >> 2] = $$3$i;
      if (!$$3$i) {
       HEAP32[7782] = $108 & ~(1 << $184);
       break L78;
      }
     } else if ((HEAP32[7785] | 0) >>> 0 > $156 >>> 0) _abort(); else {
      $193 = $156 + 16 | 0;
      HEAP32[((HEAP32[$193 >> 2] | 0) == ($$0190$i | 0) ? $193 : $156 + 20 | 0) >> 2] = $$3$i;
      if (!$$3$i) break L78; else break;
     } while (0);
     $198 = HEAP32[7785] | 0;
     if ($198 >>> 0 > $$3$i >>> 0) _abort();
     HEAP32[$$3$i + 24 >> 2] = $156;
     $202 = HEAP32[$$0190$i + 16 >> 2] | 0;
     do if ($202 | 0) if ($198 >>> 0 > $202 >>> 0) _abort(); else {
      HEAP32[$$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $$3$i;
      break;
     } while (0);
     $208 = HEAP32[$$0190$i + 20 >> 2] | 0;
     if ($208 | 0) if ((HEAP32[7785] | 0) >>> 0 > $208 >>> 0) _abort(); else {
      HEAP32[$$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $$3$i;
      break;
     }
    } while (0);
    if ($$0191$i >>> 0 < 16) {
     $215 = $$0191$i + $6 | 0;
     HEAP32[$$0190$i + 4 >> 2] = $215 | 3;
     $219 = $$0190$i + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$$0190$i + 4 >> 2] = $6 | 3;
     HEAP32[$153 + 4 >> 2] = $$0191$i | 1;
     HEAP32[$153 + $$0191$i >> 2] = $$0191$i;
     if ($37 | 0) {
      $228 = HEAP32[7786] | 0;
      $229 = $37 >>> 3;
      $231 = 31164 + ($229 << 1 << 2) | 0;
      $232 = 1 << $229;
      if (!($232 & $8)) {
       HEAP32[7781] = $232 | $8;
       $$0187$i = $231;
       $$pre$phi$iZ2D = $231 + 8 | 0;
      } else {
       $236 = $231 + 8 | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ((HEAP32[7785] | 0) >>> 0 > $237 >>> 0) _abort(); else {
        $$0187$i = $237;
        $$pre$phi$iZ2D = $236;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $228;
      HEAP32[$$0187$i + 12 >> 2] = $228;
      HEAP32[$228 + 8 >> 2] = $$0187$i;
      HEAP32[$228 + 12 >> 2] = $231;
     }
     HEAP32[7783] = $$0191$i;
     HEAP32[7786] = $153;
    }
    $$0 = $$0190$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $$0197 = $6;
 } else if ($0 >>> 0 > 4294967231) $$0197 = -1; else {
  $245 = $0 + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[7782] | 0;
  if (!$247) $$0197 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $$0357$i = 0; else if ($246 >>> 0 > 16777215) $$0357$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $$0357$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[31428 + ($$0357$i << 2) >> 2] | 0;
   L122 : do if (!$276) {
    $$2353$i = 0;
    $$3$i203 = 0;
    $$3348$i = $249;
    label = 85;
   } else {
    $$0340$i = 0;
    $$0345$i = $249;
    $$0351$i = $276;
    $$0358$i = $246 << (($$0357$i | 0) == 31 ? 0 : 25 - ($$0357$i >>> 1) | 0);
    $$0361$i = 0;
    while (1) {
     $286 = (HEAP32[$$0351$i + 4 >> 2] & -8) - $246 | 0;
     if ($286 >>> 0 < $$0345$i >>> 0) if (!$286) {
      $$420$i$ph = $$0351$i;
      $$434919$i$ph = 0;
      $$535618$i$ph = $$0351$i;
      label = 89;
      break L122;
     } else {
      $$1341$i = $$0351$i;
      $$1346$i = $286;
     } else {
      $$1341$i = $$0340$i;
      $$1346$i = $$0345$i;
     }
     $290 = HEAP32[$$0351$i + 20 >> 2] | 0;
     $$0351$i = HEAP32[$$0351$i + 16 + ($$0358$i >>> 31 << 2) >> 2] | 0;
     $$1362$i = ($290 | 0) == 0 | ($290 | 0) == ($$0351$i | 0) ? $$0361$i : $290;
     if (!$$0351$i) {
      $$2353$i = $$1362$i;
      $$3$i203 = $$1341$i;
      $$3348$i = $$1346$i;
      label = 85;
      break;
     } else {
      $$0340$i = $$1341$i;
      $$0345$i = $$1346$i;
      $$0358$i = $$0358$i << 1;
      $$0361$i = $$1362$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($$2353$i | 0) == 0 & ($$3$i203 | 0) == 0) {
     $299 = 2 << $$0357$i;
     $302 = ($299 | 0 - $299) & $247;
     if (!$302) {
      $$0197 = $246;
      break;
     }
     $306 = ($302 & 0 - $302) + -1 | 0;
     $308 = $306 >>> 12 & 16;
     $309 = $306 >>> $308;
     $311 = $309 >>> 5 & 8;
     $313 = $309 >>> $311;
     $315 = $313 >>> 2 & 4;
     $317 = $313 >>> $315;
     $319 = $317 >>> 1 & 2;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 1;
     $$3$i203218 = 0;
     $$4355$i = HEAP32[31428 + (($311 | $308 | $315 | $319 | $323) + ($321 >>> $323) << 2) >> 2] | 0;
    } else {
     $$3$i203218 = $$3$i203;
     $$4355$i = $$2353$i;
    }
    if (!$$4355$i) {
     $$4$lcssa$i = $$3$i203218;
     $$4349$lcssa$i = $$3348$i;
    } else {
     $$420$i$ph = $$3$i203218;
     $$434919$i$ph = $$3348$i;
     $$535618$i$ph = $$4355$i;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $$420$i = $$420$i$ph;
    $$434919$i = $$434919$i$ph;
    $$535618$i = $$535618$i$ph;
    while (1) {
     $333 = (HEAP32[$$535618$i + 4 >> 2] & -8) - $246 | 0;
     $334 = $333 >>> 0 < $$434919$i >>> 0;
     $spec$select$i205 = $334 ? $333 : $$434919$i;
     $spec$select3$i = $334 ? $$535618$i : $$420$i;
     $336 = HEAP32[$$535618$i + 16 >> 2] | 0;
     if (!$336) $340 = HEAP32[$$535618$i + 20 >> 2] | 0; else $340 = $336;
     if (!$340) {
      $$4$lcssa$i = $spec$select3$i;
      $$4349$lcssa$i = $spec$select$i205;
      break;
     } else {
      $$420$i = $spec$select3$i;
      $$434919$i = $spec$select$i205;
      $$535618$i = $340;
     }
    }
   }
   if (!$$4$lcssa$i) $$0197 = $246; else if ($$4349$lcssa$i >>> 0 < ((HEAP32[7783] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[7785] | 0;
    if ($346 >>> 0 > $$4$lcssa$i >>> 0) _abort();
    $348 = $$4$lcssa$i + $246 | 0;
    if ($348 >>> 0 <= $$4$lcssa$i >>> 0) _abort();
    $351 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($$4$lcssa$i | 0)) {
     $364 = $$4$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $$4$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $$3371$i = 0;
       break;
      } else {
       $$1369$i$ph = $368;
       $$1373$i$ph = $367;
      }
     } else {
      $$1369$i$ph = $365;
      $$1373$i$ph = $364;
     }
     $$1369$i = $$1369$i$ph;
     $$1373$i = $$1373$i$ph;
     while (1) {
      $370 = $$1369$i + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $373 = $$1369$i + 16 | 0;
       $374 = HEAP32[$373 >> 2] | 0;
       if (!$374) break; else {
        $$1369$i$be = $374;
        $$1373$i$be = $373;
       }
      } else {
       $$1369$i$be = $371;
       $$1373$i$be = $370;
      }
      $$1369$i = $$1369$i$be;
      $$1373$i = $$1373$i$be;
     }
     if ($346 >>> 0 > $$1373$i >>> 0) _abort(); else {
      HEAP32[$$1373$i >> 2] = 0;
      $$3371$i = $$1369$i;
      break;
     }
    } else {
     $356 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
     if ($346 >>> 0 > $356 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($$4$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $$3371$i = $353;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$351) $469 = $247; else {
     $379 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
     $380 = 31428 + ($379 << 2) | 0;
     do if (($$4$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $$3371$i;
      if (!$$3371$i) {
       $385 = $247 & ~(1 << $379);
       HEAP32[7782] = $385;
       $469 = $385;
       break L176;
      }
     } else if ((HEAP32[7785] | 0) >>> 0 > $351 >>> 0) _abort(); else {
      $388 = $351 + 16 | 0;
      HEAP32[((HEAP32[$388 >> 2] | 0) == ($$4$lcssa$i | 0) ? $388 : $351 + 20 | 0) >> 2] = $$3371$i;
      if (!$$3371$i) {
       $469 = $247;
       break L176;
      } else break;
     } while (0);
     $393 = HEAP32[7785] | 0;
     if ($393 >>> 0 > $$3371$i >>> 0) _abort();
     HEAP32[$$3371$i + 24 >> 2] = $351;
     $397 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
     do if ($397 | 0) if ($393 >>> 0 > $397 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 16 >> 2] = $397;
      HEAP32[$397 + 24 >> 2] = $$3371$i;
      break;
     } while (0);
     $403 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
     if (!$403) $469 = $247; else if ((HEAP32[7785] | 0) >>> 0 > $403 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 20 >> 2] = $403;
      HEAP32[$403 + 24 >> 2] = $$3371$i;
      $469 = $247;
      break;
     }
    } while (0);
    L200 : do if ($$4349$lcssa$i >>> 0 < 16) {
     $410 = $$4349$lcssa$i + $246 | 0;
     HEAP32[$$4$lcssa$i + 4 >> 2] = $410 | 3;
     $414 = $$4$lcssa$i + $410 + 4 | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$$4$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$348 + 4 >> 2] = $$4349$lcssa$i | 1;
     HEAP32[$348 + $$4349$lcssa$i >> 2] = $$4349$lcssa$i;
     $422 = $$4349$lcssa$i >>> 3;
     if ($$4349$lcssa$i >>> 0 < 256) {
      $425 = 31164 + ($422 << 1 << 2) | 0;
      $426 = HEAP32[7781] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[7781] = $426 | $427;
       $$0367$i = $425;
       $$pre$phi$i209Z2D = $425 + 8 | 0;
      } else {
       $431 = $425 + 8 | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ((HEAP32[7785] | 0) >>> 0 > $432 >>> 0) _abort(); else {
        $$0367$i = $432;
        $$pre$phi$i209Z2D = $431;
       }
      }
      HEAP32[$$pre$phi$i209Z2D >> 2] = $348;
      HEAP32[$$0367$i + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $$0367$i;
      HEAP32[$348 + 12 >> 2] = $425;
      break;
     }
     $438 = $$4349$lcssa$i >>> 8;
     if (!$438) $$0360$i = 0; else if ($$4349$lcssa$i >>> 0 > 16777215) $$0360$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $$0360$i = $$4349$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 31428 + ($$0360$i << 2) | 0;
     HEAP32[$348 + 28 >> 2] = $$0360$i;
     $465 = $348 + 16 | 0;
     HEAP32[$465 + 4 >> 2] = 0;
     HEAP32[$465 >> 2] = 0;
     $467 = 1 << $$0360$i;
     if (!($469 & $467)) {
      HEAP32[7782] = $469 | $467;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$348 + 24 >> 2] = $463;
      HEAP32[$348 + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     L218 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) $$0343$lcssa$i = $475; else {
      $$034217$i = $$4349$lcssa$i << (($$0360$i | 0) == 31 ? 0 : 25 - ($$0360$i >>> 1) | 0);
      $$034316$i = $475;
      while (1) {
       $492 = $$034316$i + 16 + ($$034217$i >>> 31 << 2) | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) break;
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) {
        $$0343$lcssa$i = $487;
        break L218;
       } else {
        $$034217$i = $$034217$i << 1;
        $$034316$i = $487;
       }
      }
      if ((HEAP32[7785] | 0) >>> 0 > $492 >>> 0) _abort(); else {
       HEAP32[$492 >> 2] = $348;
       HEAP32[$348 + 24 >> 2] = $$034316$i;
       HEAP32[$348 + 12 >> 2] = $348;
       HEAP32[$348 + 8 >> 2] = $348;
       break L200;
      }
     } while (0);
     $499 = $$0343$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[7785] | 0;
     if ($501 >>> 0 <= $500 >>> 0 & $501 >>> 0 <= $$0343$lcssa$i >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $500;
      HEAP32[$348 + 12 >> 2] = $$0343$lcssa$i;
      HEAP32[$348 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $$0197 = $246;
  }
 } while (0);
 $510 = HEAP32[7783] | 0;
 if ($510 >>> 0 >= $$0197 >>> 0) {
  $512 = $510 - $$0197 | 0;
  $513 = HEAP32[7786] | 0;
  if ($512 >>> 0 > 15) {
   $515 = $513 + $$0197 | 0;
   HEAP32[7786] = $515;
   HEAP32[7783] = $512;
   HEAP32[$515 + 4 >> 2] = $512 | 1;
   HEAP32[$513 + $510 >> 2] = $512;
   HEAP32[$513 + 4 >> 2] = $$0197 | 3;
  } else {
   HEAP32[7783] = 0;
   HEAP32[7786] = 0;
   HEAP32[$513 + 4 >> 2] = $510 | 3;
   $524 = $513 + $510 + 4 | 0;
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1;
  }
  $$0 = $513 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $528 = HEAP32[7784] | 0;
 if ($528 >>> 0 > $$0197 >>> 0) {
  $530 = $528 - $$0197 | 0;
  HEAP32[7784] = $530;
  $531 = HEAP32[7787] | 0;
  $532 = $531 + $$0197 | 0;
  HEAP32[7787] = $532;
  HEAP32[$532 + 4 >> 2] = $530 | 1;
  HEAP32[$531 + 4 >> 2] = $$0197 | 3;
  $$0 = $531 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[7899] | 0)) {
  HEAP32[7901] = 4096;
  HEAP32[7900] = 4096;
  HEAP32[7902] = -1;
  HEAP32[7903] = -1;
  HEAP32[7904] = 0;
  HEAP32[7892] = 0;
  HEAP32[7899] = $1 & -16 ^ 1431655768;
  $546 = 4096;
 } else $546 = HEAP32[7901] | 0;
 $543 = $$0197 + 48 | 0;
 $544 = $$0197 + 47 | 0;
 $545 = $546 + $544 | 0;
 $547 = 0 - $546 | 0;
 $548 = $545 & $547;
 if ($548 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $550 = HEAP32[7891] | 0;
 if ($550 | 0) {
  $552 = HEAP32[7889] | 0;
  $553 = $552 + $548 | 0;
  if ($553 >>> 0 <= $552 >>> 0 | $553 >>> 0 > $550 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[7892] & 4)) {
  $559 = HEAP32[7787] | 0;
  L259 : do if (!$559) label = 173; else {
   $$0$i$i = 31572;
   while (1) {
    $561 = HEAP32[$$0$i$i >> 2] | 0;
    if ($561 >>> 0 <= $559 >>> 0) if (($561 + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $559 >>> 0) break;
    $568 = HEAP32[$$0$i$i + 8 >> 2] | 0;
    if (!$568) {
     label = 173;
     break L259;
    } else $$0$i$i = $568;
   }
   $593 = $545 - $528 & $547;
   if ($593 >>> 0 < 2147483647) {
    $596 = _sbrk($593 | 0) | 0;
    if (($596 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0)) if (($596 | 0) == (-1 | 0)) $$2234243136$i = $593; else {
     $$723947$i = $593;
     $$748$i = $596;
     label = 190;
     break L257;
    } else {
     $$2247$ph$i = $596;
     $$2253$ph$i = $593;
     label = 181;
    }
   } else $$2234243136$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $570 = _sbrk(0) | 0;
   if (($570 | 0) == (-1 | 0)) $$2234243136$i = 0; else {
    $572 = $570;
    $573 = HEAP32[7900] | 0;
    $574 = $573 + -1 | 0;
    $spec$select49$i = (($574 & $572 | 0) == 0 ? 0 : ($574 + $572 & 0 - $573) - $572 | 0) + $548 | 0;
    $582 = HEAP32[7889] | 0;
    $583 = $spec$select49$i + $582 | 0;
    if ($spec$select49$i >>> 0 > $$0197 >>> 0 & $spec$select49$i >>> 0 < 2147483647) {
     $586 = HEAP32[7891] | 0;
     if ($586 | 0) if ($583 >>> 0 <= $582 >>> 0 | $583 >>> 0 > $586 >>> 0) {
      $$2234243136$i = 0;
      break;
     }
     $590 = _sbrk($spec$select49$i | 0) | 0;
     if (($590 | 0) == ($570 | 0)) {
      $$723947$i = $spec$select49$i;
      $$748$i = $570;
      label = 190;
      break L257;
     } else {
      $$2247$ph$i = $590;
      $$2253$ph$i = $spec$select49$i;
      label = 181;
     }
    } else $$2234243136$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $602 = 0 - $$2253$ph$i | 0;
   if (!($543 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   $606 = HEAP32[7901] | 0;
   $610 = $544 - $$2253$ph$i + $606 & 0 - $606;
   if ($610 >>> 0 >= 2147483647) {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($610 | 0) | 0) == (-1 | 0)) {
    _sbrk($602 | 0) | 0;
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $610 + $$2253$ph$i | 0;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[7892] = HEAP32[7892] | 4;
  $$4236$i = $$2234243136$i;
  label = 188;
 } else {
  $$4236$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($548 >>> 0 < 2147483647) {
  $619 = _sbrk($548 | 0) | 0;
  $620 = _sbrk(0) | 0;
  $626 = $620 - $619 | 0;
  $628 = $626 >>> 0 > ($$0197 + 40 | 0) >>> 0;
  if (!(($619 | 0) == (-1 | 0) | $628 ^ 1 | $619 >>> 0 < $620 >>> 0 & (($619 | 0) != (-1 | 0) & ($620 | 0) != (-1 | 0)) ^ 1)) {
   $$723947$i = $628 ? $626 : $$4236$i;
   $$748$i = $619;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $632 = (HEAP32[7889] | 0) + $$723947$i | 0;
  HEAP32[7889] = $632;
  if ($632 >>> 0 > (HEAP32[7890] | 0) >>> 0) HEAP32[7890] = $632;
  $635 = HEAP32[7787] | 0;
  L294 : do if (!$635) {
   $637 = HEAP32[7785] | 0;
   if (($637 | 0) == 0 | $$748$i >>> 0 < $637 >>> 0) HEAP32[7785] = $$748$i;
   HEAP32[7893] = $$748$i;
   HEAP32[7894] = $$723947$i;
   HEAP32[7896] = 0;
   HEAP32[7790] = HEAP32[7899];
   HEAP32[7789] = -1;
   HEAP32[7794] = 31164;
   HEAP32[7793] = 31164;
   HEAP32[7796] = 31172;
   HEAP32[7795] = 31172;
   HEAP32[7798] = 31180;
   HEAP32[7797] = 31180;
   HEAP32[7800] = 31188;
   HEAP32[7799] = 31188;
   HEAP32[7802] = 31196;
   HEAP32[7801] = 31196;
   HEAP32[7804] = 31204;
   HEAP32[7803] = 31204;
   HEAP32[7806] = 31212;
   HEAP32[7805] = 31212;
   HEAP32[7808] = 31220;
   HEAP32[7807] = 31220;
   HEAP32[7810] = 31228;
   HEAP32[7809] = 31228;
   HEAP32[7812] = 31236;
   HEAP32[7811] = 31236;
   HEAP32[7814] = 31244;
   HEAP32[7813] = 31244;
   HEAP32[7816] = 31252;
   HEAP32[7815] = 31252;
   HEAP32[7818] = 31260;
   HEAP32[7817] = 31260;
   HEAP32[7820] = 31268;
   HEAP32[7819] = 31268;
   HEAP32[7822] = 31276;
   HEAP32[7821] = 31276;
   HEAP32[7824] = 31284;
   HEAP32[7823] = 31284;
   HEAP32[7826] = 31292;
   HEAP32[7825] = 31292;
   HEAP32[7828] = 31300;
   HEAP32[7827] = 31300;
   HEAP32[7830] = 31308;
   HEAP32[7829] = 31308;
   HEAP32[7832] = 31316;
   HEAP32[7831] = 31316;
   HEAP32[7834] = 31324;
   HEAP32[7833] = 31324;
   HEAP32[7836] = 31332;
   HEAP32[7835] = 31332;
   HEAP32[7838] = 31340;
   HEAP32[7837] = 31340;
   HEAP32[7840] = 31348;
   HEAP32[7839] = 31348;
   HEAP32[7842] = 31356;
   HEAP32[7841] = 31356;
   HEAP32[7844] = 31364;
   HEAP32[7843] = 31364;
   HEAP32[7846] = 31372;
   HEAP32[7845] = 31372;
   HEAP32[7848] = 31380;
   HEAP32[7847] = 31380;
   HEAP32[7850] = 31388;
   HEAP32[7849] = 31388;
   HEAP32[7852] = 31396;
   HEAP32[7851] = 31396;
   HEAP32[7854] = 31404;
   HEAP32[7853] = 31404;
   HEAP32[7856] = 31412;
   HEAP32[7855] = 31412;
   $641 = $$723947$i + -40 | 0;
   $643 = $$748$i + 8 | 0;
   $648 = ($643 & 7 | 0) == 0 ? 0 : 0 - $643 & 7;
   $649 = $$748$i + $648 | 0;
   $650 = $641 - $648 | 0;
   HEAP32[7787] = $649;
   HEAP32[7784] = $650;
   HEAP32[$649 + 4 >> 2] = $650 | 1;
   HEAP32[$$748$i + $641 + 4 >> 2] = 40;
   HEAP32[7788] = HEAP32[7903];
  } else {
   $$024372$i = 31572;
   while (1) {
    $656 = HEAP32[$$024372$i >> 2] | 0;
    $658 = HEAP32[$$024372$i + 4 >> 2] | 0;
    if (($$748$i | 0) == ($656 + $658 | 0)) {
     label = 199;
     break;
    }
    $662 = HEAP32[$$024372$i + 8 >> 2] | 0;
    if (!$662) break; else $$024372$i = $662;
   }
   if ((label | 0) == 199) {
    $664 = $$024372$i + 4 | 0;
    if (!(HEAP32[$$024372$i + 12 >> 2] & 8)) if ($$748$i >>> 0 > $635 >>> 0 & $656 >>> 0 <= $635 >>> 0) {
     HEAP32[$664 >> 2] = $658 + $$723947$i;
     $673 = (HEAP32[7784] | 0) + $$723947$i | 0;
     $675 = $635 + 8 | 0;
     $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7;
     $681 = $635 + $680 | 0;
     $682 = $673 - $680 | 0;
     HEAP32[7787] = $681;
     HEAP32[7784] = $682;
     HEAP32[$681 + 4 >> 2] = $682 | 1;
     HEAP32[$635 + $673 + 4 >> 2] = 40;
     HEAP32[7788] = HEAP32[7903];
     break;
    }
   }
   $688 = HEAP32[7785] | 0;
   if ($$748$i >>> 0 < $688 >>> 0) {
    HEAP32[7785] = $$748$i;
    $752 = $$748$i;
   } else $752 = $688;
   $690 = $$748$i + $$723947$i | 0;
   $$124471$i = 31572;
   while (1) {
    if ((HEAP32[$$124471$i >> 2] | 0) == ($690 | 0)) {
     label = 207;
     break;
    }
    $694 = HEAP32[$$124471$i + 8 >> 2] | 0;
    if (!$694) break; else $$124471$i = $694;
   }
   if ((label | 0) == 207) if (!(HEAP32[$$124471$i + 12 >> 2] & 8)) {
    HEAP32[$$124471$i >> 2] = $$748$i;
    $700 = $$124471$i + 4 | 0;
    HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i;
    $704 = $$748$i + 8 | 0;
    $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0;
    $712 = $690 + 8 | 0;
    $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0;
    $722 = $710 + $$0197 | 0;
    $723 = $718 - $710 - $$0197 | 0;
    HEAP32[$710 + 4 >> 2] = $$0197 | 3;
    L317 : do if (($635 | 0) == ($718 | 0)) {
     $728 = (HEAP32[7784] | 0) + $723 | 0;
     HEAP32[7784] = $728;
     HEAP32[7787] = $722;
     HEAP32[$722 + 4 >> 2] = $728 | 1;
    } else {
     if ((HEAP32[7786] | 0) == ($718 | 0)) {
      $734 = (HEAP32[7783] | 0) + $723 | 0;
      HEAP32[7783] = $734;
      HEAP32[7786] = $722;
      HEAP32[$722 + 4 >> 2] = $734 | 1;
      HEAP32[$722 + $734 >> 2] = $734;
      break;
     }
     $739 = HEAP32[$718 + 4 >> 2] | 0;
     if (($739 & 3 | 0) == 1) {
      $742 = $739 & -8;
      $743 = $739 >>> 3;
      L325 : do if ($739 >>> 0 < 256) {
       $746 = HEAP32[$718 + 8 >> 2] | 0;
       $748 = HEAP32[$718 + 12 >> 2] | 0;
       $750 = 31164 + ($743 << 1 << 2) | 0;
       do if (($746 | 0) != ($750 | 0)) {
        if ($752 >>> 0 > $746 >>> 0) _abort();
        if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) break;
        _abort();
       } while (0);
       if (($748 | 0) == ($746 | 0)) {
        HEAP32[7781] = HEAP32[7781] & ~(1 << $743);
        break;
       }
       do if (($748 | 0) == ($750 | 0)) $$pre$phi17$i$iZ2D = $748 + 8 | 0; else {
        if ($752 >>> 0 > $748 >>> 0) _abort();
        $764 = $748 + 8 | 0;
        if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
         $$pre$phi17$i$iZ2D = $764;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$746 + 12 >> 2] = $748;
       HEAP32[$$pre$phi17$i$iZ2D >> 2] = $746;
      } else {
       $769 = HEAP32[$718 + 24 >> 2] | 0;
       $771 = HEAP32[$718 + 12 >> 2] | 0;
       do if (($771 | 0) == ($718 | 0)) {
        $782 = $718 + 16 | 0;
        $783 = $782 + 4 | 0;
        $784 = HEAP32[$783 >> 2] | 0;
        if (!$784) {
         $786 = HEAP32[$782 >> 2] | 0;
         if (!$786) {
          $$3$i$i = 0;
          break;
         } else {
          $$1290$i$i$ph = $786;
          $$1292$i$i$ph = $782;
         }
        } else {
         $$1290$i$i$ph = $784;
         $$1292$i$i$ph = $783;
        }
        $$1290$i$i = $$1290$i$i$ph;
        $$1292$i$i = $$1292$i$i$ph;
        while (1) {
         $788 = $$1290$i$i + 20 | 0;
         $789 = HEAP32[$788 >> 2] | 0;
         if (!$789) {
          $791 = $$1290$i$i + 16 | 0;
          $792 = HEAP32[$791 >> 2] | 0;
          if (!$792) break; else {
           $$1290$i$i$be = $792;
           $$1292$i$i$be = $791;
          }
         } else {
          $$1290$i$i$be = $789;
          $$1292$i$i$be = $788;
         }
         $$1290$i$i = $$1290$i$i$be;
         $$1292$i$i = $$1292$i$i$be;
        }
        if ($752 >>> 0 > $$1292$i$i >>> 0) _abort(); else {
         HEAP32[$$1292$i$i >> 2] = 0;
         $$3$i$i = $$1290$i$i;
         break;
        }
       } else {
        $774 = HEAP32[$718 + 8 >> 2] | 0;
        if ($752 >>> 0 > $774 >>> 0) _abort();
        $776 = $774 + 12 | 0;
        if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) _abort();
        $779 = $771 + 8 | 0;
        if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
         HEAP32[$776 >> 2] = $771;
         HEAP32[$779 >> 2] = $774;
         $$3$i$i = $771;
         break;
        } else _abort();
       } while (0);
       if (!$769) break;
       $797 = HEAP32[$718 + 28 >> 2] | 0;
       $798 = 31428 + ($797 << 2) | 0;
       do if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
        HEAP32[$798 >> 2] = $$3$i$i;
        if ($$3$i$i | 0) break;
        HEAP32[7782] = HEAP32[7782] & ~(1 << $797);
        break L325;
       } else if ((HEAP32[7785] | 0) >>> 0 > $769 >>> 0) _abort(); else {
        $807 = $769 + 16 | 0;
        HEAP32[((HEAP32[$807 >> 2] | 0) == ($718 | 0) ? $807 : $769 + 20 | 0) >> 2] = $$3$i$i;
        if (!$$3$i$i) break L325; else break;
       } while (0);
       $812 = HEAP32[7785] | 0;
       if ($812 >>> 0 > $$3$i$i >>> 0) _abort();
       HEAP32[$$3$i$i + 24 >> 2] = $769;
       $815 = $718 + 16 | 0;
       $816 = HEAP32[$815 >> 2] | 0;
       do if ($816 | 0) if ($812 >>> 0 > $816 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 16 >> 2] = $816;
        HEAP32[$816 + 24 >> 2] = $$3$i$i;
        break;
       } while (0);
       $822 = HEAP32[$815 + 4 >> 2] | 0;
       if (!$822) break;
       if ((HEAP32[7785] | 0) >>> 0 > $822 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 20 >> 2] = $822;
        HEAP32[$822 + 24 >> 2] = $$3$i$i;
        break;
       }
      } while (0);
      $$0$i16$i = $718 + $742 | 0;
      $$0286$i$i = $742 + $723 | 0;
     } else {
      $$0$i16$i = $718;
      $$0286$i$i = $723;
     }
     $830 = $$0$i16$i + 4 | 0;
     HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2;
     HEAP32[$722 + 4 >> 2] = $$0286$i$i | 1;
     HEAP32[$722 + $$0286$i$i >> 2] = $$0286$i$i;
     $836 = $$0286$i$i >>> 3;
     if ($$0286$i$i >>> 0 < 256) {
      $839 = 31164 + ($836 << 1 << 2) | 0;
      $840 = HEAP32[7781] | 0;
      $841 = 1 << $836;
      do if (!($840 & $841)) {
       HEAP32[7781] = $840 | $841;
       $$0294$i$i = $839;
       $$pre$phi$i18$iZ2D = $839 + 8 | 0;
      } else {
       $845 = $839 + 8 | 0;
       $846 = HEAP32[$845 >> 2] | 0;
       if ((HEAP32[7785] | 0) >>> 0 <= $846 >>> 0) {
        $$0294$i$i = $846;
        $$pre$phi$i18$iZ2D = $845;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i18$iZ2D >> 2] = $722;
      HEAP32[$$0294$i$i + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $$0294$i$i;
      HEAP32[$722 + 12 >> 2] = $839;
      break;
     }
     $852 = $$0286$i$i >>> 8;
     do if (!$852) $$0295$i$i = 0; else {
      if ($$0286$i$i >>> 0 > 16777215) {
       $$0295$i$i = 31;
       break;
      }
      $857 = ($852 + 1048320 | 0) >>> 16 & 8;
      $858 = $852 << $857;
      $861 = ($858 + 520192 | 0) >>> 16 & 4;
      $863 = $858 << $861;
      $866 = ($863 + 245760 | 0) >>> 16 & 2;
      $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0;
      $$0295$i$i = $$0286$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1;
     } while (0);
     $877 = 31428 + ($$0295$i$i << 2) | 0;
     HEAP32[$722 + 28 >> 2] = $$0295$i$i;
     $879 = $722 + 16 | 0;
     HEAP32[$879 + 4 >> 2] = 0;
     HEAP32[$879 >> 2] = 0;
     $881 = HEAP32[7782] | 0;
     $882 = 1 << $$0295$i$i;
     if (!($881 & $882)) {
      HEAP32[7782] = $881 | $882;
      HEAP32[$877 >> 2] = $722;
      HEAP32[$722 + 24 >> 2] = $877;
      HEAP32[$722 + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $722;
      break;
     }
     $889 = HEAP32[$877 >> 2] | 0;
     L410 : do if ((HEAP32[$889 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) $$0288$lcssa$i$i = $889; else {
      $$028711$i$i = $$0286$i$i << (($$0295$i$i | 0) == 31 ? 0 : 25 - ($$0295$i$i >>> 1) | 0);
      $$028810$i$i = $889;
      while (1) {
       $906 = $$028810$i$i + 16 + ($$028711$i$i >>> 31 << 2) | 0;
       $901 = HEAP32[$906 >> 2] | 0;
       if (!$901) break;
       if ((HEAP32[$901 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) {
        $$0288$lcssa$i$i = $901;
        break L410;
       } else {
        $$028711$i$i = $$028711$i$i << 1;
        $$028810$i$i = $901;
       }
      }
      if ((HEAP32[7785] | 0) >>> 0 > $906 >>> 0) _abort(); else {
       HEAP32[$906 >> 2] = $722;
       HEAP32[$722 + 24 >> 2] = $$028810$i$i;
       HEAP32[$722 + 12 >> 2] = $722;
       HEAP32[$722 + 8 >> 2] = $722;
       break L317;
      }
     } while (0);
     $913 = $$0288$lcssa$i$i + 8 | 0;
     $914 = HEAP32[$913 >> 2] | 0;
     $915 = HEAP32[7785] | 0;
     if ($915 >>> 0 <= $914 >>> 0 & $915 >>> 0 <= $$0288$lcssa$i$i >>> 0) {
      HEAP32[$914 + 12 >> 2] = $722;
      HEAP32[$913 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $914;
      HEAP32[$722 + 12 >> 2] = $$0288$lcssa$i$i;
      HEAP32[$722 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $710 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0$i$i$i = 31572;
   while (1) {
    $923 = HEAP32[$$0$i$i$i >> 2] | 0;
    if ($923 >>> 0 <= $635 >>> 0) {
     $927 = $923 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($927 >>> 0 > $635 >>> 0) break;
    }
    $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
   }
   $931 = $927 + -47 | 0;
   $933 = $931 + 8 | 0;
   $939 = $931 + (($933 & 7 | 0) == 0 ? 0 : 0 - $933 & 7) | 0;
   $940 = $635 + 16 | 0;
   $942 = $939 >>> 0 < $940 >>> 0 ? $635 : $939;
   $943 = $942 + 8 | 0;
   $945 = $$723947$i + -40 | 0;
   $947 = $$748$i + 8 | 0;
   $952 = ($947 & 7 | 0) == 0 ? 0 : 0 - $947 & 7;
   $953 = $$748$i + $952 | 0;
   $954 = $945 - $952 | 0;
   HEAP32[7787] = $953;
   HEAP32[7784] = $954;
   HEAP32[$953 + 4 >> 2] = $954 | 1;
   HEAP32[$$748$i + $945 + 4 >> 2] = 40;
   HEAP32[7788] = HEAP32[7903];
   $960 = $942 + 4 | 0;
   HEAP32[$960 >> 2] = 27;
   HEAP32[$943 >> 2] = HEAP32[7893];
   HEAP32[$943 + 4 >> 2] = HEAP32[7894];
   HEAP32[$943 + 8 >> 2] = HEAP32[7895];
   HEAP32[$943 + 12 >> 2] = HEAP32[7896];
   HEAP32[7893] = $$748$i;
   HEAP32[7894] = $$723947$i;
   HEAP32[7896] = 0;
   HEAP32[7895] = $943;
   $962 = $942 + 24 | 0;
   do {
    $962$looptemp = $962;
    $962 = $962 + 4 | 0;
    HEAP32[$962 >> 2] = 7;
   } while (($962$looptemp + 8 | 0) >>> 0 < $927 >>> 0);
   if (($942 | 0) != ($635 | 0)) {
    $968 = $942 - $635 | 0;
    HEAP32[$960 >> 2] = HEAP32[$960 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $968 | 1;
    HEAP32[$942 >> 2] = $968;
    $973 = $968 >>> 3;
    if ($968 >>> 0 < 256) {
     $976 = 31164 + ($973 << 1 << 2) | 0;
     $977 = HEAP32[7781] | 0;
     $978 = 1 << $973;
     if (!($977 & $978)) {
      HEAP32[7781] = $977 | $978;
      $$0211$i$i = $976;
      $$pre$phi$i$iZ2D = $976 + 8 | 0;
     } else {
      $982 = $976 + 8 | 0;
      $983 = HEAP32[$982 >> 2] | 0;
      if ((HEAP32[7785] | 0) >>> 0 > $983 >>> 0) _abort(); else {
       $$0211$i$i = $983;
       $$pre$phi$i$iZ2D = $982;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$$0211$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $$0211$i$i;
     HEAP32[$635 + 12 >> 2] = $976;
     break;
    }
    $989 = $968 >>> 8;
    if (!$989) $$0212$i$i = 0; else if ($968 >>> 0 > 16777215) $$0212$i$i = 31; else {
     $994 = ($989 + 1048320 | 0) >>> 16 & 8;
     $995 = $989 << $994;
     $998 = ($995 + 520192 | 0) >>> 16 & 4;
     $1000 = $995 << $998;
     $1003 = ($1000 + 245760 | 0) >>> 16 & 2;
     $1008 = 14 - ($998 | $994 | $1003) + ($1000 << $1003 >>> 15) | 0;
     $$0212$i$i = $968 >>> ($1008 + 7 | 0) & 1 | $1008 << 1;
    }
    $1014 = 31428 + ($$0212$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $$0212$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$940 >> 2] = 0;
    $1017 = HEAP32[7782] | 0;
    $1018 = 1 << $$0212$i$i;
    if (!($1017 & $1018)) {
     HEAP32[7782] = $1017 | $1018;
     HEAP32[$1014 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1014;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $1025 = HEAP32[$1014 >> 2] | 0;
    L451 : do if ((HEAP32[$1025 + 4 >> 2] & -8 | 0) == ($968 | 0)) $$0207$lcssa$i$i = $1025; else {
     $$02065$i$i = $968 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
     $$02074$i$i = $1025;
     while (1) {
      $1042 = $$02074$i$i + 16 + ($$02065$i$i >>> 31 << 2) | 0;
      $1037 = HEAP32[$1042 >> 2] | 0;
      if (!$1037) break;
      if ((HEAP32[$1037 + 4 >> 2] & -8 | 0) == ($968 | 0)) {
       $$0207$lcssa$i$i = $1037;
       break L451;
      } else {
       $$02065$i$i = $$02065$i$i << 1;
       $$02074$i$i = $1037;
      }
     }
     if ((HEAP32[7785] | 0) >>> 0 > $1042 >>> 0) _abort(); else {
      HEAP32[$1042 >> 2] = $635;
      HEAP32[$635 + 24 >> 2] = $$02074$i$i;
      HEAP32[$635 + 12 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $635;
      break L294;
     }
    } while (0);
    $1049 = $$0207$lcssa$i$i + 8 | 0;
    $1050 = HEAP32[$1049 >> 2] | 0;
    $1051 = HEAP32[7785] | 0;
    if ($1051 >>> 0 <= $1050 >>> 0 & $1051 >>> 0 <= $$0207$lcssa$i$i >>> 0) {
     HEAP32[$1050 + 12 >> 2] = $635;
     HEAP32[$1049 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $1050;
     HEAP32[$635 + 12 >> 2] = $$0207$lcssa$i$i;
     HEAP32[$635 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1060 = HEAP32[7784] | 0;
  if ($1060 >>> 0 > $$0197 >>> 0) {
   $1062 = $1060 - $$0197 | 0;
   HEAP32[7784] = $1062;
   $1063 = HEAP32[7787] | 0;
   $1064 = $1063 + $$0197 | 0;
   HEAP32[7787] = $1064;
   HEAP32[$1064 + 4 >> 2] = $1062 | 1;
   HEAP32[$1063 + 4 >> 2] = $$0197 | 3;
   $$0 = $1063 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN6spdlog17pattern_formatter12handle_flag_EcNS_7details12padding_infoE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phi463Z2D = 0, $$pre$phi465Z2D = 0, $$pre$phi467Z2D = 0, $$pre$phi469Z2D = 0, $$pre$phi471Z2D = 0, $$pre$phi473Z2D = 0, $$pre$phi475Z2D = 0, $$pre$phi477Z2D = 0, $$pre$phi479Z2D = 0, $$pre$phi481Z2D = 0, $$pre$phi483Z2D = 0, $$pre$phi485Z2D = 0, $$pre$phi487Z2D = 0, $$pre$phi489Z2D = 0, $$pre$phi491Z2D = 0, $$pre$phi493Z2D = 0, $$pre$phi495Z2D = 0, $$pre$phi497Z2D = 0, $$pre$phi499Z2D = 0, $$pre$phi501Z2D = 0, $$pre$phi503Z2D = 0, $$pre$phi505Z2D = 0, $$pre$phi507Z2D = 0, $$pre$phi509Z2D = 0, $$pre$phi511Z2D = 0, $$pre$phi513Z2D = 0, $$pre$phi515Z2D = 0, $$pre$phi517Z2D = 0, $$pre$phi519Z2D = 0, $$pre$phi521Z2D = 0, $$pre$phi523Z2D = 0, $$pre$phi525Z2D = 0, $$pre$phi527Z2D = 0, $$pre$phi529Z2D = 0, $$pre$phi531Z2D = 0, $$pre$phi533Z2D = 0, $$pre$phi535Z2D = 0, $$pre$phiZ2D = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $110 = 0, $115 = 0, $116 = 0, $121 = 0, $123 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $135 = 0, $140 = 0, $141 = 0, $146 = 0, $148 = 0, $152 = 0, $153 = 0, $154 = 0, $160 = 0, $165 = 0, $166 = 0, $171 = 0, $173 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $185 = 0, $190 = 0, $191 = 0, $196 = 0, $198 = 0, $202 = 0, $203 = 0, $204 = 0, $210 = 0, $215 = 0, $216 = 0, $221 = 0, $223 = 0, $227 = 0, $228 = 0, $229 = 0, $235 = 0, $240 = 0, $241 = 0, $246 = 0, $248 = 0, $252 = 0, $253 = 0, $254 = 0, $260 = 0, $265 = 0, $266 = 0, $27 = 0, $271 = 0, $273 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $285 = 0, $29 = 0, $290 = 0, $291 = 0, $296 = 0, $298 = 0, $3 = 0, $302 = 0, $303 = 0, $304 = 0, $310 = 0, $315 = 0, $316 = 0, $321 = 0, $323 = 0, $327 = 0, $328 = 0, $329 = 0, $335 = 0, $340 = 0, $341 = 0, $346 = 0, $348 = 0, $35 = 0, $352 = 0, $353 = 0, $354 = 0, $360 = 0, $365 = 0, $366 = 0, $371 = 0, $373 = 0, $377 = 0, $378 = 0, $379 = 0, $385 = 0, $390 = 0, $391 = 0, $396 = 0, $398 = 0, $40 = 0, $402 = 0, $403 = 0, $404 = 0, $41 = 0, $410 = 0, $415 = 0, $416 = 0, $421 = 0, $423 = 0, $427 = 0, $428 = 0, $429 = 0, $435 = 0, $440 = 0, $441 = 0, $446 = 0, $448 = 0, $452 = 0, $453 = 0, $454 = 0, $46 = 0, $460 = 0, $465 = 0, $466 = 0, $471 = 0, $473 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $485 = 0, $490 = 0, $491 = 0, $496 = 0, $498 = 0, $5 = 0, $502 = 0, $503 = 0, $504 = 0, $510 = 0, $515 = 0, $516 = 0, $52 = 0, $521 = 0, $523 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $535 = 0, $54 = 0, $540 = 0, $541 = 0, $546 = 0, $548 = 0, $552 = 0, $553 = 0, $554 = 0, $560 = 0, $565 = 0, $566 = 0, $571 = 0, $573 = 0, $577 = 0, $578 = 0, $579 = 0, $585 = 0, $590 = 0, $591 = 0, $596 = 0, $598 = 0, $6 = 0, $60 = 0, $602 = 0, $603 = 0, $604 = 0, $610 = 0, $615 = 0, $616 = 0, $621 = 0, $623 = 0, $627 = 0, $628 = 0, $629 = 0, $635 = 0, $640 = 0, $641 = 0, $646 = 0, $648 = 0, $65 = 0, $652 = 0, $653 = 0, $654 = 0, $66 = 0, $660 = 0, $665 = 0, $666 = 0, $671 = 0, $673 = 0, $677 = 0, $678 = 0, $679 = 0, $685 = 0, $690 = 0, $691 = 0, $696 = 0, $698 = 0, $702 = 0, $703 = 0, $704 = 0, $71 = 0, $710 = 0, $715 = 0, $716 = 0, $721 = 0, $723 = 0, $728 = 0, $73 = 0, $733 = 0, $737 = 0, $738 = 0, $739 = 0, $745 = 0, $750 = 0, $751 = 0, $756 = 0, $758 = 0, $762 = 0, $763 = 0, $764 = 0, $77 = 0, $770 = 0, $775 = 0, $776 = 0, $78 = 0, $781 = 0, $783 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $795 = 0, $800 = 0, $801 = 0, $806 = 0, $808 = 0, $812 = 0, $813 = 0, $814 = 0, $820 = 0, $825 = 0, $826 = 0, $831 = 0, $833 = 0, $837 = 0, $838 = 0, $839 = 0, $845 = 0, $85 = 0, $850 = 0, $851 = 0, $856 = 0, $858 = 0, $862 = 0, $863 = 0, $864 = 0, $870 = 0, $875 = 0, $876 = 0, $881 = 0, $883 = 0, $887 = 0, $888 = 0, $889 = 0, $895 = 0, $90 = 0, $900 = 0, $901 = 0, $906 = 0, $908 = 0, $91 = 0, $912 = 0, $913 = 0, $914 = 0, $920 = 0, $925 = 0, $929 = 0, $930 = 0, $931 = 0, $937 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $952 = 0, $96 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 do switch ($1 << 24 >> 24 | 0) {
 case 43:
  {
   $5 = __Znwm(168) | 0;
   $6 = $2;
   $11 = HEAP32[$6 + 4 >> 2] | 0;
   $13 = $5 + 4 | 0;
   HEAP32[$13 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$13 + 4 >> 2] = $11;
   HEAP32[$5 >> 2] = 10016;
   $18 = $5 + 16 | 0;
   HEAP32[$18 >> 2] = 0;
   HEAP32[$18 + 4 >> 2] = 0;
   HEAP32[$5 + 32 >> 2] = 0;
   HEAP32[$5 + 24 >> 2] = 10036;
   HEAP32[$5 + 28 >> 2] = $5 + 40;
   HEAP32[$5 + 36 >> 2] = 128;
   $27 = $5;
   HEAP32[$3 >> 2] = $27;
   $28 = $0 + 92 | 0;
   $29 = HEAP32[$28 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$29 >> 2] = $27;
    HEAP32[$28 >> 2] = $29 + 4;
    $$pre$phi463Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi463Z2D = $3;
   }
   $35 = HEAP32[$$pre$phi463Z2D >> 2] | 0;
   HEAP32[$$pre$phi463Z2D >> 2] = 0;
   if ($35 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$35 >> 2] | 0) + 4 >> 2] & 255]($35);
   STACKTOP = sp;
   return;
  }
 case 110:
  {
   $40 = __Znwm(12) | 0;
   $41 = $2;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   $48 = $40 + 4 | 0;
   HEAP32[$48 >> 2] = HEAP32[$41 >> 2];
   HEAP32[$48 + 4 >> 2] = $46;
   HEAP32[$40 >> 2] = 10076;
   $52 = $40;
   HEAP32[$3 >> 2] = $52;
   $53 = $0 + 92 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if ($54 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$54 >> 2] = $52;
    HEAP32[$53 >> 2] = $54 + 4;
    $$pre$phi465Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi465Z2D = $3;
   }
   $60 = HEAP32[$$pre$phi465Z2D >> 2] | 0;
   HEAP32[$$pre$phi465Z2D >> 2] = 0;
   if ($60 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$60 >> 2] | 0) + 4 >> 2] & 255]($60);
   STACKTOP = sp;
   return;
  }
 case 108:
  {
   $65 = __Znwm(12) | 0;
   $66 = $2;
   $71 = HEAP32[$66 + 4 >> 2] | 0;
   $73 = $65 + 4 | 0;
   HEAP32[$73 >> 2] = HEAP32[$66 >> 2];
   HEAP32[$73 + 4 >> 2] = $71;
   HEAP32[$65 >> 2] = 10096;
   $77 = $65;
   HEAP32[$3 >> 2] = $77;
   $78 = $0 + 92 | 0;
   $79 = HEAP32[$78 >> 2] | 0;
   if ($79 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$79 >> 2] = $77;
    HEAP32[$78 >> 2] = $79 + 4;
    $$pre$phi467Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi467Z2D = $3;
   }
   $85 = HEAP32[$$pre$phi467Z2D >> 2] | 0;
   HEAP32[$$pre$phi467Z2D >> 2] = 0;
   if ($85 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$85 >> 2] | 0) + 4 >> 2] & 255]($85);
   STACKTOP = sp;
   return;
  }
 case 76:
  {
   $90 = __Znwm(12) | 0;
   $91 = $2;
   $96 = HEAP32[$91 + 4 >> 2] | 0;
   $98 = $90 + 4 | 0;
   HEAP32[$98 >> 2] = HEAP32[$91 >> 2];
   HEAP32[$98 + 4 >> 2] = $96;
   HEAP32[$90 >> 2] = 10116;
   $102 = $90;
   HEAP32[$3 >> 2] = $102;
   $103 = $0 + 92 | 0;
   $104 = HEAP32[$103 >> 2] | 0;
   if ($104 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$104 >> 2] = $102;
    HEAP32[$103 >> 2] = $104 + 4;
    $$pre$phi469Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi469Z2D = $3;
   }
   $110 = HEAP32[$$pre$phi469Z2D >> 2] | 0;
   HEAP32[$$pre$phi469Z2D >> 2] = 0;
   if ($110 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$110 >> 2] | 0) + 4 >> 2] & 255]($110);
   STACKTOP = sp;
   return;
  }
 case 116:
  {
   $115 = __Znwm(12) | 0;
   $116 = $2;
   $121 = HEAP32[$116 + 4 >> 2] | 0;
   $123 = $115 + 4 | 0;
   HEAP32[$123 >> 2] = HEAP32[$116 >> 2];
   HEAP32[$123 + 4 >> 2] = $121;
   HEAP32[$115 >> 2] = 10136;
   $127 = $115;
   HEAP32[$3 >> 2] = $127;
   $128 = $0 + 92 | 0;
   $129 = HEAP32[$128 >> 2] | 0;
   if ($129 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$129 >> 2] = $127;
    HEAP32[$128 >> 2] = $129 + 4;
    $$pre$phi471Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi471Z2D = $3;
   }
   $135 = HEAP32[$$pre$phi471Z2D >> 2] | 0;
   HEAP32[$$pre$phi471Z2D >> 2] = 0;
   if ($135 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$135 >> 2] | 0) + 4 >> 2] & 255]($135);
   STACKTOP = sp;
   return;
  }
 case 118:
  {
   $140 = __Znwm(12) | 0;
   $141 = $2;
   $146 = HEAP32[$141 + 4 >> 2] | 0;
   $148 = $140 + 4 | 0;
   HEAP32[$148 >> 2] = HEAP32[$141 >> 2];
   HEAP32[$148 + 4 >> 2] = $146;
   HEAP32[$140 >> 2] = 10156;
   $152 = $140;
   HEAP32[$3 >> 2] = $152;
   $153 = $0 + 92 | 0;
   $154 = HEAP32[$153 >> 2] | 0;
   if ($154 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$154 >> 2] = $152;
    HEAP32[$153 >> 2] = $154 + 4;
    $$pre$phi473Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi473Z2D = $3;
   }
   $160 = HEAP32[$$pre$phi473Z2D >> 2] | 0;
   HEAP32[$$pre$phi473Z2D >> 2] = 0;
   if ($160 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$160 >> 2] | 0) + 4 >> 2] & 255]($160);
   STACKTOP = sp;
   return;
  }
 case 97:
  {
   $165 = __Znwm(12) | 0;
   $166 = $2;
   $171 = HEAP32[$166 + 4 >> 2] | 0;
   $173 = $165 + 4 | 0;
   HEAP32[$173 >> 2] = HEAP32[$166 >> 2];
   HEAP32[$173 + 4 >> 2] = $171;
   HEAP32[$165 >> 2] = 10176;
   $177 = $165;
   HEAP32[$3 >> 2] = $177;
   $178 = $0 + 92 | 0;
   $179 = HEAP32[$178 >> 2] | 0;
   if ($179 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$179 >> 2] = $177;
    HEAP32[$178 >> 2] = $179 + 4;
    $$pre$phi475Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi475Z2D = $3;
   }
   $185 = HEAP32[$$pre$phi475Z2D >> 2] | 0;
   HEAP32[$$pre$phi475Z2D >> 2] = 0;
   if ($185 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$185 >> 2] | 0) + 4 >> 2] & 255]($185);
   STACKTOP = sp;
   return;
  }
 case 65:
  {
   $190 = __Znwm(12) | 0;
   $191 = $2;
   $196 = HEAP32[$191 + 4 >> 2] | 0;
   $198 = $190 + 4 | 0;
   HEAP32[$198 >> 2] = HEAP32[$191 >> 2];
   HEAP32[$198 + 4 >> 2] = $196;
   HEAP32[$190 >> 2] = 10196;
   $202 = $190;
   HEAP32[$3 >> 2] = $202;
   $203 = $0 + 92 | 0;
   $204 = HEAP32[$203 >> 2] | 0;
   if ($204 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$204 >> 2] = $202;
    HEAP32[$203 >> 2] = $204 + 4;
    $$pre$phi477Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi477Z2D = $3;
   }
   $210 = HEAP32[$$pre$phi477Z2D >> 2] | 0;
   HEAP32[$$pre$phi477Z2D >> 2] = 0;
   if ($210 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$210 >> 2] | 0) + 4 >> 2] & 255]($210);
   STACKTOP = sp;
   return;
  }
 case 104:
 case 98:
  {
   $215 = __Znwm(12) | 0;
   $216 = $2;
   $221 = HEAP32[$216 + 4 >> 2] | 0;
   $223 = $215 + 4 | 0;
   HEAP32[$223 >> 2] = HEAP32[$216 >> 2];
   HEAP32[$223 + 4 >> 2] = $221;
   HEAP32[$215 >> 2] = 10216;
   $227 = $215;
   HEAP32[$3 >> 2] = $227;
   $228 = $0 + 92 | 0;
   $229 = HEAP32[$228 >> 2] | 0;
   if ($229 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$229 >> 2] = $227;
    HEAP32[$228 >> 2] = $229 + 4;
    $$pre$phi479Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi479Z2D = $3;
   }
   $235 = HEAP32[$$pre$phi479Z2D >> 2] | 0;
   HEAP32[$$pre$phi479Z2D >> 2] = 0;
   if ($235 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$235 >> 2] | 0) + 4 >> 2] & 255]($235);
   STACKTOP = sp;
   return;
  }
 case 66:
  {
   $240 = __Znwm(12) | 0;
   $241 = $2;
   $246 = HEAP32[$241 + 4 >> 2] | 0;
   $248 = $240 + 4 | 0;
   HEAP32[$248 >> 2] = HEAP32[$241 >> 2];
   HEAP32[$248 + 4 >> 2] = $246;
   HEAP32[$240 >> 2] = 10236;
   $252 = $240;
   HEAP32[$3 >> 2] = $252;
   $253 = $0 + 92 | 0;
   $254 = HEAP32[$253 >> 2] | 0;
   if ($254 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$254 >> 2] = $252;
    HEAP32[$253 >> 2] = $254 + 4;
    $$pre$phi481Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi481Z2D = $3;
   }
   $260 = HEAP32[$$pre$phi481Z2D >> 2] | 0;
   HEAP32[$$pre$phi481Z2D >> 2] = 0;
   if ($260 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$260 >> 2] | 0) + 4 >> 2] & 255]($260);
   STACKTOP = sp;
   return;
  }
 case 99:
  {
   $265 = __Znwm(12) | 0;
   $266 = $2;
   $271 = HEAP32[$266 + 4 >> 2] | 0;
   $273 = $265 + 4 | 0;
   HEAP32[$273 >> 2] = HEAP32[$266 >> 2];
   HEAP32[$273 + 4 >> 2] = $271;
   HEAP32[$265 >> 2] = 10256;
   $277 = $265;
   HEAP32[$3 >> 2] = $277;
   $278 = $0 + 92 | 0;
   $279 = HEAP32[$278 >> 2] | 0;
   if ($279 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$279 >> 2] = $277;
    HEAP32[$278 >> 2] = $279 + 4;
    $$pre$phi483Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi483Z2D = $3;
   }
   $285 = HEAP32[$$pre$phi483Z2D >> 2] | 0;
   HEAP32[$$pre$phi483Z2D >> 2] = 0;
   if ($285 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$285 >> 2] | 0) + 4 >> 2] & 255]($285);
   STACKTOP = sp;
   return;
  }
 case 67:
  {
   $290 = __Znwm(12) | 0;
   $291 = $2;
   $296 = HEAP32[$291 + 4 >> 2] | 0;
   $298 = $290 + 4 | 0;
   HEAP32[$298 >> 2] = HEAP32[$291 >> 2];
   HEAP32[$298 + 4 >> 2] = $296;
   HEAP32[$290 >> 2] = 10276;
   $302 = $290;
   HEAP32[$3 >> 2] = $302;
   $303 = $0 + 92 | 0;
   $304 = HEAP32[$303 >> 2] | 0;
   if ($304 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$304 >> 2] = $302;
    HEAP32[$303 >> 2] = $304 + 4;
    $$pre$phi485Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi485Z2D = $3;
   }
   $310 = HEAP32[$$pre$phi485Z2D >> 2] | 0;
   HEAP32[$$pre$phi485Z2D >> 2] = 0;
   if ($310 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$310 >> 2] | 0) + 4 >> 2] & 255]($310);
   STACKTOP = sp;
   return;
  }
 case 89:
  {
   $315 = __Znwm(12) | 0;
   $316 = $2;
   $321 = HEAP32[$316 + 4 >> 2] | 0;
   $323 = $315 + 4 | 0;
   HEAP32[$323 >> 2] = HEAP32[$316 >> 2];
   HEAP32[$323 + 4 >> 2] = $321;
   HEAP32[$315 >> 2] = 10296;
   $327 = $315;
   HEAP32[$3 >> 2] = $327;
   $328 = $0 + 92 | 0;
   $329 = HEAP32[$328 >> 2] | 0;
   if ($329 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$329 >> 2] = $327;
    HEAP32[$328 >> 2] = $329 + 4;
    $$pre$phi487Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi487Z2D = $3;
   }
   $335 = HEAP32[$$pre$phi487Z2D >> 2] | 0;
   HEAP32[$$pre$phi487Z2D >> 2] = 0;
   if ($335 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$335 >> 2] | 0) + 4 >> 2] & 255]($335);
   STACKTOP = sp;
   return;
  }
 case 120:
 case 68:
  {
   $340 = __Znwm(12) | 0;
   $341 = $2;
   $346 = HEAP32[$341 + 4 >> 2] | 0;
   $348 = $340 + 4 | 0;
   HEAP32[$348 >> 2] = HEAP32[$341 >> 2];
   HEAP32[$348 + 4 >> 2] = $346;
   HEAP32[$340 >> 2] = 10316;
   $352 = $340;
   HEAP32[$3 >> 2] = $352;
   $353 = $0 + 92 | 0;
   $354 = HEAP32[$353 >> 2] | 0;
   if ($354 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$354 >> 2] = $352;
    HEAP32[$353 >> 2] = $354 + 4;
    $$pre$phi489Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi489Z2D = $3;
   }
   $360 = HEAP32[$$pre$phi489Z2D >> 2] | 0;
   HEAP32[$$pre$phi489Z2D >> 2] = 0;
   if ($360 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$360 >> 2] | 0) + 4 >> 2] & 255]($360);
   STACKTOP = sp;
   return;
  }
 case 109:
  {
   $365 = __Znwm(12) | 0;
   $366 = $2;
   $371 = HEAP32[$366 + 4 >> 2] | 0;
   $373 = $365 + 4 | 0;
   HEAP32[$373 >> 2] = HEAP32[$366 >> 2];
   HEAP32[$373 + 4 >> 2] = $371;
   HEAP32[$365 >> 2] = 10336;
   $377 = $365;
   HEAP32[$3 >> 2] = $377;
   $378 = $0 + 92 | 0;
   $379 = HEAP32[$378 >> 2] | 0;
   if ($379 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$379 >> 2] = $377;
    HEAP32[$378 >> 2] = $379 + 4;
    $$pre$phi491Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi491Z2D = $3;
   }
   $385 = HEAP32[$$pre$phi491Z2D >> 2] | 0;
   HEAP32[$$pre$phi491Z2D >> 2] = 0;
   if ($385 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$385 >> 2] | 0) + 4 >> 2] & 255]($385);
   STACKTOP = sp;
   return;
  }
 case 100:
  {
   $390 = __Znwm(12) | 0;
   $391 = $2;
   $396 = HEAP32[$391 + 4 >> 2] | 0;
   $398 = $390 + 4 | 0;
   HEAP32[$398 >> 2] = HEAP32[$391 >> 2];
   HEAP32[$398 + 4 >> 2] = $396;
   HEAP32[$390 >> 2] = 10356;
   $402 = $390;
   HEAP32[$3 >> 2] = $402;
   $403 = $0 + 92 | 0;
   $404 = HEAP32[$403 >> 2] | 0;
   if ($404 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$404 >> 2] = $402;
    HEAP32[$403 >> 2] = $404 + 4;
    $$pre$phi493Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi493Z2D = $3;
   }
   $410 = HEAP32[$$pre$phi493Z2D >> 2] | 0;
   HEAP32[$$pre$phi493Z2D >> 2] = 0;
   if ($410 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$410 >> 2] | 0) + 4 >> 2] & 255]($410);
   STACKTOP = sp;
   return;
  }
 case 72:
  {
   $415 = __Znwm(12) | 0;
   $416 = $2;
   $421 = HEAP32[$416 + 4 >> 2] | 0;
   $423 = $415 + 4 | 0;
   HEAP32[$423 >> 2] = HEAP32[$416 >> 2];
   HEAP32[$423 + 4 >> 2] = $421;
   HEAP32[$415 >> 2] = 10376;
   $427 = $415;
   HEAP32[$3 >> 2] = $427;
   $428 = $0 + 92 | 0;
   $429 = HEAP32[$428 >> 2] | 0;
   if ($429 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$429 >> 2] = $427;
    HEAP32[$428 >> 2] = $429 + 4;
    $$pre$phi495Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi495Z2D = $3;
   }
   $435 = HEAP32[$$pre$phi495Z2D >> 2] | 0;
   HEAP32[$$pre$phi495Z2D >> 2] = 0;
   if ($435 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$435 >> 2] | 0) + 4 >> 2] & 255]($435);
   STACKTOP = sp;
   return;
  }
 case 73:
  {
   $440 = __Znwm(12) | 0;
   $441 = $2;
   $446 = HEAP32[$441 + 4 >> 2] | 0;
   $448 = $440 + 4 | 0;
   HEAP32[$448 >> 2] = HEAP32[$441 >> 2];
   HEAP32[$448 + 4 >> 2] = $446;
   HEAP32[$440 >> 2] = 10396;
   $452 = $440;
   HEAP32[$3 >> 2] = $452;
   $453 = $0 + 92 | 0;
   $454 = HEAP32[$453 >> 2] | 0;
   if ($454 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$454 >> 2] = $452;
    HEAP32[$453 >> 2] = $454 + 4;
    $$pre$phi497Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi497Z2D = $3;
   }
   $460 = HEAP32[$$pre$phi497Z2D >> 2] | 0;
   HEAP32[$$pre$phi497Z2D >> 2] = 0;
   if ($460 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$460 >> 2] | 0) + 4 >> 2] & 255]($460);
   STACKTOP = sp;
   return;
  }
 case 77:
  {
   $465 = __Znwm(12) | 0;
   $466 = $2;
   $471 = HEAP32[$466 + 4 >> 2] | 0;
   $473 = $465 + 4 | 0;
   HEAP32[$473 >> 2] = HEAP32[$466 >> 2];
   HEAP32[$473 + 4 >> 2] = $471;
   HEAP32[$465 >> 2] = 10416;
   $477 = $465;
   HEAP32[$3 >> 2] = $477;
   $478 = $0 + 92 | 0;
   $479 = HEAP32[$478 >> 2] | 0;
   if ($479 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$479 >> 2] = $477;
    HEAP32[$478 >> 2] = $479 + 4;
    $$pre$phi499Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi499Z2D = $3;
   }
   $485 = HEAP32[$$pre$phi499Z2D >> 2] | 0;
   HEAP32[$$pre$phi499Z2D >> 2] = 0;
   if ($485 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$485 >> 2] | 0) + 4 >> 2] & 255]($485);
   STACKTOP = sp;
   return;
  }
 case 83:
  {
   $490 = __Znwm(12) | 0;
   $491 = $2;
   $496 = HEAP32[$491 + 4 >> 2] | 0;
   $498 = $490 + 4 | 0;
   HEAP32[$498 >> 2] = HEAP32[$491 >> 2];
   HEAP32[$498 + 4 >> 2] = $496;
   HEAP32[$490 >> 2] = 10436;
   $502 = $490;
   HEAP32[$3 >> 2] = $502;
   $503 = $0 + 92 | 0;
   $504 = HEAP32[$503 >> 2] | 0;
   if ($504 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$504 >> 2] = $502;
    HEAP32[$503 >> 2] = $504 + 4;
    $$pre$phi501Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi501Z2D = $3;
   }
   $510 = HEAP32[$$pre$phi501Z2D >> 2] | 0;
   HEAP32[$$pre$phi501Z2D >> 2] = 0;
   if ($510 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$510 >> 2] | 0) + 4 >> 2] & 255]($510);
   STACKTOP = sp;
   return;
  }
 case 101:
  {
   $515 = __Znwm(12) | 0;
   $516 = $2;
   $521 = HEAP32[$516 + 4 >> 2] | 0;
   $523 = $515 + 4 | 0;
   HEAP32[$523 >> 2] = HEAP32[$516 >> 2];
   HEAP32[$523 + 4 >> 2] = $521;
   HEAP32[$515 >> 2] = 10456;
   $527 = $515;
   HEAP32[$3 >> 2] = $527;
   $528 = $0 + 92 | 0;
   $529 = HEAP32[$528 >> 2] | 0;
   if ($529 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$529 >> 2] = $527;
    HEAP32[$528 >> 2] = $529 + 4;
    $$pre$phi503Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi503Z2D = $3;
   }
   $535 = HEAP32[$$pre$phi503Z2D >> 2] | 0;
   HEAP32[$$pre$phi503Z2D >> 2] = 0;
   if ($535 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$535 >> 2] | 0) + 4 >> 2] & 255]($535);
   STACKTOP = sp;
   return;
  }
 case 102:
  {
   $540 = __Znwm(12) | 0;
   $541 = $2;
   $546 = HEAP32[$541 + 4 >> 2] | 0;
   $548 = $540 + 4 | 0;
   HEAP32[$548 >> 2] = HEAP32[$541 >> 2];
   HEAP32[$548 + 4 >> 2] = $546;
   HEAP32[$540 >> 2] = 10476;
   $552 = $540;
   HEAP32[$3 >> 2] = $552;
   $553 = $0 + 92 | 0;
   $554 = HEAP32[$553 >> 2] | 0;
   if ($554 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$554 >> 2] = $552;
    HEAP32[$553 >> 2] = $554 + 4;
    $$pre$phi505Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi505Z2D = $3;
   }
   $560 = HEAP32[$$pre$phi505Z2D >> 2] | 0;
   HEAP32[$$pre$phi505Z2D >> 2] = 0;
   if ($560 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$560 >> 2] | 0) + 4 >> 2] & 255]($560);
   STACKTOP = sp;
   return;
  }
 case 70:
  {
   $565 = __Znwm(12) | 0;
   $566 = $2;
   $571 = HEAP32[$566 + 4 >> 2] | 0;
   $573 = $565 + 4 | 0;
   HEAP32[$573 >> 2] = HEAP32[$566 >> 2];
   HEAP32[$573 + 4 >> 2] = $571;
   HEAP32[$565 >> 2] = 10496;
   $577 = $565;
   HEAP32[$3 >> 2] = $577;
   $578 = $0 + 92 | 0;
   $579 = HEAP32[$578 >> 2] | 0;
   if ($579 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$579 >> 2] = $577;
    HEAP32[$578 >> 2] = $579 + 4;
    $$pre$phi507Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi507Z2D = $3;
   }
   $585 = HEAP32[$$pre$phi507Z2D >> 2] | 0;
   HEAP32[$$pre$phi507Z2D >> 2] = 0;
   if ($585 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$585 >> 2] | 0) + 4 >> 2] & 255]($585);
   STACKTOP = sp;
   return;
  }
 case 69:
  {
   $590 = __Znwm(12) | 0;
   $591 = $2;
   $596 = HEAP32[$591 + 4 >> 2] | 0;
   $598 = $590 + 4 | 0;
   HEAP32[$598 >> 2] = HEAP32[$591 >> 2];
   HEAP32[$598 + 4 >> 2] = $596;
   HEAP32[$590 >> 2] = 10516;
   $602 = $590;
   HEAP32[$3 >> 2] = $602;
   $603 = $0 + 92 | 0;
   $604 = HEAP32[$603 >> 2] | 0;
   if ($604 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$604 >> 2] = $602;
    HEAP32[$603 >> 2] = $604 + 4;
    $$pre$phi509Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi509Z2D = $3;
   }
   $610 = HEAP32[$$pre$phi509Z2D >> 2] | 0;
   HEAP32[$$pre$phi509Z2D >> 2] = 0;
   if ($610 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$610 >> 2] | 0) + 4 >> 2] & 255]($610);
   STACKTOP = sp;
   return;
  }
 case 112:
  {
   $615 = __Znwm(12) | 0;
   $616 = $2;
   $621 = HEAP32[$616 + 4 >> 2] | 0;
   $623 = $615 + 4 | 0;
   HEAP32[$623 >> 2] = HEAP32[$616 >> 2];
   HEAP32[$623 + 4 >> 2] = $621;
   HEAP32[$615 >> 2] = 10536;
   $627 = $615;
   HEAP32[$3 >> 2] = $627;
   $628 = $0 + 92 | 0;
   $629 = HEAP32[$628 >> 2] | 0;
   if ($629 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$629 >> 2] = $627;
    HEAP32[$628 >> 2] = $629 + 4;
    $$pre$phi511Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi511Z2D = $3;
   }
   $635 = HEAP32[$$pre$phi511Z2D >> 2] | 0;
   HEAP32[$$pre$phi511Z2D >> 2] = 0;
   if ($635 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$635 >> 2] | 0) + 4 >> 2] & 255]($635);
   STACKTOP = sp;
   return;
  }
 case 114:
  {
   $640 = __Znwm(12) | 0;
   $641 = $2;
   $646 = HEAP32[$641 + 4 >> 2] | 0;
   $648 = $640 + 4 | 0;
   HEAP32[$648 >> 2] = HEAP32[$641 >> 2];
   HEAP32[$648 + 4 >> 2] = $646;
   HEAP32[$640 >> 2] = 10556;
   $652 = $640;
   HEAP32[$3 >> 2] = $652;
   $653 = $0 + 92 | 0;
   $654 = HEAP32[$653 >> 2] | 0;
   if ($654 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$654 >> 2] = $652;
    HEAP32[$653 >> 2] = $654 + 4;
    $$pre$phi513Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi513Z2D = $3;
   }
   $660 = HEAP32[$$pre$phi513Z2D >> 2] | 0;
   HEAP32[$$pre$phi513Z2D >> 2] = 0;
   if ($660 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$660 >> 2] | 0) + 4 >> 2] & 255]($660);
   STACKTOP = sp;
   return;
  }
 case 82:
  {
   $665 = __Znwm(12) | 0;
   $666 = $2;
   $671 = HEAP32[$666 + 4 >> 2] | 0;
   $673 = $665 + 4 | 0;
   HEAP32[$673 >> 2] = HEAP32[$666 >> 2];
   HEAP32[$673 + 4 >> 2] = $671;
   HEAP32[$665 >> 2] = 10576;
   $677 = $665;
   HEAP32[$3 >> 2] = $677;
   $678 = $0 + 92 | 0;
   $679 = HEAP32[$678 >> 2] | 0;
   if ($679 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$679 >> 2] = $677;
    HEAP32[$678 >> 2] = $679 + 4;
    $$pre$phi515Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi515Z2D = $3;
   }
   $685 = HEAP32[$$pre$phi515Z2D >> 2] | 0;
   HEAP32[$$pre$phi515Z2D >> 2] = 0;
   if ($685 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$685 >> 2] | 0) + 4 >> 2] & 255]($685);
   STACKTOP = sp;
   return;
  }
 case 88:
 case 84:
  {
   $690 = __Znwm(12) | 0;
   $691 = $2;
   $696 = HEAP32[$691 + 4 >> 2] | 0;
   $698 = $690 + 4 | 0;
   HEAP32[$698 >> 2] = HEAP32[$691 >> 2];
   HEAP32[$698 + 4 >> 2] = $696;
   HEAP32[$690 >> 2] = 10596;
   $702 = $690;
   HEAP32[$3 >> 2] = $702;
   $703 = $0 + 92 | 0;
   $704 = HEAP32[$703 >> 2] | 0;
   if ($704 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$704 >> 2] = $702;
    HEAP32[$703 >> 2] = $704 + 4;
    $$pre$phi517Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi517Z2D = $3;
   }
   $710 = HEAP32[$$pre$phi517Z2D >> 2] | 0;
   HEAP32[$$pre$phi517Z2D >> 2] = 0;
   if ($710 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$710 >> 2] | 0) + 4 >> 2] & 255]($710);
   STACKTOP = sp;
   return;
  }
 case 122:
  {
   $715 = __Znwm(32) | 0;
   $716 = $2;
   $721 = HEAP32[$716 + 4 >> 2] | 0;
   $723 = $715 + 4 | 0;
   HEAP32[$723 >> 2] = HEAP32[$716 >> 2];
   HEAP32[$723 + 4 >> 2] = $721;
   HEAP32[$715 >> 2] = 10616;
   $728 = $715 + 16 | 0;
   HEAP32[$728 >> 2] = 5;
   HEAP32[$728 + 4 >> 2] = 0;
   $733 = $715 + 24 | 0;
   HEAP32[$733 >> 2] = 0;
   HEAP32[$733 + 4 >> 2] = 0;
   $737 = $715;
   HEAP32[$3 >> 2] = $737;
   $738 = $0 + 92 | 0;
   $739 = HEAP32[$738 >> 2] | 0;
   if ($739 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$739 >> 2] = $737;
    HEAP32[$738 >> 2] = $739 + 4;
    $$pre$phi519Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi519Z2D = $3;
   }
   $745 = HEAP32[$$pre$phi519Z2D >> 2] | 0;
   HEAP32[$$pre$phi519Z2D >> 2] = 0;
   if ($745 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$745 >> 2] | 0) + 4 >> 2] & 255]($745);
   STACKTOP = sp;
   return;
  }
 case 80:
  {
   $750 = __Znwm(12) | 0;
   $751 = $2;
   $756 = HEAP32[$751 + 4 >> 2] | 0;
   $758 = $750 + 4 | 0;
   HEAP32[$758 >> 2] = HEAP32[$751 >> 2];
   HEAP32[$758 + 4 >> 2] = $756;
   HEAP32[$750 >> 2] = 10636;
   $762 = $750;
   HEAP32[$3 >> 2] = $762;
   $763 = $0 + 92 | 0;
   $764 = HEAP32[$763 >> 2] | 0;
   if ($764 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$764 >> 2] = $762;
    HEAP32[$763 >> 2] = $764 + 4;
    $$pre$phi521Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi521Z2D = $3;
   }
   $770 = HEAP32[$$pre$phi521Z2D >> 2] | 0;
   HEAP32[$$pre$phi521Z2D >> 2] = 0;
   if ($770 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$770 >> 2] | 0) + 4 >> 2] & 255]($770);
   STACKTOP = sp;
   return;
  }
 case 94:
  {
   $775 = __Znwm(12) | 0;
   $776 = $2;
   $781 = HEAP32[$776 + 4 >> 2] | 0;
   $783 = $775 + 4 | 0;
   HEAP32[$783 >> 2] = HEAP32[$776 >> 2];
   HEAP32[$783 + 4 >> 2] = $781;
   HEAP32[$775 >> 2] = 10656;
   $787 = $775;
   HEAP32[$3 >> 2] = $787;
   $788 = $0 + 92 | 0;
   $789 = HEAP32[$788 >> 2] | 0;
   if ($789 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$789 >> 2] = $787;
    HEAP32[$788 >> 2] = $789 + 4;
    $$pre$phi523Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi523Z2D = $3;
   }
   $795 = HEAP32[$$pre$phi523Z2D >> 2] | 0;
   HEAP32[$$pre$phi523Z2D >> 2] = 0;
   if ($795 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$795 >> 2] | 0) + 4 >> 2] & 255]($795);
   STACKTOP = sp;
   return;
  }
 case 36:
  {
   $800 = __Znwm(12) | 0;
   $801 = $2;
   $806 = HEAP32[$801 + 4 >> 2] | 0;
   $808 = $800 + 4 | 0;
   HEAP32[$808 >> 2] = HEAP32[$801 >> 2];
   HEAP32[$808 + 4 >> 2] = $806;
   HEAP32[$800 >> 2] = 10676;
   $812 = $800;
   HEAP32[$3 >> 2] = $812;
   $813 = $0 + 92 | 0;
   $814 = HEAP32[$813 >> 2] | 0;
   if ($814 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$814 >> 2] = $812;
    HEAP32[$813 >> 2] = $814 + 4;
    $$pre$phi525Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi525Z2D = $3;
   }
   $820 = HEAP32[$$pre$phi525Z2D >> 2] | 0;
   HEAP32[$$pre$phi525Z2D >> 2] = 0;
   if ($820 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$820 >> 2] | 0) + 4 >> 2] & 255]($820);
   STACKTOP = sp;
   return;
  }
 case 64:
  {
   $825 = __Znwm(12) | 0;
   $826 = $2;
   $831 = HEAP32[$826 + 4 >> 2] | 0;
   $833 = $825 + 4 | 0;
   HEAP32[$833 >> 2] = HEAP32[$826 >> 2];
   HEAP32[$833 + 4 >> 2] = $831;
   HEAP32[$825 >> 2] = 10696;
   $837 = $825;
   HEAP32[$3 >> 2] = $837;
   $838 = $0 + 92 | 0;
   $839 = HEAP32[$838 >> 2] | 0;
   if ($839 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$839 >> 2] = $837;
    HEAP32[$838 >> 2] = $839 + 4;
    $$pre$phi527Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi527Z2D = $3;
   }
   $845 = HEAP32[$$pre$phi527Z2D >> 2] | 0;
   HEAP32[$$pre$phi527Z2D >> 2] = 0;
   if ($845 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$845 >> 2] | 0) + 4 >> 2] & 255]($845);
   STACKTOP = sp;
   return;
  }
 case 115:
  {
   $850 = __Znwm(12) | 0;
   $851 = $2;
   $856 = HEAP32[$851 + 4 >> 2] | 0;
   $858 = $850 + 4 | 0;
   HEAP32[$858 >> 2] = HEAP32[$851 >> 2];
   HEAP32[$858 + 4 >> 2] = $856;
   HEAP32[$850 >> 2] = 10716;
   $862 = $850;
   HEAP32[$3 >> 2] = $862;
   $863 = $0 + 92 | 0;
   $864 = HEAP32[$863 >> 2] | 0;
   if ($864 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$864 >> 2] = $862;
    HEAP32[$863 >> 2] = $864 + 4;
    $$pre$phi529Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi529Z2D = $3;
   }
   $870 = HEAP32[$$pre$phi529Z2D >> 2] | 0;
   HEAP32[$$pre$phi529Z2D >> 2] = 0;
   if ($870 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$870 >> 2] | 0) + 4 >> 2] & 255]($870);
   STACKTOP = sp;
   return;
  }
 case 35:
  {
   $875 = __Znwm(12) | 0;
   $876 = $2;
   $881 = HEAP32[$876 + 4 >> 2] | 0;
   $883 = $875 + 4 | 0;
   HEAP32[$883 >> 2] = HEAP32[$876 >> 2];
   HEAP32[$883 + 4 >> 2] = $881;
   HEAP32[$875 >> 2] = 10736;
   $887 = $875;
   HEAP32[$3 >> 2] = $887;
   $888 = $0 + 92 | 0;
   $889 = HEAP32[$888 >> 2] | 0;
   if ($889 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$889 >> 2] = $887;
    HEAP32[$888 >> 2] = $889 + 4;
    $$pre$phi531Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi531Z2D = $3;
   }
   $895 = HEAP32[$$pre$phi531Z2D >> 2] | 0;
   HEAP32[$$pre$phi531Z2D >> 2] = 0;
   if ($895 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$895 >> 2] | 0) + 4 >> 2] & 255]($895);
   STACKTOP = sp;
   return;
  }
 case 33:
  {
   $900 = __Znwm(12) | 0;
   $901 = $2;
   $906 = HEAP32[$901 + 4 >> 2] | 0;
   $908 = $900 + 4 | 0;
   HEAP32[$908 >> 2] = HEAP32[$901 >> 2];
   HEAP32[$908 + 4 >> 2] = $906;
   HEAP32[$900 >> 2] = 10756;
   $912 = $900;
   HEAP32[$3 >> 2] = $912;
   $913 = $0 + 92 | 0;
   $914 = HEAP32[$913 >> 2] | 0;
   if ($914 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$914 >> 2] = $912;
    HEAP32[$913 >> 2] = $914 + 4;
    $$pre$phi533Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi533Z2D = $3;
   }
   $920 = HEAP32[$$pre$phi533Z2D >> 2] | 0;
   HEAP32[$$pre$phi533Z2D >> 2] = 0;
   if ($920 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$920 >> 2] | 0) + 4 >> 2] & 255]($920);
   STACKTOP = sp;
   return;
  }
 case 37:
  {
   $925 = __Znwm(16) | 0;
   HEAP32[$925 + 4 >> 2] = 0;
   HEAP32[$925 + 8 >> 2] = 0;
   HEAP32[$925 >> 2] = 10776;
   HEAP8[$925 + 12 >> 0] = 37;
   $929 = $925;
   HEAP32[$3 >> 2] = $929;
   $930 = $0 + 92 | 0;
   $931 = HEAP32[$930 >> 2] | 0;
   if ($931 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$931 >> 2] = $929;
    HEAP32[$930 >> 2] = $931 + 4;
    $$pre$phi535Z2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phi535Z2D = $3;
   }
   $937 = HEAP32[$$pre$phi535Z2D >> 2] | 0;
   HEAP32[$$pre$phi535Z2D >> 2] = 0;
   if ($937 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$937 >> 2] | 0) + 4 >> 2] & 255]($937);
   STACKTOP = sp;
   return;
  }
 default:
  {
   $942 = __Znwm(24) | 0;
   HEAP32[$942 >> 2] = 0;
   HEAP32[$942 + 4 >> 2] = 0;
   HEAP32[$942 + 8 >> 2] = 0;
   HEAP32[$942 + 12 >> 2] = 0;
   HEAP32[$942 + 16 >> 2] = 0;
   HEAP32[$942 + 20 >> 2] = 0;
   HEAP32[$942 >> 2] = 10056;
   $943 = $942 + 12 | 0;
   HEAP32[$943 >> 2] = 0;
   HEAP32[$943 + 4 >> 2] = 0;
   HEAP32[$943 + 8 >> 2] = 0;
   $944 = $942;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($943, 37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($943, $1);
   HEAP32[$3 >> 2] = $944;
   $945 = $0 + 92 | 0;
   $946 = HEAP32[$945 >> 2] | 0;
   if ($946 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$946 >> 2] = $944;
    HEAP32[$945 >> 2] = $946 + 4;
    $$pre$phiZ2D = $3;
   } else {
    __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0 + 88 | 0, $3);
    $$pre$phiZ2D = $3;
   }
   $952 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   HEAP32[$$pre$phiZ2D >> 2] = 0;
   if ($952 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$952 >> 2] | 0) + 4 >> 2] & 255]($952);
   STACKTOP = sp;
   return;
  }
 } while (0);
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i161 = 0, $$0$i$i$i$i205 = 0, $$0$i$i$i$i221 = 0, $$0$i$i$i$i237 = 0, $$0$i$i$i$i254 = 0, $$0$i$i$i$i269 = 0, $$0$i$i147 = 0, $$0$i$i150 = 0, $$0$i$i153 = 0, $$0$i$i156 = 0, $$0$i$i159 = 0, $$0$i$i160 = 0, $$0$i$i173 = 0, $$0$i$i176 = 0, $$0$i$i182 = 0, $$0$i$i189 = 0, $$0$i$i194 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i167 = 0, $$0$i$i2$i$i211 = 0, $$0$i$i2$i$i227 = 0, $$0$i$i2$i$i243 = 0, $$0$i$i2$i$i260 = 0, $$0$i$i2$i$i275 = 0, $$0$i$i202 = 0, $$0$i$i233 = 0, $$0$i$i249 = 0, $$0$i$i266 = 0, $$0$i$i281 = 0, $$0$i$i284 = 0, $$0124 = 0, $$0129 = 0, $$0131 = 0, $$10 = 0, $$1130 = 0, $$2126$ph = 0, $$pre$phiZ2D = 0, $$sroa$0293$0$ptr = 0, $$sroa$0313$0 = 0, $$sroa$0313$1 = 0, $$sroa$08$0$ptr$i = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $125 = 0, $128 = 0, $13 = 0, $14 = 0, $140 = 0, $143 = 0, $15 = 0, $155 = 0, $157 = 0, $16 = 0, $17 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $189 = 0, $19 = 0, $193 = 0, $194 = 0, $198 = 0, $20 = 0, $201 = 0, $203 = 0, $205 = 0, $208 = 0, $21 = 0, $215 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $23 = 0, $233 = 0, $24 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $256 = 0, $275 = 0, $276 = 0, $277 = 0, $280 = 0, $286 = 0, $305 = 0, $306 = 0, $307 = 0, $316 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $346 = 0, $347 = 0, $349 = 0, $350 = 0, $351 = 0, $353 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $372 = 0, $375 = 0, $379 = 0, $386 = 0, $387 = 0, $390 = 0, $395 = 0, $398 = 0, $40 = 0, $41 = 0, $410 = 0, $413 = 0, $42 = 0, $425 = 0, $427 = 0, $43 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $45 = 0, $452 = 0, $453 = 0, $46 = 0, $463 = 0, $466 = 0, $478 = 0, $48 = 0, $481 = 0, $49 = 0, $493 = 0, $495 = 0, $50 = 0, $505 = 0, $51 = 0, $513 = 0, $517 = 0, $519 = 0, $52 = 0, $528 = 0, $53 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $545 = 0, $55 = 0, $551 = 0, $554 = 0, $557 = 0, $569 = 0, $572 = 0, $58 = 0, $584 = 0, $586 = 0, $601 = 0, $602 = 0, $603 = 0, $614 = 0, $617 = 0, $629 = 0, $632 = 0, $644 = 0, $646 = 0, $669 = 0, $671 = 0, $682 = 0, $686 = 0, $687 = 0, $688 = 0, $70 = 0, $704 = 0, $705 = 0, $706 = 0, $711 = 0, $712 = 0, $715 = 0, $727 = 0, $73 = 0, $730 = 0, $742 = 0, $744 = 0, $759 = 0, $765 = 0, $766 = 0, $767 = 0, $776 = 0, $777 = 0, $783 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $88 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $11 = sp + 488 | 0;
 $12 = sp;
 $13 = sp + 480 | 0;
 $14 = sp + 472 | 0;
 $15 = sp + 468 | 0;
 $16 = sp + 496 | 0;
 $17 = sp + 493 | 0;
 $18 = sp + 492 | 0;
 $19 = sp + 456 | 0;
 $20 = sp + 444 | 0;
 $21 = sp + 432 | 0;
 $22 = sp + 420 | 0;
 $23 = sp + 408 | 0;
 $24 = sp + 404 | 0;
 $25 = sp + 400 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$13 + 4 >> 2] = 234;
 HEAP32[$14 >> 2] = $12;
 HEAP32[$15 >> 2] = $12 + 400;
 HEAP32[$19 >> 2] = 0;
 HEAP32[$19 + 4 >> 2] = 0;
 HEAP32[$19 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$19 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$20 + 8 >> 2] = 0;
 $$0$i$i147 = 0;
 while (1) {
  if (($$0$i$i147 | 0) == 3) break;
  HEAP32[$20 + ($$0$i$i147 << 2) >> 2] = 0;
  $$0$i$i147 = $$0$i$i147 + 1 | 0;
 }
 HEAP32[$21 >> 2] = 0;
 HEAP32[$21 + 4 >> 2] = 0;
 HEAP32[$21 + 8 >> 2] = 0;
 $$0$i$i150 = 0;
 while (1) {
  if (($$0$i$i150 | 0) == 3) break;
  HEAP32[$21 + ($$0$i$i150 << 2) >> 2] = 0;
  $$0$i$i150 = $$0$i$i150 + 1 | 0;
 }
 HEAP32[$22 >> 2] = 0;
 HEAP32[$22 + 4 >> 2] = 0;
 HEAP32[$22 + 8 >> 2] = 0;
 $$0$i$i153 = 0;
 while (1) {
  if (($$0$i$i153 | 0) == 3) break;
  HEAP32[$22 + ($$0$i$i153 << 2) >> 2] = 0;
  $$0$i$i153 = $$0$i$i153 + 1 | 0;
 }
 HEAP32[$23 >> 2] = 0;
 HEAP32[$23 + 4 >> 2] = 0;
 HEAP32[$23 + 8 >> 2] = 0;
 $$0$i$i156 = 0;
 while (1) {
  if (($$0$i$i156 | 0) == 3) break;
  HEAP32[$23 + ($$0$i$i156 << 2) >> 2] = 0;
  $$0$i$i156 = $$0$i$i156 + 1 | 0;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($2, $3, $16, $17, $18, $19, $20, $21, $22, $24);
 HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
 $40 = $7 + 8 | 0;
 $41 = $21 + 11 | 0;
 $42 = $21 + 4 | 0;
 $43 = $22 + 11 | 0;
 $44 = $22 + 4 | 0;
 $45 = $19 + 11 | 0;
 $46 = $19 + 4 | 0;
 $48 = ($4 & 512 | 0) != 0;
 $49 = $20 + 11 | 0;
 $50 = $16 + 3 | 0;
 $51 = $20 + 4 | 0;
 $52 = $23 + 11 | 0;
 $53 = $23 + 4 | 0;
 $$0129 = 0;
 $$0131 = 0;
 L21 : while (1) {
  if ($$0131 >>> 0 >= 4) {
   label = 243;
   break;
  }
  $55 = HEAP32[$0 >> 2] | 0;
  do if (!$55) $787 = 1; else {
   $58 = HEAP32[$55 + 12 >> 2] | 0;
   if (($58 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 36 >> 2] & 127]($55) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$58 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$0 >> 2] = 0;
    $787 = 1;
    break;
   } else {
    $787 = (HEAP32[$0 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $70 = HEAP32[$1 >> 2] | 0;
  do if (!$70) label = 31; else {
   $73 = HEAP32[$70 + 12 >> 2] | 0;
   if (($73 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 127]($70) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$73 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    label = 31;
    break;
   } else if ($787) {
    $788 = $70;
    break;
   } else {
    label = 243;
    break L21;
   }
  } while (0);
  if ((label | 0) == 31) {
   label = 0;
   if ($787) {
    label = 243;
    break;
   } else $788 = 0;
  }
  L46 : do switch (HEAP8[$16 + $$0131 >> 0] | 0) {
  case 1:
   {
    if (($$0131 | 0) == 3) $$1130 = $$0129; else {
     $88 = HEAP32[$0 >> 2] | 0;
     $90 = HEAP32[$88 + 12 >> 2] | 0;
     if (($90 | 0) == (HEAP32[$88 + 16 >> 2] | 0)) $$0$i$i159 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 127]($88) | 0; else $$0$i$i159 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$90 >> 0] | 0) | 0;
     if (($$0$i$i159 & 255) << 24 >> 24 <= -1) {
      label = 45;
      break L21;
     }
     if (!(HEAP16[(HEAP32[$40 >> 2] | 0) + ($$0$i$i159 << 24 >> 24 << 1) >> 1] & 8192)) {
      label = 45;
      break L21;
     }
     $108 = HEAP32[$0 >> 2] | 0;
     $109 = $108 + 12 | 0;
     $110 = HEAP32[$109 >> 2] | 0;
     if (($110 | 0) == (HEAP32[$108 + 16 >> 2] | 0)) $$0$i$i160 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$108 >> 2] | 0) + 40 >> 2] & 127]($108) | 0; else {
      HEAP32[$109 >> 2] = $110 + 1;
      $$0$i$i160 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$110 >> 0] | 0) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23, $$0$i$i160 & 255);
     label = 47;
    }
    break;
   }
  case 0:
   {
    if (($$0131 | 0) == 3) $$1130 = $$0129; else label = 47;
    break;
   }
  case 3:
   {
    $189 = HEAP8[$41 >> 0] | 0;
    $193 = $189 << 24 >> 24 < 0 ? HEAP32[$42 >> 2] | 0 : $189 & 255;
    $194 = HEAP8[$43 >> 0] | 0;
    $198 = $194 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $194 & 255;
    if (($193 | 0) == (0 - $198 | 0)) $$1130 = $$0129; else {
     $201 = ($193 | 0) == 0;
     $203 = HEAP32[$0 >> 2] | 0;
     $205 = HEAP32[$203 + 12 >> 2] | 0;
     $208 = ($205 | 0) == (HEAP32[$203 + 16 >> 2] | 0);
     if ($201 | ($198 | 0) == 0) {
      if ($208) $$0$i$i182 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$203 >> 2] | 0) + 36 >> 2] & 127]($203) | 0; else $$0$i$i182 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$205 >> 0] | 0) | 0;
      $215 = $$0$i$i182 & 255;
      if ($201) {
       if ((HEAP8[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 0] | 0) != $215 << 24 >> 24) {
        $$1130 = $$0129;
        break L46;
       }
       $245 = HEAP32[$0 >> 2] | 0;
       $246 = $245 + 12 | 0;
       $247 = HEAP32[$246 >> 2] | 0;
       if (($247 | 0) == (HEAP32[$245 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$245 >> 2] | 0) + 40 >> 2] & 127]($245) | 0; else {
        HEAP32[$246 >> 2] = $247 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$247 >> 0] | 0) | 0;
       }
       HEAP8[$6 >> 0] = 1;
       $256 = HEAP8[$43 >> 0] | 0;
       $$1130 = ($256 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $256 & 255) >>> 0 > 1 ? $22 : $$0129;
       break L46;
      }
      if ((HEAP8[((HEAP8[$41 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 0] | 0) != $215 << 24 >> 24) {
       HEAP8[$6 >> 0] = 1;
       $$1130 = $$0129;
       break L46;
      }
      $222 = HEAP32[$0 >> 2] | 0;
      $223 = $222 + 12 | 0;
      $224 = HEAP32[$223 >> 2] | 0;
      if (($224 | 0) == (HEAP32[$222 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$222 >> 2] | 0) + 40 >> 2] & 127]($222) | 0; else {
       HEAP32[$223 >> 2] = $224 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$224 >> 0] | 0) | 0;
      }
      $233 = HEAP8[$41 >> 0] | 0;
      $$1130 = ($233 << 24 >> 24 < 0 ? HEAP32[$42 >> 2] | 0 : $233 & 255) >>> 0 > 1 ? $21 : $$0129;
      break L46;
     }
     if ($208) $$0$i$i189 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$203 >> 2] | 0) + 36 >> 2] & 127]($203) | 0; else $$0$i$i189 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$205 >> 0] | 0) | 0;
     $275 = HEAP32[$0 >> 2] | 0;
     $276 = $275 + 12 | 0;
     $277 = HEAP32[$276 >> 2] | 0;
     $280 = ($277 | 0) == (HEAP32[$275 + 16 >> 2] | 0);
     if ((HEAP8[((HEAP8[$41 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 0] | 0) == ($$0$i$i189 & 255) << 24 >> 24) {
      if ($280) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$275 >> 2] | 0) + 40 >> 2] & 127]($275) | 0; else {
       HEAP32[$276 >> 2] = $277 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$277 >> 0] | 0) | 0;
      }
      $286 = HEAP8[$41 >> 0] | 0;
      $$1130 = ($286 << 24 >> 24 < 0 ? HEAP32[$42 >> 2] | 0 : $286 & 255) >>> 0 > 1 ? $21 : $$0129;
      break L46;
     }
     if ($280) $$0$i$i194 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$275 >> 2] | 0) + 36 >> 2] & 127]($275) | 0; else $$0$i$i194 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$277 >> 0] | 0) | 0;
     if ((HEAP8[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 0] | 0) != ($$0$i$i194 & 255) << 24 >> 24) {
      label = 105;
      break L21;
     }
     $305 = HEAP32[$0 >> 2] | 0;
     $306 = $305 + 12 | 0;
     $307 = HEAP32[$306 >> 2] | 0;
     if (($307 | 0) == (HEAP32[$305 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$305 >> 2] | 0) + 40 >> 2] & 127]($305) | 0; else {
      HEAP32[$306 >> 2] = $307 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$307 >> 0] | 0) | 0;
     }
     HEAP8[$6 >> 0] = 1;
     $316 = HEAP8[$43 >> 0] | 0;
     $$1130 = ($316 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $316 & 255) >>> 0 > 1 ? $22 : $$0129;
    }
    break;
   }
  case 2:
   {
    if ($$0131 >>> 0 < 2 | ($$0129 | 0) != 0) {
     $335 = HEAP8[$49 >> 0] | 0;
     $336 = $335 << 24 >> 24 < 0;
     $337 = HEAP32[$20 >> 2] | 0;
     $338 = $336 ? $337 : $20;
     $339 = $338;
     if (!$$0131) {
      $$sroa$0313$1 = $339;
      $793 = $337;
      $794 = $335;
     } else {
      $346 = $335;
      $347 = $336;
      $350 = $338;
      $364 = $339;
      $792 = $337;
      label = 110;
     }
    } else {
     if (!($48 | ($$0131 | 0) == 2 & (HEAP8[$50 >> 0] | 0) != 0)) {
      $$1130 = 0;
      break L46;
     }
     $330 = HEAP8[$49 >> 0] | 0;
     $331 = $330 << 24 >> 24 < 0;
     $332 = HEAP32[$20 >> 2] | 0;
     $333 = $331 ? $332 : $20;
     $346 = $330;
     $347 = $331;
     $350 = $333;
     $364 = $333;
     $792 = $332;
     label = 110;
    }
    L109 : do if ((label | 0) == 110) {
     label = 0;
     if ((HEAPU8[$16 + ($$0131 + -1) >> 0] | 0) < 2) {
      $349 = $350 + ($347 ? HEAP32[$51 >> 2] | 0 : $346 & 255) | 0;
      $$sroa$0313$0 = $364;
      while (1) {
       $351 = $$sroa$0313$0;
       if (($349 | 0) == ($351 | 0)) break;
       $353 = HEAP8[$351 >> 0] | 0;
       if ($353 << 24 >> 24 <= -1) break;
       if (!(HEAP16[(HEAP32[$40 >> 2] | 0) + ($353 << 24 >> 24 << 1) >> 1] & 8192)) break;
       $$sroa$0313$0 = $351 + 1 | 0;
      }
      $363 = $$sroa$0313$0 - $364 | 0;
      $365 = HEAP8[$52 >> 0] | 0;
      $366 = $365 << 24 >> 24 < 0;
      $367 = HEAP32[$53 >> 2] | 0;
      $368 = $365 & 255;
      if ($363 >>> 0 > ($366 ? $367 : $368) >>> 0) {
       $$sroa$0313$1 = $364;
       $793 = $792;
       $794 = $346;
      } else {
       $372 = (HEAP32[$23 >> 2] | 0) + $367 | 0;
       $375 = $23 + $368 | 0;
       $$pre$phiZ2D = $366 ? $372 : $375;
       $$sroa$08$0$ptr$i = $350;
       $379 = $366 ? $372 + (0 - $363) | 0 : $375 + (0 - $363) | 0;
       while (1) {
        if (($379 | 0) == ($$pre$phiZ2D | 0)) {
         $$sroa$0313$1 = $$sroa$0313$0;
         $793 = $792;
         $794 = $346;
         break L109;
        }
        if ((HEAP8[$379 >> 0] | 0) != (HEAP8[$$sroa$08$0$ptr$i >> 0] | 0)) {
         $$sroa$0313$1 = $364;
         $793 = $792;
         $794 = $346;
         break L109;
        }
        $$sroa$08$0$ptr$i = $$sroa$08$0$ptr$i + 1 | 0;
        $379 = $379 + 1 | 0;
       }
      }
     } else {
      $$sroa$0313$1 = $364;
      $793 = $792;
      $794 = $346;
     }
    } while (0);
    $$sroa$0293$0$ptr = $$sroa$0313$1;
    $386 = $794;
    $390 = $793;
    $410 = $788;
    L124 : while (1) {
     $387 = $386 << 24 >> 24 < 0;
     if (($$sroa$0293$0$ptr | 0) == (($387 ? $390 : $20) + ($387 ? HEAP32[$51 >> 2] | 0 : $386 & 255) | 0)) break;
     $395 = HEAP32[$0 >> 2] | 0;
     do if (!$395) $795 = 1; else {
      $398 = HEAP32[$395 + 12 >> 2] | 0;
      if (($398 | 0) == (HEAP32[$395 + 16 >> 2] | 0)) $$0$i$i$i$i221 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$395 >> 2] | 0) + 36 >> 2] & 127]($395) | 0; else $$0$i$i$i$i221 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$398 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i221, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $795 = 1;
       break;
      } else {
       $795 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$410) label = 136; else {
      $413 = HEAP32[$410 + 12 >> 2] | 0;
      if (($413 | 0) == (HEAP32[$410 + 16 >> 2] | 0)) $$0$i$i2$i$i227 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$410 >> 2] | 0) + 36 >> 2] & 127]($410) | 0; else $$0$i$i2$i$i227 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$413 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i227, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       label = 136;
       break;
      } else if ($795) {
       $796 = $410;
       break;
      } else break L124;
     } while (0);
     if ((label | 0) == 136) {
      label = 0;
      if ($795) break; else $796 = 0;
     }
     $425 = HEAP32[$0 >> 2] | 0;
     $427 = HEAP32[$425 + 12 >> 2] | 0;
     if (($427 | 0) == (HEAP32[$425 + 16 >> 2] | 0)) $$0$i$i233 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$425 >> 2] | 0) + 36 >> 2] & 127]($425) | 0; else $$0$i$i233 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$427 >> 0] | 0) | 0;
     if ((HEAP8[$$sroa$0293$0$ptr >> 0] | 0) != ($$0$i$i233 & 255) << 24 >> 24) break;
     $440 = HEAP32[$0 >> 2] | 0;
     $441 = $440 + 12 | 0;
     $442 = HEAP32[$441 >> 2] | 0;
     if (($442 | 0) == (HEAP32[$440 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$440 >> 2] | 0) + 40 >> 2] & 127]($440) | 0; else {
      HEAP32[$441 >> 2] = $442 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$442 >> 0] | 0) | 0;
     }
     $$sroa$0293$0$ptr = $$sroa$0293$0$ptr + 1 | 0;
     $386 = HEAP8[$49 >> 0] | 0;
     $390 = HEAP32[$20 >> 2] | 0;
     $410 = $796;
    }
    if ($48) {
     $452 = HEAP8[$49 >> 0] | 0;
     $453 = $452 << 24 >> 24 < 0;
     if (($$sroa$0293$0$ptr | 0) == (($453 ? HEAP32[$20 >> 2] | 0 : $20) + ($453 ? HEAP32[$51 >> 2] | 0 : $452 & 255) | 0)) $$1130 = $$0129; else {
      label = 148;
      break L21;
     }
    } else $$1130 = $$0129;
    break;
   }
  case 4:
   {
    $$0124 = 0;
    $478 = $788;
    $789 = $788;
    L161 : while (1) {
     $463 = HEAP32[$0 >> 2] | 0;
     do if (!$463) $797 = 1; else {
      $466 = HEAP32[$463 + 12 >> 2] | 0;
      if (($466 | 0) == (HEAP32[$463 + 16 >> 2] | 0)) $$0$i$i$i$i237 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$463 >> 2] | 0) + 36 >> 2] & 127]($463) | 0; else $$0$i$i$i$i237 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$466 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i237, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $797 = 1;
       break;
      } else {
       $797 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$478) {
      $798 = $789;
      label = 162;
     } else {
      $481 = HEAP32[$478 + 12 >> 2] | 0;
      if (($481 | 0) == (HEAP32[$478 + 16 >> 2] | 0)) $$0$i$i2$i$i243 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$478 >> 2] | 0) + 36 >> 2] & 127]($478) | 0; else $$0$i$i2$i$i243 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$481 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i243, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $798 = 0;
       label = 162;
       break;
      } else if ($797) {
       $799 = $789;
       $800 = $478;
       break;
      } else {
       $569 = $789;
       break L161;
      }
     } while (0);
     if ((label | 0) == 162) {
      label = 0;
      if ($797) {
       $569 = $798;
       break;
      } else {
       $799 = $798;
       $800 = 0;
      }
     }
     $493 = HEAP32[$0 >> 2] | 0;
     $495 = HEAP32[$493 + 12 >> 2] | 0;
     if (($495 | 0) == (HEAP32[$493 + 16 >> 2] | 0)) $$0$i$i249 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$493 >> 2] | 0) + 36 >> 2] & 127]($493) | 0; else $$0$i$i249 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$495 >> 0] | 0) | 0;
     $505 = $$0$i$i249 & 255;
     if ($505 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[$40 >> 2] | 0) + ($$0$i$i249 << 24 >> 24 << 1) >> 1] & 2048)) label = 172; else {
      $513 = HEAP32[$9 >> 2] | 0;
      if (($513 | 0) == (HEAP32[$11 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8, $9, $11);
       $517 = HEAP32[$9 >> 2] | 0;
      } else $517 = $513;
      HEAP32[$9 >> 2] = $517 + 1;
      HEAP8[$517 >> 0] = $505;
      $$2126$ph = $$0124 + 1 | 0;
     } else label = 172;
     if ((label | 0) == 172) {
      label = 0;
      $519 = HEAP8[$45 >> 0] | 0;
      if (!((HEAP8[$18 >> 0] | 0) == $505 << 24 >> 24 & ($$0124 | 0 ? (($519 << 24 >> 24 < 0 ? HEAP32[$46 >> 2] | 0 : $519 & 255) | 0) != 0 : 0))) {
       $569 = $799;
       break;
      }
      $528 = HEAP32[$14 >> 2] | 0;
      if (($528 | 0) == (HEAP32[$15 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13, $14, $15);
       $532 = HEAP32[$14 >> 2] | 0;
      } else $532 = $528;
      HEAP32[$14 >> 2] = $532 + 4;
      HEAP32[$532 >> 2] = $$0124;
      $$2126$ph = 0;
     }
     $533 = HEAP32[$0 >> 2] | 0;
     $534 = $533 + 12 | 0;
     $535 = HEAP32[$534 >> 2] | 0;
     if (($535 | 0) == (HEAP32[$533 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$533 >> 2] | 0) + 40 >> 2] & 127]($533) | 0; else {
      HEAP32[$534 >> 2] = $535 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$535 >> 0] | 0) | 0;
     }
     $$0124 = $$2126$ph;
     $478 = $800;
     $789 = $799;
    }
    $545 = HEAP32[$14 >> 2] | 0;
    if ($$0124 | 0 ? (HEAP32[$13 >> 2] | 0) != ($545 | 0) : 0) {
     if (($545 | 0) == (HEAP32[$15 >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13, $14, $15);
      $551 = HEAP32[$14 >> 2] | 0;
     } else $551 = $545;
     HEAP32[$14 >> 2] = $551 + 4;
     HEAP32[$551 >> 2] = $$0124;
    }
    L213 : do if ((HEAP32[$24 >> 2] | 0) > 0) {
     $554 = HEAP32[$0 >> 2] | 0;
     do if (!$554) $801 = 1; else {
      $557 = HEAP32[$554 + 12 >> 2] | 0;
      if (($557 | 0) == (HEAP32[$554 + 16 >> 2] | 0)) $$0$i$i$i$i254 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$554 >> 2] | 0) + 36 >> 2] & 127]($554) | 0; else $$0$i$i$i$i254 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$557 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i254, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $801 = 1;
       break;
      } else {
       $801 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$569) label = 198; else {
      $572 = HEAP32[$569 + 12 >> 2] | 0;
      if (($572 | 0) == (HEAP32[$569 + 16 >> 2] | 0)) $$0$i$i2$i$i260 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$569 >> 2] | 0) + 36 >> 2] & 127]($569) | 0; else $$0$i$i2$i$i260 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$572 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i260, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       label = 198;
       break;
      } else if ($801) {
       $802 = $569;
       break;
      } else {
       label = 204;
       break L21;
      }
     } while (0);
     if ((label | 0) == 198) {
      label = 0;
      if ($801) {
       label = 204;
       break L21;
      } else $802 = 0;
     }
     $584 = HEAP32[$0 >> 2] | 0;
     $586 = HEAP32[$584 + 12 >> 2] | 0;
     if (($586 | 0) == (HEAP32[$584 + 16 >> 2] | 0)) $$0$i$i266 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$584 >> 2] | 0) + 36 >> 2] & 127]($584) | 0; else $$0$i$i266 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$586 >> 0] | 0) | 0;
     if ((HEAP8[$17 >> 0] | 0) != ($$0$i$i266 & 255) << 24 >> 24) {
      label = 204;
      break L21;
     }
     $601 = HEAP32[$0 >> 2] | 0;
     $602 = $601 + 12 | 0;
     $603 = HEAP32[$602 >> 2] | 0;
     if (($603 | 0) == (HEAP32[$601 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$601 >> 2] | 0) + 40 >> 2] & 127]($601) | 0; else {
      HEAP32[$602 >> 2] = $603 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$603 >> 0] | 0) | 0;
     }
     $629 = $802;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) <= 0) break L213;
      $614 = HEAP32[$0 >> 2] | 0;
      do if (!$614) $803 = 1; else {
       $617 = HEAP32[$614 + 12 >> 2] | 0;
       if (($617 | 0) == (HEAP32[$614 + 16 >> 2] | 0)) $$0$i$i$i$i269 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$614 >> 2] | 0) + 36 >> 2] & 127]($614) | 0; else $$0$i$i$i$i269 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$617 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i269, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $803 = 1;
        break;
       } else {
        $803 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$629) label = 223; else {
       $632 = HEAP32[$629 + 12 >> 2] | 0;
       if (($632 | 0) == (HEAP32[$629 + 16 >> 2] | 0)) $$0$i$i2$i$i275 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$629 >> 2] | 0) + 36 >> 2] & 127]($629) | 0; else $$0$i$i2$i$i275 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$632 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i275, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        label = 223;
        break;
       } else if ($803) {
        $804 = $629;
        break;
       } else {
        label = 230;
        break L21;
       }
      } while (0);
      if ((label | 0) == 223) {
       label = 0;
       if ($803) {
        label = 230;
        break L21;
       } else $804 = 0;
      }
      $644 = HEAP32[$0 >> 2] | 0;
      $646 = HEAP32[$644 + 12 >> 2] | 0;
      if (($646 | 0) == (HEAP32[$644 + 16 >> 2] | 0)) $$0$i$i281 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$644 >> 2] | 0) + 36 >> 2] & 127]($644) | 0; else $$0$i$i281 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$646 >> 0] | 0) | 0;
      if (($$0$i$i281 & 255) << 24 >> 24 <= -1) {
       label = 230;
       break L21;
      }
      if (!(HEAP16[(HEAP32[$40 >> 2] | 0) + ($$0$i$i281 << 24 >> 24 << 1) >> 1] & 2048)) {
       label = 230;
       break L21;
      }
      if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8, $9, $11);
      $669 = HEAP32[$0 >> 2] | 0;
      $671 = HEAP32[$669 + 12 >> 2] | 0;
      if (($671 | 0) == (HEAP32[$669 + 16 >> 2] | 0)) $$0$i$i284 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$669 >> 2] | 0) + 36 >> 2] & 127]($669) | 0; else $$0$i$i284 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$671 >> 0] | 0) | 0;
      $682 = HEAP32[$9 >> 2] | 0;
      HEAP32[$9 >> 2] = $682 + 1;
      HEAP8[$682 >> 0] = $$0$i$i284;
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + -1;
      $686 = HEAP32[$0 >> 2] | 0;
      $687 = $686 + 12 | 0;
      $688 = HEAP32[$687 >> 2] | 0;
      if (($688 | 0) == (HEAP32[$686 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$686 >> 2] | 0) + 40 >> 2] & 127]($686) | 0; else {
       HEAP32[$687 >> 2] = $688 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$688 >> 0] | 0) | 0;
      }
      $629 = $804;
     }
    } while (0);
    if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     label = 241;
     break L21;
    } else $$1130 = $$0129;
    break;
   }
  default:
   $$1130 = $$0129;
  } while (0);
  L289 : do if ((label | 0) == 47) {
   label = 0;
   $140 = $788;
   while (1) {
    $125 = HEAP32[$0 >> 2] | 0;
    do if (!$125) $790 = 1; else {
     $128 = HEAP32[$125 + 12 >> 2] | 0;
     if (($128 | 0) == (HEAP32[$125 + 16 >> 2] | 0)) $$0$i$i$i$i161 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$125 >> 2] | 0) + 36 >> 2] & 127]($125) | 0; else $$0$i$i$i$i161 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$128 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i161, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0;
      $790 = 1;
      break;
     } else {
      $790 = (HEAP32[$0 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!$140) label = 61; else {
     $143 = HEAP32[$140 + 12 >> 2] | 0;
     if (($143 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) $$0$i$i2$i$i167 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 36 >> 2] & 127]($140) | 0; else $$0$i$i2$i$i167 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$143 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i167, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      label = 61;
      break;
     } else if ($790) {
      $791 = $140;
      break;
     } else {
      $$1130 = $$0129;
      break L289;
     }
    } while (0);
    if ((label | 0) == 61) {
     label = 0;
     if ($790) {
      $$1130 = $$0129;
      break L289;
     } else $791 = 0;
    }
    $155 = HEAP32[$0 >> 2] | 0;
    $157 = HEAP32[$155 + 12 >> 2] | 0;
    if (($157 | 0) == (HEAP32[$155 + 16 >> 2] | 0)) $$0$i$i173 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$155 >> 2] | 0) + 36 >> 2] & 127]($155) | 0; else $$0$i$i173 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$157 >> 0] | 0) | 0;
    if (($$0$i$i173 & 255) << 24 >> 24 <= -1) {
     $$1130 = $$0129;
     break L289;
    }
    if (!(HEAP16[(HEAP32[$40 >> 2] | 0) + ($$0$i$i173 << 24 >> 24 << 1) >> 1] & 8192)) {
     $$1130 = $$0129;
     break L289;
    }
    $175 = HEAP32[$0 >> 2] | 0;
    $176 = $175 + 12 | 0;
    $177 = HEAP32[$176 >> 2] | 0;
    if (($177 | 0) == (HEAP32[$175 + 16 >> 2] | 0)) $$0$i$i176 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$175 >> 2] | 0) + 40 >> 2] & 127]($175) | 0; else {
     HEAP32[$176 >> 2] = $177 + 1;
     $$0$i$i176 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$177 >> 0] | 0) | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23, $$0$i$i176 & 255);
    $140 = $791;
   }
  } while (0);
  $$0129 = $$1130;
  $$0131 = $$0131 + 1 | 0;
 }
 L326 : do if ((label | 0) == 45) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 105) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 148) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 204) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 230) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 241) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 243) {
  L328 : do if ($$0129 | 0) {
   $704 = $$0129 + 11 | 0;
   $705 = $$0129 + 4 | 0;
   $$0 = 1;
   L330 : while (1) {
    $706 = HEAP8[$704 >> 0] | 0;
    if ($706 << 24 >> 24 < 0) $711 = HEAP32[$705 >> 2] | 0; else $711 = $706 & 255;
    if ($$0 >>> 0 >= $711 >>> 0) break L328;
    $712 = HEAP32[$0 >> 2] | 0;
    do if (!$712) $805 = 1; else {
     $715 = HEAP32[$712 + 12 >> 2] | 0;
     if (($715 | 0) == (HEAP32[$712 + 16 >> 2] | 0)) $$0$i$i$i$i205 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$712 >> 2] | 0) + 36 >> 2] & 127]($712) | 0; else $$0$i$i$i$i205 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$715 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i205, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0;
      $805 = 1;
      break;
     } else {
      $805 = (HEAP32[$0 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    $727 = HEAP32[$1 >> 2] | 0;
    do if (!$727) label = 262; else {
     $730 = HEAP32[$727 + 12 >> 2] | 0;
     if (($730 | 0) == (HEAP32[$727 + 16 >> 2] | 0)) $$0$i$i2$i$i211 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$727 >> 2] | 0) + 36 >> 2] & 127]($727) | 0; else $$0$i$i2$i$i211 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$730 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i211, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      label = 262;
      break;
     } else if ($805) break; else break L330;
    } while (0);
    if ((label | 0) == 262) {
     label = 0;
     if ($805) break;
    }
    $742 = HEAP32[$0 >> 2] | 0;
    $744 = HEAP32[$742 + 12 >> 2] | 0;
    if (($744 | 0) == (HEAP32[$742 + 16 >> 2] | 0)) $$0$i$i202 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$742 >> 2] | 0) + 36 >> 2] & 127]($742) | 0; else $$0$i$i202 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$744 >> 0] | 0) | 0;
    if ((HEAP8[$704 >> 0] | 0) < 0) $759 = HEAP32[$$0129 >> 2] | 0; else $759 = $$0129;
    if ((HEAP8[$759 + $$0 >> 0] | 0) != ($$0$i$i202 & 255) << 24 >> 24) break;
    $765 = HEAP32[$0 >> 2] | 0;
    $766 = $765 + 12 | 0;
    $767 = HEAP32[$766 >> 2] | 0;
    if (($767 | 0) == (HEAP32[$765 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$765 >> 2] | 0) + 40 >> 2] & 127]($765) | 0; else {
     HEAP32[$766 >> 2] = $767 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$767 >> 0] | 0) | 0;
    }
    $$0 = $$0 + 1 | 0;
   }
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
   $$10 = 0;
   break L326;
  } while (0);
  $776 = HEAP32[$13 >> 2] | 0;
  $777 = HEAP32[$14 >> 2] | 0;
  if (($776 | 0) == ($777 | 0)) $$10 = 1; else {
   HEAP32[$25 >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19, $776, $777, $25);
   if (!(HEAP32[$25 >> 2] | 0)) {
    $$10 = 1;
    break;
   } else {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $783 = HEAP32[$13 >> 2] | 0;
 HEAP32[$13 >> 2] = 0;
 if ($783 | 0) FUNCTION_TABLE_vi[HEAP32[$13 + 4 >> 2] & 255]($783);
 STACKTOP = sp;
 return $$10 | 0;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i162 = 0, $$0$i$i$i$i207 = 0, $$0$i$i$i$i220 = 0, $$0$i$i$i$i236 = 0, $$0$i$i$i$i251 = 0, $$0$i$i$i$i266 = 0, $$0$i$i149 = 0, $$0$i$i151 = 0, $$0$i$i154 = 0, $$0$i$i157 = 0, $$0$i$i160 = 0, $$0$i$i161 = 0, $$0$i$i174 = 0, $$0$i$i176 = 0, $$0$i$i182 = 0, $$0$i$i189 = 0, $$0$i$i194 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i168 = 0, $$0$i$i2$i$i213 = 0, $$0$i$i2$i$i226 = 0, $$0$i$i2$i$i242 = 0, $$0$i$i2$i$i257 = 0, $$0$i$i2$i$i272 = 0, $$0$i$i203 = 0, $$0$i$i232 = 0, $$0$i$i248 = 0, $$0$i$i263 = 0, $$0$i$i278 = 0, $$0$i$i280 = 0, $$0126 = 0, $$0131 = 0, $$0133 = 0, $$10 = 0, $$1132 = 0, $$2128$ph = 0, $$pre$phiZ2D = 0, $$sroa$0289$0$ptr = 0, $$sroa$0309$0 = 0, $$sroa$0309$1 = 0, $$sroa$08$0$ptr$i = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $123 = 0, $126 = 0, $13 = 0, $138 = 0, $14 = 0, $141 = 0, $15 = 0, $153 = 0, $155 = 0, $16 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $182 = 0, $186 = 0, $187 = 0, $19 = 0, $191 = 0, $194 = 0, $196 = 0, $198 = 0, $20 = 0, $201 = 0, $21 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $225 = 0, $23 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $248 = 0, $25 = 0, $266 = 0, $267 = 0, $268 = 0, $271 = 0, $277 = 0, $295 = 0, $296 = 0, $297 = 0, $306 = 0, $320 = 0, $322 = 0, $325 = 0, $327 = 0, $329 = 0, $334 = 0, $335 = 0, $338 = 0, $342 = 0, $351 = 0, $353 = 0, $354 = 0, $355 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $365 = 0, $366 = 0, $369 = 0, $376 = 0, $377 = 0, $380 = 0, $385 = 0, $388 = 0, $400 = 0, $403 = 0, $41 = 0, $415 = 0, $417 = 0, $42 = 0, $429 = 0, $430 = 0, $431 = 0, $44 = 0, $441 = 0, $442 = 0, $45 = 0, $452 = 0, $455 = 0, $46 = 0, $467 = 0, $47 = 0, $470 = 0, $482 = 0, $484 = 0, $49 = 0, $498 = 0, $502 = 0, $504 = 0, $51 = 0, $513 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $53 = 0, $530 = 0, $536 = 0, $539 = 0, $542 = 0, $55 = 0, $554 = 0, $557 = 0, $56 = 0, $569 = 0, $571 = 0, $58 = 0, $585 = 0, $586 = 0, $587 = 0, $598 = 0, $601 = 0, $61 = 0, $613 = 0, $616 = 0, $628 = 0, $630 = 0, $649 = 0, $651 = 0, $661 = 0, $665 = 0, $666 = 0, $667 = 0, $684 = 0, $685 = 0, $686 = 0, $691 = 0, $692 = 0, $695 = 0, $707 = 0, $710 = 0, $722 = 0, $724 = 0, $73 = 0, $738 = 0, $744 = 0, $745 = 0, $746 = 0, $755 = 0, $756 = 0, $76 = 0, $762 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $91 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $11 = sp + 496 | 0;
 $12 = sp;
 $13 = sp + 488 | 0;
 $14 = sp + 480 | 0;
 $15 = sp + 476 | 0;
 $16 = sp + 500 | 0;
 $17 = sp + 472 | 0;
 $18 = sp + 468 | 0;
 $19 = sp + 456 | 0;
 $20 = sp + 444 | 0;
 $21 = sp + 432 | 0;
 $22 = sp + 420 | 0;
 $23 = sp + 408 | 0;
 $24 = sp + 404 | 0;
 $25 = sp + 400 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$13 + 4 >> 2] = 234;
 HEAP32[$14 >> 2] = $12;
 HEAP32[$15 >> 2] = $12 + 400;
 HEAP32[$19 >> 2] = 0;
 HEAP32[$19 + 4 >> 2] = 0;
 HEAP32[$19 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$19 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$20 + 8 >> 2] = 0;
 $$0$i$i149 = 0;
 while (1) {
  if (($$0$i$i149 | 0) == 3) break;
  HEAP32[$20 + ($$0$i$i149 << 2) >> 2] = 0;
  $$0$i$i149 = $$0$i$i149 + 1 | 0;
 }
 HEAP32[$21 >> 2] = 0;
 HEAP32[$21 + 4 >> 2] = 0;
 HEAP32[$21 + 8 >> 2] = 0;
 $$0$i$i151 = 0;
 while (1) {
  if (($$0$i$i151 | 0) == 3) break;
  HEAP32[$21 + ($$0$i$i151 << 2) >> 2] = 0;
  $$0$i$i151 = $$0$i$i151 + 1 | 0;
 }
 HEAP32[$22 >> 2] = 0;
 HEAP32[$22 + 4 >> 2] = 0;
 HEAP32[$22 + 8 >> 2] = 0;
 $$0$i$i154 = 0;
 while (1) {
  if (($$0$i$i154 | 0) == 3) break;
  HEAP32[$22 + ($$0$i$i154 << 2) >> 2] = 0;
  $$0$i$i154 = $$0$i$i154 + 1 | 0;
 }
 HEAP32[$23 >> 2] = 0;
 HEAP32[$23 + 4 >> 2] = 0;
 HEAP32[$23 + 8 >> 2] = 0;
 $$0$i$i157 = 0;
 while (1) {
  if (($$0$i$i157 | 0) == 3) break;
  HEAP32[$23 + ($$0$i$i157 << 2) >> 2] = 0;
  $$0$i$i157 = $$0$i$i157 + 1 | 0;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($2, $3, $16, $17, $18, $19, $20, $21, $22, $24);
 HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
 $41 = $21 + 8 + 3 | 0;
 $42 = $21 + 4 | 0;
 $44 = $22 + 8 + 3 | 0;
 $45 = $22 + 4 | 0;
 $46 = $19 + 11 | 0;
 $47 = $19 + 4 | 0;
 $49 = ($4 & 512 | 0) != 0;
 $51 = $20 + 8 + 3 | 0;
 $52 = $16 + 3 | 0;
 $53 = $20 + 4 | 0;
 $55 = $23 + 8 + 3 | 0;
 $56 = $23 + 4 | 0;
 $$0131 = 0;
 $$0133 = 0;
 L21 : while (1) {
  if ($$0133 >>> 0 >= 4) {
   label = 239;
   break;
  }
  $58 = HEAP32[$0 >> 2] | 0;
  do if (!$58) $766 = 1; else {
   $61 = HEAP32[$58 + 12 >> 2] | 0;
   if (($61 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 127]($58) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$61 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$0 >> 2] = 0;
    $766 = 1;
    break;
   } else {
    $766 = (HEAP32[$0 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $73 = HEAP32[$1 >> 2] | 0;
  do if (!$73) label = 31; else {
   $76 = HEAP32[$73 + 12 >> 2] | 0;
   if (($76 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 36 >> 2] & 127]($73) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$76 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    label = 31;
    break;
   } else if ($766) {
    $767 = $73;
    break;
   } else {
    label = 239;
    break L21;
   }
  } while (0);
  if ((label | 0) == 31) {
   label = 0;
   if ($766) {
    label = 239;
    break;
   } else $767 = 0;
  }
  L46 : do switch (HEAP8[$16 + $$0133 >> 0] | 0) {
  case 1:
   {
    if (($$0133 | 0) == 3) $$1132 = $$0131; else {
     $91 = HEAP32[$0 >> 2] | 0;
     $93 = HEAP32[$91 + 12 >> 2] | 0;
     if (($93 | 0) == (HEAP32[$91 + 16 >> 2] | 0)) $$0$i$i160 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$91 >> 2] | 0) + 36 >> 2] & 127]($91) | 0; else $$0$i$i160 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$93 >> 2] | 0) | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] & 31]($7, 8192, $$0$i$i160) | 0)) {
      label = 44;
      break L21;
     }
     $107 = HEAP32[$0 >> 2] | 0;
     $108 = $107 + 12 | 0;
     $109 = HEAP32[$108 >> 2] | 0;
     if (($109 | 0) == (HEAP32[$107 + 16 >> 2] | 0)) $$0$i$i161 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 40 >> 2] & 127]($107) | 0; else {
      HEAP32[$108 >> 2] = $109 + 4;
      $$0$i$i161 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$109 >> 2] | 0) | 0;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($23, $$0$i$i161);
     label = 46;
    }
    break;
   }
  case 0:
   {
    if (($$0133 | 0) == 3) $$1132 = $$0131; else label = 46;
    break;
   }
  case 3:
   {
    $182 = HEAP8[$41 >> 0] | 0;
    $186 = $182 << 24 >> 24 < 0 ? HEAP32[$42 >> 2] | 0 : $182 & 255;
    $187 = HEAP8[$44 >> 0] | 0;
    $191 = $187 << 24 >> 24 < 0 ? HEAP32[$45 >> 2] | 0 : $187 & 255;
    if (($186 | 0) == (0 - $191 | 0)) $$1132 = $$0131; else {
     $194 = ($186 | 0) == 0;
     $196 = HEAP32[$0 >> 2] | 0;
     $198 = HEAP32[$196 + 12 >> 2] | 0;
     $201 = ($198 | 0) == (HEAP32[$196 + 16 >> 2] | 0);
     if ($194 | ($191 | 0) == 0) {
      if ($201) $$0$i$i182 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$196 >> 2] | 0) + 36 >> 2] & 127]($196) | 0; else $$0$i$i182 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$198 >> 2] | 0) | 0;
      if ($194) {
       if (($$0$i$i182 | 0) != (HEAP32[((HEAP8[$44 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 2] | 0)) {
        $$1132 = $$0131;
        break L46;
       }
       $237 = HEAP32[$0 >> 2] | 0;
       $238 = $237 + 12 | 0;
       $239 = HEAP32[$238 >> 2] | 0;
       if (($239 | 0) == (HEAP32[$237 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$237 >> 2] | 0) + 40 >> 2] & 127]($237) | 0; else {
        HEAP32[$238 >> 2] = $239 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$239 >> 2] | 0) | 0;
       }
       HEAP8[$6 >> 0] = 1;
       $248 = HEAP8[$44 >> 0] | 0;
       $$1132 = ($248 << 24 >> 24 < 0 ? HEAP32[$45 >> 2] | 0 : $248 & 255) >>> 0 > 1 ? $22 : $$0131;
       break L46;
      }
      if (($$0$i$i182 | 0) != (HEAP32[((HEAP8[$41 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 2] | 0)) {
       HEAP8[$6 >> 0] = 1;
       $$1132 = $$0131;
       break L46;
      }
      $214 = HEAP32[$0 >> 2] | 0;
      $215 = $214 + 12 | 0;
      $216 = HEAP32[$215 >> 2] | 0;
      if (($216 | 0) == (HEAP32[$214 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$214 >> 2] | 0) + 40 >> 2] & 127]($214) | 0; else {
       HEAP32[$215 >> 2] = $216 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$216 >> 2] | 0) | 0;
      }
      $225 = HEAP8[$41 >> 0] | 0;
      $$1132 = ($225 << 24 >> 24 < 0 ? HEAP32[$42 >> 2] | 0 : $225 & 255) >>> 0 > 1 ? $21 : $$0131;
      break L46;
     }
     if ($201) $$0$i$i189 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$196 >> 2] | 0) + 36 >> 2] & 127]($196) | 0; else $$0$i$i189 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$198 >> 2] | 0) | 0;
     $266 = HEAP32[$0 >> 2] | 0;
     $267 = $266 + 12 | 0;
     $268 = HEAP32[$267 >> 2] | 0;
     $271 = ($268 | 0) == (HEAP32[$266 + 16 >> 2] | 0);
     if (($$0$i$i189 | 0) == (HEAP32[((HEAP8[$41 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 2] | 0)) {
      if ($271) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$266 >> 2] | 0) + 40 >> 2] & 127]($266) | 0; else {
       HEAP32[$267 >> 2] = $268 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$268 >> 2] | 0) | 0;
      }
      $277 = HEAP8[$41 >> 0] | 0;
      $$1132 = ($277 << 24 >> 24 < 0 ? HEAP32[$42 >> 2] | 0 : $277 & 255) >>> 0 > 1 ? $21 : $$0131;
      break L46;
     }
     if ($271) $$0$i$i194 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$266 >> 2] | 0) + 36 >> 2] & 127]($266) | 0; else $$0$i$i194 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$268 >> 2] | 0) | 0;
     if (($$0$i$i194 | 0) != (HEAP32[((HEAP8[$44 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 2] | 0)) {
      label = 103;
      break L21;
     }
     $295 = HEAP32[$0 >> 2] | 0;
     $296 = $295 + 12 | 0;
     $297 = HEAP32[$296 >> 2] | 0;
     if (($297 | 0) == (HEAP32[$295 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$295 >> 2] | 0) + 40 >> 2] & 127]($295) | 0; else {
      HEAP32[$296 >> 2] = $297 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$297 >> 2] | 0) | 0;
     }
     HEAP8[$6 >> 0] = 1;
     $306 = HEAP8[$44 >> 0] | 0;
     $$1132 = ($306 << 24 >> 24 < 0 ? HEAP32[$45 >> 2] | 0 : $306 & 255) >>> 0 > 1 ? $22 : $$0131;
    }
    break;
   }
  case 2:
   {
    if ($$0133 >>> 0 < 2 | ($$0131 | 0) != 0) {
     $325 = HEAP8[$51 >> 0] | 0;
     $327 = HEAP32[$20 >> 2] | 0;
     $329 = $325 << 24 >> 24 < 0 ? $327 : $20;
     if (!$$0133) {
      $$sroa$0309$1 = $329;
      $774 = $327;
      $775 = $325;
     } else {
      $771 = $329;
      $772 = $327;
      $773 = $325;
      label = 108;
     }
    } else {
     if (!($49 | ($$0133 | 0) == 2 & (HEAP8[$52 >> 0] | 0) != 0)) {
      $$1132 = 0;
      break L46;
     }
     $320 = HEAP8[$51 >> 0] | 0;
     $322 = HEAP32[$20 >> 2] | 0;
     $771 = $320 << 24 >> 24 < 0 ? $322 : $20;
     $772 = $322;
     $773 = $320;
     label = 108;
    }
    L108 : do if ((label | 0) == 108) {
     label = 0;
     if ((HEAPU8[$16 + ($$0133 + -1) >> 0] | 0) < 2) {
      $$sroa$0309$0 = $771;
      $334 = $773;
      $338 = $772;
      while (1) {
       $335 = $334 << 24 >> 24 < 0;
       $342 = $$sroa$0309$0;
       if ((($335 ? $338 : $20) + (($335 ? HEAP32[$53 >> 2] | 0 : $334 & 255) << 2) | 0) == ($342 | 0)) {
        $351 = $334;
        $353 = $338;
        break;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] & 31]($7, 8192, HEAP32[$342 >> 2] | 0) | 0)) {
        label = 112;
        break;
       }
       $$sroa$0309$0 = $342 + 4 | 0;
       $334 = HEAP8[$51 >> 0] | 0;
       $338 = HEAP32[$20 >> 2] | 0;
      }
      if ((label | 0) == 112) {
       label = 0;
       $351 = HEAP8[$51 >> 0] | 0;
       $353 = HEAP32[$20 >> 2] | 0;
      }
      $354 = $351 << 24 >> 24 < 0 ? $353 : $20;
      $355 = $354;
      $357 = $$sroa$0309$0 - $355 >> 2;
      $358 = HEAP8[$55 >> 0] | 0;
      $359 = $358 << 24 >> 24 < 0;
      $360 = HEAP32[$56 >> 2] | 0;
      $361 = $358 & 255;
      if ($357 >>> 0 > ($359 ? $360 : $361) >>> 0) {
       $$sroa$0309$1 = $355;
       $774 = $353;
       $775 = $351;
      } else {
       $365 = (HEAP32[$23 >> 2] | 0) + ($360 << 2) | 0;
       $366 = $23 + ($361 << 2) | 0;
       $$pre$phiZ2D = $359 ? $365 : $366;
       $$sroa$08$0$ptr$i = $354;
       $369 = ($359 ? $365 : $366) + (0 - $357 << 2) | 0;
       while (1) {
        if (($369 | 0) == ($$pre$phiZ2D | 0)) {
         $$sroa$0309$1 = $$sroa$0309$0;
         $774 = $353;
         $775 = $351;
         break L108;
        }
        if ((HEAP32[$369 >> 2] | 0) != (HEAP32[$$sroa$08$0$ptr$i >> 2] | 0)) {
         $$sroa$0309$1 = $355;
         $774 = $353;
         $775 = $351;
         break L108;
        }
        $$sroa$08$0$ptr$i = $$sroa$08$0$ptr$i + 4 | 0;
        $369 = $369 + 4 | 0;
       }
      }
     } else {
      $$sroa$0309$1 = $771;
      $774 = $772;
      $775 = $773;
     }
    } while (0);
    $$sroa$0289$0$ptr = $$sroa$0309$1;
    $376 = $775;
    $380 = $774;
    $400 = $767;
    L124 : while (1) {
     $377 = $376 << 24 >> 24 < 0;
     if (($$sroa$0289$0$ptr | 0) == (($377 ? $380 : $20) + (($377 ? HEAP32[$53 >> 2] | 0 : $376 & 255) << 2) | 0)) break;
     $385 = HEAP32[$0 >> 2] | 0;
     do if (!$385) $776 = 1; else {
      $388 = HEAP32[$385 + 12 >> 2] | 0;
      if (($388 | 0) == (HEAP32[$385 + 16 >> 2] | 0)) $$0$i$i$i$i220 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$385 >> 2] | 0) + 36 >> 2] & 127]($385) | 0; else $$0$i$i$i$i220 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$388 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i220, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $776 = 1;
       break;
      } else {
       $776 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$400) label = 134; else {
      $403 = HEAP32[$400 + 12 >> 2] | 0;
      if (($403 | 0) == (HEAP32[$400 + 16 >> 2] | 0)) $$0$i$i2$i$i226 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$400 >> 2] | 0) + 36 >> 2] & 127]($400) | 0; else $$0$i$i2$i$i226 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$403 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i226, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       label = 134;
       break;
      } else if ($776) {
       $777 = $400;
       break;
      } else break L124;
     } while (0);
     if ((label | 0) == 134) {
      label = 0;
      if ($776) break; else $777 = 0;
     }
     $415 = HEAP32[$0 >> 2] | 0;
     $417 = HEAP32[$415 + 12 >> 2] | 0;
     if (($417 | 0) == (HEAP32[$415 + 16 >> 2] | 0)) $$0$i$i232 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$415 >> 2] | 0) + 36 >> 2] & 127]($415) | 0; else $$0$i$i232 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$417 >> 2] | 0) | 0;
     if (($$0$i$i232 | 0) != (HEAP32[$$sroa$0289$0$ptr >> 2] | 0)) break;
     $429 = HEAP32[$0 >> 2] | 0;
     $430 = $429 + 12 | 0;
     $431 = HEAP32[$430 >> 2] | 0;
     if (($431 | 0) == (HEAP32[$429 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$429 >> 2] | 0) + 40 >> 2] & 127]($429) | 0; else {
      HEAP32[$430 >> 2] = $431 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$431 >> 2] | 0) | 0;
     }
     $$sroa$0289$0$ptr = $$sroa$0289$0$ptr + 4 | 0;
     $376 = HEAP8[$51 >> 0] | 0;
     $380 = HEAP32[$20 >> 2] | 0;
     $400 = $777;
    }
    if ($49) {
     $441 = HEAP8[$51 >> 0] | 0;
     $442 = $441 << 24 >> 24 < 0;
     if (($$sroa$0289$0$ptr | 0) == (($442 ? HEAP32[$20 >> 2] | 0 : $20) + (($442 ? HEAP32[$53 >> 2] | 0 : $441 & 255) << 2) | 0)) $$1132 = $$0131; else {
      label = 146;
      break L21;
     }
    } else $$1132 = $$0131;
    break;
   }
  case 4:
   {
    $$0126 = 0;
    $467 = $767;
    $768 = $767;
    L161 : while (1) {
     $452 = HEAP32[$0 >> 2] | 0;
     do if (!$452) $778 = 1; else {
      $455 = HEAP32[$452 + 12 >> 2] | 0;
      if (($455 | 0) == (HEAP32[$452 + 16 >> 2] | 0)) $$0$i$i$i$i236 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$452 >> 2] | 0) + 36 >> 2] & 127]($452) | 0; else $$0$i$i$i$i236 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$455 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i236, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $778 = 1;
       break;
      } else {
       $778 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$467) {
      $779 = $768;
      label = 160;
     } else {
      $470 = HEAP32[$467 + 12 >> 2] | 0;
      if (($470 | 0) == (HEAP32[$467 + 16 >> 2] | 0)) $$0$i$i2$i$i242 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$467 >> 2] | 0) + 36 >> 2] & 127]($467) | 0; else $$0$i$i2$i$i242 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$470 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i242, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $779 = 0;
       label = 160;
       break;
      } else if ($778) {
       $780 = $768;
       $781 = $467;
       break;
      } else {
       $554 = $768;
       break L161;
      }
     } while (0);
     if ((label | 0) == 160) {
      label = 0;
      if ($778) {
       $554 = $779;
       break;
      } else {
       $780 = $779;
       $781 = 0;
      }
     }
     $482 = HEAP32[$0 >> 2] | 0;
     $484 = HEAP32[$482 + 12 >> 2] | 0;
     if (($484 | 0) == (HEAP32[$482 + 16 >> 2] | 0)) $$0$i$i248 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$482 >> 2] | 0) + 36 >> 2] & 127]($482) | 0; else $$0$i$i248 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$484 >> 2] | 0) | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] & 31]($7, 2048, $$0$i$i248) | 0) {
      $498 = HEAP32[$9 >> 2] | 0;
      if (($498 | 0) == (HEAP32[$11 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8, $9, $11);
       $502 = HEAP32[$9 >> 2] | 0;
      } else $502 = $498;
      HEAP32[$9 >> 2] = $502 + 4;
      HEAP32[$502 >> 2] = $$0$i$i248;
      $$2128$ph = $$0126 + 1 | 0;
     } else {
      $504 = HEAP8[$46 >> 0] | 0;
      if (!(($$0$i$i248 | 0) == (HEAP32[$18 >> 2] | 0) & ($$0126 | 0 ? (($504 << 24 >> 24 < 0 ? HEAP32[$47 >> 2] | 0 : $504 & 255) | 0) != 0 : 0))) {
       $554 = $780;
       break;
      }
      $513 = HEAP32[$14 >> 2] | 0;
      if (($513 | 0) == (HEAP32[$15 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13, $14, $15);
       $517 = HEAP32[$14 >> 2] | 0;
      } else $517 = $513;
      HEAP32[$14 >> 2] = $517 + 4;
      HEAP32[$517 >> 2] = $$0126;
      $$2128$ph = 0;
     }
     $518 = HEAP32[$0 >> 2] | 0;
     $519 = $518 + 12 | 0;
     $520 = HEAP32[$519 >> 2] | 0;
     if (($520 | 0) == (HEAP32[$518 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$518 >> 2] | 0) + 40 >> 2] & 127]($518) | 0; else {
      HEAP32[$519 >> 2] = $520 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$520 >> 2] | 0) | 0;
     }
     $$0126 = $$2128$ph;
     $467 = $781;
     $768 = $780;
    }
    $530 = HEAP32[$14 >> 2] | 0;
    if ($$0126 | 0 ? (HEAP32[$13 >> 2] | 0) != ($530 | 0) : 0) {
     if (($530 | 0) == (HEAP32[$15 >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13, $14, $15);
      $536 = HEAP32[$14 >> 2] | 0;
     } else $536 = $530;
     HEAP32[$14 >> 2] = $536 + 4;
     HEAP32[$536 >> 2] = $$0126;
    }
    L211 : do if ((HEAP32[$24 >> 2] | 0) > 0) {
     $539 = HEAP32[$0 >> 2] | 0;
     do if (!$539) $782 = 1; else {
      $542 = HEAP32[$539 + 12 >> 2] | 0;
      if (($542 | 0) == (HEAP32[$539 + 16 >> 2] | 0)) $$0$i$i$i$i251 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$539 >> 2] | 0) + 36 >> 2] & 127]($539) | 0; else $$0$i$i$i$i251 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$542 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i251, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $782 = 1;
       break;
      } else {
       $782 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$554) label = 195; else {
      $557 = HEAP32[$554 + 12 >> 2] | 0;
      if (($557 | 0) == (HEAP32[$554 + 16 >> 2] | 0)) $$0$i$i2$i$i257 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$554 >> 2] | 0) + 36 >> 2] & 127]($554) | 0; else $$0$i$i2$i$i257 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$557 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i257, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       label = 195;
       break;
      } else if ($782) {
       $783 = $554;
       break;
      } else {
       label = 201;
       break L21;
      }
     } while (0);
     if ((label | 0) == 195) {
      label = 0;
      if ($782) {
       label = 201;
       break L21;
      } else $783 = 0;
     }
     $569 = HEAP32[$0 >> 2] | 0;
     $571 = HEAP32[$569 + 12 >> 2] | 0;
     if (($571 | 0) == (HEAP32[$569 + 16 >> 2] | 0)) $$0$i$i263 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$569 >> 2] | 0) + 36 >> 2] & 127]($569) | 0; else $$0$i$i263 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$571 >> 2] | 0) | 0;
     if (($$0$i$i263 | 0) != (HEAP32[$17 >> 2] | 0)) {
      label = 201;
      break L21;
     }
     $585 = HEAP32[$0 >> 2] | 0;
     $586 = $585 + 12 | 0;
     $587 = HEAP32[$586 >> 2] | 0;
     if (($587 | 0) == (HEAP32[$585 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$585 >> 2] | 0) + 40 >> 2] & 127]($585) | 0; else {
      HEAP32[$586 >> 2] = $587 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$587 >> 2] | 0) | 0;
     }
     $613 = $783;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) <= 0) break L211;
      $598 = HEAP32[$0 >> 2] | 0;
      do if (!$598) $784 = 1; else {
       $601 = HEAP32[$598 + 12 >> 2] | 0;
       if (($601 | 0) == (HEAP32[$598 + 16 >> 2] | 0)) $$0$i$i$i$i266 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$598 >> 2] | 0) + 36 >> 2] & 127]($598) | 0; else $$0$i$i$i$i266 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$601 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i266, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $784 = 1;
        break;
       } else {
        $784 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$613) label = 220; else {
       $616 = HEAP32[$613 + 12 >> 2] | 0;
       if (($616 | 0) == (HEAP32[$613 + 16 >> 2] | 0)) $$0$i$i2$i$i272 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$613 >> 2] | 0) + 36 >> 2] & 127]($613) | 0; else $$0$i$i2$i$i272 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$616 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i272, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        label = 220;
        break;
       } else if ($784) {
        $785 = $613;
        break;
       } else {
        label = 226;
        break L21;
       }
      } while (0);
      if ((label | 0) == 220) {
       label = 0;
       if ($784) {
        label = 226;
        break L21;
       } else $785 = 0;
      }
      $628 = HEAP32[$0 >> 2] | 0;
      $630 = HEAP32[$628 + 12 >> 2] | 0;
      if (($630 | 0) == (HEAP32[$628 + 16 >> 2] | 0)) $$0$i$i278 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$628 >> 2] | 0) + 36 >> 2] & 127]($628) | 0; else $$0$i$i278 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$630 >> 2] | 0) | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] & 31]($7, 2048, $$0$i$i278) | 0)) {
       label = 226;
       break L21;
      }
      if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8, $9, $11);
      $649 = HEAP32[$0 >> 2] | 0;
      $651 = HEAP32[$649 + 12 >> 2] | 0;
      if (($651 | 0) == (HEAP32[$649 + 16 >> 2] | 0)) $$0$i$i280 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$649 >> 2] | 0) + 36 >> 2] & 127]($649) | 0; else $$0$i$i280 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$651 >> 2] | 0) | 0;
      $661 = HEAP32[$9 >> 2] | 0;
      HEAP32[$9 >> 2] = $661 + 4;
      HEAP32[$661 >> 2] = $$0$i$i280;
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + -1;
      $665 = HEAP32[$0 >> 2] | 0;
      $666 = $665 + 12 | 0;
      $667 = HEAP32[$666 >> 2] | 0;
      if (($667 | 0) == (HEAP32[$665 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$665 >> 2] | 0) + 40 >> 2] & 127]($665) | 0; else {
       HEAP32[$666 >> 2] = $667 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$667 >> 2] | 0) | 0;
      }
      $613 = $785;
     }
    } while (0);
    if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     label = 237;
     break L21;
    } else $$1132 = $$0131;
    break;
   }
  default:
   $$1132 = $$0131;
  } while (0);
  L286 : do if ((label | 0) == 46) {
   label = 0;
   $138 = $767;
   while (1) {
    $123 = HEAP32[$0 >> 2] | 0;
    do if (!$123) $769 = 1; else {
     $126 = HEAP32[$123 + 12 >> 2] | 0;
     if (($126 | 0) == (HEAP32[$123 + 16 >> 2] | 0)) $$0$i$i$i$i162 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$123 >> 2] | 0) + 36 >> 2] & 127]($123) | 0; else $$0$i$i$i$i162 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$126 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i162, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0;
      $769 = 1;
      break;
     } else {
      $769 = (HEAP32[$0 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!$138) label = 60; else {
     $141 = HEAP32[$138 + 12 >> 2] | 0;
     if (($141 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) $$0$i$i2$i$i168 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 36 >> 2] & 127]($138) | 0; else $$0$i$i2$i$i168 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$141 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i168, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      label = 60;
      break;
     } else if ($769) {
      $770 = $138;
      break;
     } else {
      $$1132 = $$0131;
      break L286;
     }
    } while (0);
    if ((label | 0) == 60) {
     label = 0;
     if ($769) {
      $$1132 = $$0131;
      break L286;
     } else $770 = 0;
    }
    $153 = HEAP32[$0 >> 2] | 0;
    $155 = HEAP32[$153 + 12 >> 2] | 0;
    if (($155 | 0) == (HEAP32[$153 + 16 >> 2] | 0)) $$0$i$i174 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$153 >> 2] | 0) + 36 >> 2] & 127]($153) | 0; else $$0$i$i174 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$155 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] & 31]($7, 8192, $$0$i$i174) | 0)) {
     $$1132 = $$0131;
     break L286;
    }
    $169 = HEAP32[$0 >> 2] | 0;
    $170 = $169 + 12 | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    if (($171 | 0) == (HEAP32[$169 + 16 >> 2] | 0)) $$0$i$i176 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$169 >> 2] | 0) + 40 >> 2] & 127]($169) | 0; else {
     HEAP32[$170 >> 2] = $171 + 4;
     $$0$i$i176 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$171 >> 2] | 0) | 0;
    }
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($23, $$0$i$i176);
    $138 = $770;
   }
  } while (0);
  $$0131 = $$1132;
  $$0133 = $$0133 + 1 | 0;
 }
 L322 : do if ((label | 0) == 44) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 103) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 146) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 201) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 226) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 237) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 239) {
  L324 : do if ($$0131 | 0) {
   $684 = $$0131 + 8 + 3 | 0;
   $685 = $$0131 + 4 | 0;
   $$0 = 1;
   L326 : while (1) {
    $686 = HEAP8[$684 >> 0] | 0;
    if ($686 << 24 >> 24 < 0) $691 = HEAP32[$685 >> 2] | 0; else $691 = $686 & 255;
    if ($$0 >>> 0 >= $691 >>> 0) break L324;
    $692 = HEAP32[$0 >> 2] | 0;
    do if (!$692) $786 = 1; else {
     $695 = HEAP32[$692 + 12 >> 2] | 0;
     if (($695 | 0) == (HEAP32[$692 + 16 >> 2] | 0)) $$0$i$i$i$i207 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$692 >> 2] | 0) + 36 >> 2] & 127]($692) | 0; else $$0$i$i$i$i207 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$695 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i207, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0;
      $786 = 1;
      break;
     } else {
      $786 = (HEAP32[$0 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    $707 = HEAP32[$1 >> 2] | 0;
    do if (!$707) label = 258; else {
     $710 = HEAP32[$707 + 12 >> 2] | 0;
     if (($710 | 0) == (HEAP32[$707 + 16 >> 2] | 0)) $$0$i$i2$i$i213 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$707 >> 2] | 0) + 36 >> 2] & 127]($707) | 0; else $$0$i$i2$i$i213 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$710 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i213, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      label = 258;
      break;
     } else if ($786) break; else break L326;
    } while (0);
    if ((label | 0) == 258) {
     label = 0;
     if ($786) break;
    }
    $722 = HEAP32[$0 >> 2] | 0;
    $724 = HEAP32[$722 + 12 >> 2] | 0;
    if (($724 | 0) == (HEAP32[$722 + 16 >> 2] | 0)) $$0$i$i203 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$722 >> 2] | 0) + 36 >> 2] & 127]($722) | 0; else $$0$i$i203 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$724 >> 2] | 0) | 0;
    if ((HEAP8[$684 >> 0] | 0) < 0) $738 = HEAP32[$$0131 >> 2] | 0; else $738 = $$0131;
    if (($$0$i$i203 | 0) != (HEAP32[$738 + ($$0 << 2) >> 2] | 0)) break;
    $744 = HEAP32[$0 >> 2] | 0;
    $745 = $744 + 12 | 0;
    $746 = HEAP32[$745 >> 2] | 0;
    if (($746 | 0) == (HEAP32[$744 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$744 >> 2] | 0) + 40 >> 2] & 127]($744) | 0; else {
     HEAP32[$745 >> 2] = $746 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$746 >> 2] | 0) | 0;
    }
    $$0 = $$0 + 1 | 0;
   }
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
   $$10 = 0;
   break L322;
  } while (0);
  $755 = HEAP32[$13 >> 2] | 0;
  $756 = HEAP32[$14 >> 2] | 0;
  if (($755 | 0) == ($756 | 0)) $$10 = 1; else {
   HEAP32[$25 >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19, $755, $756, $25);
   if (!(HEAP32[$25 >> 2] | 0)) {
    $$10 = 1;
    break;
   } else {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $762 = HEAP32[$13 >> 2] | 0;
 HEAP32[$13 >> 2] = 0;
 if ($762 | 0) FUNCTION_TABLE_vi[HEAP32[$13 + 4 >> 2] & 255]($762);
 STACKTOP = sp;
 return $$10 | 0;
}

function __ZNSt3__212__next_primeEm($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0328 = 0, $$0334 = 0, $$0337 = 0, $$1 = 0, $$2332 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$8 = 0, $$sink369 = 0, $1 = 0, $100 = 0, $104 = 0, $105 = 0, $109 = 0, $110 = 0, $114 = 0, $115 = 0, $119 = 0, $120 = 0, $124 = 0, $125 = 0, $129 = 0, $130 = 0, $134 = 0, $135 = 0, $139 = 0, $140 = 0, $144 = 0, $145 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $169 = 0, $170 = 0, $174 = 0, $175 = 0, $179 = 0, $180 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $190 = 0, $194 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $209 = 0, $210 = 0, $214 = 0, $215 = 0, $219 = 0, $220 = 0, $224 = 0, $225 = 0, $229 = 0, $230 = 0, $234 = 0, $235 = 0, $239 = 0, $240 = 0, $244 = 0, $245 = 0, $249 = 0, $25 = 0, $250 = 0, $254 = 0, $255 = 0, $259 = 0, $260 = 0, $261 = 0, $263 = 0, $266 = 0, $267 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $35 = 0, $39 = 0, $40 = 0, $44 = 0, $45 = 0, $49 = 0, $50 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $69 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $90 = 0, $94 = 0, $95 = 0, $99 = 0, $spec$select = 0, $spec$select339$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 do if ($0 >>> 0 < 212) $$8 = HEAP32[(__ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_(5888, 6080, $2, $1) | 0) >> 2] | 0; else {
  $7 = ($0 >>> 0) / 210 | 0;
  $8 = $7 * 210 | 0;
  HEAP32[$3 >> 2] = $0 - $8;
  $$0328 = 0;
  $$0337 = $7;
  $$sink369 = $8;
  $spec$select339$sink = (__ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_(6080, 6272, $3, $1) | 0) - 6080 >> 2;
  L4 : while (1) {
   $16 = (HEAP32[6080 + ($spec$select339$sink << 2) >> 2] | 0) + $$sink369 | 0;
   $$0334 = 5;
   while (1) {
    if ($$0334 >>> 0 >= 47) {
     label = 6;
     break;
    }
    $19 = HEAP32[5888 + ($$0334 << 2) >> 2] | 0;
    $20 = ($16 >>> 0) / ($19 >>> 0) | 0;
    if ($20 >>> 0 < $19 >>> 0) {
     label = 107;
     break L4;
    }
    if (($16 | 0) == (Math_imul($20, $19) | 0)) {
     $$6 = $$0328;
     break;
    } else $$0334 = $$0334 + 1 | 0;
   }
   L10 : do if ((label | 0) == 6) {
    label = 0;
    $$0 = 211;
    $$4 = $$0328;
    L12 : while (1) {
     $25 = ($16 >>> 0) / ($$0 >>> 0) | 0;
     do if ($25 >>> 0 < $$0 >>> 0) {
      $$1 = $$0;
      $$2332 = 1;
      $$5 = $16;
     } else if (($16 | 0) == (Math_imul($25, $$0) | 0)) {
      $$1 = $$0;
      $$2332 = 9;
      $$5 = $$4;
     } else {
      $29 = $$0 + 10 | 0;
      $30 = ($16 >>> 0) / ($29 >>> 0) | 0;
      if ($30 >>> 0 < $29 >>> 0) {
       $$1 = $29;
       $$2332 = 1;
       $$5 = $16;
      } else if (($16 | 0) == (Math_imul($30, $29) | 0)) {
       $$1 = $29;
       $$2332 = 9;
       $$5 = $$4;
      } else {
       $34 = $$0 + 12 | 0;
       $35 = ($16 >>> 0) / ($34 >>> 0) | 0;
       if ($35 >>> 0 < $34 >>> 0) {
        $$1 = $34;
        $$2332 = 1;
        $$5 = $16;
       } else if (($16 | 0) == (Math_imul($35, $34) | 0)) {
        $$1 = $34;
        $$2332 = 9;
        $$5 = $$4;
       } else {
        $39 = $$0 + 16 | 0;
        $40 = ($16 >>> 0) / ($39 >>> 0) | 0;
        if ($40 >>> 0 < $39 >>> 0) {
         $$1 = $39;
         $$2332 = 1;
         $$5 = $16;
        } else if (($16 | 0) == (Math_imul($40, $39) | 0)) {
         $$1 = $39;
         $$2332 = 9;
         $$5 = $$4;
        } else {
         $44 = $$0 + 18 | 0;
         $45 = ($16 >>> 0) / ($44 >>> 0) | 0;
         if ($45 >>> 0 < $44 >>> 0) {
          $$1 = $44;
          $$2332 = 1;
          $$5 = $16;
         } else if (($16 | 0) == (Math_imul($45, $44) | 0)) {
          $$1 = $44;
          $$2332 = 9;
          $$5 = $$4;
         } else {
          $49 = $$0 + 22 | 0;
          $50 = ($16 >>> 0) / ($49 >>> 0) | 0;
          if ($50 >>> 0 < $49 >>> 0) {
           $$1 = $49;
           $$2332 = 1;
           $$5 = $16;
          } else if (($16 | 0) == (Math_imul($50, $49) | 0)) {
           $$1 = $49;
           $$2332 = 9;
           $$5 = $$4;
          } else {
           $54 = $$0 + 28 | 0;
           $55 = ($16 >>> 0) / ($54 >>> 0) | 0;
           if ($55 >>> 0 < $54 >>> 0) {
            $$1 = $54;
            $$2332 = 1;
            $$5 = $16;
           } else if (($16 | 0) == (Math_imul($55, $54) | 0)) {
            $$1 = $54;
            $$2332 = 9;
            $$5 = $$4;
           } else {
            $59 = $$0 + 30 | 0;
            $60 = ($16 >>> 0) / ($59 >>> 0) | 0;
            if ($60 >>> 0 < $59 >>> 0) {
             $$1 = $59;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($60, $59) | 0)) {
             $$1 = $59;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $64 = $$0 + 36 | 0;
            $65 = ($16 >>> 0) / ($64 >>> 0) | 0;
            if ($65 >>> 0 < $64 >>> 0) {
             $$1 = $64;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($65, $64) | 0)) {
             $$1 = $64;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $69 = $$0 + 40 | 0;
            $70 = ($16 >>> 0) / ($69 >>> 0) | 0;
            if ($70 >>> 0 < $69 >>> 0) {
             $$1 = $69;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($70, $69) | 0)) {
             $$1 = $69;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $74 = $$0 + 42 | 0;
            $75 = ($16 >>> 0) / ($74 >>> 0) | 0;
            if ($75 >>> 0 < $74 >>> 0) {
             $$1 = $74;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($75, $74) | 0)) {
             $$1 = $74;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $79 = $$0 + 46 | 0;
            $80 = ($16 >>> 0) / ($79 >>> 0) | 0;
            if ($80 >>> 0 < $79 >>> 0) {
             $$1 = $79;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($80, $79) | 0)) {
             $$1 = $79;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $84 = $$0 + 52 | 0;
            $85 = ($16 >>> 0) / ($84 >>> 0) | 0;
            if ($85 >>> 0 < $84 >>> 0) {
             $$1 = $84;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($85, $84) | 0)) {
             $$1 = $84;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $89 = $$0 + 58 | 0;
            $90 = ($16 >>> 0) / ($89 >>> 0) | 0;
            if ($90 >>> 0 < $89 >>> 0) {
             $$1 = $89;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($90, $89) | 0)) {
             $$1 = $89;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $94 = $$0 + 60 | 0;
            $95 = ($16 >>> 0) / ($94 >>> 0) | 0;
            if ($95 >>> 0 < $94 >>> 0) {
             $$1 = $94;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($95, $94) | 0)) {
             $$1 = $94;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $99 = $$0 + 66 | 0;
            $100 = ($16 >>> 0) / ($99 >>> 0) | 0;
            if ($100 >>> 0 < $99 >>> 0) {
             $$1 = $99;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($100, $99) | 0)) {
             $$1 = $99;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $104 = $$0 + 70 | 0;
            $105 = ($16 >>> 0) / ($104 >>> 0) | 0;
            if ($105 >>> 0 < $104 >>> 0) {
             $$1 = $104;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($105, $104) | 0)) {
             $$1 = $104;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $109 = $$0 + 72 | 0;
            $110 = ($16 >>> 0) / ($109 >>> 0) | 0;
            if ($110 >>> 0 < $109 >>> 0) {
             $$1 = $109;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($110, $109) | 0)) {
             $$1 = $109;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $114 = $$0 + 78 | 0;
            $115 = ($16 >>> 0) / ($114 >>> 0) | 0;
            if ($115 >>> 0 < $114 >>> 0) {
             $$1 = $114;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($115, $114) | 0)) {
             $$1 = $114;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $119 = $$0 + 82 | 0;
            $120 = ($16 >>> 0) / ($119 >>> 0) | 0;
            if ($120 >>> 0 < $119 >>> 0) {
             $$1 = $119;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($120, $119) | 0)) {
             $$1 = $119;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $124 = $$0 + 88 | 0;
            $125 = ($16 >>> 0) / ($124 >>> 0) | 0;
            if ($125 >>> 0 < $124 >>> 0) {
             $$1 = $124;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($125, $124) | 0)) {
             $$1 = $124;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $129 = $$0 + 96 | 0;
            $130 = ($16 >>> 0) / ($129 >>> 0) | 0;
            if ($130 >>> 0 < $129 >>> 0) {
             $$1 = $129;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($130, $129) | 0)) {
             $$1 = $129;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $134 = $$0 + 100 | 0;
            $135 = ($16 >>> 0) / ($134 >>> 0) | 0;
            if ($135 >>> 0 < $134 >>> 0) {
             $$1 = $134;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($135, $134) | 0)) {
             $$1 = $134;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $139 = $$0 + 102 | 0;
            $140 = ($16 >>> 0) / ($139 >>> 0) | 0;
            if ($140 >>> 0 < $139 >>> 0) {
             $$1 = $139;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($140, $139) | 0)) {
             $$1 = $139;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $144 = $$0 + 106 | 0;
            $145 = ($16 >>> 0) / ($144 >>> 0) | 0;
            if ($145 >>> 0 < $144 >>> 0) {
             $$1 = $144;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($145, $144) | 0)) {
             $$1 = $144;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $149 = $$0 + 108 | 0;
            $150 = ($16 >>> 0) / ($149 >>> 0) | 0;
            if ($150 >>> 0 < $149 >>> 0) {
             $$1 = $149;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($150, $149) | 0)) {
             $$1 = $149;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $154 = $$0 + 112 | 0;
            $155 = ($16 >>> 0) / ($154 >>> 0) | 0;
            if ($155 >>> 0 < $154 >>> 0) {
             $$1 = $154;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($155, $154) | 0)) {
             $$1 = $154;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $159 = $$0 + 120 | 0;
            $160 = ($16 >>> 0) / ($159 >>> 0) | 0;
            if ($160 >>> 0 < $159 >>> 0) {
             $$1 = $159;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($160, $159) | 0)) {
             $$1 = $159;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $164 = $$0 + 126 | 0;
            $165 = ($16 >>> 0) / ($164 >>> 0) | 0;
            if ($165 >>> 0 < $164 >>> 0) {
             $$1 = $164;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($165, $164) | 0)) {
             $$1 = $164;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $169 = $$0 + 130 | 0;
            $170 = ($16 >>> 0) / ($169 >>> 0) | 0;
            if ($170 >>> 0 < $169 >>> 0) {
             $$1 = $169;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($170, $169) | 0)) {
             $$1 = $169;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $174 = $$0 + 136 | 0;
            $175 = ($16 >>> 0) / ($174 >>> 0) | 0;
            if ($175 >>> 0 < $174 >>> 0) {
             $$1 = $174;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($175, $174) | 0)) {
             $$1 = $174;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $179 = $$0 + 138 | 0;
            $180 = ($16 >>> 0) / ($179 >>> 0) | 0;
            if ($180 >>> 0 < $179 >>> 0) {
             $$1 = $179;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($180, $179) | 0)) {
             $$1 = $179;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $184 = $$0 + 142 | 0;
            $185 = ($16 >>> 0) / ($184 >>> 0) | 0;
            if ($185 >>> 0 < $184 >>> 0) {
             $$1 = $184;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($185, $184) | 0)) {
             $$1 = $184;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $189 = $$0 + 148 | 0;
            $190 = ($16 >>> 0) / ($189 >>> 0) | 0;
            if ($190 >>> 0 < $189 >>> 0) {
             $$1 = $189;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($190, $189) | 0)) {
             $$1 = $189;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $194 = $$0 + 150 | 0;
            $195 = ($16 >>> 0) / ($194 >>> 0) | 0;
            if ($195 >>> 0 < $194 >>> 0) {
             $$1 = $194;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($195, $194) | 0)) {
             $$1 = $194;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $199 = $$0 + 156 | 0;
            $200 = ($16 >>> 0) / ($199 >>> 0) | 0;
            if ($200 >>> 0 < $199 >>> 0) {
             $$1 = $199;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($200, $199) | 0)) {
             $$1 = $199;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $204 = $$0 + 162 | 0;
            $205 = ($16 >>> 0) / ($204 >>> 0) | 0;
            if ($205 >>> 0 < $204 >>> 0) {
             $$1 = $204;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($205, $204) | 0)) {
             $$1 = $204;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $209 = $$0 + 166 | 0;
            $210 = ($16 >>> 0) / ($209 >>> 0) | 0;
            if ($210 >>> 0 < $209 >>> 0) {
             $$1 = $209;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($210, $209) | 0)) {
             $$1 = $209;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $214 = $$0 + 168 | 0;
            $215 = ($16 >>> 0) / ($214 >>> 0) | 0;
            if ($215 >>> 0 < $214 >>> 0) {
             $$1 = $214;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($215, $214) | 0)) {
             $$1 = $214;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $219 = $$0 + 172 | 0;
            $220 = ($16 >>> 0) / ($219 >>> 0) | 0;
            if ($220 >>> 0 < $219 >>> 0) {
             $$1 = $219;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($220, $219) | 0)) {
             $$1 = $219;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $224 = $$0 + 178 | 0;
            $225 = ($16 >>> 0) / ($224 >>> 0) | 0;
            if ($225 >>> 0 < $224 >>> 0) {
             $$1 = $224;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($225, $224) | 0)) {
             $$1 = $224;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $229 = $$0 + 180 | 0;
            $230 = ($16 >>> 0) / ($229 >>> 0) | 0;
            if ($230 >>> 0 < $229 >>> 0) {
             $$1 = $229;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($230, $229) | 0)) {
             $$1 = $229;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $234 = $$0 + 186 | 0;
            $235 = ($16 >>> 0) / ($234 >>> 0) | 0;
            if ($235 >>> 0 < $234 >>> 0) {
             $$1 = $234;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($235, $234) | 0)) {
             $$1 = $234;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $239 = $$0 + 190 | 0;
            $240 = ($16 >>> 0) / ($239 >>> 0) | 0;
            if ($240 >>> 0 < $239 >>> 0) {
             $$1 = $239;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($240, $239) | 0)) {
             $$1 = $239;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $244 = $$0 + 192 | 0;
            $245 = ($16 >>> 0) / ($244 >>> 0) | 0;
            if ($245 >>> 0 < $244 >>> 0) {
             $$1 = $244;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($245, $244) | 0)) {
             $$1 = $244;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $249 = $$0 + 196 | 0;
            $250 = ($16 >>> 0) / ($249 >>> 0) | 0;
            if ($250 >>> 0 < $249 >>> 0) {
             $$1 = $249;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($250, $249) | 0)) {
             $$1 = $249;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $254 = $$0 + 198 | 0;
            $255 = ($16 >>> 0) / ($254 >>> 0) | 0;
            if ($255 >>> 0 < $254 >>> 0) {
             $$1 = $254;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($255, $254) | 0)) {
             $$1 = $254;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $259 = $$0 + 208 | 0;
            $260 = ($16 >>> 0) / ($259 >>> 0) | 0;
            $261 = $260 >>> 0 < $259 >>> 0;
            $263 = ($16 | 0) == (Math_imul($260, $259) | 0);
            $$1 = $261 | $263 ? $259 : $$0 + 210 | 0;
            $$2332 = $261 ? 1 : $263 ? 9 : 0;
            $$5 = $261 ? $16 : $$4;
           }
          }
         }
        }
       }
      }
     } while (0);
     switch ($$2332 & 15) {
     case 9:
      {
       $$6 = $$5;
       break L10;
       break;
      }
     case 0:
      {
       $$0 = $$1;
       $$4 = $$5;
       break;
      }
     default:
      break L12;
     }
    }
    if (!$$2332) $$6 = $$5; else {
     label = 108;
     break L4;
    }
   } while (0);
   $266 = $spec$select339$sink + 1 | 0;
   $267 = ($266 | 0) == 48;
   $spec$select = $$0337 + ($267 & 1) | 0;
   $$0328 = $$6;
   $$0337 = $spec$select;
   $$sink369 = $spec$select * 210 | 0;
   $spec$select339$sink = $267 ? 0 : $266;
  }
  if ((label | 0) == 107) {
   HEAP32[$2 >> 2] = $16;
   $$8 = $16;
   break;
  } else if ((label | 0) == 108) {
   HEAP32[$2 >> 2] = $16;
   $$8 = $$5;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$8 | 0;
}

function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0266$lcssa = 0, $$0266409 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0285419 = 0, $$0288411 = 0, $$0290416 = 0, $$0294 = 0, $$0295 = 0, $$0308414 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1281 = 0, $$1286 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2287 = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3408 = 0, $$4 = 0, $$4284 = 0, $$5 = 0, $$5313 = 0, $$6 = 0, $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$ph$ph = 0, $$pre$phi493Z2D = 0, $$pre$phiZ2D = 0, $$sroa$2$0$$sroa_idx13 = 0, $102 = 0, $103 = 0, $108 = 0, $11 = 0, $110 = 0, $113 = 0, $115 = 0, $118 = 0, $121 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $141 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $165 = 0, $17 = 0, $170 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $178 = 0, $18 = 0, $183 = 0, $187 = 0, $19 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $198 = 0, $199 = 0, $20 = 0, $207 = 0, $219 = 0, $22 = 0, $223 = 0, $225 = 0, $233 = 0, $242 = 0, $245 = 0, $25 = 0, $253 = 0, $260 = 0, $268 = 0, $275 = 0, $280 = 0, $281 = 0, $288 = 0, $289 = 0, $298 = 0.0, $3 = 0, $30 = 0, $318 = 0, $319 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $37 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $66 = 0, $92 = 0, $93 = 0, $spec$select = 0, $spec$select319 = 0, $trunc = 0, label = 0, sp = 0, $$2282$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $3 = sp + 264 | 0;
 $4 = sp;
 $5 = sp + 260 | 0;
 $6 = sp + 272 | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $319 = ___lockfile($0) | 0; else $319 = 0;
 $11 = HEAP8[$1 >> 0] | 0;
 L4 : do if (!($11 << 24 >> 24)) $$3293 = 0; else {
  $13 = $0 + 4 | 0;
  $14 = $0 + 100 | 0;
  $15 = $0 + 108 | 0;
  $16 = $0 + 8 | 0;
  $17 = $4 + 10 | 0;
  $18 = $4 + 33 | 0;
  $19 = $4 + 46 | 0;
  $20 = $4 + 94 | 0;
  $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0;
  $$0273420 = $1;
  $$0285419 = 0;
  $$0290416 = 0;
  $$0308414 = 0;
  $22 = $11;
  $321 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($22 & 255) | 0)) {
    $52 = (HEAP8[$$0273420 >> 0] | 0) == 37;
    L10 : do if ($52) {
     $53 = $$0273420 + 1 | 0;
     $54 = HEAP8[$53 >> 0] | 0;
     L12 : do switch ($54 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $$0295 = 0;
       $$2275 = $$0273420 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit($54 & 255) | 0) if ((HEAP8[$$0273420 + 2 >> 0] | 0) == 36) {
        $$0295 = _arg_n($2, (HEAPU8[$53 >> 0] | 0) + -48 | 0) | 0;
        $$2275 = $$0273420 + 3 | 0;
        break L12;
       }
       $92 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $93 = HEAP32[$92 >> 2] | 0;
       HEAP32[$2 >> 2] = $92 + 4;
       $$0295 = $93;
       $$2275 = $53;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
      $$0266$lcssa = 0;
      $$3$lcssa = $$2275;
     } else {
      $$0266409 = 0;
      $$3408 = $$2275;
      while (1) {
       $102 = ($$0266409 * 10 | 0) + -48 + (HEAPU8[$$3408 >> 0] | 0) | 0;
       $103 = $$3408 + 1 | 0;
       if (!(_isdigit(HEAPU8[$103 >> 0] | 0) | 0)) {
        $$0266$lcssa = $102;
        $$3$lcssa = $103;
        break;
       } else {
        $$0266409 = $102;
        $$3408 = $103;
       }
      }
     }
     $108 = HEAP8[$$3$lcssa >> 0] | 0;
     $110 = $$3$lcssa + 1 | 0;
     if ($108 << 24 >> 24 == 109) {
      $$0270 = ($$0295 | 0) != 0 & 1;
      $$1309 = 0;
      $$4 = $110;
      $$pre$phiZ2D = $$3$lcssa + 2 | 0;
      $113 = HEAP8[$110 >> 0] | 0;
      $324 = 0;
     } else {
      $$0270 = 0;
      $$1309 = $$0308414;
      $$4 = $$3$lcssa;
      $$pre$phiZ2D = $110;
      $113 = $108;
      $324 = $321;
     }
     switch ($113 << 24 >> 24) {
     case 104:
      {
       $115 = (HEAP8[$$pre$phiZ2D >> 0] | 0) == 104;
       $$0268 = $115 ? -2 : -1;
       $$5 = $115 ? $$4 + 2 | 0 : $$pre$phiZ2D;
       break;
      }
     case 108:
      {
       $118 = (HEAP8[$$pre$phiZ2D >> 0] | 0) == 108;
       $$0268 = $118 ? 3 : 1;
       $$5 = $118 ? $$4 + 2 | 0 : $$pre$phiZ2D;
       break;
      }
     case 106:
      {
       $$0268 = 3;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 116:
     case 122:
      {
       $$0268 = 1;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 76:
      {
       $$0268 = 2;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $$0268 = 0;
       $$5 = $$4;
       break;
      }
     default:
      {
       $$8316 = $$1309;
       $325 = $324;
       label = 143;
       break L6;
      }
     }
     $121 = HEAPU8[$$5 >> 0] | 0;
     $123 = ($121 & 47 | 0) == 3;
     $spec$select = $123 ? $121 | 32 : $121;
     $spec$select319 = $123 ? 1 : $$0268;
     $trunc = $spec$select & 255;
     switch ($trunc << 24 >> 24) {
     case 99:
      {
       $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1;
       $$1286 = $$0285419;
       break;
      }
     case 91:
      {
       $$1267 = $$0266$lcssa;
       $$1286 = $$0285419;
       break;
      }
     case 110:
      {
       _store_int($$0295, $spec$select319, $$0285419, (($$0285419 | 0) < 0) << 31 >> 31);
       $$12 = $$5;
       $$1291 = $$0290416;
       $$2287 = $$0285419;
       $$7315 = $$1309;
       $322 = $324;
       break L8;
       break;
      }
     default:
      {
       ___shlim($0, 0);
       do {
        $128 = HEAP32[$13 >> 2] | 0;
        if ($128 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
         HEAP32[$13 >> 2] = $128 + 1;
         $135 = HEAPU8[$128 >> 0] | 0;
        } else $135 = ___shgetc($0) | 0;
       } while ((_isspace($135) | 0) != 0);
       if (!(HEAP32[$14 >> 2] | 0)) $147 = HEAP32[$13 >> 2] | 0; else {
        $141 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
        HEAP32[$13 >> 2] = $141;
        $147 = $141;
       }
       $$1267 = $$0266$lcssa;
       $$1286 = (HEAP32[$15 >> 2] | 0) + $$0285419 + $147 - (HEAP32[$16 >> 2] | 0) | 0;
      }
     }
     ___shlim($0, $$1267);
     $149 = HEAP32[$13 >> 2] | 0;
     $150 = HEAP32[$14 >> 2] | 0;
     if ($149 >>> 0 < $150 >>> 0) {
      HEAP32[$13 >> 2] = $149 + 1;
      $155 = $150;
     } else {
      if ((___shgetc($0) | 0) < 0) {
       $$8316 = $$1309;
       $325 = $324;
       label = 143;
       break L6;
      }
      $155 = HEAP32[$14 >> 2] | 0;
     }
     if ($155 | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
     L59 : do switch ($trunc << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       $159 = ($spec$select | 0) == 99;
       L61 : do if (($spec$select | 16 | 0) == 115) {
        _memset($4 | 0, -1, 257) | 0;
        HEAP8[$4 >> 0] = 0;
        if (($spec$select | 0) == 115) {
         HEAP8[$18 >> 0] = 0;
         HEAP16[$17 >> 1] = 0;
         HEAP16[$17 + 2 >> 1] = 0;
         HEAP8[$17 + 4 >> 0] = 0;
         $$10 = $$5;
        } else $$10 = $$5;
       } else {
        $163 = $$5 + 1 | 0;
        $165 = (HEAP8[$163 >> 0] | 0) == 94;
        $$0294 = $165 & 1;
        $$6 = $165 ? $$5 + 2 | 0 : $163;
        _memset($4 | 0, $$0294 | 0, 257) | 0;
        HEAP8[$4 >> 0] = 0;
        switch (HEAP8[$$6 >> 0] | 0) {
        case 45:
         {
          $170 = ($$0294 ^ 1) & 255;
          HEAP8[$19 >> 0] = $170;
          $$7 = $$6 + 1 | 0;
          $$pre$phi493Z2D = $170;
          break;
         }
        case 93:
         {
          $173 = ($$0294 ^ 1) & 255;
          HEAP8[$20 >> 0] = $173;
          $$7 = $$6 + 1 | 0;
          $$pre$phi493Z2D = $173;
          break;
         }
        default:
         {
          $$7 = $$6;
          $$pre$phi493Z2D = ($$0294 ^ 1) & 255;
         }
        }
        $$8 = $$7;
        while (1) {
         $174 = HEAP8[$$8 >> 0] | 0;
         L72 : do switch ($174 << 24 >> 24) {
         case 0:
          {
           $$8316 = $$1309;
           $325 = $324;
           label = 143;
           break L6;
           break;
          }
         case 93:
          {
           $$10 = $$8;
           break L61;
           break;
          }
         case 45:
          {
           $175 = $$8 + 1 | 0;
           $176 = HEAP8[$175 >> 0] | 0;
           switch ($176 << 24 >> 24) {
           case 93:
           case 0:
            {
             $$9 = $$8;
             $187 = 45;
             break L72;
             break;
            }
           default:
            {}
           }
           $178 = HEAP8[$$8 + -1 >> 0] | 0;
           if (($178 & 255) < ($176 & 255)) {
            $$0288411 = $178 & 255;
            do {
             $$0288411 = $$0288411 + 1 | 0;
             HEAP8[$4 + $$0288411 >> 0] = $$pre$phi493Z2D;
             $183 = HEAP8[$175 >> 0] | 0;
            } while ($$0288411 >>> 0 < ($183 & 255) >>> 0);
            $$9 = $175;
            $187 = $183;
           } else {
            $$9 = $175;
            $187 = $176;
           }
           break;
          }
         default:
          {
           $$9 = $$8;
           $187 = $174;
          }
         } while (0);
         HEAP8[$4 + (($187 & 255) + 1) >> 0] = $$pre$phi493Z2D;
         $$8 = $$9 + 1 | 0;
        }
       } while (0);
       $192 = $159 ? $$1267 + 1 | 0 : 31;
       $193 = ($spec$select319 | 0) == 1;
       $194 = ($$0270 | 0) != 0;
       L80 : do if ($193) {
        if ($194) {
         $196 = _malloc($192 << 2) | 0;
         if (!$196) {
          $$8316 = 0;
          $325 = 0;
          label = 143;
          break L6;
         } else $327 = $196;
        } else $327 = $$0295;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0;
        $$0276$ph$ph = $192;
        $$0280$ph$ph = 0;
        $$ph$ph = $327;
        L85 : while (1) {
         $198 = ($$ph$ph | 0) == 0;
         $$0280$ph = $$0280$ph$ph;
         while (1) {
          L89 : while (1) {
           $199 = HEAP32[$13 >> 2] | 0;
           if ($199 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $199 + 1;
            $207 = HEAPU8[$199 >> 0] | 0;
           } else $207 = ___shgetc($0) | 0;
           if (!(HEAP8[$4 + ($207 + 1) >> 0] | 0)) break L85;
           HEAP8[$6 >> 0] = $207;
           switch (_mbrtowc($5, $6, 1, $3) | 0) {
           case -1:
            {
             $$8316 = 0;
             $325 = $$ph$ph;
             label = 143;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L89;
           }
          }
          if ($198) $$1281 = $$0280$ph; else {
           HEAP32[$$ph$ph + ($$0280$ph << 2) >> 2] = HEAP32[$5 >> 2];
           $$1281 = $$0280$ph + 1 | 0;
          }
          if ($194 & ($$1281 | 0) == ($$0276$ph$ph | 0)) break; else $$0280$ph = $$1281;
         }
         $$0276$ph$ph = $$0276$ph$ph << 1 | 1;
         $219 = _realloc($$ph$ph, $$0276$ph$ph << 2) | 0;
         if (!$219) {
          $$8316 = 0;
          $325 = $$ph$ph;
          label = 143;
          break L6;
         } else {
          $$0280$ph$ph = $$1281;
          $$ph$ph = $219;
         }
        }
        if (!(_mbsinit($3) | 0)) {
         $$8316 = 0;
         $325 = $$ph$ph;
         label = 143;
         break L6;
        } else {
         $$4284 = $$0280$ph;
         $$5313 = 0;
         $$6302 = $$ph$ph;
         $328 = $$ph$ph;
        }
       } else {
        if ($194) {
         $223 = _malloc($192) | 0;
         if (!$223) {
          $$8316 = 0;
          $325 = 0;
          label = 143;
          break L6;
         }
         $$2278$ph = $192;
         $$2282$ph = 0;
         $$2310$ph = $223;
         while (1) {
          $$2282 = $$2282$ph;
          do {
           $225 = HEAP32[$13 >> 2] | 0;
           if ($225 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $225 + 1;
            $233 = HEAPU8[$225 >> 0] | 0;
           } else $233 = ___shgetc($0) | 0;
           if (!(HEAP8[$4 + ($233 + 1) >> 0] | 0)) {
            $$4284 = $$2282;
            $$5313 = $$2310$ph;
            $$6302 = 0;
            $328 = 0;
            break L80;
           }
           $$2282$looptemp = $$2282;
           $$2282 = $$2282 + 1 | 0;
           HEAP8[$$2310$ph + $$2282$looptemp >> 0] = $233;
          } while (($$2282 | 0) != ($$2278$ph | 0));
          $$2278$ph = $$2278$ph << 1 | 1;
          $242 = _realloc($$2310$ph, $$2278$ph) | 0;
          if (!$242) {
           $$8316 = $$2310$ph;
           $325 = 0;
           label = 143;
           break L6;
          } else {
           $$2282$ph = $$2282;
           $$2310$ph = $242;
          }
         }
        }
        if (!$$0295) while (1) {
         $260 = HEAP32[$13 >> 2] | 0;
         if ($260 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
          HEAP32[$13 >> 2] = $260 + 1;
          $268 = HEAPU8[$260 >> 0] | 0;
         } else $268 = ___shgetc($0) | 0;
         if (!(HEAP8[$4 + ($268 + 1) >> 0] | 0)) {
          $$4284 = 0;
          $$5313 = 0;
          $$6302 = 0;
          $328 = 0;
          break L80;
         }
        }
        $$3283 = 0;
        while (1) {
         $245 = HEAP32[$13 >> 2] | 0;
         if ($245 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
          HEAP32[$13 >> 2] = $245 + 1;
          $253 = HEAPU8[$245 >> 0] | 0;
         } else $253 = ___shgetc($0) | 0;
         if (!(HEAP8[$4 + ($253 + 1) >> 0] | 0)) {
          $$4284 = $$3283;
          $$5313 = $$0295;
          $$6302 = 0;
          $328 = 0;
          break L80;
         }
         HEAP8[$$0295 + $$3283 >> 0] = $253;
         $$3283 = $$3283 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[$14 >> 2] | 0)) $280 = HEAP32[$13 >> 2] | 0; else {
        $275 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
        HEAP32[$13 >> 2] = $275;
        $280 = $275;
       }
       $281 = $280 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0;
       if (!$281) {
        $$10318 = $$5313;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $328;
        break L6;
       }
       if (!(($281 | 0) == ($$1267 | 0) | $159 ^ 1)) {
        $$10318 = $$5313;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $328;
        break L6;
       }
       do if ($194) if ($193) {
        HEAP32[$$0295 >> 2] = $$6302;
        break;
       } else {
        HEAP32[$$0295 >> 2] = $$5313;
        break;
       } while (0);
       if ($159) {
        $$11 = $$10;
        $$6314 = $$5313;
        $326 = $328;
       } else {
        if ($$6302 | 0) HEAP32[$$6302 + ($$4284 << 2) >> 2] = 0;
        if (!$$5313) {
         $$11 = $$10;
         $$6314 = 0;
         $326 = $328;
         break L59;
        }
        HEAP8[$$5313 + $$4284 >> 0] = 0;
        $$11 = $$10;
        $$6314 = $$5313;
        $326 = $328;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $$0272 = 16;
       label = 131;
       break;
      }
     case 111:
      {
       $$0272 = 8;
       label = 131;
       break;
      }
     case 117:
     case 100:
      {
       $$0272 = 10;
       label = 131;
       break;
      }
     case 105:
      {
       $$0272 = 0;
       label = 131;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $298 = +___floatscan($0, $spec$select319, 0);
       if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
        $$10318 = $$1309;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $324;
        break L6;
       }
       if (!$$0295) {
        $$11 = $$5;
        $$6314 = $$1309;
        $326 = $324;
       } else switch ($spec$select319 | 0) {
       case 0:
        {
         HEAPF32[$$0295 >> 2] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       case 1:
        {
         HEAPF64[$$0295 >> 3] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       case 2:
        {
         HEAPF64[$$0295 >> 3] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       default:
        {
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
        }
       }
       break;
      }
     default:
      {
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
      }
     } while (0);
     do if ((label | 0) == 131) {
      label = 0;
      $288 = ___intscan($0, $$0272, 0, -1, -1) | 0;
      $289 = getTempRet0() | 0;
      if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
       $$10318 = $$1309;
       $$2 = $$0270;
       $$2292 = $$0290416;
       $318 = $324;
       break L6;
      }
      if (($$0295 | 0) != 0 & ($spec$select | 0) == 112) {
       HEAP32[$$0295 >> 2] = $288;
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
       break;
      } else {
       _store_int($$0295, $spec$select319, $288, $289);
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
       break;
      }
     } while (0);
     $$12 = $$11;
     $$1291 = $$0290416 + (($$0295 | 0) != 0 & 1) | 0;
     $$2287 = (HEAP32[$15 >> 2] | 0) + $$1286 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0;
     $$7315 = $$6314;
     $322 = $326;
     break L8;
    } while (0);
    $56 = $$0273420 + ($52 & 1) | 0;
    ___shlim($0, 0);
    $57 = HEAP32[$13 >> 2] | 0;
    if ($57 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $57 + 1;
     $66 = HEAPU8[$57 >> 0] | 0;
    } else $66 = ___shgetc($0) | 0;
    if (($66 | 0) != (HEAPU8[$56 >> 0] | 0)) {
     label = 23;
     break L6;
    }
    $$12 = $56;
    $$1291 = $$0290416;
    $$2287 = $$0285419 + 1 | 0;
    $$7315 = $$0308414;
    $322 = $321;
   } else {
    $$1274 = $$0273420;
    while (1) {
     $25 = $$1274 + 1 | 0;
     if (!(_isspace(HEAPU8[$25 >> 0] | 0) | 0)) break; else $$1274 = $25;
    }
    ___shlim($0, 0);
    do {
     $30 = HEAP32[$13 >> 2] | 0;
     if ($30 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
      HEAP32[$13 >> 2] = $30 + 1;
      $37 = HEAPU8[$30 >> 0] | 0;
     } else $37 = ___shgetc($0) | 0;
    } while ((_isspace($37) | 0) != 0);
    if (!(HEAP32[$14 >> 2] | 0)) $49 = HEAP32[$13 >> 2] | 0; else {
     $43 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
     HEAP32[$13 >> 2] = $43;
     $49 = $43;
    }
    $$12 = $$1274;
    $$1291 = $$0290416;
    $$2287 = (HEAP32[$15 >> 2] | 0) + $$0285419 + $49 - (HEAP32[$16 >> 2] | 0) | 0;
    $$7315 = $$0308414;
    $322 = $321;
   } while (0);
   $$0273420 = $$12 + 1 | 0;
   $22 = HEAP8[$$0273420 >> 0] | 0;
   if (!($22 << 24 >> 24)) {
    $$3293 = $$1291;
    break L4;
   } else {
    $$0285419 = $$2287;
    $$0290416 = $$1291;
    $$0308414 = $$7315;
    $321 = $322;
   }
  }
  if ((label | 0) == 23) {
   if (HEAP32[$14 >> 2] | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
   if (($$0290416 | 0) != 0 | ($66 | 0) > -1) {
    $$3293 = $$0290416;
    break;
   } else {
    $$1271 = 0;
    $$9317 = $$0308414;
    $323 = $321;
    label = 144;
   }
  } else if ((label | 0) == 143) if (!$$0290416) {
   $$1271 = $$0270;
   $$9317 = $$8316;
   $323 = $325;
   label = 144;
  } else {
   $$10318 = $$8316;
   $$2 = $$0270;
   $$2292 = $$0290416;
   $318 = $325;
  }
  if ((label | 0) == 144) {
   $$10318 = $$9317;
   $$2 = $$1271;
   $$2292 = -1;
   $318 = $323;
  }
  if (!$$2) $$3293 = $$2292; else {
   _free($$10318);
   _free($318);
   $$3293 = $$2292;
  }
 } while (0);
 if ($319 | 0) ___unlockfile($0);
 STACKTOP = sp;
 return $$3293 | 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1530621 = 0, $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0, $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0, $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $13 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $141 = 0, $142 = 0, $145 = 0, $147 = 0, $15 = 0.0, $151 = 0, $153 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $188 = 0, $202 = 0, $203 = 0, $206 = 0, $211 = 0, $212 = 0, $214 = 0, $222 = 0, $223 = 0, $225 = 0, $227 = 0, $229 = 0, $231 = 0, $232 = 0, $234 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $25 = 0, $251 = 0, $253 = 0, $255 = 0, $257 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $270 = 0, $272 = 0, $286 = 0, $291 = 0, $30 = 0, $300 = 0, $301 = 0, $305 = 0, $308 = 0, $310 = 0, $312 = 0, $316 = 0, $319 = 0, $320 = 0, $324 = 0, $334 = 0, $339 = 0, $34 = 0, $342 = 0, $343 = 0, $344 = 0, $346 = 0, $351 = 0, $364 = 0, $368 = 0, $373 = 0, $38 = 0.0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $389 = 0, $39 = 0, $393 = 0, $395 = 0, $398 = 0, $401 = 0, $412 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $6 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540723 = 0, $spec$select541 = 0, $spec$select544 = 0.0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select567 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 $6 = sp + 32 | 0;
 $7 = sp + 536 | 0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540 | 0;
 HEAP32[$7 >> 2] = 0;
 $11 = $10 + 12 | 0;
 $12 = ___DOUBLE_BITS_662($1) | 0;
 $13 = getTempRet0() | 0;
 if (($13 | 0) < 0) {
  $15 = -$1;
  $16 = ___DOUBLE_BITS_662($15) | 0;
  $$0471 = $15;
  $$0522 = 1;
  $$0523 = 22616;
  $25 = getTempRet0() | 0;
  $412 = $16;
 } else {
  $$0471 = $1;
  $$0522 = ($4 & 2049 | 0) != 0 & 1;
  $$0523 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 22617 : 22622) : 22619;
  $25 = $13;
  $412 = $12;
 }
 do if (0 == 0 & ($25 & 2146435072 | 0) == 2146435072) {
  $30 = ($5 & 32 | 0) != 0;
  $34 = $$0522 + 3 | 0;
  _pad_661($0, 32, $2, $34, $4 & -65537);
  _out($0, $$0523, $$0522);
  _out($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($30 ? 22658 : 22643) : $30 ? 22635 : 22639, 3);
  _pad_661($0, 32, $2, $34, $4 ^ 8192);
  $$sink757 = $34;
 } else {
  $38 = +_frexpl($$0471, $7) * 2.0;
  $39 = $38 != 0.0;
  if ($39) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $42 = $5 | 32;
  if (($42 | 0) == 97) {
   $44 = $5 & 32;
   $spec$select = ($44 | 0) == 0 ? $$0523 : $$0523 + 9 | 0;
   $47 = $$0522 | 2;
   $49 = 12 - $3 | 0;
   do if ($3 >>> 0 > 11 | ($49 | 0) == 0) $$1472 = $38; else {
    $$0511586 = 8.0;
    $$1510587 = $49;
    do {
     $$1510587 = $$1510587 + -1 | 0;
     $$0511586 = $$0511586 * 16.0;
    } while (($$1510587 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $$1472 = -($$0511586 + (-$38 - $$0511586));
     break;
    } else {
     $$1472 = $38 + $$0511586 - $$0511586;
     break;
    }
   } while (0);
   $63 = HEAP32[$7 >> 2] | 0;
   $66 = ($63 | 0) < 0 ? 0 - $63 | 0 : $63;
   $69 = _fmt_u($66, (($66 | 0) < 0) << 31 >> 31, $11) | 0;
   if (($69 | 0) == ($11 | 0)) {
    $71 = $10 + 11 | 0;
    HEAP8[$71 >> 0] = 48;
    $$0513 = $71;
   } else $$0513 = $69;
   HEAP8[$$0513 + -1 >> 0] = ($63 >> 31 & 2) + 43;
   $79 = $$0513 + -2 | 0;
   HEAP8[$79 >> 0] = $5 + 15;
   $80 = ($3 | 0) < 1;
   $82 = ($4 & 8 | 0) == 0;
   $$0525 = $8;
   $$2473 = $$1472;
   while (1) {
    $83 = ~~$$2473;
    $89 = $$0525 + 1 | 0;
    HEAP8[$$0525 >> 0] = $44 | HEAPU8[1920 + $83 >> 0];
    $$2473 = ($$2473 - +($83 | 0)) * 16.0;
    if (($89 - $9 | 0) == 1) if ($82 & ($80 & $$2473 == 0.0)) $$1526 = $89; else {
     HEAP8[$89 >> 0] = 46;
     $$1526 = $$0525 + 2 | 0;
    } else $$1526 = $89;
    if (!($$2473 != 0.0)) break; else $$0525 = $$1526;
   }
   $$pre720 = $$1526;
   if (!$3) label = 25; else if ((-2 - $9 + $$pre720 | 0) < ($3 | 0)) {
    $103 = $11;
    $104 = $79;
    $$0527 = $3 + 2 + $103 - $104 | 0;
    $$pre$phi717Z2D = $103;
    $$pre$phi718Z2D = $104;
   } else label = 25;
   if ((label | 0) == 25) {
    $108 = $11;
    $109 = $79;
    $$0527 = $108 - $9 - $109 + $$pre720 | 0;
    $$pre$phi717Z2D = $108;
    $$pre$phi718Z2D = $109;
   }
   $113 = $$0527 + $47 | 0;
   _pad_661($0, 32, $2, $113, $4);
   _out($0, $spec$select, $47);
   _pad_661($0, 48, $2, $113, $4 ^ 65536);
   $115 = $$pre720 - $9 | 0;
   _out($0, $8, $115);
   $116 = $$pre$phi717Z2D - $$pre$phi718Z2D | 0;
   _pad_661($0, 48, $$0527 - ($115 + $116) | 0, 0, 0);
   _out($0, $79, $116);
   _pad_661($0, 32, $2, $113, $4 ^ 8192);
   $$sink757 = $113;
   break;
  }
  $spec$select539 = ($3 | 0) < 0 ? 6 : $3;
  if ($39) {
   $123 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
   HEAP32[$7 >> 2] = $123;
   $$3 = $38 * 268435456.0;
   $$pr = $123;
  } else {
   $$3 = $38;
   $$pr = HEAP32[$7 >> 2] | 0;
  }
  $$0498 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
  $$1499 = $$0498;
  $$4 = $$3;
  do {
   $126 = ~~$$4 >>> 0;
   HEAP32[$$1499 >> 2] = $126;
   $$1499 = $$1499 + 4 | 0;
   $$4 = ($$4 - +($126 >>> 0)) * 1.0e9;
  } while ($$4 != 0.0);
  $132 = $$0498;
  if (($$pr | 0) > 0) {
   $$1482683 = $$0498;
   $$2500682 = $$1499;
   $134 = $$pr;
   while (1) {
    $136 = ($134 | 0) < 29 ? $134 : 29;
    $$0488669 = $$2500682 + -4 | 0;
    if ($$0488669 >>> 0 < $$1482683 >>> 0) $$2483 = $$1482683; else {
     $$0488671 = $$0488669;
     $$0497670 = 0;
     do {
      $139 = _bitshift64Shl(HEAP32[$$0488671 >> 2] | 0, 0, $136 | 0) | 0;
      $141 = _i64Add($139 | 0, getTempRet0() | 0, $$0497670 | 0, 0) | 0;
      $142 = getTempRet0() | 0;
      $$0497670 = ___udivdi3($141 | 0, $142 | 0, 1e9, 0) | 0;
      $145 = ___muldi3($$0497670 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $147 = _i64Subtract($141 | 0, $142 | 0, $145 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[$$0488671 >> 2] = $147;
      $$0488671 = $$0488671 + -4 | 0;
     } while ($$0488671 >>> 0 >= $$1482683 >>> 0);
     if (!$$0497670) $$2483 = $$1482683; else {
      $151 = $$1482683 + -4 | 0;
      HEAP32[$151 >> 2] = $$0497670;
      $$2483 = $151;
     }
    }
    L57 : do if ($$2500682 >>> 0 > $$2483 >>> 0) {
     $$3501676 = $$2500682;
     while (1) {
      $153 = $$3501676 + -4 | 0;
      if (HEAP32[$153 >> 2] | 0) {
       $$3501$lcssa = $$3501676;
       break L57;
      }
      if ($153 >>> 0 > $$2483 >>> 0) $$3501676 = $153; else {
       $$3501$lcssa = $153;
       break;
      }
     }
    } else $$3501$lcssa = $$2500682; while (0);
    $158 = (HEAP32[$7 >> 2] | 0) - $136 | 0;
    HEAP32[$7 >> 2] = $158;
    if (($158 | 0) > 0) {
     $$1482683 = $$2483;
     $$2500682 = $$3501$lcssa;
     $134 = $158;
    } else {
     $$1482$lcssa = $$2483;
     $$2500$lcssa = $$3501$lcssa;
     $$pr564 = $158;
     break;
    }
   }
  } else {
   $$1482$lcssa = $$0498;
   $$2500$lcssa = $$1499;
   $$pr564 = $$pr;
  }
  if (($$pr564 | 0) < 0) {
   $163 = (($spec$select539 + 25 | 0) / 9 | 0) + 1 | 0;
   $164 = ($42 | 0) == 102;
   $$3484663 = $$1482$lcssa;
   $$4502662 = $$2500$lcssa;
   $166 = $$pr564;
   while (1) {
    $165 = 0 - $166 | 0;
    $168 = ($165 | 0) < 9 ? $165 : 9;
    if ($$3484663 >>> 0 < $$4502662 >>> 0) {
     $174 = (1 << $168) + -1 | 0;
     $175 = 1e9 >>> $168;
     $$0487657 = 0;
     $$1489656 = $$3484663;
     do {
      $176 = HEAP32[$$1489656 >> 2] | 0;
      HEAP32[$$1489656 >> 2] = ($176 >>> $168) + $$0487657;
      $$0487657 = Math_imul($176 & $174, $175) | 0;
      $$1489656 = $$1489656 + 4 | 0;
     } while ($$1489656 >>> 0 < $$4502662 >>> 0);
     $spec$select540 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
     if (!$$0487657) {
      $$5503 = $$4502662;
      $spec$select540723 = $spec$select540;
     } else {
      HEAP32[$$4502662 >> 2] = $$0487657;
      $$5503 = $$4502662 + 4 | 0;
      $spec$select540723 = $spec$select540;
     }
    } else {
     $$5503 = $$4502662;
     $spec$select540723 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
    }
    $188 = $164 ? $$0498 : $spec$select540723;
    $spec$select541 = ($$5503 - $188 >> 2 | 0) > ($163 | 0) ? $188 + ($163 << 2) | 0 : $$5503;
    $166 = (HEAP32[$7 >> 2] | 0) + $168 | 0;
    HEAP32[$7 >> 2] = $166;
    if (($166 | 0) >= 0) {
     $$3484$lcssa = $spec$select540723;
     $$4502$lcssa = $spec$select541;
     break;
    } else {
     $$3484663 = $spec$select540723;
     $$4502662 = $spec$select541;
    }
   }
  } else {
   $$3484$lcssa = $$1482$lcssa;
   $$4502$lcssa = $$2500$lcssa;
  }
  if ($$3484$lcssa >>> 0 < $$4502$lcssa >>> 0) {
   $202 = ($132 - $$3484$lcssa >> 2) * 9 | 0;
   $203 = HEAP32[$$3484$lcssa >> 2] | 0;
   if ($203 >>> 0 < 10) $$1517 = $202; else {
    $$0516652 = $202;
    $$0532651 = 10;
    while (1) {
     $$0532651 = $$0532651 * 10 | 0;
     $206 = $$0516652 + 1 | 0;
     if ($203 >>> 0 < $$0532651 >>> 0) {
      $$1517 = $206;
      break;
     } else $$0516652 = $206;
    }
   }
  } else $$1517 = 0;
  $211 = ($42 | 0) == 103;
  $212 = ($spec$select539 | 0) != 0;
  $214 = $spec$select539 - (($42 | 0) == 102 ? 0 : $$1517) + (($212 & $211) << 31 >> 31) | 0;
  if (($214 | 0) < ((($$4502$lcssa - $132 >> 2) * 9 | 0) + -9 | 0)) {
   $222 = $214 + 9216 | 0;
   $223 = ($222 | 0) / 9 | 0;
   $225 = $$0498 + 4 + ($223 + -1024 << 2) | 0;
   $227 = $222 - ($223 * 9 | 0) | 0;
   if (($227 | 0) < 8) {
    $$0529$in646 = $227;
    $$1533645 = 10;
    while (1) {
     $229 = $$1533645 * 10 | 0;
     if (($$0529$in646 | 0) < 7) {
      $$0529$in646 = $$0529$in646 + 1 | 0;
      $$1533645 = $229;
     } else {
      $$1533$lcssa = $229;
      break;
     }
    }
   } else $$1533$lcssa = 10;
   $231 = HEAP32[$225 >> 2] | 0;
   $232 = ($231 >>> 0) / ($$1533$lcssa >>> 0) | 0;
   $234 = $231 - (Math_imul($232, $$1533$lcssa) | 0) | 0;
   $237 = ($225 + 4 | 0) == ($$4502$lcssa | 0);
   if ($237 & ($234 | 0) == 0) {
    $$4492 = $225;
    $$4520 = $$1517;
    $$8 = $$3484$lcssa;
   } else {
    $spec$select544 = ($232 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $240 = $$1533$lcssa >>> 1;
    $spec$select567 = $234 >>> 0 < $240 >>> 0 ? .5 : $237 & ($234 | 0) == ($240 | 0) ? 1.0 : 1.5;
    if (!$$0522) {
     $$1467 = $spec$select567;
     $$1469 = $spec$select544;
    } else {
     $245 = (HEAP8[$$0523 >> 0] | 0) == 45;
     $$1467 = $245 ? -$spec$select567 : $spec$select567;
     $$1469 = $245 ? -$spec$select544 : $spec$select544;
    }
    $248 = $231 - $234 | 0;
    HEAP32[$225 >> 2] = $248;
    if ($$1469 + $$1467 != $$1469) {
     $251 = $248 + $$1533$lcssa | 0;
     HEAP32[$225 >> 2] = $251;
     if ($251 >>> 0 > 999999999) {
      $$2490638 = $225;
      $$5486639 = $$3484$lcssa;
      while (1) {
       $253 = $$2490638 + -4 | 0;
       HEAP32[$$2490638 >> 2] = 0;
       if ($253 >>> 0 < $$5486639 >>> 0) {
        $255 = $$5486639 + -4 | 0;
        HEAP32[$255 >> 2] = 0;
        $$6 = $255;
       } else $$6 = $$5486639;
       $257 = (HEAP32[$253 >> 2] | 0) + 1 | 0;
       HEAP32[$253 >> 2] = $257;
       if ($257 >>> 0 > 999999999) {
        $$2490638 = $253;
        $$5486639 = $$6;
       } else {
        $$2490$lcssa = $253;
        $$5486$lcssa = $$6;
        break;
       }
      }
     } else {
      $$2490$lcssa = $225;
      $$5486$lcssa = $$3484$lcssa;
     }
     $262 = ($132 - $$5486$lcssa >> 2) * 9 | 0;
     $263 = HEAP32[$$5486$lcssa >> 2] | 0;
     if ($263 >>> 0 < 10) {
      $$4492 = $$2490$lcssa;
      $$4520 = $262;
      $$8 = $$5486$lcssa;
     } else {
      $$2518634 = $262;
      $$2534633 = 10;
      while (1) {
       $$2534633 = $$2534633 * 10 | 0;
       $266 = $$2518634 + 1 | 0;
       if ($263 >>> 0 < $$2534633 >>> 0) {
        $$4492 = $$2490$lcssa;
        $$4520 = $266;
        $$8 = $$5486$lcssa;
        break;
       } else $$2518634 = $266;
      }
     }
    } else {
     $$4492 = $225;
     $$4520 = $$1517;
     $$8 = $$3484$lcssa;
    }
   }
   $268 = $$4492 + 4 | 0;
   $$5521 = $$4520;
   $$8506 = $$4502$lcssa >>> 0 > $268 >>> 0 ? $268 : $$4502$lcssa;
   $$9 = $$8;
  } else {
   $$5521 = $$1517;
   $$8506 = $$4502$lcssa;
   $$9 = $$3484$lcssa;
  }
  $270 = 0 - $$5521 | 0;
  L109 : do if ($$8506 >>> 0 > $$9 >>> 0) {
   $$9507625 = $$8506;
   while (1) {
    $272 = $$9507625 + -4 | 0;
    if (HEAP32[$272 >> 2] | 0) {
     $$9507$lcssa = $$9507625;
     $$lcssa583 = 1;
     break L109;
    }
    if ($272 >>> 0 > $$9 >>> 0) $$9507625 = $272; else {
     $$9507$lcssa = $272;
     $$lcssa583 = 0;
     break;
    }
   }
  } else {
   $$9507$lcssa = $$8506;
   $$lcssa583 = 0;
  } while (0);
  do if ($211) {
   $spec$select548 = $spec$select539 + (($212 ^ 1) & 1) | 0;
   if (($spec$select548 | 0) > ($$5521 | 0) & ($$5521 | 0) > -5) {
    $$0479 = $5 + -1 | 0;
    $$2476 = $spec$select548 + -1 - $$5521 | 0;
   } else {
    $$0479 = $5 + -2 | 0;
    $$2476 = $spec$select548 + -1 | 0;
   }
   if (!($4 & 8)) {
    if ($$lcssa583) {
     $286 = HEAP32[$$9507$lcssa + -4 >> 2] | 0;
     if (!$286) $$2531 = 9; else if (!(($286 >>> 0) % 10 | 0)) {
      $$1530621 = 0;
      $$3535620 = 10;
      while (1) {
       $$3535620 = $$3535620 * 10 | 0;
       $291 = $$1530621 + 1 | 0;
       if (($286 >>> 0) % ($$3535620 >>> 0) | 0 | 0) {
        $$2531 = $291;
        break;
       } else $$1530621 = $291;
      }
     } else $$2531 = 0;
    } else $$2531 = 9;
    $300 = (($$9507$lcssa - $132 >> 2) * 9 | 0) + -9 | 0;
    if (($$0479 | 32 | 0) == 102) {
     $301 = $300 - $$2531 | 0;
     $spec$select549 = ($301 | 0) > 0 ? $301 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select549 | 0) ? $$2476 : $spec$select549;
     break;
    } else {
     $305 = $300 + $$5521 - $$2531 | 0;
     $spec$select551 = ($305 | 0) > 0 ? $305 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select551 | 0) ? $$2476 : $spec$select551;
     break;
    }
   } else {
    $$1480 = $$0479;
    $$3477 = $$2476;
   }
  } else {
   $$1480 = $5;
   $$3477 = $spec$select539;
  } while (0);
  $308 = ($$3477 | 0) != 0;
  $310 = $308 ? 1 : $4 >>> 3 & 1;
  $312 = ($$1480 | 32 | 0) == 102;
  if ($312) {
   $$2515 = 0;
   $$pn = ($$5521 | 0) > 0 ? $$5521 : 0;
  } else {
   $316 = ($$5521 | 0) < 0 ? $270 : $$5521;
   $319 = _fmt_u($316, (($316 | 0) < 0) << 31 >> 31, $11) | 0;
   $320 = $11;
   if (($320 - $319 | 0) < 2) {
    $$1514614 = $319;
    while (1) {
     $324 = $$1514614 + -1 | 0;
     HEAP8[$324 >> 0] = 48;
     if (($320 - $324 | 0) < 2) $$1514614 = $324; else {
      $$1514$lcssa = $324;
      break;
     }
    }
   } else $$1514$lcssa = $319;
   HEAP8[$$1514$lcssa + -1 >> 0] = ($$5521 >> 31 & 2) + 43;
   $334 = $$1514$lcssa + -2 | 0;
   HEAP8[$334 >> 0] = $$1480;
   $$2515 = $334;
   $$pn = $320 - $334 | 0;
  }
  $339 = $$0522 + 1 + $$3477 + $310 + $$pn | 0;
  _pad_661($0, 32, $2, $339, $4);
  _out($0, $$0523, $$0522);
  _pad_661($0, 48, $2, $339, $4 ^ 65536);
  if ($312) {
   $spec$select554 = $$9 >>> 0 > $$0498 >>> 0 ? $$0498 : $$9;
   $342 = $8 + 9 | 0;
   $343 = $342;
   $344 = $8 + 8 | 0;
   $$5493603 = $spec$select554;
   do {
    $346 = _fmt_u(HEAP32[$$5493603 >> 2] | 0, 0, $342) | 0;
    if (($$5493603 | 0) == ($spec$select554 | 0)) if (($346 | 0) == ($342 | 0)) {
     HEAP8[$344 >> 0] = 48;
     $$1465 = $344;
    } else $$1465 = $346; else if ($346 >>> 0 > $8 >>> 0) {
     _memset($8 | 0, 48, $346 - $9 | 0) | 0;
     $$0464599 = $346;
     while (1) {
      $351 = $$0464599 + -1 | 0;
      if ($351 >>> 0 > $8 >>> 0) $$0464599 = $351; else {
       $$1465 = $351;
       break;
      }
     }
    } else $$1465 = $346;
    _out($0, $$1465, $343 - $$1465 | 0);
    $$5493603 = $$5493603 + 4 | 0;
   } while ($$5493603 >>> 0 <= $$0498 >>> 0);
   if (!(($4 & 8 | 0) == 0 & ($308 ^ 1))) _out($0, 22647, 1);
   if ($$5493603 >>> 0 < $$9507$lcssa >>> 0 & ($$3477 | 0) > 0) {
    $$4478594 = $$3477;
    $$6494593 = $$5493603;
    while (1) {
     $364 = _fmt_u(HEAP32[$$6494593 >> 2] | 0, 0, $342) | 0;
     if ($364 >>> 0 > $8 >>> 0) {
      _memset($8 | 0, 48, $364 - $9 | 0) | 0;
      $$0463588 = $364;
      while (1) {
       $368 = $$0463588 + -1 | 0;
       if ($368 >>> 0 > $8 >>> 0) $$0463588 = $368; else {
        $$0463$lcssa = $368;
        break;
       }
      }
     } else $$0463$lcssa = $364;
     _out($0, $$0463$lcssa, ($$4478594 | 0) < 9 ? $$4478594 : 9);
     $$6494593 = $$6494593 + 4 | 0;
     $373 = $$4478594 + -9 | 0;
     if (!($$6494593 >>> 0 < $$9507$lcssa >>> 0 & ($$4478594 | 0) > 9)) {
      $$4478$lcssa = $373;
      break;
     } else $$4478594 = $373;
    }
   } else $$4478$lcssa = $$3477;
   _pad_661($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select557 = $$lcssa583 ? $$9507$lcssa : $$9 + 4 | 0;
   if ($$9 >>> 0 < $spec$select557 >>> 0 & ($$3477 | 0) > -1) {
    $382 = $8 + 9 | 0;
    $384 = ($4 & 8 | 0) == 0;
    $385 = $382;
    $386 = 0 - $9 | 0;
    $387 = $8 + 8 | 0;
    $$5609 = $$3477;
    $$7495608 = $$9;
    while (1) {
     $389 = _fmt_u(HEAP32[$$7495608 >> 2] | 0, 0, $382) | 0;
     if (($389 | 0) == ($382 | 0)) {
      HEAP8[$387 >> 0] = 48;
      $$0 = $387;
     } else $$0 = $389;
     do if (($$7495608 | 0) == ($$9 | 0)) {
      $395 = $$0 + 1 | 0;
      _out($0, $$0, 1);
      if ($384 & ($$5609 | 0) < 1) {
       $$2 = $395;
       break;
      }
      _out($0, 22647, 1);
      $$2 = $395;
     } else {
      if ($$0 >>> 0 <= $8 >>> 0) {
       $$2 = $$0;
       break;
      }
      _memset($8 | 0, 48, $$0 + $386 | 0) | 0;
      $$1604 = $$0;
      while (1) {
       $393 = $$1604 + -1 | 0;
       if ($393 >>> 0 > $8 >>> 0) $$1604 = $393; else {
        $$2 = $393;
        break;
       }
      }
     } while (0);
     $398 = $385 - $$2 | 0;
     _out($0, $$2, ($$5609 | 0) > ($398 | 0) ? $398 : $$5609);
     $401 = $$5609 - $398 | 0;
     $$7495608 = $$7495608 + 4 | 0;
     if (!($$7495608 >>> 0 < $spec$select557 >>> 0 & ($401 | 0) > -1)) {
      $$5$lcssa = $401;
      break;
     } else $$5609 = $401;
    }
   } else $$5$lcssa = $$3477;
   _pad_661($0, 48, $$5$lcssa + 18 | 0, 18, 0);
   _out($0, $$2515, $11 - $$2515 | 0);
  }
  _pad_661($0, 32, $2, $339, $4 ^ 8192);
  $$sink757 = $339;
 } while (0);
 STACKTOP = sp;
 return (($$sink757 | 0) < ($2 | 0) ? $2 : $$sink757) | 0;
}

function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0, $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0, $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0, $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0, $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$pre = 0, $$sink$off0 = 0, $10 = 0, $105 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $127 = 0, $129 = 0, $139 = 0, $141 = 0, $153 = 0, $155 = 0, $177 = 0, $18 = 0, $189 = 0, $193 = 0, $196 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $218 = 0, $219 = 0, $220 = 0, $224 = 0, $226 = 0, $228 = 0, $229 = 0, $235 = 0, $237 = 0, $239 = 0, $244 = 0, $247 = 0, $25 = 0, $251 = 0, $254 = 0, $257 = 0, $264 = 0, $267 = 0, $269 = 0, $27 = 0, $274 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $283 = 0, $29 = 0, $294 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $31 = 0, $318 = 0.0, $319 = 0.0, $320 = 0, $321 = 0, $322 = 0, $327 = 0.0, $330 = 0.0, $334 = 0, $337 = 0, $361 = 0.0, $366 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $7 = 0, $71 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $85 = 0, $86 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond417 = 0, $or$cond421 = 0, $spec$select420 = 0, $spec$select441 = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $6 = sp;
 $7 = $3 + $2 | 0;
 $8 = 0 - $7 | 0;
 $9 = $0 + 4 | 0;
 $10 = $0 + 100 | 0;
 $$0324 = $1;
 $$0393 = 0;
 L1 : while (1) {
  switch ($$0324 | 0) {
  case 46:
   {
    label = 7;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $$0390 = 0;
    $$2 = $$0324;
    $$2395 = $$0393;
    $375 = 0;
    $376 = 0;
    break L1;
   }
  }
  $11 = HEAP32[$9 >> 2] | 0;
  if ($11 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
   HEAP32[$9 >> 2] = $11 + 1;
   $$0324$be = HEAPU8[$11 >> 0] | 0;
  } else $$0324$be = ___shgetc($0) | 0;
  $$0324 = $$0324$be;
  $$0393 = 1;
 }
 if ((label | 0) == 7) {
  $18 = HEAP32[$9 >> 2] | 0;
  if ($18 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
   HEAP32[$9 >> 2] = $18 + 1;
   $25 = HEAPU8[$18 >> 0] | 0;
  } else $25 = ___shgetc($0) | 0;
  if (($25 | 0) == 48) {
   $27 = 0;
   $28 = 0;
   while (1) {
    $29 = _i64Add($27 | 0, $28 | 0, -1, -1) | 0;
    $30 = getTempRet0() | 0;
    $31 = HEAP32[$9 >> 2] | 0;
    if ($31 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
     HEAP32[$9 >> 2] = $31 + 1;
     $38 = HEAPU8[$31 >> 0] | 0;
    } else $38 = ___shgetc($0) | 0;
    if (($38 | 0) == 48) {
     $27 = $29;
     $28 = $30;
    } else {
     $$0390 = 1;
     $$2 = $38;
     $$2395 = 1;
     $375 = $29;
     $376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;
   $$2 = $25;
   $$2395 = $$0393;
   $375 = 0;
   $376 = 0;
  }
 }
 HEAP32[$6 >> 2] = 0;
 $40 = $$2 + -48 | 0;
 $42 = ($$2 | 0) == 46;
 L22 : do if ($42 | $40 >>> 0 < 10) {
  $44 = $6 + 496 | 0;
  $$0336503 = 0;
  $$0340502 = 0;
  $$0398499 = 0;
  $$1391501 = $$0390;
  $$3396500 = $$2395;
  $$3504 = $$2;
  $377 = $42;
  $378 = $40;
  $379 = $375;
  $380 = $376;
  $47 = 0;
  $48 = 0;
  L24 : while (1) {
   do if ($377) if (!$$1391501) {
    $$2338 = $$0336503;
    $$2342 = $$0340502;
    $$2392 = 1;
    $$2400 = $$0398499;
    $$4397 = $$3396500;
    $381 = $47;
    $382 = $48;
    $383 = $47;
    $384 = $48;
   } else break L24; else {
    $49 = _i64Add($47 | 0, $48 | 0, 1, 0) | 0;
    $50 = getTempRet0() | 0;
    $51 = ($$3504 | 0) != 48;
    if (($$0340502 | 0) >= 125) {
     if (!$51) {
      $$2338 = $$0336503;
      $$2342 = $$0340502;
      $$2392 = $$1391501;
      $$2400 = $$0398499;
      $$4397 = $$3396500;
      $381 = $379;
      $382 = $380;
      $383 = $49;
      $384 = $50;
      break;
     }
     HEAP32[$44 >> 2] = HEAP32[$44 >> 2] | 1;
     $$2338 = $$0336503;
     $$2342 = $$0340502;
     $$2392 = $$1391501;
     $$2400 = $$0398499;
     $$4397 = $$3396500;
     $381 = $379;
     $382 = $380;
     $383 = $49;
     $384 = $50;
     break;
    }
    $53 = $6 + ($$0340502 << 2) | 0;
    if (!$$0336503) $storemerge446 = $378; else $storemerge446 = $$3504 + -48 + ((HEAP32[$53 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$53 >> 2] = $storemerge446;
    $58 = $$0336503 + 1 | 0;
    $59 = ($58 | 0) == 9;
    $$2338 = $59 ? 0 : $58;
    $$2342 = $$0340502 + ($59 & 1) | 0;
    $$2392 = $$1391501;
    $$2400 = $51 ? $49 : $$0398499;
    $$4397 = 1;
    $381 = $379;
    $382 = $380;
    $383 = $49;
    $384 = $50;
   } while (0);
   $63 = HEAP32[$9 >> 2] | 0;
   if ($63 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
    HEAP32[$9 >> 2] = $63 + 1;
    $71 = HEAPU8[$63 >> 0] | 0;
   } else $71 = ___shgetc($0) | 0;
   $378 = $71 + -48 | 0;
   $377 = ($71 | 0) == 46;
   if (!($377 | $378 >>> 0 < 10)) {
    $$0336$lcssa = $$2338;
    $$0340$lcssa = $$2342;
    $$0398$lcssa = $$2400;
    $$1391$lcssa = $$2392;
    $$3$lcssa = $71;
    $$3396$lcssa = $$4397;
    $76 = $381;
    $77 = $383;
    $79 = $382;
    $80 = $384;
    label = 31;
    break L22;
   } else {
    $$0336503 = $$2338;
    $$0340502 = $$2342;
    $$0398499 = $$2400;
    $$1391501 = $$2392;
    $$3396500 = $$4397;
    $$3504 = $71;
    $379 = $381;
    $380 = $382;
    $47 = $383;
    $48 = $384;
   }
  }
  $$0336455 = $$0336503;
  $$0340459 = $$0340502;
  $$0398465 = $$0398499;
  $385 = $47;
  $386 = $48;
  $387 = $379;
  $388 = $380;
  $389 = ($$3396500 | 0) != 0;
  label = 39;
 } else {
  $$0336$lcssa = 0;
  $$0340$lcssa = 0;
  $$0398$lcssa = 0;
  $$1391$lcssa = $$0390;
  $$3$lcssa = $$2;
  $$3396$lcssa = $$2395;
  $76 = $375;
  $77 = 0;
  $79 = $376;
  $80 = 0;
  label = 31;
 } while (0);
 do if ((label | 0) == 31) {
  $75 = ($$1391$lcssa | 0) == 0;
  $78 = $75 ? $77 : $76;
  $81 = $75 ? $80 : $79;
  $82 = ($$3396$lcssa | 0) != 0;
  if (!($82 & ($$3$lcssa | 32 | 0) == 101)) if (($$3$lcssa | 0) > -1) {
   $$0336455 = $$0336$lcssa;
   $$0340459 = $$0340$lcssa;
   $$0398465 = $$0398$lcssa;
   $385 = $77;
   $386 = $80;
   $387 = $78;
   $388 = $81;
   $389 = $82;
   label = 39;
   break;
  } else {
   $$0336454 = $$0336$lcssa;
   $$0340458 = $$0340$lcssa;
   $$0398464 = $$0398$lcssa;
   $390 = $77;
   $391 = $80;
   $392 = $82;
   $393 = $78;
   $394 = $81;
   label = 41;
   break;
  }
  $85 = _scanexp($0, $5) | 0;
  $86 = getTempRet0() | 0;
  if (($85 | 0) == 0 & ($86 | 0) == -2147483648) {
   if (!$5) {
    ___shlim($0, 0);
    $$1 = 0.0;
    break;
   }
   if (!(HEAP32[$10 >> 2] | 0)) {
    $95 = 0;
    $96 = 0;
   } else {
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
    $95 = 0;
    $96 = 0;
   }
  } else {
   $95 = $85;
   $96 = $86;
  }
  $97 = _i64Add($95 | 0, $96 | 0, $78 | 0, $81 | 0) | 0;
  $$0336453 = $$0336$lcssa;
  $$0340457 = $$0340$lcssa;
  $$0398463 = $$0398$lcssa;
  $109 = $97;
  $111 = $77;
  $112 = getTempRet0() | 0;
  $114 = $80;
  label = 43;
 } while (0);
 if ((label | 0) == 39) if (!(HEAP32[$10 >> 2] | 0)) {
  $$0336454 = $$0336455;
  $$0340458 = $$0340459;
  $$0398464 = $$0398465;
  $390 = $385;
  $391 = $386;
  $392 = $389;
  $393 = $387;
  $394 = $388;
  label = 41;
 } else {
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
  if ($389) {
   $$0336453 = $$0336455;
   $$0340457 = $$0340459;
   $$0398463 = $$0398465;
   $109 = $387;
   $111 = $385;
   $112 = $388;
   $114 = $386;
   label = 43;
  } else label = 42;
 }
 if ((label | 0) == 41) if ($392) {
  $$0336453 = $$0336454;
  $$0340457 = $$0340458;
  $$0398463 = $$0398464;
  $109 = $393;
  $111 = $390;
  $112 = $394;
  $114 = $391;
  label = 43;
 } else label = 42;
 do if ((label | 0) == 42) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  ___shlim($0, 0);
  $$1 = 0.0;
 } else if ((label | 0) == 43) {
  $105 = HEAP32[$6 >> 2] | 0;
  if (!$105) {
   $$1 = +($4 | 0) * 0.0;
   break;
  }
  if ((($114 | 0) < 0 | ($114 | 0) == 0 & $111 >>> 0 < 10) & (($109 | 0) == ($111 | 0) & ($112 | 0) == ($114 | 0))) if (($2 | 0) > 30 | ($105 >>> $2 | 0) == 0) {
   $$1 = +($4 | 0) * +($105 >>> 0);
   break;
  }
  $127 = ($3 | 0) / -2 | 0;
  $129 = (($127 | 0) < 0) << 31 >> 31;
  if (($112 | 0) > ($129 | 0) | ($112 | 0) == ($129 | 0) & $109 >>> 0 > $127 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$1 = +($4 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $139 = $3 + -106 | 0;
  $141 = (($139 | 0) < 0) << 31 >> 31;
  if (($112 | 0) < ($141 | 0) | ($112 | 0) == ($141 | 0) & $109 >>> 0 < $139 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$$0336453) $$3343 = $$0340457; else {
   if (($$0336453 | 0) < 9) {
    $153 = $6 + ($$0340457 << 2) | 0;
    $$3339493 = $$0336453;
    $155 = HEAP32[$153 >> 2] | 0;
    while (1) {
     $155 = $155 * 10 | 0;
     if (($$3339493 | 0) >= 8) break; else $$3339493 = $$3339493 + 1 | 0;
    }
    HEAP32[$153 >> 2] = $155;
   }
   $$3343 = $$0340457 + 1 | 0;
  }
  if (($$0398463 | 0) < 9) if (($$0398463 | 0) <= ($109 | 0) & ($109 | 0) < 18) {
   if (($109 | 0) == 9) {
    $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0);
    break;
   }
   if (($109 | 0) < 9) {
    $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[5776 + (8 - $109 << 2) >> 2] | 0);
    break;
   }
   $177 = $2 + 27 + (Math_imul($109, -3) | 0) | 0;
   $$pre = HEAP32[$6 >> 2] | 0;
   if (($177 | 0) > 30 | ($$pre >>> $177 | 0) == 0) {
    $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[5776 + ($109 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $189 = ($109 | 0) % 9 | 0;
  if (!$189) {
   $$2369$ph = $$3343;
   $$3348$ph = 0;
   $$3384$ph = $109;
  } else {
   $193 = ($109 | 0) > -1 ? $189 : $189 + 9 | 0;
   $196 = HEAP32[5776 + (8 - $193 << 2) >> 2] | 0;
   if (!$$3343) {
    $$0345$lcssa540 = 0;
    $$0367 = 0;
    $$0381$lcssa539 = $109;
   } else {
    $198 = 1e9 / ($196 | 0) | 0;
    $$0335486 = 0;
    $$0345484 = 0;
    $$0381483 = $109;
    $$4344485 = 0;
    do {
     $199 = $6 + ($$4344485 << 2) | 0;
     $200 = HEAP32[$199 >> 2] | 0;
     $201 = ($200 >>> 0) / ($196 >>> 0) | 0;
     $203 = $200 - (Math_imul($201, $196) | 0) | 0;
     $204 = $201 + $$0335486 | 0;
     HEAP32[$199 >> 2] = $204;
     $$0335486 = Math_imul($198, $203) | 0;
     $or$cond417 = ($$4344485 | 0) == ($$0345484 | 0) & ($204 | 0) == 0;
     $$0381483 = $or$cond417 ? $$0381483 + -9 | 0 : $$0381483;
     $$0345484 = $or$cond417 ? $$0345484 + 1 & 127 : $$0345484;
     $$4344485 = $$4344485 + 1 | 0;
    } while (($$4344485 | 0) != ($$3343 | 0));
    if (!$$0335486) {
     $$0345$lcssa540 = $$0345484;
     $$0367 = $$3343;
     $$0381$lcssa539 = $$0381483;
    } else {
     HEAP32[$6 + ($$3343 << 2) >> 2] = $$0335486;
     $$0345$lcssa540 = $$0345484;
     $$0367 = $$3343 + 1 | 0;
     $$0381$lcssa539 = $$0381483;
    }
   }
   $$2369$ph = $$0367;
   $$3348$ph = $$0345$lcssa540;
   $$3384$ph = 9 - $193 + $$0381$lcssa539 | 0;
  }
  $$0376$ph = 0;
  $$2369$ph579 = $$2369$ph;
  $$3348$ph580 = $$3348$ph;
  $$3384$ph578 = $$3384$ph;
  L104 : while (1) {
   $218 = ($$3384$ph578 | 0) < 18;
   $219 = ($$3384$ph578 | 0) == 18;
   $220 = $6 + ($$3348$ph580 << 2) | 0;
   $$0376 = $$0376$ph;
   $$2369 = $$2369$ph579;
   while (1) {
    if (!$218) {
     if (!$219) {
      $$5386$ph = $$3384$ph578;
      break L104;
     }
     if ((HEAP32[$220 >> 2] | 0) >>> 0 >= 9007199) {
      $$5386$ph = 18;
      break L104;
     }
    }
    $$0329 = 0;
    $$3370 = $$2369;
    $$5$in = $$2369 + 127 | 0;
    while (1) {
     $$5 = $$5$in & 127;
     $224 = $6 + ($$5 << 2) | 0;
     $226 = _bitshift64Shl(HEAP32[$224 >> 2] | 0, 0, 29) | 0;
     $228 = _i64Add($226 | 0, getTempRet0() | 0, $$0329 | 0, 0) | 0;
     $229 = getTempRet0() | 0;
     if ($229 >>> 0 > 0 | ($229 | 0) == 0 & $228 >>> 0 > 1e9) {
      $235 = ___udivdi3($228 | 0, $229 | 0, 1e9, 0) | 0;
      $237 = ___muldi3($235 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $239 = _i64Subtract($228 | 0, $229 | 0, $237 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      $$1330 = $235;
      $$sink$off0 = $239;
     } else {
      $$1330 = 0;
      $$sink$off0 = $228;
     }
     HEAP32[$224 >> 2] = $$sink$off0;
     $244 = ($$5 | 0) == ($$3348$ph580 | 0);
     $spec$select441 = ($$5 | 0) != ($$3370 + 127 & 127 | 0) | $244 ? $$3370 : ($$sink$off0 | 0) == 0 ? $$5 : $$3370;
     if ($244) break; else {
      $$0329 = $$1330;
      $$3370 = $spec$select441;
      $$5$in = $$5 + -1 | 0;
     }
    }
    $247 = $$0376 + -29 | 0;
    if (!$$1330) {
     $$0376 = $247;
     $$2369 = $$3370;
    } else break;
   }
   $251 = $$3348$ph580 + 127 & 127;
   $254 = $spec$select441 + 127 & 127;
   $257 = $6 + (($spec$select441 + 126 & 127) << 2) | 0;
   if (($251 | 0) == ($spec$select441 | 0)) {
    HEAP32[$257 >> 2] = HEAP32[$257 >> 2] | HEAP32[$6 + ($254 << 2) >> 2];
    $$5372 = $254;
   } else $$5372 = $$3370;
   HEAP32[$6 + ($251 << 2) >> 2] = $$1330;
   $$0376$ph = $247;
   $$2369$ph579 = $$5372;
   $$3348$ph580 = $251;
   $$3384$ph578 = $$3384$ph578 + 9 | 0;
  }
  $$1377$ph$ph = $$0376;
  $$5350$ph$ph = $$3348$ph580;
  $$5386$ph576$ph = $$5386$ph;
  $$7374$ph$ph = $$2369;
  L123 : while (1) {
   $296 = $$7374$ph$ph + 1 & 127;
   $302 = $6 + (($$7374$ph$ph + 127 & 127) << 2) | 0;
   $$1377$ph = $$1377$ph$ph;
   $$5350$ph = $$5350$ph$ph;
   $$5386$ph576 = $$5386$ph576$ph;
   while (1) {
    $294 = ($$5386$ph576 | 0) == 18;
    $spec$select420 = ($$5386$ph576 | 0) > 27 ? 9 : 1;
    $$1377 = $$1377$ph;
    $$5350 = $$5350$ph;
    while (1) {
     $$0331476 = 0;
     while (1) {
      $264 = $$0331476 + $$5350 & 127;
      if (($264 | 0) == ($$7374$ph$ph | 0)) {
       label = 92;
       break;
      }
      $267 = HEAP32[$6 + ($264 << 2) >> 2] | 0;
      $269 = HEAP32[12348 + ($$0331476 << 2) >> 2] | 0;
      if ($267 >>> 0 < $269 >>> 0) {
       label = 92;
       break;
      }
      if ($267 >>> 0 > $269 >>> 0) break;
      if (($$0331476 + 1 | 0) >>> 0 < 2) $$0331476 = 1; else {
       label = 92;
       break;
      }
     }
     if ((label | 0) == 92) {
      label = 0;
      if ($294) break L123;
     }
     $274 = $spec$select420 + $$1377 | 0;
     if (($$5350 | 0) == ($$7374$ph$ph | 0)) {
      $$1377 = $274;
      $$5350 = $$7374$ph$ph;
     } else break;
    }
    $277 = (1 << $spec$select420) + -1 | 0;
    $278 = 1e9 >>> $spec$select420;
    $$0327480 = 0;
    $$6351478 = $$5350;
    $$6387477 = $$5386$ph576;
    $$6479 = $$5350;
    do {
     $279 = $6 + ($$6479 << 2) | 0;
     $280 = HEAP32[$279 >> 2] | 0;
     $283 = ($280 >>> $spec$select420) + $$0327480 | 0;
     HEAP32[$279 >> 2] = $283;
     $$0327480 = Math_imul($280 & $277, $278) | 0;
     $or$cond421 = ($$6479 | 0) == ($$6351478 | 0) & ($283 | 0) == 0;
     $$6387477 = $or$cond421 ? $$6387477 + -9 | 0 : $$6387477;
     $$6351478 = $or$cond421 ? $$6351478 + 1 & 127 : $$6351478;
     $$6479 = $$6479 + 1 & 127;
    } while (($$6479 | 0) != ($$7374$ph$ph | 0));
    if ($$0327480 | 0) {
     if (($296 | 0) != ($$6351478 | 0)) break;
     HEAP32[$302 >> 2] = HEAP32[$302 >> 2] | 1;
    }
    $$1377$ph = $274;
    $$5350$ph = $$6351478;
    $$5386$ph576 = $$6387477;
   }
   HEAP32[$6 + ($$7374$ph$ph << 2) >> 2] = $$0327480;
   $$1377$ph$ph = $274;
   $$5350$ph$ph = $$6351478;
   $$5386$ph576$ph = $$6387477;
   $$7374$ph$ph = $296;
  }
  $$0360474 = 0.0;
  $$10473 = $$7374$ph$ph;
  $$4475 = 0;
  while (1) {
   $306 = $$4475 + $$5350 & 127;
   $309 = $$10473 + 1 & 127;
   if (($306 | 0) == ($$10473 | 0)) {
    HEAP32[$6 + ($309 + -1 << 2) >> 2] = 0;
    $$11 = $309;
   } else $$11 = $$10473;
   $$0360474 = $$0360474 * 1.0e9 + +((HEAP32[$6 + ($306 << 2) >> 2] | 0) >>> 0);
   $$4475 = $$4475 + 1 | 0;
   if (($$4475 | 0) == 2) break; else $$10473 = $$11;
  }
  $318 = +($4 | 0);
  $319 = $$0360474 * $318;
  $320 = $$1377 + 53 | 0;
  $321 = $320 - $3 | 0;
  $322 = ($321 | 0) < ($2 | 0);
  $$0328 = $322 ? (($321 | 0) > 0 ? $321 : 0) : $2;
  if (($$0328 | 0) < 53) {
   $327 = +_copysignl(+_scalbn(1.0, 105 - $$0328 | 0), $319);
   $330 = +_fmodl($319, +_scalbn(1.0, 53 - $$0328 | 0));
   $$0355 = $327;
   $$0356 = $330;
   $$1361 = $327 + ($319 - $330);
  } else {
   $$0355 = 0.0;
   $$0356 = 0.0;
   $$1361 = $319;
  }
  $334 = $$5350 + 2 & 127;
  if (($334 | 0) == ($$11 | 0)) $$3359 = $$0356; else {
   $337 = HEAP32[$6 + ($334 << 2) >> 2] | 0;
   do if ($337 >>> 0 < 5e8) {
    if (!$337) if (($$5350 + 3 & 127 | 0) == ($$11 | 0)) {
     $$1357 = $$0356;
     break;
    }
    $$1357 = $318 * .25 + $$0356;
   } else {
    if (($337 | 0) != 5e8) {
     $$1357 = $318 * .75 + $$0356;
     break;
    }
    if (($$5350 + 3 & 127 | 0) == ($$11 | 0)) {
     $$1357 = $318 * .5 + $$0356;
     break;
    } else {
     $$1357 = $318 * .75 + $$0356;
     break;
    }
   } while (0);
   if ((53 - $$0328 | 0) > 1) if (+_fmodl($$1357, 1.0) != 0.0) $$3359 = $$1357; else $$3359 = $$1357 + 1.0; else $$3359 = $$1357;
  }
  $361 = $$1361 + $$3359 - $$0355;
  do if (($320 & 2147483647 | 0) > (-2 - $7 | 0)) {
   $366 = !(+Math_abs(+$361) >= 9007199254740992.0);
   $$3379 = $$1377 + (($366 ^ 1) & 1) | 0;
   $$2362 = $366 ? $361 : $361 * .5;
   if (($$3379 + 50 | 0) <= ($8 | 0)) if (!($$3359 != 0.0 & ($322 & (($$0328 | 0) != ($321 | 0) | $366)))) {
    $$3363 = $$2362;
    $$4380 = $$3379;
    break;
   }
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$3363 = $$2362;
   $$4380 = $$3379;
  } else {
   $$3363 = $361;
   $$4380 = $$1377;
  } while (0);
  $$1 = +_scalbnl($$3363, $$4380);
 } while (0);
 STACKTOP = sp;
 return +$$1;
}

function __ZN6spdlog7details14full_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i = 0, $$010$i$i$i117 = 0, $$010$i$i$i125 = 0, $$010$i$i$i76 = 0, $$010$i$i$i98 = 0, $$089$i$i$i = 0, $$089$i$i$i$i = 0, $$089$i$i$i118 = 0, $$089$i$i$i126 = 0, $$089$i$i$i77 = 0, $$089$i$i$i99 = 0, $$pre$i = 0, $$pre$i102 = 0, $$pre$i106 = 0, $$pre$i110 = 0, $$pre$i129 = 0, $$pre$i133 = 0, $$pre$i137 = 0, $$pre$i41 = 0, $$pre$i45 = 0, $$pre$i49 = 0, $$pre$i53 = 0, $$pre$i57 = 0, $$pre$i61 = 0, $$pre$i65 = 0, $$pre$i69 = 0, $$pre$i79 = 0, $$pre$i83 = 0, $$pre$i87 = 0, $$pre$i91 = 0, $$pre$phi$i104Z2D = 0, $$pre$phi$i108Z2D = 0, $$pre$phi$i112Z2D = 0, $$pre$phi$i131Z2D = 0, $$pre$phi$i135Z2D = 0, $$pre$phi$i139Z2D = 0, $$pre$phi$i43Z2D = 0, $$pre$phi$i47Z2D = 0, $$pre$phi$i51Z2D = 0, $$pre$phi$i55Z2D = 0, $$pre$phi$i59Z2D = 0, $$pre$phi$i63Z2D = 0, $$pre$phi$i67Z2D = 0, $$pre$phi$i71Z2D = 0, $$pre$phi$i81Z2D = 0, $$pre$phi$i85Z2D = 0, $$pre$phi$i89Z2D = 0, $$pre$phi$i93Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi199Z2D = 0, $$sroa$0$0$$sroa_idx$i = 0, $10 = 0, $101 = 0, $102 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $12 = 0, $127 = 0, $129 = 0, $13 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $145 = 0, $150 = 0, $153 = 0, $155 = 0, $157 = 0, $171 = 0, $172 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $190 = 0, $192 = 0, $197 = 0, $199 = 0, $200 = 0, $205 = 0, $207 = 0, $208 = 0, $210 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $22 = 0, $222 = 0, $23 = 0, $235 = 0, $236 = 0, $241 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $259 = 0, $26 = 0, $261 = 0, $262 = 0, $267 = 0, $269 = 0, $272 = 0, $273 = 0, $275 = 0, $277 = 0, $291 = 0, $292 = 0, $297 = 0, $299 = 0, $300 = 0, $301 = 0, $306 = 0, $308 = 0, $309 = 0, $31 = 0, $312 = 0, $313 = 0, $318 = 0, $32 = 0, $320 = 0, $322 = 0, $323 = 0, $325 = 0, $328 = 0, $34 = 0, $341 = 0, $342 = 0, $347 = 0, $349 = 0, $351 = 0, $352 = 0, $357 = 0, $359 = 0, $360 = 0, $361 = 0, $366 = 0, $368 = 0, $370 = 0, $372 = 0, $375 = 0, $376 = 0, $378 = 0, $38 = 0, $381 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $56 = 0, $58 = 0, $61 = 0, $62 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $78 = 0, $80 = 0, $83 = 0, $84 = 0, $89 = 0, $91 = 0, $93 = 0, $94 = 0, $99 = 0, label = 0;
 $$sroa$0$0$$sroa_idx$i = $1 + 8 | 0;
 $4 = $$sroa$0$0$$sroa_idx$i;
 $10 = ___divdi3(HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] | 0, 1e6, 0) | 0;
 $11 = getTempRet0() | 0;
 $12 = $0 + 16 | 0;
 $13 = $12;
 $22 = $0 + 32 | 0;
 if ((HEAP32[$13 >> 2] | 0) == ($10 | 0) ? (HEAP32[$13 + 4 >> 2] | 0) == ($11 | 0) : 0) {
  $23 = HEAP32[$22 >> 2] | 0;
  if (!$23) label = 4; else {
   $$pre$phi199Z2D = $0 + 28 | 0;
   $108 = $23;
  }
 } else label = 4;
 if ((label | 0) == 4) {
  $25 = $0 + 24 | 0;
  HEAP32[$22 >> 2] = 0;
  $26 = $0 + 36 | 0;
  if (!(HEAP32[$26 >> 2] | 0)) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$25 >> 2] >> 2] & 127]($25, 1);
   $$pre$i45 = HEAP32[$22 >> 2] | 0;
   $$pre$phi$i47Z2D = $$pre$i45 + 1 | 0;
   $34 = $$pre$i45;
  } else {
   $$pre$phi$i47Z2D = 1;
   $34 = 0;
  }
  $31 = $0 + 28 | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  HEAP32[$22 >> 2] = $$pre$phi$i47Z2D;
  HEAP8[$32 + $34 >> 0] = 91;
  __ZN6spdlog7details10fmt_helper10append_intIiLm128EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE((HEAP32[$2 + 20 >> 2] | 0) + 1900 | 0, $25);
  $38 = HEAP32[$22 >> 2] | 0;
  $39 = $38 + 1 | 0;
  if ((HEAP32[$26 >> 2] | 0) >>> 0 < $39 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$25 >> 2] >> 2] & 127]($25, $39);
   $$pre$i49 = HEAP32[$22 >> 2] | 0;
   $$pre$phi$i51Z2D = $$pre$i49 + 1 | 0;
   $46 = $$pre$i49;
  } else {
   $$pre$phi$i51Z2D = $39;
   $46 = $38;
  }
  $44 = HEAP32[$31 >> 2] | 0;
  HEAP32[$22 >> 2] = $$pre$phi$i51Z2D;
  HEAP8[$44 + $46 >> 0] = 45;
  __ZN6spdlog7details10fmt_helper4pad2ILm128EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE((HEAP32[$2 + 16 >> 2] | 0) + 1 | 0, $25);
  $50 = HEAP32[$22 >> 2] | 0;
  $51 = $50 + 1 | 0;
  if ((HEAP32[$26 >> 2] | 0) >>> 0 < $51 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$25 >> 2] >> 2] & 127]($25, $51);
   $$pre$i53 = HEAP32[$22 >> 2] | 0;
   $$pre$phi$i55Z2D = $$pre$i53 + 1 | 0;
   $58 = $$pre$i53;
  } else {
   $$pre$phi$i55Z2D = $51;
   $58 = $50;
  }
  $56 = HEAP32[$31 >> 2] | 0;
  HEAP32[$22 >> 2] = $$pre$phi$i55Z2D;
  HEAP8[$56 + $58 >> 0] = 45;
  __ZN6spdlog7details10fmt_helper4pad2ILm128EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 12 >> 2] | 0, $25);
  $61 = HEAP32[$22 >> 2] | 0;
  $62 = $61 + 1 | 0;
  if ((HEAP32[$26 >> 2] | 0) >>> 0 < $62 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$25 >> 2] >> 2] & 127]($25, $62);
   $$pre$i57 = HEAP32[$22 >> 2] | 0;
   $$pre$phi$i59Z2D = $$pre$i57 + 1 | 0;
   $69 = $$pre$i57;
  } else {
   $$pre$phi$i59Z2D = $62;
   $69 = $61;
  }
  $67 = HEAP32[$31 >> 2] | 0;
  HEAP32[$22 >> 2] = $$pre$phi$i59Z2D;
  HEAP8[$67 + $69 >> 0] = 32;
  __ZN6spdlog7details10fmt_helper4pad2ILm128EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 8 >> 2] | 0, $25);
  $72 = HEAP32[$22 >> 2] | 0;
  $73 = $72 + 1 | 0;
  if ((HEAP32[$26 >> 2] | 0) >>> 0 < $73 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$25 >> 2] >> 2] & 127]($25, $73);
   $$pre$i61 = HEAP32[$22 >> 2] | 0;
   $$pre$phi$i63Z2D = $$pre$i61 + 1 | 0;
   $80 = $$pre$i61;
  } else {
   $$pre$phi$i63Z2D = $73;
   $80 = $72;
  }
  $78 = HEAP32[$31 >> 2] | 0;
  HEAP32[$22 >> 2] = $$pre$phi$i63Z2D;
  HEAP8[$78 + $80 >> 0] = 58;
  __ZN6spdlog7details10fmt_helper4pad2ILm128EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 4 >> 2] | 0, $25);
  $83 = HEAP32[$22 >> 2] | 0;
  $84 = $83 + 1 | 0;
  if ((HEAP32[$26 >> 2] | 0) >>> 0 < $84 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$25 >> 2] >> 2] & 127]($25, $84);
   $$pre$i65 = HEAP32[$22 >> 2] | 0;
   $$pre$phi$i67Z2D = $$pre$i65 + 1 | 0;
   $91 = $$pre$i65;
  } else {
   $$pre$phi$i67Z2D = $84;
   $91 = $83;
  }
  $89 = HEAP32[$31 >> 2] | 0;
  HEAP32[$22 >> 2] = $$pre$phi$i67Z2D;
  HEAP8[$89 + $91 >> 0] = 58;
  __ZN6spdlog7details10fmt_helper4pad2ILm128EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 >> 2] | 0, $25);
  $93 = HEAP32[$22 >> 2] | 0;
  $94 = $93 + 1 | 0;
  if ((HEAP32[$26 >> 2] | 0) >>> 0 < $94 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$25 >> 2] >> 2] & 127]($25, $94);
   $$pre$i69 = HEAP32[$22 >> 2] | 0;
   $$pre$phi$i71Z2D = $$pre$i69 + 1 | 0;
   $101 = $$pre$i69;
  } else {
   $$pre$phi$i71Z2D = $94;
   $101 = $93;
  }
  $99 = HEAP32[$31 >> 2] | 0;
  HEAP32[$22 >> 2] = $$pre$phi$i71Z2D;
  HEAP8[$99 + $101 >> 0] = 46;
  $102 = $12;
  HEAP32[$102 >> 2] = $10;
  HEAP32[$102 + 4 >> 2] = $11;
  $$pre$phi199Z2D = $31;
  $108 = HEAP32[$22 >> 2] | 0;
 }
 $106 = HEAP32[$$pre$phi199Z2D >> 2] | 0;
 $107 = $106 + $108 | 0;
 $109 = $3 + 8 | 0;
 if (($108 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $112 = (HEAP32[$109 >> 2] | 0) + $108 | 0;
 $113 = $3 + 12 | 0;
 if ((HEAP32[$113 >> 2] | 0) >>> 0 < $112 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $112);
 if ($108 | 0) {
  $$010$i$i$i76 = $106;
  $$089$i$i$i77 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$109 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i77 >> 0] = HEAP8[$$010$i$i$i76 >> 0] | 0;
   $$010$i$i$i76 = $$010$i$i$i76 + 1 | 0;
   if (($$010$i$i$i76 | 0) == ($107 | 0)) break; else $$089$i$i$i77 = $$089$i$i$i77 + 1 | 0;
  }
 }
 HEAP32[$109 >> 2] = $112;
 $127 = $$sroa$0$0$$sroa_idx$i;
 $129 = HEAP32[$127 >> 2] | 0;
 $132 = HEAP32[$127 + 4 >> 2] | 0;
 $133 = ___divdi3($129 | 0, $132 | 0, 1e6, 0) | 0;
 $134 = getTempRet0() | 0;
 $135 = ___divdi3($129 | 0, $132 | 0, 1e3, 0) | 0;
 $136 = getTempRet0() | 0;
 $137 = ___muldi3($133 | 0, $134 | 0, -1e3, -1) | 0;
 $139 = _i64Add($137 | 0, getTempRet0() | 0, $135 | 0, $136 | 0) | 0;
 getTempRet0() | 0;
 $145 = ((32 - (Math_clz32($139 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $150 = $145 + ((HEAP32[16 + ($145 << 2) >> 2] | 0) >>> 0 <= $139 >>> 0 & 1) | 0;
 if ($150 >>> 0 < 3) {
  $153 = 19027 + (0 - $150) | 0;
  $155 = $153 - 19024 | 0;
  if (($155 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $157 = $155 + $112 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $157 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $157);
  if (($153 | 0) != 19024) {
   $$010$i$i$i$i = 19024;
   $$089$i$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$109 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i >> 0] | 0;
    $$010$i$i$i$i = $$010$i$i$i$i + 1 | 0;
    if (($$010$i$i$i$i | 0) == ($153 | 0)) break; else $$089$i$i$i$i = $$089$i$i$i$i + 1 | 0;
   }
  }
  HEAP32[$109 >> 2] = $157;
 }
 __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($139, $3);
 $171 = HEAP32[$109 >> 2] | 0;
 $172 = $171 + 1 | 0;
 if ((HEAP32[$113 >> 2] | 0) >>> 0 < $172 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $172);
  $$pre$i83 = HEAP32[$109 >> 2] | 0;
  $$pre$phi$i85Z2D = $$pre$i83 + 1 | 0;
  $180 = $$pre$i83;
 } else {
  $$pre$phi$i85Z2D = $172;
  $180 = $171;
 }
 $177 = $3 + 4 | 0;
 $178 = HEAP32[$177 >> 2] | 0;
 HEAP32[$109 >> 2] = $$pre$phi$i85Z2D;
 HEAP8[$178 + $180 >> 0] = 93;
 $181 = HEAP32[$109 >> 2] | 0;
 $182 = $181 + 1 | 0;
 if ((HEAP32[$113 >> 2] | 0) >>> 0 < $182 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $182);
  $$pre$i87 = HEAP32[$109 >> 2] | 0;
  $$pre$phi$i89Z2D = $$pre$i87 + 1 | 0;
  $189 = $$pre$i87;
 } else {
  $$pre$phi$i89Z2D = $182;
  $189 = $181;
 }
 $187 = HEAP32[$177 >> 2] | 0;
 HEAP32[$109 >> 2] = $$pre$phi$i89Z2D;
 HEAP8[$187 + $189 >> 0] = 32;
 $190 = HEAP32[$1 >> 2] | 0;
 $192 = HEAP8[$190 + 11 >> 0] | 0;
 if ($192 << 24 >> 24 < 0) $197 = HEAP32[$190 + 4 >> 2] | 0; else $197 = $192 & 255;
 if ($197 | 0) {
  $199 = HEAP32[$109 >> 2] | 0;
  $200 = $199 + 1 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $200 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $200);
   $$pre$i91 = HEAP32[$109 >> 2] | 0;
   $$pre$phi$i93Z2D = $$pre$i91 + 1 | 0;
   $207 = $$pre$i91;
  } else {
   $$pre$phi$i93Z2D = $200;
   $207 = $199;
  }
  $205 = HEAP32[$177 >> 2] | 0;
  HEAP32[$109 >> 2] = $$pre$phi$i93Z2D;
  HEAP8[$205 + $207 >> 0] = 91;
  $208 = HEAP32[$1 >> 2] | 0;
  $210 = HEAP8[$208 + 11 >> 0] | 0;
  $211 = $210 << 24 >> 24 < 0;
  $213 = $211 ? HEAP32[$208 >> 2] | 0 : $208;
  $217 = $211 ? HEAP32[$208 + 4 >> 2] | 0 : $210 & 255;
  if (!$213) $236 = HEAP32[$109 >> 2] | 0; else {
   $219 = $213 + $217 | 0;
   if (($217 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $222 = (HEAP32[$109 >> 2] | 0) + $217 | 0;
   if ((HEAP32[$113 >> 2] | 0) >>> 0 < $222 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $222);
   if ($217 | 0) {
    $$010$i$i$i98 = $213;
    $$089$i$i$i99 = (HEAP32[$177 >> 2] | 0) + (HEAP32[$109 >> 2] | 0) | 0;
    while (1) {
     HEAP8[$$089$i$i$i99 >> 0] = HEAP8[$$010$i$i$i98 >> 0] | 0;
     $$010$i$i$i98 = $$010$i$i$i98 + 1 | 0;
     if (($$010$i$i$i98 | 0) == ($219 | 0)) break; else $$089$i$i$i99 = $$089$i$i$i99 + 1 | 0;
    }
   }
   HEAP32[$109 >> 2] = $222;
   $236 = $222;
  }
  $235 = $236 + 1 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $235 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $235);
   $$pre$i102 = HEAP32[$109 >> 2] | 0;
   $$pre$phi$i104Z2D = $$pre$i102 + 1 | 0;
   $243 = $$pre$i102;
  } else {
   $$pre$phi$i104Z2D = $235;
   $243 = $236;
  }
  $241 = HEAP32[$177 >> 2] | 0;
  HEAP32[$109 >> 2] = $$pre$phi$i104Z2D;
  HEAP8[$241 + $243 >> 0] = 93;
  $244 = HEAP32[$109 >> 2] | 0;
  $245 = $244 + 1 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $245 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $245);
   $$pre$i106 = HEAP32[$109 >> 2] | 0;
   $$pre$phi$i108Z2D = $$pre$i106 + 1 | 0;
   $252 = $$pre$i106;
  } else {
   $$pre$phi$i108Z2D = $245;
   $252 = $244;
  }
  $250 = HEAP32[$177 >> 2] | 0;
  HEAP32[$109 >> 2] = $$pre$phi$i108Z2D;
  HEAP8[$250 + $252 >> 0] = 32;
 }
 $253 = HEAP32[$109 >> 2] | 0;
 $254 = $253 + 1 | 0;
 if ((HEAP32[$113 >> 2] | 0) >>> 0 < $254 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $254);
  $$pre$i110 = HEAP32[$109 >> 2] | 0;
  $$pre$phi$i112Z2D = $$pre$i110 + 1 | 0;
  $261 = $$pre$i110;
 } else {
  $$pre$phi$i112Z2D = $254;
  $261 = $253;
 }
 $259 = HEAP32[$177 >> 2] | 0;
 HEAP32[$109 >> 2] = $$pre$phi$i112Z2D;
 HEAP8[$259 + $261 >> 0] = 91;
 $262 = HEAP32[$109 >> 2] | 0;
 HEAP32[$1 + 24 >> 2] = $262;
 $267 = 26288 + (HEAP32[$1 + 4 >> 2] << 3) | 0;
 $269 = HEAP32[$267 >> 2] | 0;
 $272 = HEAP32[$267 + 4 >> 2] | 0;
 $273 = $269;
 if (!$269) $291 = $262; else {
  $275 = $273 + $272 | 0;
  if (($272 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $277 = $262 + $272 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $277 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $277);
  if ($272 | 0) {
   $$010$i$i$i125 = $273;
   $$089$i$i$i126 = (HEAP32[$177 >> 2] | 0) + (HEAP32[$109 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i126 >> 0] = HEAP8[$$010$i$i$i125 >> 0] | 0;
    $$010$i$i$i125 = $$010$i$i$i125 + 1 | 0;
    if (($$010$i$i$i125 | 0) == ($275 | 0)) break; else $$089$i$i$i126 = $$089$i$i$i126 + 1 | 0;
   }
  }
  HEAP32[$109 >> 2] = $277;
  $291 = $277;
 }
 HEAP32[$1 + 28 >> 2] = $291;
 $292 = $291 + 1 | 0;
 if ((HEAP32[$113 >> 2] | 0) >>> 0 < $292 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $292);
  $$pre$i129 = HEAP32[$109 >> 2] | 0;
  $$pre$phi$i131Z2D = $$pre$i129 + 1 | 0;
  $299 = $$pre$i129;
 } else {
  $$pre$phi$i131Z2D = $292;
  $299 = $291;
 }
 $297 = HEAP32[$177 >> 2] | 0;
 HEAP32[$109 >> 2] = $$pre$phi$i131Z2D;
 HEAP8[$297 + $299 >> 0] = 93;
 $300 = HEAP32[$109 >> 2] | 0;
 $301 = $300 + 1 | 0;
 if ((HEAP32[$113 >> 2] | 0) >>> 0 < $301 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $301);
  $$pre$i133 = HEAP32[$109 >> 2] | 0;
  $$pre$phi$i135Z2D = $$pre$i133 + 1 | 0;
  $308 = $$pre$i133;
 } else {
  $$pre$phi$i135Z2D = $301;
  $308 = $300;
 }
 $306 = HEAP32[$177 >> 2] | 0;
 HEAP32[$109 >> 2] = $$pre$phi$i135Z2D;
 HEAP8[$306 + $308 >> 0] = 32;
 $309 = $1 + 36 | 0;
 if (HEAP32[$309 >> 2] | 0) {
  $312 = HEAP32[$109 >> 2] | 0;
  $313 = $312 + 1 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $313 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $313);
   $$pre$i137 = HEAP32[$109 >> 2] | 0;
   $$pre$phi$i139Z2D = $$pre$i137 + 1 | 0;
   $320 = $$pre$i137;
  } else {
   $$pre$phi$i139Z2D = $313;
   $320 = $312;
  }
  $318 = HEAP32[$177 >> 2] | 0;
  HEAP32[$109 >> 2] = $$pre$phi$i139Z2D;
  HEAP8[$318 + $320 >> 0] = 91;
  $322 = HEAP32[$1 + 32 >> 2] | 0;
  $323 = _strlen($322) | 0;
  if (!$322) $342 = HEAP32[$109 >> 2] | 0; else {
   $325 = $322 + $323 | 0;
   if (($323 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $328 = (HEAP32[$109 >> 2] | 0) + $323 | 0;
   if ((HEAP32[$113 >> 2] | 0) >>> 0 < $328 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $328);
   if ($323 | 0) {
    $$010$i$i$i117 = $322;
    $$089$i$i$i118 = (HEAP32[$177 >> 2] | 0) + (HEAP32[$109 >> 2] | 0) | 0;
    while (1) {
     HEAP8[$$089$i$i$i118 >> 0] = HEAP8[$$010$i$i$i117 >> 0] | 0;
     $$010$i$i$i117 = $$010$i$i$i117 + 1 | 0;
     if (($$010$i$i$i117 | 0) == ($325 | 0)) break; else $$089$i$i$i118 = $$089$i$i$i118 + 1 | 0;
    }
   }
   HEAP32[$109 >> 2] = $328;
   $342 = $328;
  }
  $341 = $342 + 1 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $341 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $341);
   $$pre$i79 = HEAP32[$109 >> 2] | 0;
   $$pre$phi$i81Z2D = $$pre$i79 + 1 | 0;
   $349 = $$pre$i79;
  } else {
   $$pre$phi$i81Z2D = $341;
   $349 = $342;
  }
  $347 = HEAP32[$177 >> 2] | 0;
  HEAP32[$109 >> 2] = $$pre$phi$i81Z2D;
  HEAP8[$347 + $349 >> 0] = 58;
  __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE(HEAP32[$309 >> 2] | 0, $3);
  $351 = HEAP32[$109 >> 2] | 0;
  $352 = $351 + 1 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $352 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $352);
   $$pre$i41 = HEAP32[$109 >> 2] | 0;
   $$pre$phi$i43Z2D = $$pre$i41 + 1 | 0;
   $359 = $$pre$i41;
  } else {
   $$pre$phi$i43Z2D = $352;
   $359 = $351;
  }
  $357 = HEAP32[$177 >> 2] | 0;
  HEAP32[$109 >> 2] = $$pre$phi$i43Z2D;
  HEAP8[$357 + $359 >> 0] = 93;
  $360 = HEAP32[$109 >> 2] | 0;
  $361 = $360 + 1 | 0;
  if ((HEAP32[$113 >> 2] | 0) >>> 0 < $361 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $361);
   $$pre$i = HEAP32[$109 >> 2] | 0;
   $$pre$phi$iZ2D = $$pre$i + 1 | 0;
   $368 = $$pre$i;
  } else {
   $$pre$phi$iZ2D = $361;
   $368 = $360;
  }
  $366 = HEAP32[$177 >> 2] | 0;
  HEAP32[$109 >> 2] = $$pre$phi$iZ2D;
  HEAP8[$366 + $368 >> 0] = 32;
 }
 $370 = $1 + 44 | 0;
 $372 = HEAP32[$370 >> 2] | 0;
 $375 = HEAP32[$370 + 4 >> 2] | 0;
 $376 = $372;
 if (!$372) return;
 $378 = $376 + $375 | 0;
 if (($375 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $381 = (HEAP32[$109 >> 2] | 0) + $375 | 0;
 if ((HEAP32[$113 >> 2] | 0) >>> 0 < $381 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $381);
 if ($375 | 0) {
  $$010$i$i$i = $376;
  $$089$i$i$i = (HEAP32[$177 >> 2] | 0) + (HEAP32[$109 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($378 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$109 >> 2] = $381;
 return;
}

function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0228 = 0, $$0229333 = 0, $$0231 = 0, $$0234 = 0, $$0236 = 0, $$0239312 = 0, $$0239312370 = 0, $$0239332 = 0, $$0242 = 0, $$0242$ph = 0, $$0242$ph$be = 0, $$0246 = 0, $$0246$ph = 0, $$0248$lcssa = 0, $$0248320 = 0, $$0251 = 0, $$0252 = 0, $$0253 = 0, $$0258 = 0, $$0261$lcssa = 0, $$0261327 = 0, $$0268$ph = 0, $$1 = 0, $$1230339 = 0, $$1232 = 0, $$1235 = 0, $$1237 = 0, $$1240338 = 0, $$1247 = 0, $$1254 = 0, $$1259 = 0, $$1262 = 0, $$1269 = 0, $$2233 = 0, $$2238 = 0, $$2241319 = 0, $$2255 = 0, $$2260 = 0, $$2270 = 0, $$3264 = 0, $$3271 = 0, $$3316 = 0, $$4257369 = 0, $$4265 = 0, $$5 = 0, $$6267 = 0, $$lcssa307 = 0, $$pre$phiZ2D = 0, $$pre359 = 0, $$pre362 = 0, $$sink = 0, $10 = 0, $102 = 0, $103 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $12 = 0, $122 = 0, $126 = 0, $13 = 0, $137 = 0, $14 = 0, $141 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $154 = 0, $163 = 0, $164 = 0, $169 = 0, $172 = 0, $177 = 0, $178 = 0, $183 = 0, $185 = 0, $192 = 0, $193 = 0, $20 = 0, $204 = 0, $21 = 0, $216 = 0, $223 = 0, $225 = 0, $228 = 0, $23 = 0, $230 = 0, $238 = 0, $24 = 0, $240 = 0, $243 = 0, $244 = 0, $248 = 0, $25 = 0, $252 = 0, $254 = 0, $257 = 0, $259 = 0, $260 = 0, $261 = 0, $27 = 0, $271 = 0, $272 = 0, $276 = 0, $278 = 0, $280 = 0, $286 = 0, $295 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $312 = 0, $314 = 0, $315 = 0, $319 = 0, $323 = 0, $325 = 0, $336 = 0, $338 = 0, $345 = 0, $348 = 0, $355 = 0, $356 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, $or$cond277 = 0, $spec$select = 0, $spec$select283 = 0, $storemerge272$lcssa = 0, $storemerge272326 = 0, $storemerge273 = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 56 | 0;
 $6 = sp + 40 | 0;
 $7 = sp;
 $8 = sp + 48 | 0;
 $9 = sp + 60 | 0;
 HEAP32[$5 >> 2] = $1;
 $10 = ($0 | 0) != 0;
 $11 = $7 + 40 | 0;
 $12 = $11;
 $13 = $7 + 39 | 0;
 $14 = $8 + 4 | 0;
 $$0242$ph = 0;
 $$0246$ph = 0;
 $$0268$ph = 0;
 L1 : while (1) {
  $$0242 = $$0242$ph;
  $$0246 = $$0246$ph;
  while (1) {
   do if (($$0246 | 0) > -1) if (($$0242 | 0) > (2147483647 - $$0246 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 75;
    $$1247 = -1;
    break;
   } else {
    $$1247 = $$0242 + $$0246 | 0;
    break;
   } else $$1247 = $$0246; while (0);
   $20 = HEAP32[$5 >> 2] | 0;
   $21 = HEAP8[$20 >> 0] | 0;
   if (!($21 << 24 >> 24)) {
    label = 92;
    break L1;
   }
   $23 = $21;
   $25 = $20;
   L12 : while (1) {
    switch ($23 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $$0248$lcssa = $25;
      break L12;
      break;
     }
    default:
     {}
    }
    $24 = $25 + 1 | 0;
    HEAP32[$5 >> 2] = $24;
    $23 = HEAP8[$24 >> 0] | 0;
    $25 = $24;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $$0248320 = $25;
    $27 = $25;
    while (1) {
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0248$lcssa = $$0248320;
      break L15;
     }
     $30 = $$0248320 + 1 | 0;
     $27 = $27 + 2 | 0;
     HEAP32[$5 >> 2] = $27;
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0248$lcssa = $30;
      break;
     } else $$0248320 = $30;
    }
   } while (0);
   $$0242 = $$0248$lcssa - $20 | 0;
   if ($10) _out($0, $20, $$0242);
   if (!$$0242) break; else $$0246 = $$1247;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre359 = HEAP32[$5 >> 2] | 0;
  if ($43) {
   $$0252 = -1;
   $$1269 = $$0268$ph;
   $$sink = 1;
  } else if ((HEAP8[$$pre359 + 2 >> 0] | 0) == 36) {
   $$0252 = (HEAP8[$$pre359 + 1 >> 0] | 0) + -48 | 0;
   $$1269 = 1;
   $$sink = 3;
  } else {
   $$0252 = -1;
   $$1269 = $$0268$ph;
   $$sink = 1;
  }
  $51 = $$pre359 + $$sink | 0;
  HEAP32[$5 >> 2] = $51;
  $52 = HEAP8[$51 >> 0] | 0;
  $54 = ($52 << 24 >> 24) + -32 | 0;
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0261$lcssa = 0;
   $$lcssa307 = $52;
   $storemerge272$lcssa = $51;
  } else {
   $$0261327 = 0;
   $60 = $54;
   $storemerge272326 = $51;
   while (1) {
    $61 = 1 << $60 | $$0261327;
    $62 = $storemerge272326 + 1 | 0;
    HEAP32[$5 >> 2] = $62;
    $63 = HEAP8[$62 >> 0] | 0;
    $60 = ($63 << 24 >> 24) + -32 | 0;
    if ($60 >>> 0 > 31 | (1 << $60 & 75913 | 0) == 0) {
     $$0261$lcssa = $61;
     $$lcssa307 = $63;
     $storemerge272$lcssa = $62;
     break;
    } else {
     $$0261327 = $61;
     $storemerge272326 = $62;
    }
   }
  }
  if ($$lcssa307 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge272$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $76 = HEAP32[$5 >> 2] | 0;
    if ((HEAP8[$76 + 2 >> 0] | 0) == 36) {
     $80 = $76 + 1 | 0;
     HEAP32[$4 + ((HEAP8[$80 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $$0258 = HEAP32[$3 + ((HEAP8[$80 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $$2270 = 1;
     $storemerge273 = $76 + 3 | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($$1269 | 0) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $102 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $103 = HEAP32[$102 >> 2] | 0;
     HEAP32[$2 >> 2] = $102 + 4;
     $355 = $103;
    } else $355 = 0;
    $$0258 = $355;
    $$2270 = 0;
    $storemerge273 = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   }
   HEAP32[$5 >> 2] = $storemerge273;
   $106 = ($$0258 | 0) < 0;
   $$1259 = $106 ? 0 - $$0258 | 0 : $$0258;
   $$1262 = $106 ? $$0261$lcssa | 8192 : $$0261$lcssa;
   $$3271 = $$2270;
   $112 = $storemerge273;
  } else {
   $109 = _getint($5) | 0;
   if (($109 | 0) < 0) {
    $$0 = -1;
    break;
   }
   $$1259 = $109;
   $$1262 = $$0261$lcssa;
   $$3271 = $$1269;
   $112 = HEAP32[$5 >> 2] | 0;
  }
  do if ((HEAP8[$112 >> 0] | 0) == 46) {
   $114 = $112 + 1 | 0;
   if ((HEAP8[$114 >> 0] | 0) != 42) {
    HEAP32[$5 >> 2] = $114;
    $152 = _getint($5) | 0;
    $$0253 = $152;
    $$pre362 = HEAP32[$5 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[$112 + 2 >> 0] | 0) | 0) {
    $122 = HEAP32[$5 >> 2] | 0;
    if ((HEAP8[$122 + 3 >> 0] | 0) == 36) {
     $126 = $122 + 2 | 0;
     HEAP32[$4 + ((HEAP8[$126 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $137 = HEAP32[$3 + ((HEAP8[$126 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $141 = $122 + 4 | 0;
     HEAP32[$5 >> 2] = $141;
     $$0253 = $137;
     $$pre362 = $141;
     break;
    }
   }
   if ($$3271 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($10) {
    $148 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $149 = HEAP32[$148 >> 2] | 0;
    HEAP32[$2 >> 2] = $148 + 4;
    $356 = $149;
   } else $356 = 0;
   $151 = (HEAP32[$5 >> 2] | 0) + 2 | 0;
   HEAP32[$5 >> 2] = $151;
   $$0253 = $356;
   $$pre362 = $151;
  } else {
   $$0253 = -1;
   $$pre362 = $112;
  } while (0);
  $$0251 = 0;
  $154 = $$pre362;
  while (1) {
   if (((HEAP8[$154 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $154$looptemp = $154;
   $154 = $154 + 1 | 0;
   HEAP32[$5 >> 2] = $154;
   $163 = HEAP8[(HEAP8[$154$looptemp >> 0] | 0) + -65 + (1456 + ($$0251 * 58 | 0)) >> 0] | 0;
   $164 = $163 & 255;
   if (($164 + -1 | 0) >>> 0 >= 8) break; else $$0251 = $164;
  }
  if (!($163 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $169 = ($$0252 | 0) > -1;
  do if ($163 << 24 >> 24 == 19) if ($169) {
   $$0 = -1;
   break L1;
  } else label = 54; else {
   if ($169) {
    HEAP32[$4 + ($$0252 << 2) >> 2] = $164;
    $172 = $3 + ($$0252 << 3) | 0;
    $177 = HEAP32[$172 + 4 >> 2] | 0;
    $178 = $6;
    HEAP32[$178 >> 2] = HEAP32[$172 >> 2];
    HEAP32[$178 + 4 >> 2] = $177;
    label = 54;
    break;
   }
   if (!$10) {
    $$0 = 0;
    break L1;
   }
   _pop_arg($6, $164, $2);
   $183 = HEAP32[$5 >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($10) {
    $183 = $154;
    label = 55;
   } else $$0242$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $185 = HEAP8[$183 + -1 >> 0] | 0;
   $$0234 = ($$0251 | 0) != 0 & ($185 & 15 | 0) == 3 ? $185 & -33 : $185;
   $192 = $$1262 & -65537;
   $spec$select = ($$1262 & 8192 | 0) == 0 ? $$1262 : $192;
   L79 : do switch ($$0234 | 0) {
   case 110:
    {
     switch (($$0251 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1247;
       $$0242$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1247;
       $$0242$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $204 = HEAP32[$6 >> 2] | 0;
       HEAP32[$204 >> 2] = $$1247;
       HEAP32[$204 + 4 >> 2] = (($$1247 | 0) < 0) << 31 >> 31;
       $$0242$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1247;
       $$0242$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1247;
       $$0242$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1247;
       $$0242$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $216 = HEAP32[$6 >> 2] | 0;
       HEAP32[$216 >> 2] = $$1247;
       HEAP32[$216 + 4 >> 2] = (($$1247 | 0) < 0) << 31 >> 31;
       $$0242$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $$0242$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $$1235 = 120;
     $$1254 = $$0253 >>> 0 > 8 ? $$0253 : 8;
     $$3264 = $spec$select | 8;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $$1235 = $$0234;
     $$1254 = $$0253;
     $$3264 = $spec$select;
     label = 67;
     break;
    }
   case 111:
    {
     $238 = $6;
     $240 = HEAP32[$238 >> 2] | 0;
     $243 = HEAP32[$238 + 4 >> 2] | 0;
     $244 = _fmt_o($240, $243, $11) | 0;
     $248 = $12 - $244 | 0;
     $$0228 = $244;
     $$1232 = 0;
     $$1237 = 22599;
     $$2255 = ($spec$select & 8 | 0) == 0 | ($$0253 | 0) > ($248 | 0) ? $$0253 : $248 + 1 | 0;
     $$4265 = $spec$select;
     $276 = $240;
     $278 = $243;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $252 = $6;
     $254 = HEAP32[$252 >> 2] | 0;
     $257 = HEAP32[$252 + 4 >> 2] | 0;
     if (($257 | 0) < 0) {
      $259 = _i64Subtract(0, 0, $254 | 0, $257 | 0) | 0;
      $260 = getTempRet0() | 0;
      $261 = $6;
      HEAP32[$261 >> 2] = $259;
      HEAP32[$261 + 4 >> 2] = $260;
      $$0231 = 1;
      $$0236 = 22599;
      $271 = $259;
      $272 = $260;
      label = 72;
      break L79;
     } else {
      $$0231 = ($spec$select & 2049 | 0) != 0 & 1;
      $$0236 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 22599 : 22601) : 22600;
      $271 = $254;
      $272 = $257;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $193 = $6;
     $$0231 = 0;
     $$0236 = 22599;
     $271 = HEAP32[$193 >> 2] | 0;
     $272 = HEAP32[$193 + 4 >> 2] | 0;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2];
     $$1 = $13;
     $$2233 = 0;
     $$2238 = 22599;
     $$5 = 1;
     $$6267 = $192;
     $$pre$phiZ2D = $12;
     break;
    }
   case 115:
    {
     $295 = HEAP32[$6 >> 2] | 0;
     $297 = ($295 | 0) == 0 ? 22609 : $295;
     $298 = _memchr($297, 0, $$0253) | 0;
     $299 = ($298 | 0) == 0;
     $$1 = $297;
     $$2233 = 0;
     $$2238 = 22599;
     $$5 = $299 ? $$0253 : $298 - $297 | 0;
     $$6267 = $192;
     $$pre$phiZ2D = $299 ? $297 + $$0253 | 0 : $298;
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$14 >> 2] = 0;
     HEAP32[$6 >> 2] = $8;
     $$4257369 = -1;
     label = 79;
     break;
    }
   case 83:
    {
     if (!$$0253) {
      _pad_661($0, 32, $$1259, 0, $spec$select);
      $$0239312370 = 0;
      label = 89;
     } else {
      $$4257369 = $$0253;
      label = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0242$ph$be = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1259, $$0253, $spec$select, $$0234) | 0;
     break L77;
     break;
    }
   default:
    {
     $$1 = $20;
     $$2233 = 0;
     $$2238 = 22599;
     $$5 = $$0253;
     $$6267 = $spec$select;
     $$pre$phiZ2D = $12;
    }
   } while (0);
   L102 : do if ((label | 0) == 67) {
    label = 0;
    $223 = $6;
    $225 = HEAP32[$223 >> 2] | 0;
    $228 = HEAP32[$223 + 4 >> 2] | 0;
    $230 = _fmt_x($225, $228, $11, $$1235 & 32) | 0;
    $or$cond277 = ($$3264 & 8 | 0) == 0 | ($225 | 0) == 0 & ($228 | 0) == 0;
    $$0228 = $230;
    $$1232 = $or$cond277 ? 0 : 2;
    $$1237 = $or$cond277 ? 22599 : 22599 + ($$1235 >>> 4) | 0;
    $$2255 = $$1254;
    $$4265 = $$3264;
    $276 = $225;
    $278 = $228;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $$0228 = _fmt_u($271, $272, $11) | 0;
    $$1232 = $$0231;
    $$1237 = $$0236;
    $$2255 = $$0253;
    $$4265 = $spec$select;
    $276 = $271;
    $278 = $272;
    label = 73;
   } else if ((label | 0) == 79) {
    label = 0;
    $$0229333 = HEAP32[$6 >> 2] | 0;
    $$0239332 = 0;
    while (1) {
     $312 = HEAP32[$$0229333 >> 2] | 0;
     if (!$312) {
      $$0239312 = $$0239332;
      break;
     }
     $314 = _wctomb($9, $312) | 0;
     $315 = ($314 | 0) < 0;
     if ($315 | $314 >>> 0 > ($$4257369 - $$0239332 | 0) >>> 0) {
      label = 83;
      break;
     }
     $319 = $314 + $$0239332 | 0;
     if ($$4257369 >>> 0 > $319 >>> 0) {
      $$0229333 = $$0229333 + 4 | 0;
      $$0239332 = $319;
     } else {
      $$0239312 = $319;
      break;
     }
    }
    if ((label | 0) == 83) {
     label = 0;
     if ($315) {
      $$0 = -1;
      break L1;
     } else $$0239312 = $$0239332;
    }
    _pad_661($0, 32, $$1259, $$0239312, $spec$select);
    if (!$$0239312) {
     $$0239312370 = 0;
     label = 89;
    } else {
     $$1230339 = HEAP32[$6 >> 2] | 0;
     $$1240338 = 0;
     while (1) {
      $323 = HEAP32[$$1230339 >> 2] | 0;
      if (!$323) {
       $$0239312370 = $$0239312;
       label = 89;
       break L102;
      }
      $325 = _wctomb($9, $323) | 0;
      $$1240338 = $325 + $$1240338 | 0;
      if (($$1240338 | 0) > ($$0239312 | 0)) {
       $$0239312370 = $$0239312;
       label = 89;
       break L102;
      }
      _out($0, $9, $325);
      if ($$1240338 >>> 0 >= $$0239312 >>> 0) {
       $$0239312370 = $$0239312;
       label = 89;
       break;
      } else $$1230339 = $$1230339 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $280 = ($276 | 0) != 0 | ($278 | 0) != 0;
    $or$cond = ($$2255 | 0) != 0 | $280;
    $286 = $12 - $$0228 + (($280 ^ 1) & 1) | 0;
    $$1 = $or$cond ? $$0228 : $11;
    $$2233 = $$1232;
    $$2238 = $$1237;
    $$5 = $or$cond ? (($$2255 | 0) > ($286 | 0) ? $$2255 : $286) : 0;
    $$6267 = ($$2255 | 0) > -1 ? $$4265 & -65537 : $$4265;
    $$pre$phiZ2D = $12;
   } else if ((label | 0) == 89) {
    label = 0;
    _pad_661($0, 32, $$1259, $$0239312370, $spec$select ^ 8192);
    $$0242$ph$be = ($$1259 | 0) > ($$0239312370 | 0) ? $$1259 : $$0239312370;
    break;
   }
   $336 = $$pre$phiZ2D - $$1 | 0;
   $spec$select283 = ($$5 | 0) < ($336 | 0) ? $336 : $$5;
   $338 = $spec$select283 + $$2233 | 0;
   $$2260 = ($$1259 | 0) < ($338 | 0) ? $338 : $$1259;
   _pad_661($0, 32, $$2260, $338, $$6267);
   _out($0, $$2238, $$2233);
   _pad_661($0, 48, $$2260, $338, $$6267 ^ 65536);
   _pad_661($0, 48, $spec$select283, $336, 0);
   _out($0, $$1, $336);
   _pad_661($0, 32, $$2260, $338, $$6267 ^ 8192);
   $$0242$ph$be = $$2260;
  } while (0);
  $$0242$ph = $$0242$ph$be;
  $$0246$ph = $$1247;
  $$0268$ph = $$3271;
 }
 L123 : do if ((label | 0) == 92) if (!$0) if (!$$0268$ph) $$0 = 0; else {
  $$2241319 = 1;
  while (1) {
   $345 = HEAP32[$4 + ($$2241319 << 2) >> 2] | 0;
   if (!$345) break;
   _pop_arg($3 + ($$2241319 << 3) | 0, $345, $2);
   $348 = $$2241319 + 1 | 0;
   if ($348 >>> 0 < 10) $$2241319 = $348; else {
    $$0 = 1;
    break L123;
   }
  }
  $$3316 = $$2241319;
  while (1) {
   if (HEAP32[$4 + ($$3316 << 2) >> 2] | 0) {
    $$0 = -1;
    break L123;
   }
   $$3316 = $$3316 + 1 | 0;
   if ($$3316 >>> 0 >= 10) {
    $$0 = 1;
    break;
   }
  }
 } else $$0 = $$1247; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $101 = 0, $110 = 0, $114 = 0, $115 = 0, $12 = 0, $120 = 0, $121 = 0, $126 = 0, $127 = 0, $132 = 0, $14 = 0, $2 = 0, $20 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $40 = 0, $46 = 0, $49 = 0, $5 = 0, $52 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $67 = 0, $70 = 0, $73 = 0, $76 = 0, $79 = 0, $82 = 0, $85 = 0, $88 = 0, $91 = 0, $94 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = 10796;
 HEAP32[$0 + 4 >> 2] = 0;
 $5 = __Znwm(104) | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $6 = $1 + 11 | 0;
 HEAP8[$6 >> 0] = 1;
 HEAP8[$1 >> 0] = 10;
 HEAP8[$1 + 1 >> 0] = 0;
 __ZN6spdlog17pattern_formatterC2ENS_17pattern_time_typeENSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($5, 0, $1);
 if ((HEAP8[$6 >> 0] | 0) < 0) __ZdlPv(HEAP32[$1 >> 2] | 0);
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 >> 2] = 10828;
 $12 = $0 + 12 | 0;
 $14 = $0 + 16 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP8[$12 + 11 >> 0] = 3;
 HEAP8[$12 >> 0] = HEAP8[20648] | 0;
 HEAP8[$12 + 1 >> 0] = HEAP8[20649] | 0;
 HEAP8[$12 + 2 >> 0] = HEAP8[20650] | 0;
 HEAP8[$12 + 3 >> 0] = 0;
 $20 = $0 + 24 | 0;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$20 + 8 >> 2] = 0;
 HEAP8[$20 + 11 >> 0] = 4;
 HEAP8[$20 >> 0] = 27;
 HEAP8[$20 + 1 >> 0] = 91;
 HEAP8[$20 + 2 >> 0] = 49;
 HEAP8[$20 + 3 >> 0] = 109;
 HEAP8[$0 + 28 >> 0] = 0;
 $23 = $0 + 36 | 0;
 HEAP32[$23 >> 2] = 0;
 HEAP32[$23 + 4 >> 2] = 0;
 HEAP32[$23 + 8 >> 2] = 0;
 HEAP8[$23 + 11 >> 0] = 4;
 HEAP8[$23 >> 0] = 27;
 HEAP8[$23 + 1 >> 0] = 91;
 HEAP8[$23 + 2 >> 0] = 50;
 HEAP8[$23 + 3 >> 0] = 109;
 HEAP8[$0 + 40 >> 0] = 0;
 $26 = $0 + 48 | 0;
 HEAP32[$26 >> 2] = 0;
 HEAP32[$26 + 4 >> 2] = 0;
 HEAP32[$26 + 8 >> 2] = 0;
 HEAP8[$26 + 11 >> 0] = 4;
 HEAP8[$26 >> 0] = 27;
 HEAP8[$26 + 1 >> 0] = 91;
 HEAP8[$26 + 2 >> 0] = 52;
 HEAP8[$26 + 3 >> 0] = 109;
 HEAP8[$0 + 52 >> 0] = 0;
 $29 = $0 + 60 | 0;
 HEAP32[$29 >> 2] = 0;
 HEAP32[$29 + 4 >> 2] = 0;
 HEAP32[$29 + 8 >> 2] = 0;
 HEAP8[$29 + 11 >> 0] = 4;
 HEAP8[$29 >> 0] = 27;
 HEAP8[$29 + 1 >> 0] = 91;
 HEAP8[$29 + 2 >> 0] = 53;
 HEAP8[$29 + 3 >> 0] = 109;
 HEAP8[$0 + 64 >> 0] = 0;
 $32 = $0 + 72 | 0;
 HEAP32[$32 >> 2] = 0;
 HEAP32[$32 + 4 >> 2] = 0;
 HEAP32[$32 + 8 >> 2] = 0;
 HEAP8[$32 + 11 >> 0] = 4;
 HEAP8[$32 >> 0] = 27;
 HEAP8[$32 + 1 >> 0] = 91;
 HEAP8[$32 + 2 >> 0] = 55;
 HEAP8[$32 + 3 >> 0] = 109;
 HEAP8[$0 + 76 >> 0] = 0;
 $35 = $0 + 84 | 0;
 HEAP32[$35 >> 2] = 0;
 HEAP32[$35 + 4 >> 2] = 0;
 HEAP32[$35 + 8 >> 2] = 0;
 HEAP8[$35 + 11 >> 0] = 4;
 HEAP8[$35 >> 0] = 27;
 HEAP8[$35 + 1 >> 0] = 91;
 HEAP8[$35 + 2 >> 0] = 56;
 HEAP8[$35 + 3 >> 0] = 109;
 HEAP8[$0 + 88 >> 0] = 0;
 $38 = $0 + 96 | 0;
 $40 = $0 + 100 | 0;
 HEAP32[$40 >> 2] = 0;
 HEAP32[$40 + 4 >> 2] = 0;
 HEAP8[$38 + 11 >> 0] = 3;
 HEAP8[$38 >> 0] = HEAP8[20652] | 0;
 HEAP8[$38 + 1 >> 0] = HEAP8[20653] | 0;
 HEAP8[$38 + 2 >> 0] = HEAP8[20654] | 0;
 HEAP8[$38 + 3 >> 0] = 0;
 $46 = $0 + 108 | 0;
 HEAP32[$46 >> 2] = 0;
 HEAP32[$46 + 4 >> 2] = 0;
 HEAP32[$46 + 8 >> 2] = 0;
 HEAP8[$46 + 11 >> 0] = 5;
 HEAP8[$46 >> 0] = HEAP8[20656] | 0;
 HEAP8[$46 + 1 >> 0] = HEAP8[20657] | 0;
 HEAP8[$46 + 2 >> 0] = HEAP8[20658] | 0;
 HEAP8[$46 + 3 >> 0] = HEAP8[20659] | 0;
 HEAP8[$46 + 4 >> 0] = HEAP8[20660] | 0;
 HEAP8[$46 + 5 >> 0] = 0;
 $49 = $0 + 120 | 0;
 HEAP32[$49 >> 2] = 0;
 HEAP32[$49 + 4 >> 2] = 0;
 HEAP32[$49 + 8 >> 2] = 0;
 HEAP8[$49 + 11 >> 0] = 5;
 HEAP8[$49 >> 0] = HEAP8[20662] | 0;
 HEAP8[$49 + 1 >> 0] = HEAP8[20663] | 0;
 HEAP8[$49 + 2 >> 0] = HEAP8[20664] | 0;
 HEAP8[$49 + 3 >> 0] = HEAP8[20665] | 0;
 HEAP8[$49 + 4 >> 0] = HEAP8[20666] | 0;
 HEAP8[$49 + 5 >> 0] = 0;
 $52 = $0 + 132 | 0;
 HEAP32[$52 >> 2] = 0;
 HEAP32[$52 + 4 >> 2] = 0;
 HEAP32[$52 + 8 >> 2] = 0;
 HEAP8[$52 + 11 >> 0] = 5;
 HEAP8[$52 >> 0] = HEAP8[20668] | 0;
 HEAP8[$52 + 1 >> 0] = HEAP8[20669] | 0;
 HEAP8[$52 + 2 >> 0] = HEAP8[20670] | 0;
 HEAP8[$52 + 3 >> 0] = HEAP8[20671] | 0;
 HEAP8[$52 + 4 >> 0] = HEAP8[20672] | 0;
 HEAP8[$52 + 5 >> 0] = 0;
 $55 = $0 + 144 | 0;
 HEAP32[$55 >> 2] = 0;
 HEAP32[$55 + 4 >> 2] = 0;
 HEAP32[$55 + 8 >> 2] = 0;
 HEAP8[$55 + 11 >> 0] = 5;
 HEAP8[$55 >> 0] = HEAP8[20674] | 0;
 HEAP8[$55 + 1 >> 0] = HEAP8[20675] | 0;
 HEAP8[$55 + 2 >> 0] = HEAP8[20676] | 0;
 HEAP8[$55 + 3 >> 0] = HEAP8[20677] | 0;
 HEAP8[$55 + 4 >> 0] = HEAP8[20678] | 0;
 HEAP8[$55 + 5 >> 0] = 0;
 $58 = $0 + 156 | 0;
 HEAP32[$58 >> 2] = 0;
 HEAP32[$58 + 4 >> 2] = 0;
 HEAP32[$58 + 8 >> 2] = 0;
 HEAP8[$58 + 11 >> 0] = 5;
 HEAP8[$58 >> 0] = HEAP8[20680] | 0;
 HEAP8[$58 + 1 >> 0] = HEAP8[20681] | 0;
 HEAP8[$58 + 2 >> 0] = HEAP8[20682] | 0;
 HEAP8[$58 + 3 >> 0] = HEAP8[20683] | 0;
 HEAP8[$58 + 4 >> 0] = HEAP8[20684] | 0;
 HEAP8[$58 + 5 >> 0] = 0;
 $61 = $0 + 168 | 0;
 HEAP32[$61 >> 2] = 0;
 HEAP32[$61 + 4 >> 2] = 0;
 HEAP32[$61 + 8 >> 2] = 0;
 HEAP8[$61 + 11 >> 0] = 5;
 HEAP8[$61 >> 0] = HEAP8[20686] | 0;
 HEAP8[$61 + 1 >> 0] = HEAP8[20687] | 0;
 HEAP8[$61 + 2 >> 0] = HEAP8[20688] | 0;
 HEAP8[$61 + 3 >> 0] = HEAP8[20689] | 0;
 HEAP8[$61 + 4 >> 0] = HEAP8[20690] | 0;
 HEAP8[$61 + 5 >> 0] = 0;
 $64 = $0 + 180 | 0;
 HEAP32[$64 >> 2] = 0;
 HEAP32[$64 + 4 >> 2] = 0;
 HEAP32[$64 + 8 >> 2] = 0;
 HEAP8[$64 + 11 >> 0] = 5;
 HEAP8[$64 >> 0] = HEAP8[20692] | 0;
 HEAP8[$64 + 1 >> 0] = HEAP8[20693] | 0;
 HEAP8[$64 + 2 >> 0] = HEAP8[20694] | 0;
 HEAP8[$64 + 3 >> 0] = HEAP8[20695] | 0;
 HEAP8[$64 + 4 >> 0] = HEAP8[20696] | 0;
 HEAP8[$64 + 5 >> 0] = 0;
 $67 = $0 + 192 | 0;
 HEAP32[$67 >> 2] = 0;
 HEAP32[$67 + 4 >> 2] = 0;
 HEAP32[$67 + 8 >> 2] = 0;
 HEAP8[$67 + 11 >> 0] = 5;
 HEAP8[$67 >> 0] = HEAP8[20698] | 0;
 HEAP8[$67 + 1 >> 0] = HEAP8[20699] | 0;
 HEAP8[$67 + 2 >> 0] = HEAP8[20700] | 0;
 HEAP8[$67 + 3 >> 0] = HEAP8[20701] | 0;
 HEAP8[$67 + 4 >> 0] = HEAP8[20702] | 0;
 HEAP8[$67 + 5 >> 0] = 0;
 $70 = $0 + 204 | 0;
 HEAP32[$70 >> 2] = 0;
 HEAP32[$70 + 4 >> 2] = 0;
 HEAP32[$70 + 8 >> 2] = 0;
 HEAP8[$70 + 11 >> 0] = 5;
 HEAP8[$70 >> 0] = HEAP8[20704] | 0;
 HEAP8[$70 + 1 >> 0] = HEAP8[20705] | 0;
 HEAP8[$70 + 2 >> 0] = HEAP8[20706] | 0;
 HEAP8[$70 + 3 >> 0] = HEAP8[20707] | 0;
 HEAP8[$70 + 4 >> 0] = HEAP8[20708] | 0;
 HEAP8[$70 + 5 >> 0] = 0;
 $73 = $0 + 216 | 0;
 HEAP32[$73 >> 2] = 0;
 HEAP32[$73 + 4 >> 2] = 0;
 HEAP32[$73 + 8 >> 2] = 0;
 HEAP8[$73 + 11 >> 0] = 5;
 HEAP8[$73 >> 0] = HEAP8[20710] | 0;
 HEAP8[$73 + 1 >> 0] = HEAP8[20711] | 0;
 HEAP8[$73 + 2 >> 0] = HEAP8[20712] | 0;
 HEAP8[$73 + 3 >> 0] = HEAP8[20713] | 0;
 HEAP8[$73 + 4 >> 0] = HEAP8[20714] | 0;
 HEAP8[$73 + 5 >> 0] = 0;
 $76 = $0 + 228 | 0;
 HEAP32[$76 >> 2] = 0;
 HEAP32[$76 + 4 >> 2] = 0;
 HEAP32[$76 + 8 >> 2] = 0;
 HEAP8[$76 + 11 >> 0] = 5;
 HEAP8[$76 >> 0] = HEAP8[20716] | 0;
 HEAP8[$76 + 1 >> 0] = HEAP8[20717] | 0;
 HEAP8[$76 + 2 >> 0] = HEAP8[20718] | 0;
 HEAP8[$76 + 3 >> 0] = HEAP8[20719] | 0;
 HEAP8[$76 + 4 >> 0] = HEAP8[20720] | 0;
 HEAP8[$76 + 5 >> 0] = 0;
 $79 = $0 + 240 | 0;
 HEAP32[$79 >> 2] = 0;
 HEAP32[$79 + 4 >> 2] = 0;
 HEAP32[$79 + 8 >> 2] = 0;
 HEAP8[$79 + 11 >> 0] = 5;
 HEAP8[$79 >> 0] = HEAP8[20722] | 0;
 HEAP8[$79 + 1 >> 0] = HEAP8[20723] | 0;
 HEAP8[$79 + 2 >> 0] = HEAP8[20724] | 0;
 HEAP8[$79 + 3 >> 0] = HEAP8[20725] | 0;
 HEAP8[$79 + 4 >> 0] = HEAP8[20726] | 0;
 HEAP8[$79 + 5 >> 0] = 0;
 $82 = $0 + 252 | 0;
 HEAP32[$82 >> 2] = 0;
 HEAP32[$82 + 4 >> 2] = 0;
 HEAP32[$82 + 8 >> 2] = 0;
 HEAP8[$82 + 11 >> 0] = 5;
 HEAP8[$82 >> 0] = HEAP8[20728] | 0;
 HEAP8[$82 + 1 >> 0] = HEAP8[20729] | 0;
 HEAP8[$82 + 2 >> 0] = HEAP8[20730] | 0;
 HEAP8[$82 + 3 >> 0] = HEAP8[20731] | 0;
 HEAP8[$82 + 4 >> 0] = HEAP8[20732] | 0;
 HEAP8[$82 + 5 >> 0] = 0;
 $85 = $0 + 264 | 0;
 HEAP32[$85 >> 2] = 0;
 HEAP32[$85 + 4 >> 2] = 0;
 HEAP32[$85 + 8 >> 2] = 0;
 HEAP8[$85 + 11 >> 0] = 5;
 HEAP8[$85 >> 0] = HEAP8[20734] | 0;
 HEAP8[$85 + 1 >> 0] = HEAP8[20735] | 0;
 HEAP8[$85 + 2 >> 0] = HEAP8[20736] | 0;
 HEAP8[$85 + 3 >> 0] = HEAP8[20737] | 0;
 HEAP8[$85 + 4 >> 0] = HEAP8[20738] | 0;
 HEAP8[$85 + 5 >> 0] = 0;
 $88 = $0 + 276 | 0;
 HEAP32[$88 >> 2] = 0;
 HEAP32[$88 + 4 >> 2] = 0;
 HEAP32[$88 + 8 >> 2] = 0;
 HEAP8[$88 + 11 >> 0] = 5;
 HEAP8[$88 >> 0] = HEAP8[20740] | 0;
 HEAP8[$88 + 1 >> 0] = HEAP8[20741] | 0;
 HEAP8[$88 + 2 >> 0] = HEAP8[20742] | 0;
 HEAP8[$88 + 3 >> 0] = HEAP8[20743] | 0;
 HEAP8[$88 + 4 >> 0] = HEAP8[20744] | 0;
 HEAP8[$88 + 5 >> 0] = 0;
 $91 = $0 + 288 | 0;
 HEAP32[$91 >> 2] = 0;
 HEAP32[$91 + 4 >> 2] = 0;
 HEAP32[$91 + 8 >> 2] = 0;
 HEAP8[$91 + 11 >> 0] = 5;
 HEAP8[$91 >> 0] = HEAP8[20746] | 0;
 HEAP8[$91 + 1 >> 0] = HEAP8[20747] | 0;
 HEAP8[$91 + 2 >> 0] = HEAP8[20748] | 0;
 HEAP8[$91 + 3 >> 0] = HEAP8[20749] | 0;
 HEAP8[$91 + 4 >> 0] = HEAP8[20750] | 0;
 HEAP8[$91 + 5 >> 0] = 0;
 $94 = $0 + 300 | 0;
 HEAP32[$94 >> 2] = HEAP32[2959];
 $96 = $0 + 304 | 0;
 if (!(HEAP8[30232] | 0)) if (___cxa_guard_acquire(30232) | 0) {}
 HEAP32[$96 >> 2] = 30968;
 $101 = $0 + 312 | 0;
 HEAP32[$101 >> 2] = 0;
 HEAP32[$101 + 4 >> 2] = 0;
 HEAP32[$101 + 8 >> 2] = 0;
 HEAP32[$101 + 12 >> 2] = 0;
 HEAP32[$0 + 328 >> 2] = 1065353216;
 if (!(_isatty(_fileno(HEAP32[$94 >> 2] | 0) | 0) | 0)) $110 = 0; else $110 = __ZN6spdlog7details2os17is_color_terminalEv() | 0;
 HEAP8[$0 + 308 >> 0] = $110 & 1;
 HEAP32[$1 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(__ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($101, $1) | 0, $67) | 0;
 HEAP32[$1 >> 2] = 1;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(__ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($101, $1) | 0, $64) | 0;
 HEAP32[$1 >> 2] = 2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(__ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($101, $1) | 0, $52) | 0;
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($1, $55, $20);
 HEAP32[$2 >> 2] = 3;
 $114 = __ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($101, $2) | 0;
 $115 = $114 + 11 | 0;
 if ((HEAP8[$115 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$114 >> 2] >> 0] = 0;
  HEAP32[$114 + 4 >> 2] = 0;
 } else {
  HEAP8[$114 >> 0] = 0;
  HEAP8[$115 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($114, 0);
 HEAP32[$114 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$114 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$114 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($1, $49, $20);
 HEAP32[$2 >> 2] = 4;
 $120 = __ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($101, $2) | 0;
 $121 = $120 + 11 | 0;
 if ((HEAP8[$121 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$120 >> 2] >> 0] = 0;
  HEAP32[$120 + 4 >> 2] = 0;
 } else {
  HEAP8[$120 >> 0] = 0;
  HEAP8[$121 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($120, 0);
 HEAP32[$120 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$120 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$120 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($1, $20, $73);
 HEAP32[$2 >> 2] = 5;
 $126 = __ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($101, $2) | 0;
 $127 = $126 + 11 | 0;
 if ((HEAP8[$127 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$126 >> 2] >> 0] = 0;
  HEAP32[$126 + 4 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($126, 0);
  HEAP32[$126 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$126 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$126 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 >> 2] = 6;
  $132 = __ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($101, $1) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($132, $12) | 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$126 >> 0] = 0;
  HEAP8[$127 >> 0] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($126, 0);
  HEAP32[$126 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$126 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$126 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 >> 2] = 6;
  $132 = __ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($101, $1) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($132, $12) | 0;
  STACKTOP = sp;
  return;
 }
}

function _free($0) {
 $0 = $0 | 0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0, $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $113 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $205 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $288 = 0, $3 = 0, $300 = 0, $305 = 0, $312 = 0, $313 = 0, $314 = 0, $323 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $84 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0;
 if (!$0) return;
 $2 = $0 + -8 | 0;
 $3 = HEAP32[7785] | 0;
 if ($2 >>> 0 < $3 >>> 0) _abort();
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 $7 = $6 & 3;
 if (($7 | 0) == 1) _abort();
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 L10 : do if (!($6 & 1)) {
  $13 = HEAP32[$2 >> 2] | 0;
  if (!$7) return;
  $16 = $2 + (0 - $13) | 0;
  $17 = $13 + $9 | 0;
  if ($16 >>> 0 < $3 >>> 0) _abort();
  if ((HEAP32[7786] | 0) == ($16 | 0)) {
   $105 = $10 + 4 | 0;
   $106 = HEAP32[$105 >> 2] | 0;
   if (($106 & 3 | 0) != 3) {
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
   HEAP32[7783] = $17;
   HEAP32[$105 >> 2] = $106 & -2;
   HEAP32[$16 + 4 >> 2] = $17 | 1;
   HEAP32[$16 + $17 >> 2] = $17;
   return;
  }
  $21 = $13 >>> 3;
  if ($13 >>> 0 < 256) {
   $24 = HEAP32[$16 + 8 >> 2] | 0;
   $26 = HEAP32[$16 + 12 >> 2] | 0;
   $28 = 31164 + ($21 << 1 << 2) | 0;
   if (($24 | 0) != ($28 | 0)) {
    if ($3 >>> 0 > $24 >>> 0) _abort();
    if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) _abort();
   }
   if (($26 | 0) == ($24 | 0)) {
    HEAP32[7781] = HEAP32[7781] & ~(1 << $21);
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
   if (($26 | 0) == ($28 | 0)) $$pre$phi446Z2D = $26 + 8 | 0; else {
    if ($3 >>> 0 > $26 >>> 0) _abort();
    $41 = $26 + 8 | 0;
    if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) $$pre$phi446Z2D = $41; else _abort();
   }
   HEAP32[$24 + 12 >> 2] = $26;
   HEAP32[$$pre$phi446Z2D >> 2] = $24;
   $$1 = $16;
   $$1380 = $17;
   $113 = $16;
   break;
  }
  $46 = HEAP32[$16 + 24 >> 2] | 0;
  $48 = HEAP32[$16 + 12 >> 2] | 0;
  do if (($48 | 0) == ($16 | 0)) {
   $59 = $16 + 16 | 0;
   $60 = $59 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if (!$61) {
    $63 = HEAP32[$59 >> 2] | 0;
    if (!$63) {
     $$3 = 0;
     break;
    } else {
     $$1385$ph = $63;
     $$1388$ph = $59;
    }
   } else {
    $$1385$ph = $61;
    $$1388$ph = $60;
   }
   $$1385 = $$1385$ph;
   $$1388 = $$1388$ph;
   while (1) {
    $65 = $$1385 + 20 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if (!$66) {
     $68 = $$1385 + 16 | 0;
     $69 = HEAP32[$68 >> 2] | 0;
     if (!$69) break; else {
      $$1385$be = $69;
      $$1388$be = $68;
     }
    } else {
     $$1385$be = $66;
     $$1388$be = $65;
    }
    $$1385 = $$1385$be;
    $$1388 = $$1388$be;
   }
   if ($3 >>> 0 > $$1388 >>> 0) _abort(); else {
    HEAP32[$$1388 >> 2] = 0;
    $$3 = $$1385;
    break;
   }
  } else {
   $51 = HEAP32[$16 + 8 >> 2] | 0;
   if ($3 >>> 0 > $51 >>> 0) _abort();
   $53 = $51 + 12 | 0;
   if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) _abort();
   $56 = $48 + 8 | 0;
   if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$53 >> 2] = $48;
    HEAP32[$56 >> 2] = $51;
    $$3 = $48;
    break;
   } else _abort();
  } while (0);
  if (!$46) {
   $$1 = $16;
   $$1380 = $17;
   $113 = $16;
  } else {
   $74 = HEAP32[$16 + 28 >> 2] | 0;
   $75 = 31428 + ($74 << 2) | 0;
   do if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$75 >> 2] = $$3;
    if (!$$3) {
     HEAP32[7782] = HEAP32[7782] & ~(1 << $74);
     $$1 = $16;
     $$1380 = $17;
     $113 = $16;
     break L10;
    }
   } else if ((HEAP32[7785] | 0) >>> 0 > $46 >>> 0) _abort(); else {
    $84 = $46 + 16 | 0;
    HEAP32[((HEAP32[$84 >> 2] | 0) == ($16 | 0) ? $84 : $46 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $16;
     $$1380 = $17;
     $113 = $16;
     break L10;
    } else break;
   } while (0);
   $89 = HEAP32[7785] | 0;
   if ($89 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $46;
   $92 = $16 + 16 | 0;
   $93 = HEAP32[$92 >> 2] | 0;
   do if ($93 | 0) if ($89 >>> 0 > $93 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $$3;
    break;
   } while (0);
   $99 = HEAP32[$92 + 4 >> 2] | 0;
   if (!$99) {
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
   } else if ((HEAP32[7785] | 0) >>> 0 > $99 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $99;
    HEAP32[$99 + 24 >> 2] = $$3;
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
  }
 } else {
  $$1 = $2;
  $$1380 = $9;
  $113 = $2;
 } while (0);
 if ($113 >>> 0 >= $10 >>> 0) _abort();
 $115 = $10 + 4 | 0;
 $116 = HEAP32[$115 >> 2] | 0;
 if (!($116 & 1)) _abort();
 if (!($116 & 2)) {
  if ((HEAP32[7787] | 0) == ($10 | 0)) {
   $124 = (HEAP32[7784] | 0) + $$1380 | 0;
   HEAP32[7784] = $124;
   HEAP32[7787] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   if (($$1 | 0) != (HEAP32[7786] | 0)) return;
   HEAP32[7786] = 0;
   HEAP32[7783] = 0;
   return;
  }
  if ((HEAP32[7786] | 0) == ($10 | 0)) {
   $132 = (HEAP32[7783] | 0) + $$1380 | 0;
   HEAP32[7783] = $132;
   HEAP32[7786] = $113;
   HEAP32[$$1 + 4 >> 2] = $132 | 1;
   HEAP32[$113 + $132 >> 2] = $132;
   return;
  }
  $137 = ($116 & -8) + $$1380 | 0;
  $138 = $116 >>> 3;
  L111 : do if ($116 >>> 0 < 256) {
   $141 = HEAP32[$10 + 8 >> 2] | 0;
   $143 = HEAP32[$10 + 12 >> 2] | 0;
   $145 = 31164 + ($138 << 1 << 2) | 0;
   if (($141 | 0) != ($145 | 0)) {
    if ((HEAP32[7785] | 0) >>> 0 > $141 >>> 0) _abort();
    if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) _abort();
   }
   if (($143 | 0) == ($141 | 0)) {
    HEAP32[7781] = HEAP32[7781] & ~(1 << $138);
    break;
   }
   if (($143 | 0) == ($145 | 0)) $$pre$phi444Z2D = $143 + 8 | 0; else {
    if ((HEAP32[7785] | 0) >>> 0 > $143 >>> 0) _abort();
    $160 = $143 + 8 | 0;
    if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) $$pre$phi444Z2D = $160; else _abort();
   }
   HEAP32[$141 + 12 >> 2] = $143;
   HEAP32[$$pre$phi444Z2D >> 2] = $141;
  } else {
   $165 = HEAP32[$10 + 24 >> 2] | 0;
   $167 = HEAP32[$10 + 12 >> 2] | 0;
   do if (($167 | 0) == ($10 | 0)) {
    $179 = $10 + 16 | 0;
    $180 = $179 + 4 | 0;
    $181 = HEAP32[$180 >> 2] | 0;
    if (!$181) {
     $183 = HEAP32[$179 >> 2] | 0;
     if (!$183) {
      $$3398 = 0;
      break;
     } else {
      $$1396$ph = $183;
      $$1400$ph = $179;
     }
    } else {
     $$1396$ph = $181;
     $$1400$ph = $180;
    }
    $$1396 = $$1396$ph;
    $$1400 = $$1400$ph;
    while (1) {
     $185 = $$1396 + 20 | 0;
     $186 = HEAP32[$185 >> 2] | 0;
     if (!$186) {
      $188 = $$1396 + 16 | 0;
      $189 = HEAP32[$188 >> 2] | 0;
      if (!$189) break; else {
       $$1396$be = $189;
       $$1400$be = $188;
      }
     } else {
      $$1396$be = $186;
      $$1400$be = $185;
     }
     $$1396 = $$1396$be;
     $$1400 = $$1400$be;
    }
    if ((HEAP32[7785] | 0) >>> 0 > $$1400 >>> 0) _abort(); else {
     HEAP32[$$1400 >> 2] = 0;
     $$3398 = $$1396;
     break;
    }
   } else {
    $170 = HEAP32[$10 + 8 >> 2] | 0;
    if ((HEAP32[7785] | 0) >>> 0 > $170 >>> 0) _abort();
    $173 = $170 + 12 | 0;
    if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) _abort();
    $176 = $167 + 8 | 0;
    if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$173 >> 2] = $167;
     HEAP32[$176 >> 2] = $170;
     $$3398 = $167;
     break;
    } else _abort();
   } while (0);
   if ($165 | 0) {
    $195 = HEAP32[$10 + 28 >> 2] | 0;
    $196 = 31428 + ($195 << 2) | 0;
    do if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$196 >> 2] = $$3398;
     if (!$$3398) {
      HEAP32[7782] = HEAP32[7782] & ~(1 << $195);
      break L111;
     }
    } else if ((HEAP32[7785] | 0) >>> 0 > $165 >>> 0) _abort(); else {
     $205 = $165 + 16 | 0;
     HEAP32[((HEAP32[$205 >> 2] | 0) == ($10 | 0) ? $205 : $165 + 20 | 0) >> 2] = $$3398;
     if (!$$3398) break L111; else break;
    } while (0);
    $210 = HEAP32[7785] | 0;
    if ($210 >>> 0 > $$3398 >>> 0) _abort();
    HEAP32[$$3398 + 24 >> 2] = $165;
    $213 = $10 + 16 | 0;
    $214 = HEAP32[$213 >> 2] | 0;
    do if ($214 | 0) if ($210 >>> 0 > $214 >>> 0) _abort(); else {
     HEAP32[$$3398 + 16 >> 2] = $214;
     HEAP32[$214 + 24 >> 2] = $$3398;
     break;
    } while (0);
    $220 = HEAP32[$213 + 4 >> 2] | 0;
    if ($220 | 0) if ((HEAP32[7785] | 0) >>> 0 > $220 >>> 0) _abort(); else {
     HEAP32[$$3398 + 20 >> 2] = $220;
     HEAP32[$220 + 24 >> 2] = $$3398;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1;
  HEAP32[$113 + $137 >> 2] = $137;
  if (($$1 | 0) == (HEAP32[7786] | 0)) {
   HEAP32[7783] = $137;
   return;
  } else $$2 = $137;
 } else {
  HEAP32[$115 >> 2] = $116 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1380 | 1;
  HEAP32[$113 + $$1380 >> 2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $238 = 31164 + ($235 << 1 << 2) | 0;
  $239 = HEAP32[7781] | 0;
  $240 = 1 << $235;
  if (!($239 & $240)) {
   HEAP32[7781] = $239 | $240;
   $$0401 = $238;
   $$pre$phiZ2D = $238 + 8 | 0;
  } else {
   $244 = $238 + 8 | 0;
   $245 = HEAP32[$244 >> 2] | 0;
   if ((HEAP32[7785] | 0) >>> 0 > $245 >>> 0) _abort(); else {
    $$0401 = $245;
    $$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0401 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0401;
  HEAP32[$$1 + 12 >> 2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 if (!$251) $$0394 = 0; else if ($$2 >>> 0 > 16777215) $$0394 = 31; else {
  $256 = ($251 + 1048320 | 0) >>> 16 & 8;
  $257 = $251 << $256;
  $260 = ($257 + 520192 | 0) >>> 16 & 4;
  $262 = $257 << $260;
  $265 = ($262 + 245760 | 0) >>> 16 & 2;
  $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
  $$0394 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1;
 }
 $276 = 31428 + ($$0394 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0394;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $280 = HEAP32[7782] | 0;
 $281 = 1 << $$0394;
 L197 : do if (!($280 & $281)) {
  HEAP32[7782] = $280 | $281;
  HEAP32[$276 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $276;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
 } else {
  $288 = HEAP32[$276 >> 2] | 0;
  L200 : do if ((HEAP32[$288 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0382$lcssa = $288; else {
   $$0381438 = $$2 << (($$0394 | 0) == 31 ? 0 : 25 - ($$0394 >>> 1) | 0);
   $$0382437 = $288;
   while (1) {
    $305 = $$0382437 + 16 + ($$0381438 >>> 31 << 2) | 0;
    $300 = HEAP32[$305 >> 2] | 0;
    if (!$300) break;
    if ((HEAP32[$300 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     $$0382$lcssa = $300;
     break L200;
    } else {
     $$0381438 = $$0381438 << 1;
     $$0382437 = $300;
    }
   }
   if ((HEAP32[7785] | 0) >>> 0 > $305 >>> 0) _abort(); else {
    HEAP32[$305 >> 2] = $$1;
    HEAP32[$$1 + 24 >> 2] = $$0382437;
    HEAP32[$$1 + 12 >> 2] = $$1;
    HEAP32[$$1 + 8 >> 2] = $$1;
    break L197;
   }
  } while (0);
  $312 = $$0382$lcssa + 8 | 0;
  $313 = HEAP32[$312 >> 2] | 0;
  $314 = HEAP32[7785] | 0;
  if ($314 >>> 0 <= $313 >>> 0 & $314 >>> 0 <= $$0382$lcssa >>> 0) {
   HEAP32[$313 + 12 >> 2] = $$1;
   HEAP32[$312 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $313;
   HEAP32[$$1 + 12 >> 2] = $$0382$lcssa;
   HEAP32[$$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $323 = (HEAP32[7789] | 0) + -1 | 0;
 HEAP32[7789] = $323;
 if ($323 | 0) return;
 $$0211$in$i = 31580;
 while (1) {
  $$0211$i = HEAP32[$$0211$in$i >> 2] | 0;
  if (!$$0211$i) break; else $$0211$in$i = $$0211$i + 8 | 0;
 }
 HEAP32[7789] = -1;
 return;
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $277 = 0, $289 = 0, $294 = 0, $301 = 0, $302 = 0, $303 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0;
 $2 = $0 + $1 | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!($4 & 1)) {
  $7 = HEAP32[$0 >> 2] | 0;
  if (!($4 & 3)) return;
  $11 = $0 + (0 - $7) | 0;
  $12 = $7 + $1 | 0;
  $13 = HEAP32[7785] | 0;
  if ($11 >>> 0 < $13 >>> 0) _abort();
  if ((HEAP32[7786] | 0) == ($11 | 0)) {
   $101 = $2 + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   if (($102 & 3 | 0) != 3) {
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   HEAP32[7783] = $12;
   HEAP32[$101 >> 2] = $102 & -2;
   HEAP32[$11 + 4 >> 2] = $12 | 1;
   HEAP32[$2 >> 2] = $12;
   return;
  }
  $17 = $7 >>> 3;
  if ($7 >>> 0 < 256) {
   $20 = HEAP32[$11 + 8 >> 2] | 0;
   $22 = HEAP32[$11 + 12 >> 2] | 0;
   $24 = 31164 + ($17 << 1 << 2) | 0;
   if (($20 | 0) != ($24 | 0)) {
    if ($13 >>> 0 > $20 >>> 0) _abort();
    if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
   }
   if (($22 | 0) == ($20 | 0)) {
    HEAP32[7781] = HEAP32[7781] & ~(1 << $17);
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   if (($22 | 0) == ($24 | 0)) $$pre$phi30Z2D = $22 + 8 | 0; else {
    if ($13 >>> 0 > $22 >>> 0) _abort();
    $37 = $22 + 8 | 0;
    if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi30Z2D = $37; else _abort();
   }
   HEAP32[$20 + 12 >> 2] = $22;
   HEAP32[$$pre$phi30Z2D >> 2] = $20;
   $$1 = $11;
   $$1416 = $12;
   break;
  }
  $42 = HEAP32[$11 + 24 >> 2] | 0;
  $44 = HEAP32[$11 + 12 >> 2] | 0;
  do if (($44 | 0) == ($11 | 0)) {
   $55 = $11 + 16 | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (!$57) {
    $59 = HEAP32[$55 >> 2] | 0;
    if (!$59) {
     $$3 = 0;
     break;
    } else {
     $$1424$ph = $59;
     $$1427$ph = $55;
    }
   } else {
    $$1424$ph = $57;
    $$1427$ph = $56;
   }
   $$1424 = $$1424$ph;
   $$1427 = $$1427$ph;
   while (1) {
    $61 = $$1424 + 20 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    if (!$62) {
     $64 = $$1424 + 16 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if (!$65) break; else {
      $$1424$be = $65;
      $$1427$be = $64;
     }
    } else {
     $$1424$be = $62;
     $$1427$be = $61;
    }
    $$1424 = $$1424$be;
    $$1427 = $$1427$be;
   }
   if ($13 >>> 0 > $$1427 >>> 0) _abort(); else {
    HEAP32[$$1427 >> 2] = 0;
    $$3 = $$1424;
    break;
   }
  } else {
   $47 = HEAP32[$11 + 8 >> 2] | 0;
   if ($13 >>> 0 > $47 >>> 0) _abort();
   $49 = $47 + 12 | 0;
   if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
   $52 = $44 + 8 | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$49 >> 2] = $44;
    HEAP32[$52 >> 2] = $47;
    $$3 = $44;
    break;
   } else _abort();
  } while (0);
  if (!$42) {
   $$1 = $11;
   $$1416 = $12;
  } else {
   $70 = HEAP32[$11 + 28 >> 2] | 0;
   $71 = 31428 + ($70 << 2) | 0;
   do if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$71 >> 2] = $$3;
    if (!$$3) {
     HEAP32[7782] = HEAP32[7782] & ~(1 << $70);
     $$1 = $11;
     $$1416 = $12;
     break L1;
    }
   } else if ((HEAP32[7785] | 0) >>> 0 > $42 >>> 0) _abort(); else {
    $80 = $42 + 16 | 0;
    HEAP32[((HEAP32[$80 >> 2] | 0) == ($11 | 0) ? $80 : $42 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $11;
     $$1416 = $12;
     break L1;
    } else break;
   } while (0);
   $85 = HEAP32[7785] | 0;
   if ($85 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $42;
   $88 = $11 + 16 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   do if ($89 | 0) if ($85 >>> 0 > $89 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $89;
    HEAP32[$89 + 24 >> 2] = $$3;
    break;
   } while (0);
   $95 = HEAP32[$88 + 4 >> 2] | 0;
   if (!$95) {
    $$1 = $11;
    $$1416 = $12;
   } else if ((HEAP32[7785] | 0) >>> 0 > $95 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $95;
    HEAP32[$95 + 24 >> 2] = $$3;
    $$1 = $11;
    $$1416 = $12;
    break;
   }
  }
 } else {
  $$1 = $0;
  $$1416 = $1;
 } while (0);
 $108 = HEAP32[7785] | 0;
 if ($2 >>> 0 < $108 >>> 0) _abort();
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (!($111 & 2)) {
  if ((HEAP32[7787] | 0) == ($2 | 0)) {
   $117 = (HEAP32[7784] | 0) + $$1416 | 0;
   HEAP32[7784] = $117;
   HEAP32[7787] = $$1;
   HEAP32[$$1 + 4 >> 2] = $117 | 1;
   if (($$1 | 0) != (HEAP32[7786] | 0)) return;
   HEAP32[7786] = 0;
   HEAP32[7783] = 0;
   return;
  }
  if ((HEAP32[7786] | 0) == ($2 | 0)) {
   $125 = (HEAP32[7783] | 0) + $$1416 | 0;
   HEAP32[7783] = $125;
   HEAP32[7786] = $$1;
   HEAP32[$$1 + 4 >> 2] = $125 | 1;
   HEAP32[$$1 + $125 >> 2] = $125;
   return;
  }
  $130 = ($111 & -8) + $$1416 | 0;
  $131 = $111 >>> 3;
  L99 : do if ($111 >>> 0 < 256) {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   $136 = HEAP32[$2 + 12 >> 2] | 0;
   $138 = 31164 + ($131 << 1 << 2) | 0;
   if (($134 | 0) != ($138 | 0)) {
    if ($108 >>> 0 > $134 >>> 0) _abort();
    if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) _abort();
   }
   if (($136 | 0) == ($134 | 0)) {
    HEAP32[7781] = HEAP32[7781] & ~(1 << $131);
    break;
   }
   if (($136 | 0) == ($138 | 0)) $$pre$phi28Z2D = $136 + 8 | 0; else {
    if ($108 >>> 0 > $136 >>> 0) _abort();
    $151 = $136 + 8 | 0;
    if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) $$pre$phi28Z2D = $151; else _abort();
   }
   HEAP32[$134 + 12 >> 2] = $136;
   HEAP32[$$pre$phi28Z2D >> 2] = $134;
  } else {
   $156 = HEAP32[$2 + 24 >> 2] | 0;
   $158 = HEAP32[$2 + 12 >> 2] | 0;
   do if (($158 | 0) == ($2 | 0)) {
    $169 = $2 + 16 | 0;
    $170 = $169 + 4 | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    if (!$171) {
     $173 = HEAP32[$169 >> 2] | 0;
     if (!$173) {
      $$3433 = 0;
      break;
     } else {
      $$1431$ph = $173;
      $$1435$ph = $169;
     }
    } else {
     $$1431$ph = $171;
     $$1435$ph = $170;
    }
    $$1431 = $$1431$ph;
    $$1435 = $$1435$ph;
    while (1) {
     $175 = $$1431 + 20 | 0;
     $176 = HEAP32[$175 >> 2] | 0;
     if (!$176) {
      $178 = $$1431 + 16 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      if (!$179) break; else {
       $$1431$be = $179;
       $$1435$be = $178;
      }
     } else {
      $$1431$be = $176;
      $$1435$be = $175;
     }
     $$1431 = $$1431$be;
     $$1435 = $$1435$be;
    }
    if ($108 >>> 0 > $$1435 >>> 0) _abort(); else {
     HEAP32[$$1435 >> 2] = 0;
     $$3433 = $$1431;
     break;
    }
   } else {
    $161 = HEAP32[$2 + 8 >> 2] | 0;
    if ($108 >>> 0 > $161 >>> 0) _abort();
    $163 = $161 + 12 | 0;
    if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) _abort();
    $166 = $158 + 8 | 0;
    if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$163 >> 2] = $158;
     HEAP32[$166 >> 2] = $161;
     $$3433 = $158;
     break;
    } else _abort();
   } while (0);
   if ($156 | 0) {
    $184 = HEAP32[$2 + 28 >> 2] | 0;
    $185 = 31428 + ($184 << 2) | 0;
    do if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$185 >> 2] = $$3433;
     if (!$$3433) {
      HEAP32[7782] = HEAP32[7782] & ~(1 << $184);
      break L99;
     }
    } else if ((HEAP32[7785] | 0) >>> 0 > $156 >>> 0) _abort(); else {
     $194 = $156 + 16 | 0;
     HEAP32[((HEAP32[$194 >> 2] | 0) == ($2 | 0) ? $194 : $156 + 20 | 0) >> 2] = $$3433;
     if (!$$3433) break L99; else break;
    } while (0);
    $199 = HEAP32[7785] | 0;
    if ($199 >>> 0 > $$3433 >>> 0) _abort();
    HEAP32[$$3433 + 24 >> 2] = $156;
    $202 = $2 + 16 | 0;
    $203 = HEAP32[$202 >> 2] | 0;
    do if ($203 | 0) if ($199 >>> 0 > $203 >>> 0) _abort(); else {
     HEAP32[$$3433 + 16 >> 2] = $203;
     HEAP32[$203 + 24 >> 2] = $$3433;
     break;
    } while (0);
    $209 = HEAP32[$202 + 4 >> 2] | 0;
    if ($209 | 0) if ((HEAP32[7785] | 0) >>> 0 > $209 >>> 0) _abort(); else {
     HEAP32[$$3433 + 20 >> 2] = $209;
     HEAP32[$209 + 24 >> 2] = $$3433;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1;
  HEAP32[$$1 + $130 >> 2] = $130;
  if (($$1 | 0) == (HEAP32[7786] | 0)) {
   HEAP32[7783] = $130;
   return;
  } else $$2 = $130;
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1416 | 1;
  HEAP32[$$1 + $$1416 >> 2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $227 = 31164 + ($224 << 1 << 2) | 0;
  $228 = HEAP32[7781] | 0;
  $229 = 1 << $224;
  if (!($228 & $229)) {
   HEAP32[7781] = $228 | $229;
   $$0436 = $227;
   $$pre$phiZ2D = $227 + 8 | 0;
  } else {
   $233 = $227 + 8 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   if ((HEAP32[7785] | 0) >>> 0 > $234 >>> 0) _abort(); else {
    $$0436 = $234;
    $$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0436 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0436;
  HEAP32[$$1 + 12 >> 2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 if (!$240) $$0429 = 0; else if ($$2 >>> 0 > 16777215) $$0429 = 31; else {
  $245 = ($240 + 1048320 | 0) >>> 16 & 8;
  $246 = $240 << $245;
  $249 = ($246 + 520192 | 0) >>> 16 & 4;
  $251 = $246 << $249;
  $254 = ($251 + 245760 | 0) >>> 16 & 2;
  $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0;
  $$0429 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1;
 }
 $265 = 31428 + ($$0429 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0429;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $269 = HEAP32[7782] | 0;
 $270 = 1 << $$0429;
 if (!($269 & $270)) {
  HEAP32[7782] = $269 | $270;
  HEAP32[$265 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $265;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $277 = HEAP32[$265 >> 2] | 0;
 L189 : do if ((HEAP32[$277 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0418$lcssa = $277; else {
  $$041722 = $$2 << (($$0429 | 0) == 31 ? 0 : 25 - ($$0429 >>> 1) | 0);
  $$041821 = $277;
  while (1) {
   $294 = $$041821 + 16 + ($$041722 >>> 31 << 2) | 0;
   $289 = HEAP32[$294 >> 2] | 0;
   if (!$289) break;
   if ((HEAP32[$289 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
    $$0418$lcssa = $289;
    break L189;
   } else {
    $$041722 = $$041722 << 1;
    $$041821 = $289;
   }
  }
  if ((HEAP32[7785] | 0) >>> 0 > $294 >>> 0) _abort();
  HEAP32[$294 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $$041821;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } while (0);
 $301 = $$0418$lcssa + 8 | 0;
 $302 = HEAP32[$301 >> 2] | 0;
 $303 = HEAP32[7785] | 0;
 if (!($303 >>> 0 <= $302 >>> 0 & $303 >>> 0 <= $$0418$lcssa >>> 0)) _abort();
 HEAP32[$302 + 12 >> 2] = $$1;
 HEAP32[$301 >> 2] = $$1;
 HEAP32[$$1 + 8 >> 2] = $302;
 HEAP32[$$1 + 12 >> 2] = $$0418$lcssa;
 HEAP32[$$1 + 24 >> 2] = 0;
 return;
}

function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $104 = 0, $112 = 0, $128 = 0, $130 = 0, $131 = 0, $135 = 0, $136 = 0, $144 = 0, $145 = 0, $150 = 0, $151 = 0, $154 = 0, $156 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $175 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $199 = 0, $20 = 0, $200 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $210 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $235 = 0, $243 = 0, $251 = 0, $264 = 0, $266 = 0, $277 = 0, $28 = 0, $286 = 0, $289 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $spec$select166 = 0, label = 0;
 L1 : do if ($1 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $291 = 0;
  $292 = 0;
 } else {
  $7 = $0 + 4 | 0;
  $8 = $0 + 100 | 0;
  do {
   $9 = HEAP32[$7 >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $9 + 1;
    $16 = HEAPU8[$9 >> 0] | 0;
   } else $16 = ___shgetc($0) | 0;
  } while ((_isspace($16) | 0) != 0);
  L11 : do switch ($16 | 0) {
  case 43:
  case 45:
   {
    $20 = (($16 | 0) == 45) << 31 >> 31;
    $21 = HEAP32[$7 >> 2] | 0;
    if ($21 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $21 + 1;
     $$0157 = $20;
     $$0159 = HEAPU8[$21 >> 0] | 0;
     break L11;
    } else {
     $$0157 = $20;
     $$0159 = ___shgetc($0) | 0;
     break L11;
    }
    break;
   }
  default:
   {
    $$0157 = 0;
    $$0159 = $16;
   }
  } while (0);
  $28 = ($1 | 0) == 0;
  do if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
   $32 = HEAP32[$7 >> 2] | 0;
   if ($32 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $32 + 1;
    $40 = HEAPU8[$32 >> 0] | 0;
   } else $40 = ___shgetc($0) | 0;
   if (($40 | 32 | 0) != 120) if ($28) {
    $$1160170 = $40;
    $$1165168 = 8;
    label = 47;
    break;
   } else {
    $$1160 = $40;
    $$1165 = $1;
    label = 32;
    break;
   }
   $42 = HEAP32[$7 >> 2] | 0;
   if ($42 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $42 + 1;
    $50 = HEAPU8[$42 >> 0] | 0;
   } else $50 = ___shgetc($0) | 0;
   if ((HEAPU8[1185 + $50 >> 0] | 0) > 15) {
    $54 = (HEAP32[$8 >> 2] | 0) == 0;
    if (!$54) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    if (!$2) {
     ___shlim($0, 0);
     $291 = 0;
     $292 = 0;
     break L1;
    }
    if ($54) {
     $291 = 0;
     $292 = 0;
     break L1;
    }
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    $291 = 0;
    $292 = 0;
    break L1;
   } else {
    $$1160170 = $50;
    $$1165168 = 16;
    label = 47;
   }
  } else {
   $spec$select166 = $28 ? 10 : $1;
   if ($spec$select166 >>> 0 > (HEAPU8[1185 + $$0159 >> 0] | 0) >>> 0) {
    $$1160 = $$0159;
    $$1165 = $spec$select166;
    label = 32;
   } else {
    if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    ___shlim($0, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    $291 = 0;
    $292 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($$1165 | 0) == 10) {
   $70 = $$1160 + -48 | 0;
   if ($70 >>> 0 < 10) {
    $$0154215 = 0;
    $74 = $70;
    do {
     $$0154215 = ($$0154215 * 10 | 0) + $74 | 0;
     $75 = HEAP32[$7 >> 2] | 0;
     if ($75 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $75 + 1;
      $83 = HEAPU8[$75 >> 0] | 0;
     } else $83 = ___shgetc($0) | 0;
     $74 = $83 + -48 | 0;
    } while ($74 >>> 0 < 10 & $$0154215 >>> 0 < 429496729);
    if ($74 >>> 0 < 10) {
     $$3162208 = $83;
     $88 = $$0154215;
     $89 = 0;
     $92 = $74;
     while (1) {
      $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0;
      $91 = getTempRet0() | 0;
      $94 = (($92 | 0) < 0) << 31 >> 31;
      $96 = ~$94;
      if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$92 >>> 0) {
       $$1165169 = 10;
       $$8 = $$3162208;
       $293 = $88;
       $294 = $89;
       label = 76;
       break L43;
      }
      $88 = _i64Add($90 | 0, $91 | 0, $92 | 0, $94 | 0) | 0;
      $89 = getTempRet0() | 0;
      $104 = HEAP32[$7 >> 2] | 0;
      if ($104 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $104 + 1;
       $112 = HEAPU8[$104 >> 0] | 0;
      } else $112 = ___shgetc($0) | 0;
      $92 = $112 + -48 | 0;
      if (!($92 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) break; else $$3162208 = $112;
     }
     if ($92 >>> 0 > 9) {
      $$1158 = $$0157;
      $264 = $89;
      $266 = $88;
     } else {
      $$1165169 = 10;
      $$8 = $112;
      $293 = $88;
      $294 = $89;
      label = 76;
     }
    } else {
     $$1158 = $$0157;
     $264 = 0;
     $266 = $$0154215;
    }
   } else {
    $$1158 = $$0157;
    $264 = 0;
    $266 = 0;
   }
  } else {
   $$1160170 = $$1160;
   $$1165168 = $$1165;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($$1165168 + -1 & $$1165168)) {
    $128 = HEAP8[22590 + (($$1165168 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $130 = HEAP8[1185 + $$1160170 >> 0] | 0;
    $131 = $130 & 255;
    if ($$1165168 >>> 0 > $131 >>> 0) {
     $$1155184 = 0;
     $135 = $131;
     do {
      $$1155184 = $135 | $$1155184 << $128;
      $136 = HEAP32[$7 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $136 + 1;
       $144 = HEAPU8[$136 >> 0] | 0;
      } else $144 = ___shgetc($0) | 0;
      $145 = HEAP8[1185 + $144 >> 0] | 0;
      $135 = $145 & 255;
     } while ($$1155184 >>> 0 < 134217728 & $$1165168 >>> 0 > $135 >>> 0);
     $$4163$lcssa = $144;
     $$pre$phi237Z2D = $135;
     $154 = 0;
     $156 = $$1155184;
     $295 = $145;
    } else {
     $$4163$lcssa = $$1160170;
     $$pre$phi237Z2D = $131;
     $154 = 0;
     $156 = 0;
     $295 = $130;
    }
    $150 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $151 = getTempRet0() | 0;
    if ($$1165168 >>> 0 <= $$pre$phi237Z2D >>> 0 | ($151 >>> 0 < $154 >>> 0 | ($151 | 0) == ($154 | 0) & $150 >>> 0 < $156 >>> 0)) {
     $$1165169 = $$1165168;
     $$8 = $$4163$lcssa;
     $293 = $156;
     $294 = $154;
     label = 76;
     break;
    }
    $160 = $156;
    $161 = $154;
    $165 = $295;
    while (1) {
     $162 = _bitshift64Shl($160 | 0, $161 | 0, $128 | 0) | 0;
     $163 = getTempRet0() | 0;
     $166 = $162 | $165 & 255;
     $167 = HEAP32[$7 >> 2] | 0;
     if ($167 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $167 + 1;
      $175 = HEAPU8[$167 >> 0] | 0;
     } else $175 = ___shgetc($0) | 0;
     $165 = HEAP8[1185 + $175 >> 0] | 0;
     if ($$1165168 >>> 0 <= ($165 & 255) >>> 0 | ($163 >>> 0 > $151 >>> 0 | ($163 | 0) == ($151 | 0) & $166 >>> 0 > $150 >>> 0)) {
      $$1165169 = $$1165168;
      $$8 = $175;
      $293 = $166;
      $294 = $163;
      label = 76;
      break L63;
     } else {
      $160 = $166;
      $161 = $163;
     }
    }
   }
   $185 = HEAP8[1185 + $$1160170 >> 0] | 0;
   $186 = $185 & 255;
   if ($$1165168 >>> 0 > $186 >>> 0) {
    $$2156202 = 0;
    $190 = $186;
    do {
     $$2156202 = $190 + (Math_imul($$2156202, $$1165168) | 0) | 0;
     $191 = HEAP32[$7 >> 2] | 0;
     if ($191 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $191 + 1;
      $199 = HEAPU8[$191 >> 0] | 0;
     } else $199 = ___shgetc($0) | 0;
     $200 = HEAP8[1185 + $199 >> 0] | 0;
     $190 = $200 & 255;
    } while ($$2156202 >>> 0 < 119304647 & $$1165168 >>> 0 > $190 >>> 0);
    $$6$lcssa = $199;
    $$pre$phi239Z2D = $190;
    $296 = $200;
    $297 = $$2156202;
    $298 = 0;
   } else {
    $$6$lcssa = $$1160170;
    $$pre$phi239Z2D = $186;
    $296 = $185;
    $297 = 0;
    $298 = 0;
   }
   if ($$1165168 >>> 0 > $$pre$phi239Z2D >>> 0) {
    $206 = ___udivdi3(-1, -1, $$1165168 | 0, 0) | 0;
    $207 = getTempRet0() | 0;
    $$7190 = $$6$lcssa;
    $208 = $298;
    $210 = $297;
    $218 = $296;
    while (1) {
     if ($208 >>> 0 > $207 >>> 0 | ($208 | 0) == ($207 | 0) & $210 >>> 0 > $206 >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $$7190;
      $293 = $210;
      $294 = $208;
      label = 76;
      break L63;
     }
     $215 = ___muldi3($210 | 0, $208 | 0, $$1165168 | 0, 0) | 0;
     $216 = getTempRet0() | 0;
     $217 = $218 & 255;
     if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $$7190;
      $293 = $210;
      $294 = $208;
      label = 76;
      break L63;
     }
     $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0;
     $226 = getTempRet0() | 0;
     $227 = HEAP32[$7 >> 2] | 0;
     if ($227 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $227 + 1;
      $235 = HEAPU8[$227 >> 0] | 0;
     } else $235 = ___shgetc($0) | 0;
     $218 = HEAP8[1185 + $235 >> 0] | 0;
     if ($$1165168 >>> 0 <= ($218 & 255) >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $235;
      $293 = $225;
      $294 = $226;
      label = 76;
      break;
     } else {
      $$7190 = $235;
      $208 = $226;
      $210 = $225;
     }
    }
   } else {
    $$1165169 = $$1165168;
    $$8 = $$6$lcssa;
    $293 = $297;
    $294 = $298;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($$1165169 >>> 0 > (HEAPU8[1185 + $$8 >> 0] | 0) >>> 0) {
   do {
    $243 = HEAP32[$7 >> 2] | 0;
    if ($243 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $243 + 1;
     $251 = HEAPU8[$243 >> 0] | 0;
    } else $251 = ___shgetc($0) | 0;
   } while ($$1165169 >>> 0 > (HEAPU8[1185 + $251 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0;
   $264 = $4;
   $266 = $3;
  } else {
   $$1158 = $$0157;
   $264 = $294;
   $266 = $293;
  }
  if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  if (!($264 >>> 0 < $4 >>> 0 | ($264 | 0) == ($4 | 0) & $266 >>> 0 < $3 >>> 0)) {
   if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $277 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0;
    $291 = getTempRet0() | 0;
    $292 = $277;
    break;
   }
   if ($264 >>> 0 > $4 >>> 0 | ($264 | 0) == ($4 | 0) & $266 >>> 0 > $3 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $291 = $4;
    $292 = $3;
    break;
   }
  }
  $286 = (($$1158 | 0) < 0) << 31 >> 31;
  $289 = _i64Subtract($266 ^ $$1158 | 0, $264 ^ $286 | 0, $$1158 | 0, $286 | 0) | 0;
  $291 = getTempRet0() | 0;
  $292 = $289;
 } while (0);
 setTempRet0($291 | 0);
 return $292 | 0;
}

function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEC2ERKSF_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$0$lcssa$i$i$i$i$i$i$i = 0, $$02026$i$i4$i$i$i$i = 0, $$02026$i$i4$i$us$i$i$i = 0, $$02125$i$i5$i$i$i$i = 0, $$02125$i$i5$i$us$i$i$i = 0, $$027$i$i3$i$i$i$i = 0, $$027$i$i3$i$us$i$i$i = 0, $$036$lcssa$i$i$i$i$i$i$i = 0, $$03639$i$i$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i$i$i = 0, $$03738$i$i$i$i$i$i$i = 0, $$040$i$i$i$i$i$i$i = 0, $$05195$i$i$i = 0, $$05196$i$i$i = 0, $$05196$i$us$i$i = 0, $$05196$us$i$i$i = 0, $$05196$us$i$us$i$i = 0, $$052$i$i$i = 0, $$1$i$i$i$i$i$i$i = 0, $$153$i$i$i = 0, $$2$i$i$i$i$i$i$i = 0, $$3$i$i$i$i$i$i$i = 0, $$sink = 0, $10 = 0, $102 = 0, $11 = 0, $116 = 0, $12 = 0, $120 = 0, $124 = 0, $13 = 0, $133 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $145 = 0, $148 = 0, $15 = 0, $161 = 0, $169 = 0.0, $17 = 0, $171 = 0.0, $18 = 0, $181 = 0, $184 = 0, $186 = 0, $187 = 0, $194 = 0, $195 = 0, $198 = 0, $201 = 0, $202 = 0, $210 = 0, $214 = 0, $215 = 0, $23 = 0, $24 = 0, $26 = 0, $35 = 0, $36 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $68 = 0, $69 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $89 = 0, $93 = 0, $95 = 0, $96 = 0, $99 = 0, label = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm($0, HEAP32[$1 + 4 >> 2] | 0);
 $8 = HEAP32[$1 + 8 >> 2] | 0;
 if (!$8) return;
 $10 = $0 + 4 | 0;
 $11 = $0 + 12 | 0;
 $12 = $0 + 16 | 0;
 $13 = $0 + 8 | 0;
 $15 = $8;
 $215 = $8;
 while (1) {
  $14 = $15 + 8 | 0;
  $17 = HEAP8[$14 + 11 >> 0] | 0;
  $18 = $17 << 24 >> 24 < 0;
  $23 = $18 ? HEAP32[$14 >> 2] | 0 : $14;
  $24 = $18 ? HEAP32[$15 + 12 >> 2] | 0 : $17 & 255;
  if ($24 >>> 0 > 3) {
   $$03639$i$i$i$i$i$i$i = $23;
   $$03738$i$i$i$i$i$i$i = $24;
   $$040$i$i$i$i$i$i$i = $24;
   while (1) {
    $26 = Math_imul(HEAPU8[$$03639$i$i$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0;
    $$03738$i$i$i$i$i$i$i = (Math_imul($26 >>> 24 ^ $26, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i$i$i, 1540483477) | 0);
    $$040$i$i$i$i$i$i$i = $$040$i$i$i$i$i$i$i + -4 | 0;
    if ($$040$i$i$i$i$i$i$i >>> 0 <= 3) break; else $$03639$i$i$i$i$i$i$i = $$03639$i$i$i$i$i$i$i + 4 | 0;
   }
   $35 = $24 + -4 | 0;
   $36 = $35 & -4;
   $$0$lcssa$i$i$i$i$i$i$i = $35 - $36 | 0;
   $$036$lcssa$i$i$i$i$i$i$i = $23 + ($36 + 4) | 0;
   $$037$lcssa$i$i$i$i$i$i$i = $$03738$i$i$i$i$i$i$i;
  } else {
   $$0$lcssa$i$i$i$i$i$i$i = $24;
   $$036$lcssa$i$i$i$i$i$i$i = $23;
   $$037$lcssa$i$i$i$i$i$i$i = $24;
  }
  switch ($$0$lcssa$i$i$i$i$i$i$i | 0) {
  case 3:
   {
    $$1$i$i$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i$i$i;
    label = 9;
    break;
   }
  case 2:
   {
    $$1$i$i$i$i$i$i$i = $$037$lcssa$i$i$i$i$i$i$i;
    label = 9;
    break;
   }
  case 1:
   {
    $$2$i$i$i$i$i$i$i = $$037$lcssa$i$i$i$i$i$i$i;
    label = 10;
    break;
   }
  default:
   $$3$i$i$i$i$i$i$i = $$037$lcssa$i$i$i$i$i$i$i;
  }
  if ((label | 0) == 9) {
   label = 0;
   $$2$i$i$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i$i$i;
   label = 10;
  }
  if ((label | 0) == 10) {
   label = 0;
   $$3$i$i$i$i$i$i$i = Math_imul($$2$i$i$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i$i$i >> 0], 1540483477) | 0;
  }
  $55 = Math_imul($$3$i$i$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i$i$i, 1540483477) | 0;
  $57 = $55 >>> 15 ^ $55;
  $58 = HEAP32[$10 >> 2] | 0;
  $59 = ($58 | 0) == 0;
  L19 : do if ($59) {
   $$052$i$i$i = 0;
   label = 55;
  } else {
   $60 = $58 + -1 | 0;
   $62 = ($60 & $58 | 0) == 0;
   if ($62) $68 = $57 & $60; else if ($57 >>> 0 < $58 >>> 0) $68 = $57; else $68 = ($57 >>> 0) % ($58 >>> 0) | 0;
   $69 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($68 << 2) >> 2] | 0;
   if (!$69) {
    $$052$i$i$i = $68;
    label = 55;
   } else {
    $$05195$i$i$i = HEAP32[$69 >> 2] | 0;
    if (!$$05195$i$i$i) {
     $$052$i$i$i = $68;
     label = 55;
    } else {
     $72 = ($24 | 0) == 0;
     if ($62) {
      if ($72) {
       $$05196$us$i$us$i$i = $$05195$i$i$i;
       while (1) {
        $74 = HEAP32[$$05196$us$i$us$i$i + 4 >> 2] | 0;
        if (!(($74 | 0) == ($57 | 0) | ($74 & $60 | 0) == ($68 | 0))) {
         $$052$i$i$i = $68;
         label = 55;
         break L19;
        }
        $80 = HEAP8[$$05196$us$i$us$i$i + 8 + 11 >> 0] | 0;
        if (!(($80 << 24 >> 24 < 0 ? HEAP32[$$05196$us$i$us$i$i + 12 >> 2] | 0 : $80 & 255) | 0)) break L19;
        $$05196$us$i$us$i$i = HEAP32[$$05196$us$i$us$i$i >> 2] | 0;
        if (!$$05196$us$i$us$i$i) {
         $$052$i$i$i = $68;
         label = 55;
         break L19;
        }
       }
      }
      $$05196$us$i$i$i = $$05195$i$i$i;
      while (1) {
       $89 = HEAP32[$$05196$us$i$i$i + 4 >> 2] | 0;
       if (!(($89 | 0) == ($57 | 0) | ($89 & $60 | 0) == ($68 | 0))) {
        $$052$i$i$i = $68;
        label = 55;
        break L19;
       }
       $93 = $$05196$us$i$i$i + 8 | 0;
       $95 = HEAP8[$93 + 11 >> 0] | 0;
       $96 = $95 << 24 >> 24 < 0;
       $99 = $95 & 255;
       do if ((($96 ? HEAP32[$$05196$us$i$i$i + 12 >> 2] | 0 : $99) | 0) == ($24 | 0)) {
        $102 = HEAP32[$93 >> 2] | 0;
        if ($96) if (!(_memcmp($102, $23, $24) | 0)) break L19; else break;
        if ((HEAP8[$23 >> 0] | 0) == ($102 & 255) << 24 >> 24) {
         $$02026$i$i4$i$us$i$i$i = $93;
         $$02125$i$i5$i$us$i$i$i = $99;
         $$027$i$i3$i$us$i$i$i = $23;
         do {
          $$02125$i$i5$i$us$i$i$i = $$02125$i$i5$i$us$i$i$i + -1 | 0;
          $$02026$i$i4$i$us$i$i$i = $$02026$i$i4$i$us$i$i$i + 1 | 0;
          if (!$$02125$i$i5$i$us$i$i$i) break L19;
          $$027$i$i3$i$us$i$i$i = $$027$i$i3$i$us$i$i$i + 1 | 0;
         } while ((HEAP8[$$02026$i$i4$i$us$i$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i$i$i >> 0] | 0));
        }
       } while (0);
       $$05196$us$i$i$i = HEAP32[$$05196$us$i$i$i >> 2] | 0;
       if (!$$05196$us$i$i$i) {
        $$052$i$i$i = $68;
        label = 55;
        break L19;
       }
      }
     }
     if ($72) {
      $$05196$i$us$i$i = $$05195$i$i$i;
      while (1) {
       $116 = HEAP32[$$05196$i$us$i$i + 4 >> 2] | 0;
       if (($116 | 0) != ($57 | 0)) {
        if ($116 >>> 0 < $58 >>> 0) $120 = $116; else $120 = ($116 >>> 0) % ($58 >>> 0) | 0;
        if (($120 | 0) != ($68 | 0)) {
         $$052$i$i$i = $68;
         label = 55;
         break L19;
        }
       }
       $124 = HEAP8[$$05196$i$us$i$i + 8 + 11 >> 0] | 0;
       if (!(($124 << 24 >> 24 < 0 ? HEAP32[$$05196$i$us$i$i + 12 >> 2] | 0 : $124 & 255) | 0)) break L19;
       $$05196$i$us$i$i = HEAP32[$$05196$i$us$i$i >> 2] | 0;
       if (!$$05196$i$us$i$i) {
        $$052$i$i$i = $68;
        label = 55;
        break L19;
       }
      }
     }
     $$05196$i$i$i = $$05195$i$i$i;
     while (1) {
      $133 = HEAP32[$$05196$i$i$i + 4 >> 2] | 0;
      if (($133 | 0) != ($57 | 0)) {
       if ($133 >>> 0 < $58 >>> 0) $137 = $133; else $137 = ($133 >>> 0) % ($58 >>> 0) | 0;
       if (($137 | 0) != ($68 | 0)) {
        $$052$i$i$i = $68;
        label = 55;
        break L19;
       }
      }
      $139 = $$05196$i$i$i + 8 | 0;
      $141 = HEAP8[$139 + 11 >> 0] | 0;
      $142 = $141 << 24 >> 24 < 0;
      $145 = $141 & 255;
      do if ((($142 ? HEAP32[$$05196$i$i$i + 12 >> 2] | 0 : $145) | 0) == ($24 | 0)) {
       $148 = HEAP32[$139 >> 2] | 0;
       if ($142) if (!(_memcmp($148, $23, $24) | 0)) break L19; else break;
       if ((HEAP8[$23 >> 0] | 0) == ($148 & 255) << 24 >> 24) {
        $$02026$i$i4$i$i$i$i = $139;
        $$02125$i$i5$i$i$i$i = $145;
        $$027$i$i3$i$i$i$i = $23;
        do {
         $$02125$i$i5$i$i$i$i = $$02125$i$i5$i$i$i$i + -1 | 0;
         $$02026$i$i4$i$i$i$i = $$02026$i$i4$i$i$i$i + 1 | 0;
         if (!$$02125$i$i5$i$i$i$i) break L19;
         $$027$i$i3$i$i$i$i = $$027$i$i3$i$i$i$i + 1 | 0;
        } while ((HEAP8[$$02026$i$i4$i$i$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i$i$i >> 0] | 0));
       }
      } while (0);
      $$05196$i$i$i = HEAP32[$$05196$i$i$i >> 2] | 0;
      if (!$$05196$i$i$i) {
       $$052$i$i$i = $68;
       label = 55;
       break;
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 55) {
   label = 0;
   $161 = __Znwm(24) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($161 + 8 | 0, $14);
   HEAP32[$161 + 20 >> 2] = HEAP32[$15 + 20 >> 2];
   HEAP32[$161 + 4 >> 2] = $57;
   HEAP32[$161 >> 2] = 0;
   $169 = +(((HEAP32[$11 >> 2] | 0) + 1 | 0) >>> 0);
   $171 = +HEAPF32[$12 >> 2];
   do if ($59 | $171 * +($58 >>> 0) < $169) {
    $181 = $58 << 1 | ($58 >>> 0 < 3 | ($58 + -1 & $58 | 0) != 0) & 1;
    $184 = ~~+Math_ceil(+($169 / $171)) >>> 0;
    __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm($0, $181 >>> 0 < $184 >>> 0 ? $184 : $181);
    $186 = HEAP32[$10 >> 2] | 0;
    $187 = $186 + -1 | 0;
    if (!($187 & $186)) {
     $$0$i$i$i = $186;
     $$153$i$i$i = $187 & $57;
     break;
    }
    if ($57 >>> 0 < $186 >>> 0) {
     $$0$i$i$i = $186;
     $$153$i$i$i = $57;
    } else {
     $$0$i$i$i = $186;
     $$153$i$i$i = ($57 >>> 0) % ($186 >>> 0) | 0;
    }
   } else {
    $$0$i$i$i = $58;
    $$153$i$i$i = $$052$i$i$i;
   } while (0);
   $194 = (HEAP32[$0 >> 2] | 0) + ($$153$i$i$i << 2) | 0;
   $195 = HEAP32[$194 >> 2] | 0;
   if (!$195) {
    HEAP32[$161 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$13 >> 2] = $161;
    HEAP32[$194 >> 2] = $13;
    $198 = HEAP32[$161 >> 2] | 0;
    if ($198 | 0) {
     $201 = HEAP32[$198 + 4 >> 2] | 0;
     $202 = $$0$i$i$i + -1 | 0;
     if (!($202 & $$0$i$i$i)) $210 = $201 & $202; else if ($201 >>> 0 < $$0$i$i$i >>> 0) $210 = $201; else $210 = ($201 >>> 0) % ($$0$i$i$i >>> 0) | 0;
     $$sink = (HEAP32[$0 >> 2] | 0) + ($210 << 2) | 0;
     label = 68;
    }
   } else {
    HEAP32[$161 >> 2] = HEAP32[$195 >> 2];
    $$sink = $195;
    label = 68;
   }
   if ((label | 0) == 68) {
    label = 0;
    HEAP32[$$sink >> 2] = $161;
   }
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
  }
  $214 = HEAP32[$215 >> 2] | 0;
  if (!$214) break; else {
   $15 = $214;
   $215 = $214;
  }
 }
 return;
}

function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i49 = 0, $$0$i$i$i55 = 0, $$0$i$i$i61 = 0, $$0$i$i$i67 = 0, $$0$i$i$i73 = 0, $$0$i$i$i79 = 0, $$0$i$i$i85 = 0, $$pre$phi$i$i47Z2D = 0, $$pre$phi$i$i53Z2D = 0, $$pre$phi$i$i59Z2D = 0, $$pre$phi$i$i65Z2D = 0, $$pre$phi$i$i71Z2D = 0, $$pre$phi$i$i77Z2D = 0, $$pre$phi$i$i83Z2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi88Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $113 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $16 = 0, $20 = 0, $23 = 0, $30 = 0, $34 = 0, $37 = 0, $52 = 0, $55 = 0, $62 = 0, $65 = 0, $73 = 0, $77 = 0, $81 = 0, $84 = 0, $91 = 0, $95 = 0, $98 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 32920) | 0;
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 127]($10, $12);
   $16 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $16;
   HEAP8[$3 + 1 >> 0] = $16 >> 8;
   HEAP8[$3 + 2 >> 0] = $16 >> 16;
   HEAP8[$3 + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($11, $12);
   $20 = $8 + 11 | 0;
   if ((HEAP8[$20 >> 0] | 0) < 0) {
    $23 = HEAP32[$8 >> 2] | 0;
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($23, $10);
    HEAP32[$8 + 4 >> 2] = 0;
    $$pre$phi$i$iZ2D = $8;
   } else {
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
    HEAP8[$20 >> 0] = 0;
    $$pre$phi$i$iZ2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8, 0);
   HEAP32[$$pre$phi$i$iZ2D >> 2] = HEAP32[$11 >> 2];
   HEAP32[$$pre$phi$i$iZ2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$$pre$phi$i$iZ2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phiZ2D = $12;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 40 >> 2] & 127]($10, $12);
   $30 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $30;
   HEAP8[$3 + 1 >> 0] = $30 >> 8;
   HEAP8[$3 + 2 >> 0] = $30 >> 16;
   HEAP8[$3 + 3 >> 0] = $30 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($11, $12);
   $34 = $8 + 11 | 0;
   if ((HEAP8[$34 >> 0] | 0) < 0) {
    $37 = HEAP32[$8 >> 2] | 0;
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($37, $10);
    HEAP32[$8 + 4 >> 2] = 0;
    $$pre$phi$i$i47Z2D = $8;
   } else {
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
    HEAP8[$34 >> 0] = 0;
    $$pre$phi$i$i47Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8, 0);
   HEAP32[$$pre$phi$i$i47Z2D >> 2] = HEAP32[$11 >> 2];
   HEAP32[$$pre$phi$i$i47Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$$pre$phi$i$i47Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i49 = 0;
   while (1) {
    if (($$0$i$i$i49 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i49 << 2) >> 2] = 0;
    $$0$i$i$i49 = $$0$i$i$i49 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phiZ2D = $12;
  }
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP8[$5 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 127]($11, $12);
  $52 = $6 + 11 | 0;
  if ((HEAP8[$52 >> 0] | 0) < 0) {
   $55 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($55, $10);
   HEAP32[$6 + 4 >> 2] = 0;
   $$pre$phi$i$i53Z2D = $6;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$52 >> 0] = 0;
   $$pre$phi$i$i53Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6, 0);
  HEAP32[$$pre$phi$i$i53Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i53Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i53Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i55 = 0;
  while (1) {
   if (($$0$i$i$i55 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i55 << 2) >> 2] = 0;
   $$0$i$i$i55 = $$0$i$i$i55 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 127]($11, $12);
  $62 = $7 + 11 | 0;
  if ((HEAP8[$62 >> 0] | 0) < 0) {
   $65 = HEAP32[$7 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($65, $10);
   HEAP32[$7 + 4 >> 2] = 0;
   $$pre$phi$i$i59Z2D = $7;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10);
   HEAP8[$62 >> 0] = 0;
   $$pre$phi$i$i59Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($7, 0);
  HEAP32[$$pre$phi$i$i59Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i59Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i59Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i61 = 0;
  while (1) {
   if (($$0$i$i$i61 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i61 << 2) >> 2] = 0;
   $$0$i$i$i61 = $$0$i$i$i61 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $73 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 32912) | 0;
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$73 >> 2] | 0) + 44 >> 2] & 127]($10, $73);
   $77 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $77;
   HEAP8[$3 + 1 >> 0] = $77 >> 8;
   HEAP8[$3 + 2 >> 0] = $77 >> 16;
   HEAP8[$3 + 3 >> 0] = $77 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$73 >> 2] | 0) + 32 >> 2] & 127]($11, $73);
   $81 = $8 + 11 | 0;
   if ((HEAP8[$81 >> 0] | 0) < 0) {
    $84 = HEAP32[$8 >> 2] | 0;
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($84, $10);
    HEAP32[$8 + 4 >> 2] = 0;
    $$pre$phi$i$i65Z2D = $8;
   } else {
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
    HEAP8[$81 >> 0] = 0;
    $$pre$phi$i$i65Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8, 0);
   HEAP32[$$pre$phi$i$i65Z2D >> 2] = HEAP32[$11 >> 2];
   HEAP32[$$pre$phi$i$i65Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$$pre$phi$i$i65Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i67 = 0;
   while (1) {
    if (($$0$i$i$i67 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i67 << 2) >> 2] = 0;
    $$0$i$i$i67 = $$0$i$i$i67 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phi88Z2D = $73;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$73 >> 2] | 0) + 40 >> 2] & 127]($10, $73);
   $91 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $91;
   HEAP8[$3 + 1 >> 0] = $91 >> 8;
   HEAP8[$3 + 2 >> 0] = $91 >> 16;
   HEAP8[$3 + 3 >> 0] = $91 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$73 >> 2] | 0) + 28 >> 2] & 127]($11, $73);
   $95 = $8 + 11 | 0;
   if ((HEAP8[$95 >> 0] | 0) < 0) {
    $98 = HEAP32[$8 >> 2] | 0;
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($98, $10);
    HEAP32[$8 + 4 >> 2] = 0;
    $$pre$phi$i$i71Z2D = $8;
   } else {
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
    HEAP8[$95 >> 0] = 0;
    $$pre$phi$i$i71Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8, 0);
   HEAP32[$$pre$phi$i$i71Z2D >> 2] = HEAP32[$11 >> 2];
   HEAP32[$$pre$phi$i$i71Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$$pre$phi$i$i71Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i73 = 0;
   while (1) {
    if (($$0$i$i$i73 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i73 << 2) >> 2] = 0;
    $$0$i$i$i73 = $$0$i$i$i73 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phi88Z2D = $73;
  }
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 12 >> 2] & 127]($73) | 0;
  HEAP8[$5 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 16 >> 2] & 127]($73) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi88Z2D >> 2] | 0) + 20 >> 2] & 127]($11, $73);
  $113 = $6 + 11 | 0;
  if ((HEAP8[$113 >> 0] | 0) < 0) {
   $116 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($116, $10);
   HEAP32[$6 + 4 >> 2] = 0;
   $$pre$phi$i$i77Z2D = $6;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$113 >> 0] = 0;
   $$pre$phi$i$i77Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6, 0);
  HEAP32[$$pre$phi$i$i77Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i77Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i77Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i79 = 0;
  while (1) {
   if (($$0$i$i$i79 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i79 << 2) >> 2] = 0;
   $$0$i$i$i79 = $$0$i$i$i79 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi88Z2D >> 2] | 0) + 24 >> 2] & 127]($11, $73);
  $123 = $7 + 11 | 0;
  if ((HEAP8[$123 >> 0] | 0) < 0) {
   $126 = HEAP32[$7 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($126, $10);
   HEAP32[$7 + 4 >> 2] = 0;
   $$pre$phi$i$i83Z2D = $7;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10);
   HEAP8[$123 >> 0] = 0;
   $$pre$phi$i$i83Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($7, 0);
  HEAP32[$$pre$phi$i$i83Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i83Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i83Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i85 = 0;
  while (1) {
   if (($$0$i$i$i85 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i85 << 2) >> 2] = 0;
   $$0$i$i$i85 = $$0$i$i$i85 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 36 >> 2] & 127]($73) | 0;
 }
 HEAP32[$9 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$095$0 = 0, $10 = 0, $103 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $118 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $45 = 0, $49 = 0, $54 = 0, $55 = 0, $60 = 0, $62 = 0, $8 = 0, $9 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $$byval_copy30 = sp + 128 | 0;
 $$byval_copy26 = sp + 112 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 108 | 0;
 $12 = sp + 104 | 0;
 $13 = sp + 100 | 0;
 $14 = sp + 96 | 0;
 $15 = sp + 92 | 0;
 $16 = sp + 88 | 0;
 $17 = sp + 84 | 0;
 $18 = sp + 80 | 0;
 $19 = sp + 76 | 0;
 $20 = sp + 72 | 0;
 $21 = sp + 68 | 0;
 $22 = sp + 64 | 0;
 $23 = sp + 60 | 0;
 $24 = sp + 56 | 0;
 $25 = sp + 52 | 0;
 $26 = sp + 48 | 0;
 $27 = sp + 44 | 0;
 $28 = sp + 40 | 0;
 $29 = sp + 36 | 0;
 $30 = sp + 32 | 0;
 $31 = sp + 28 | 0;
 $32 = sp + 24 | 0;
 $33 = sp + 20 | 0;
 $34 = sp + 16 | 0;
 $35 = sp + 12 | 0;
 $36 = sp + 8 | 0;
 $37 = sp + 4 | 0;
 $38 = sp;
 HEAP32[$4 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy30, $3);
 $39 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy30, 32720) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy30);
 do switch ($6 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$9 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 99:
  {
   $45 = $0 + 8 | 0;
   $49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 12 >> 2] & 127]($45) | 0;
   HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
   $54 = HEAP8[$49 + 8 + 3 >> 0] | 0;
   $55 = $54 << 24 >> 24 < 0;
   $60 = $55 ? HEAP32[$49 >> 2] | 0 : $49;
   $62 = $60 + (($55 ? HEAP32[$49 + 4 >> 2] | 0 : $54 & 255) << 2) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $60, $62) | 0;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 12 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$13 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$14 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 6368, 6400) | 0;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$15 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 6400, 6432) | 0;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$18 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 28 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$20 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$20 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$21 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 4 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$23 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$23 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$24 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$25 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 6432, 6476) | 0;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$26 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$27 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 6480, 6500) | 0;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$28 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$28 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$29 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 6512, 6544) | 0;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$31 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 120:
  {
   $99 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$32 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$33 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$33 >> 2];
   $$sroa$095$0 = FUNCTION_TABLE_iiiiiii[$99 & 63]($0, $$byval_copy26, $$byval_copy30, $3, $4, $5) | 0;
   break;
  }
 case 88:
  {
   $103 = $0 + 8 | 0;
   $107 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 24 >> 2] & 127]($103) | 0;
   HEAP32[$34 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$35 >> 2] = HEAP32[$2 >> 2];
   $112 = HEAP8[$107 + 8 + 3 >> 0] | 0;
   $113 = $112 << 24 >> 24 < 0;
   $118 = $113 ? HEAP32[$107 >> 2] | 0 : $107;
   $120 = $118 + (($113 ? HEAP32[$107 + 4 >> 2] | 0 : $112 & 255) << 2) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$35 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $118, $120) | 0;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$36 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$36 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$37 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$37 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$38 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$38 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $$sroa$095$0 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$095$0 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$095$0 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $45 = 0, $49 = 0, $53 = 0, $54 = 0, $59 = 0, $61 = 0, $8 = 0, $9 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $$byval_copy30 = sp + 128 | 0;
 $$byval_copy26 = sp + 112 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 108 | 0;
 $12 = sp + 104 | 0;
 $13 = sp + 100 | 0;
 $14 = sp + 96 | 0;
 $15 = sp + 92 | 0;
 $16 = sp + 88 | 0;
 $17 = sp + 84 | 0;
 $18 = sp + 80 | 0;
 $19 = sp + 76 | 0;
 $20 = sp + 72 | 0;
 $21 = sp + 68 | 0;
 $22 = sp + 64 | 0;
 $23 = sp + 60 | 0;
 $24 = sp + 56 | 0;
 $25 = sp + 52 | 0;
 $26 = sp + 48 | 0;
 $27 = sp + 44 | 0;
 $28 = sp + 40 | 0;
 $29 = sp + 36 | 0;
 $30 = sp + 32 | 0;
 $31 = sp + 28 | 0;
 $32 = sp + 24 | 0;
 $33 = sp + 20 | 0;
 $34 = sp + 16 | 0;
 $35 = sp + 12 | 0;
 $36 = sp + 8 | 0;
 $37 = sp + 4 | 0;
 $38 = sp;
 HEAP32[$4 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy30, $3);
 $39 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy30, 32688) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy30);
 do switch ($6 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$9 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 99:
  {
   $45 = $0 + 8 | 0;
   $49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 12 >> 2] & 127]($45) | 0;
   HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
   $53 = HEAP8[$49 + 11 >> 0] | 0;
   $54 = $53 << 24 >> 24 < 0;
   $59 = $54 ? HEAP32[$49 >> 2] | 0 : $49;
   $61 = $59 + ($54 ? HEAP32[$49 + 4 >> 2] | 0 : $53 & 255) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $59, $61) | 0;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 12 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$13 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$14 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 24129, 24137) | 0;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$15 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 24137, 24145) | 0;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$18 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 28 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$20 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$20 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$21 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 4 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$23 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$23 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$24 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$25 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 24145, 24156) | 0;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$26 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$27 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 24156, 24161) | 0;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$28 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$28 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$29 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 24161, 24169) | 0;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$31 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 120:
  {
   $98 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$32 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$33 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$33 >> 2];
   $$sroa$095$0 = FUNCTION_TABLE_iiiiiii[$98 & 63]($0, $$byval_copy26, $$byval_copy30, $3, $4, $5) | 0;
   break;
  }
 case 88:
  {
   $102 = $0 + 8 | 0;
   $106 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$102 >> 2] | 0) + 24 >> 2] & 127]($102) | 0;
   HEAP32[$34 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$35 >> 2] = HEAP32[$2 >> 2];
   $110 = HEAP8[$106 + 11 >> 0] | 0;
   $111 = $110 << 24 >> 24 < 0;
   $116 = $111 ? HEAP32[$106 >> 2] | 0 : $106;
   $118 = $116 + ($111 ? HEAP32[$106 + 4 >> 2] | 0 : $110 & 255) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$35 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $116, $118) | 0;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$36 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$36 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$37 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$37 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$38 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$38 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $$byval_copy30, $4, $39);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $$sroa$095$0 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$095$0 | 0;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$029$lcssa$i$i$i$i = 0, $$029$lcssa$i$i$i$i$i = 0, $$029$lcssa$i$i$i$i$i58 = 0, $$029$lcssa$i$i$i$i$i73 = 0, $$02932$i$i$i$i = 0, $$02932$i$i$i$i$i = 0, $$02932$i$i$i$i$i54 = 0, $$02932$i$i$i$i$i69 = 0, $$sink = 0, $$sink123 = 0, $$sink124 = 0, $$sink126 = 0, $$sink127 = 0, $$sink129 = 0, $$sink130 = 0, $$sink132 = 0, $10 = 0, $103 = 0, $105 = 0, $111 = 0, $115 = 0, $116 = 0, $118 = 0, $120 = 0, $123 = 0, $125 = 0, $127 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $141 = 0, $148 = 0, $154 = 0, $156 = 0, $163 = 0, $172 = 0, $174 = 0, $176 = 0, $18 = 0, $182 = 0, $186 = 0, $187 = 0, $189 = 0, $191 = 0, $194 = 0, $196 = 0, $198 = 0, $20 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $210 = 0, $212 = 0, $219 = 0, $225 = 0, $227 = 0, $234 = 0, $243 = 0, $247 = 0, $253 = 0, $257 = 0, $258 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $267 = 0, $269 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $281 = 0, $283 = 0, $290 = 0, $296 = 0, $298 = 0, $3 = 0, $30 = 0, $305 = 0, $31 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $63 = 0, $69 = 0, $7 = 0, $71 = 0, $78 = 0, $8 = 0, $87 = 0, $9 = 0, $95 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $30 = $18 + $20 | 0;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  $31 = $30 + $26 | 0;
  $33 = $2 + 24 | 0;
  $35 = HEAP32[$33 >> 2] | 0;
  $38 = HEAP32[$33 + 4 >> 2] | 0;
  $40 = HEAP32[$2 + 32 >> 2] | 0;
  if (($40 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
  $42 = $3 + $40 | 0;
  if ($38 >>> 0 > 0 | ($38 | 0) == 0 & $35 >>> 0 > 99) {
   $$02932$i$i$i$i = $42;
   $48 = $35;
   $49 = $38;
   while (1) {
    $50 = ___udivdi3($48 | 0, $49 | 0, 100, 0) | 0;
    $51 = getTempRet0() | 0;
    $52 = ___muldi3($50 | 0, $51 | 0, 100, 0) | 0;
    $54 = _i64Subtract($48 | 0, $49 | 0, $52 | 0, getTempRet0() | 0) | 0;
    getTempRet0() | 0;
    $56 = $54 << 1;
    HEAP8[$$02932$i$i$i$i + -1 >> 0] = HEAP8[64 + ($56 | 1) >> 0] | 0;
    $63 = $$02932$i$i$i$i + -2 | 0;
    HEAP8[$63 >> 0] = HEAP8[64 + $56 >> 0] | 0;
    if ($49 >>> 0 > 0 | ($49 | 0) == 0 & $48 >>> 0 > 9999) {
     $$02932$i$i$i$i = $63;
     $48 = $50;
     $49 = $51;
    } else {
     $$029$lcssa$i$i$i$i = $63;
     $69 = $51;
     $71 = $50;
     break;
    }
   }
  } else {
   $$029$lcssa$i$i$i$i = $42;
   $69 = $38;
   $71 = $35;
  }
  if ($69 >>> 0 < 0 | ($69 | 0) == 0 & $71 >>> 0 < 10) {
   $$sink = ($71 & 255) + 48 << 24 >> 24;
   $$sink123 = -1;
  } else {
   $78 = $71 << 1;
   HEAP8[$$029$lcssa$i$i$i$i + -1 >> 0] = HEAP8[64 + ($78 | 1) >> 0] | 0;
   $$sink = HEAP8[64 + $78 >> 0] | 0;
   $$sink123 = -2;
  }
  HEAP8[$$029$lcssa$i$i$i$i + $$sink123 >> 0] = $$sink;
  if ($40 | 0) _memcpy($31 | 0, $3 | 0, $40 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $87 = $9 + $4 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $87 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $87);
 HEAP32[$8 >> 2] = $87;
 $95 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $98 = HEAP32[$1 + 4 >> 2] & 255;
 $99 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($99 | 0) _memset($95 | 0, $98 | 0, $99 | 0) | 0;
   $103 = $95 + $99 | 0;
   $105 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$105) $115 = $103; else {
    _memmove($103 | 0, HEAP32[$2 + 4 >> 2] | 0, $105 | 0) | 0;
    $115 = $103 + $105 | 0;
   }
   $111 = HEAP32[$2 + 16 >> 2] | 0;
   if ($111 | 0) _memset($115 | 0, HEAP8[$2 + 12 >> 0] | 0, $111 | 0) | 0;
   $116 = $115 + $111 | 0;
   $118 = $2 + 24 | 0;
   $120 = HEAP32[$118 >> 2] | 0;
   $123 = HEAP32[$118 + 4 >> 2] | 0;
   $125 = HEAP32[$2 + 32 >> 2] | 0;
   if (($125 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $127 = $3 + $125 | 0;
   if ($123 >>> 0 > 0 | ($123 | 0) == 0 & $120 >>> 0 > 99) {
    $$02932$i$i$i$i$i69 = $127;
    $133 = $120;
    $134 = $123;
    while (1) {
     $135 = ___udivdi3($133 | 0, $134 | 0, 100, 0) | 0;
     $136 = getTempRet0() | 0;
     $137 = ___muldi3($135 | 0, $136 | 0, 100, 0) | 0;
     $139 = _i64Subtract($133 | 0, $134 | 0, $137 | 0, getTempRet0() | 0) | 0;
     getTempRet0() | 0;
     $141 = $139 << 1;
     HEAP8[$$02932$i$i$i$i$i69 + -1 >> 0] = HEAP8[64 + ($141 | 1) >> 0] | 0;
     $148 = $$02932$i$i$i$i$i69 + -2 | 0;
     HEAP8[$148 >> 0] = HEAP8[64 + $141 >> 0] | 0;
     if ($134 >>> 0 > 0 | ($134 | 0) == 0 & $133 >>> 0 > 9999) {
      $$02932$i$i$i$i$i69 = $148;
      $133 = $135;
      $134 = $136;
     } else {
      $$029$lcssa$i$i$i$i$i73 = $148;
      $154 = $136;
      $156 = $135;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i73 = $127;
    $154 = $123;
    $156 = $120;
   }
   if ($154 >>> 0 < 0 | ($154 | 0) == 0 & $156 >>> 0 < 10) {
    $$sink124 = ($156 & 255) + 48 << 24 >> 24;
    $$sink126 = -1;
   } else {
    $163 = $156 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i73 + -1 >> 0] = HEAP8[64 + ($163 | 1) >> 0] | 0;
    $$sink124 = HEAP8[64 + $163 >> 0] | 0;
    $$sink126 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i73 + $$sink126 >> 0] = $$sink124;
   if ($125 | 0) _memcpy($116 | 0, $3 | 0, $125 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $172 = $99 >>> 1;
   if ($172 | 0) _memset($95 | 0, $98 | 0, $172 | 0) | 0;
   $174 = $95 + $172 | 0;
   $176 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$176) $186 = $174; else {
    _memmove($174 | 0, HEAP32[$2 + 4 >> 2] | 0, $176 | 0) | 0;
    $186 = $174 + $176 | 0;
   }
   $182 = HEAP32[$2 + 16 >> 2] | 0;
   if ($182 | 0) _memset($186 | 0, HEAP8[$2 + 12 >> 0] | 0, $182 | 0) | 0;
   $187 = $186 + $182 | 0;
   $189 = $2 + 24 | 0;
   $191 = HEAP32[$189 >> 2] | 0;
   $194 = HEAP32[$189 + 4 >> 2] | 0;
   $196 = HEAP32[$2 + 32 >> 2] | 0;
   if (($196 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $198 = $3 + $196 | 0;
   if ($194 >>> 0 > 0 | ($194 | 0) == 0 & $191 >>> 0 > 99) {
    $$02932$i$i$i$i$i54 = $198;
    $204 = $191;
    $205 = $194;
    while (1) {
     $206 = ___udivdi3($204 | 0, $205 | 0, 100, 0) | 0;
     $207 = getTempRet0() | 0;
     $208 = ___muldi3($206 | 0, $207 | 0, 100, 0) | 0;
     $210 = _i64Subtract($204 | 0, $205 | 0, $208 | 0, getTempRet0() | 0) | 0;
     getTempRet0() | 0;
     $212 = $210 << 1;
     HEAP8[$$02932$i$i$i$i$i54 + -1 >> 0] = HEAP8[64 + ($212 | 1) >> 0] | 0;
     $219 = $$02932$i$i$i$i$i54 + -2 | 0;
     HEAP8[$219 >> 0] = HEAP8[64 + $212 >> 0] | 0;
     if ($205 >>> 0 > 0 | ($205 | 0) == 0 & $204 >>> 0 > 9999) {
      $$02932$i$i$i$i$i54 = $219;
      $204 = $206;
      $205 = $207;
     } else {
      $$029$lcssa$i$i$i$i$i58 = $219;
      $225 = $207;
      $227 = $206;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i58 = $198;
    $225 = $194;
    $227 = $191;
   }
   if ($225 >>> 0 < 0 | ($225 | 0) == 0 & $227 >>> 0 < 10) {
    $$sink127 = ($227 & 255) + 48 << 24 >> 24;
    $$sink129 = -1;
   } else {
    $234 = $227 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i58 + -1 >> 0] = HEAP8[64 + ($234 | 1) >> 0] | 0;
    $$sink127 = HEAP8[64 + $234 >> 0] | 0;
    $$sink129 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i58 + $$sink129 >> 0] = $$sink127;
   if ($196 | 0) _memcpy($187 | 0, $3 | 0, $196 | 0) | 0;
   $243 = $99 - $172 | 0;
   if (!$243) {
    STACKTOP = sp;
    return;
   }
   _memset($187 + $196 | 0, $98 | 0, $243 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $247 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$247) $257 = $95; else {
    _memmove($95 | 0, HEAP32[$2 + 4 >> 2] | 0, $247 | 0) | 0;
    $257 = $95 + $247 | 0;
   }
   $253 = HEAP32[$2 + 16 >> 2] | 0;
   if ($253 | 0) _memset($257 | 0, HEAP8[$2 + 12 >> 0] | 0, $253 | 0) | 0;
   $258 = $257 + $253 | 0;
   $260 = $2 + 24 | 0;
   $262 = HEAP32[$260 >> 2] | 0;
   $265 = HEAP32[$260 + 4 >> 2] | 0;
   $267 = HEAP32[$2 + 32 >> 2] | 0;
   if (($267 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $269 = $3 + $267 | 0;
   if ($265 >>> 0 > 0 | ($265 | 0) == 0 & $262 >>> 0 > 99) {
    $$02932$i$i$i$i$i = $269;
    $275 = $262;
    $276 = $265;
    while (1) {
     $277 = ___udivdi3($275 | 0, $276 | 0, 100, 0) | 0;
     $278 = getTempRet0() | 0;
     $279 = ___muldi3($277 | 0, $278 | 0, 100, 0) | 0;
     $281 = _i64Subtract($275 | 0, $276 | 0, $279 | 0, getTempRet0() | 0) | 0;
     getTempRet0() | 0;
     $283 = $281 << 1;
     HEAP8[$$02932$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($283 | 1) >> 0] | 0;
     $290 = $$02932$i$i$i$i$i + -2 | 0;
     HEAP8[$290 >> 0] = HEAP8[64 + $283 >> 0] | 0;
     if ($276 >>> 0 > 0 | ($276 | 0) == 0 & $275 >>> 0 > 9999) {
      $$02932$i$i$i$i$i = $290;
      $275 = $277;
      $276 = $278;
     } else {
      $$029$lcssa$i$i$i$i$i = $290;
      $296 = $278;
      $298 = $277;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i = $269;
    $296 = $265;
    $298 = $262;
   }
   if ($296 >>> 0 < 0 | ($296 | 0) == 0 & $298 >>> 0 < 10) {
    $$sink130 = ($298 & 255) + 48 << 24 >> 24;
    $$sink132 = -1;
   } else {
    $305 = $298 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($305 | 1) >> 0] | 0;
    $$sink130 = HEAP8[64 + $305 >> 0] | 0;
    $$sink132 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i + $$sink132 >> 0] = $$sink130;
   if ($267 | 0) _memcpy($258 | 0, $3 | 0, $267 | 0) | 0;
   if (!$99) {
    STACKTOP = sp;
    return;
   }
   _memset($258 + $267 | 0, $98 | 0, $99 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$029$lcssa$i$i$i$i = 0, $$029$lcssa$i$i$i$i$i = 0, $$029$lcssa$i$i$i$i$i58 = 0, $$029$lcssa$i$i$i$i$i73 = 0, $$02932$i$i$i$i = 0, $$02932$i$i$i$i$i = 0, $$02932$i$i$i$i$i54 = 0, $$02932$i$i$i$i$i69 = 0, $$sink = 0, $$sink123 = 0, $$sink124 = 0, $$sink126 = 0, $$sink127 = 0, $$sink129 = 0, $$sink130 = 0, $$sink132 = 0, $10 = 0, $103 = 0, $105 = 0, $111 = 0, $115 = 0, $116 = 0, $118 = 0, $120 = 0, $123 = 0, $125 = 0, $127 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $141 = 0, $148 = 0, $154 = 0, $156 = 0, $163 = 0, $172 = 0, $174 = 0, $176 = 0, $18 = 0, $182 = 0, $186 = 0, $187 = 0, $189 = 0, $191 = 0, $194 = 0, $196 = 0, $198 = 0, $20 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $210 = 0, $212 = 0, $219 = 0, $225 = 0, $227 = 0, $234 = 0, $243 = 0, $247 = 0, $253 = 0, $257 = 0, $258 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $267 = 0, $269 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $281 = 0, $283 = 0, $290 = 0, $296 = 0, $298 = 0, $3 = 0, $30 = 0, $305 = 0, $31 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $63 = 0, $69 = 0, $7 = 0, $71 = 0, $78 = 0, $8 = 0, $87 = 0, $9 = 0, $95 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $30 = $18 + $20 | 0;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  $31 = $30 + $26 | 0;
  $33 = $2 + 24 | 0;
  $35 = HEAP32[$33 >> 2] | 0;
  $38 = HEAP32[$33 + 4 >> 2] | 0;
  $40 = HEAP32[$2 + 32 >> 2] | 0;
  if (($40 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
  $42 = $3 + $40 | 0;
  if ($38 >>> 0 > 0 | ($38 | 0) == 0 & $35 >>> 0 > 99) {
   $$02932$i$i$i$i = $42;
   $48 = $35;
   $49 = $38;
   while (1) {
    $50 = ___udivdi3($48 | 0, $49 | 0, 100, 0) | 0;
    $51 = getTempRet0() | 0;
    $52 = ___muldi3($50 | 0, $51 | 0, 100, 0) | 0;
    $54 = _i64Subtract($48 | 0, $49 | 0, $52 | 0, getTempRet0() | 0) | 0;
    getTempRet0() | 0;
    $56 = $54 << 1;
    HEAP8[$$02932$i$i$i$i + -1 >> 0] = HEAP8[64 + ($56 | 1) >> 0] | 0;
    $63 = $$02932$i$i$i$i + -2 | 0;
    HEAP8[$63 >> 0] = HEAP8[64 + $56 >> 0] | 0;
    if ($49 >>> 0 > 0 | ($49 | 0) == 0 & $48 >>> 0 > 9999) {
     $$02932$i$i$i$i = $63;
     $48 = $50;
     $49 = $51;
    } else {
     $$029$lcssa$i$i$i$i = $63;
     $69 = $51;
     $71 = $50;
     break;
    }
   }
  } else {
   $$029$lcssa$i$i$i$i = $42;
   $69 = $38;
   $71 = $35;
  }
  if ($69 >>> 0 < 0 | ($69 | 0) == 0 & $71 >>> 0 < 10) {
   $$sink = ($71 & 255) + 48 << 24 >> 24;
   $$sink123 = -1;
  } else {
   $78 = $71 << 1;
   HEAP8[$$029$lcssa$i$i$i$i + -1 >> 0] = HEAP8[64 + ($78 | 1) >> 0] | 0;
   $$sink = HEAP8[64 + $78 >> 0] | 0;
   $$sink123 = -2;
  }
  HEAP8[$$029$lcssa$i$i$i$i + $$sink123 >> 0] = $$sink;
  if ($40 | 0) _memcpy($31 | 0, $3 | 0, $40 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $87 = $9 + $4 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $87 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $87);
 HEAP32[$8 >> 2] = $87;
 $95 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $98 = HEAP32[$1 + 4 >> 2] & 255;
 $99 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($99 | 0) _memset($95 | 0, $98 | 0, $99 | 0) | 0;
   $103 = $95 + $99 | 0;
   $105 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$105) $115 = $103; else {
    _memmove($103 | 0, HEAP32[$2 + 4 >> 2] | 0, $105 | 0) | 0;
    $115 = $103 + $105 | 0;
   }
   $111 = HEAP32[$2 + 16 >> 2] | 0;
   if ($111 | 0) _memset($115 | 0, HEAP8[$2 + 12 >> 0] | 0, $111 | 0) | 0;
   $116 = $115 + $111 | 0;
   $118 = $2 + 24 | 0;
   $120 = HEAP32[$118 >> 2] | 0;
   $123 = HEAP32[$118 + 4 >> 2] | 0;
   $125 = HEAP32[$2 + 32 >> 2] | 0;
   if (($125 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $127 = $3 + $125 | 0;
   if ($123 >>> 0 > 0 | ($123 | 0) == 0 & $120 >>> 0 > 99) {
    $$02932$i$i$i$i$i69 = $127;
    $133 = $120;
    $134 = $123;
    while (1) {
     $135 = ___udivdi3($133 | 0, $134 | 0, 100, 0) | 0;
     $136 = getTempRet0() | 0;
     $137 = ___muldi3($135 | 0, $136 | 0, 100, 0) | 0;
     $139 = _i64Subtract($133 | 0, $134 | 0, $137 | 0, getTempRet0() | 0) | 0;
     getTempRet0() | 0;
     $141 = $139 << 1;
     HEAP8[$$02932$i$i$i$i$i69 + -1 >> 0] = HEAP8[64 + ($141 | 1) >> 0] | 0;
     $148 = $$02932$i$i$i$i$i69 + -2 | 0;
     HEAP8[$148 >> 0] = HEAP8[64 + $141 >> 0] | 0;
     if ($134 >>> 0 > 0 | ($134 | 0) == 0 & $133 >>> 0 > 9999) {
      $$02932$i$i$i$i$i69 = $148;
      $133 = $135;
      $134 = $136;
     } else {
      $$029$lcssa$i$i$i$i$i73 = $148;
      $154 = $136;
      $156 = $135;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i73 = $127;
    $154 = $123;
    $156 = $120;
   }
   if ($154 >>> 0 < 0 | ($154 | 0) == 0 & $156 >>> 0 < 10) {
    $$sink124 = ($156 & 255) + 48 << 24 >> 24;
    $$sink126 = -1;
   } else {
    $163 = $156 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i73 + -1 >> 0] = HEAP8[64 + ($163 | 1) >> 0] | 0;
    $$sink124 = HEAP8[64 + $163 >> 0] | 0;
    $$sink126 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i73 + $$sink126 >> 0] = $$sink124;
   if ($125 | 0) _memcpy($116 | 0, $3 | 0, $125 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $172 = $99 >>> 1;
   if ($172 | 0) _memset($95 | 0, $98 | 0, $172 | 0) | 0;
   $174 = $95 + $172 | 0;
   $176 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$176) $186 = $174; else {
    _memmove($174 | 0, HEAP32[$2 + 4 >> 2] | 0, $176 | 0) | 0;
    $186 = $174 + $176 | 0;
   }
   $182 = HEAP32[$2 + 16 >> 2] | 0;
   if ($182 | 0) _memset($186 | 0, HEAP8[$2 + 12 >> 0] | 0, $182 | 0) | 0;
   $187 = $186 + $182 | 0;
   $189 = $2 + 24 | 0;
   $191 = HEAP32[$189 >> 2] | 0;
   $194 = HEAP32[$189 + 4 >> 2] | 0;
   $196 = HEAP32[$2 + 32 >> 2] | 0;
   if (($196 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $198 = $3 + $196 | 0;
   if ($194 >>> 0 > 0 | ($194 | 0) == 0 & $191 >>> 0 > 99) {
    $$02932$i$i$i$i$i54 = $198;
    $204 = $191;
    $205 = $194;
    while (1) {
     $206 = ___udivdi3($204 | 0, $205 | 0, 100, 0) | 0;
     $207 = getTempRet0() | 0;
     $208 = ___muldi3($206 | 0, $207 | 0, 100, 0) | 0;
     $210 = _i64Subtract($204 | 0, $205 | 0, $208 | 0, getTempRet0() | 0) | 0;
     getTempRet0() | 0;
     $212 = $210 << 1;
     HEAP8[$$02932$i$i$i$i$i54 + -1 >> 0] = HEAP8[64 + ($212 | 1) >> 0] | 0;
     $219 = $$02932$i$i$i$i$i54 + -2 | 0;
     HEAP8[$219 >> 0] = HEAP8[64 + $212 >> 0] | 0;
     if ($205 >>> 0 > 0 | ($205 | 0) == 0 & $204 >>> 0 > 9999) {
      $$02932$i$i$i$i$i54 = $219;
      $204 = $206;
      $205 = $207;
     } else {
      $$029$lcssa$i$i$i$i$i58 = $219;
      $225 = $207;
      $227 = $206;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i58 = $198;
    $225 = $194;
    $227 = $191;
   }
   if ($225 >>> 0 < 0 | ($225 | 0) == 0 & $227 >>> 0 < 10) {
    $$sink127 = ($227 & 255) + 48 << 24 >> 24;
    $$sink129 = -1;
   } else {
    $234 = $227 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i58 + -1 >> 0] = HEAP8[64 + ($234 | 1) >> 0] | 0;
    $$sink127 = HEAP8[64 + $234 >> 0] | 0;
    $$sink129 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i58 + $$sink129 >> 0] = $$sink127;
   if ($196 | 0) _memcpy($187 | 0, $3 | 0, $196 | 0) | 0;
   $243 = $99 - $172 | 0;
   if (!$243) {
    STACKTOP = sp;
    return;
   }
   _memset($187 + $196 | 0, $98 | 0, $243 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $247 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$247) $257 = $95; else {
    _memmove($95 | 0, HEAP32[$2 + 4 >> 2] | 0, $247 | 0) | 0;
    $257 = $95 + $247 | 0;
   }
   $253 = HEAP32[$2 + 16 >> 2] | 0;
   if ($253 | 0) _memset($257 | 0, HEAP8[$2 + 12 >> 0] | 0, $253 | 0) | 0;
   $258 = $257 + $253 | 0;
   $260 = $2 + 24 | 0;
   $262 = HEAP32[$260 >> 2] | 0;
   $265 = HEAP32[$260 + 4 >> 2] | 0;
   $267 = HEAP32[$2 + 32 >> 2] | 0;
   if (($267 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $269 = $3 + $267 | 0;
   if ($265 >>> 0 > 0 | ($265 | 0) == 0 & $262 >>> 0 > 99) {
    $$02932$i$i$i$i$i = $269;
    $275 = $262;
    $276 = $265;
    while (1) {
     $277 = ___udivdi3($275 | 0, $276 | 0, 100, 0) | 0;
     $278 = getTempRet0() | 0;
     $279 = ___muldi3($277 | 0, $278 | 0, 100, 0) | 0;
     $281 = _i64Subtract($275 | 0, $276 | 0, $279 | 0, getTempRet0() | 0) | 0;
     getTempRet0() | 0;
     $283 = $281 << 1;
     HEAP8[$$02932$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($283 | 1) >> 0] | 0;
     $290 = $$02932$i$i$i$i$i + -2 | 0;
     HEAP8[$290 >> 0] = HEAP8[64 + $283 >> 0] | 0;
     if ($276 >>> 0 > 0 | ($276 | 0) == 0 & $275 >>> 0 > 9999) {
      $$02932$i$i$i$i$i = $290;
      $275 = $277;
      $276 = $278;
     } else {
      $$029$lcssa$i$i$i$i$i = $290;
      $296 = $278;
      $298 = $277;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i = $269;
    $296 = $265;
    $298 = $262;
   }
   if ($296 >>> 0 < 0 | ($296 | 0) == 0 & $298 >>> 0 < 10) {
    $$sink130 = ($298 & 255) + 48 << 24 >> 24;
    $$sink132 = -1;
   } else {
    $305 = $298 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($305 | 1) >> 0] | 0;
    $$sink130 = HEAP8[64 + $305 >> 0] | 0;
    $$sink132 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i + $$sink132 >> 0] = $$sink130;
   if ($267 | 0) _memcpy($258 | 0, $3 | 0, $267 | 0) | 0;
   if (!$99) {
    STACKTOP = sp;
    return;
   }
   _memset($258 + $267 | 0, $98 | 0, $99 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i41 = 0, $$0$i$i$i47 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i65 = 0, $$0$i$i$i71 = 0, $$0$i$i$i77 = 0, $$pre$phi$i$i39Z2D = 0, $$pre$phi$i$i45Z2D = 0, $$pre$phi$i$i51Z2D = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$i63Z2D = 0, $$pre$phi$i$i69Z2D = 0, $$pre$phi$i$i75Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $105 = 0, $108 = 0, $11 = 0, $115 = 0, $118 = 0, $12 = 0, $16 = 0, $20 = 0, $23 = 0, $30 = 0, $33 = 0, $48 = 0, $51 = 0, $58 = 0, $61 = 0, $69 = 0, $73 = 0, $77 = 0, $80 = 0, $87 = 0, $90 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 32920) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 127]($10, $12);
  $16 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = $16;
  HEAP8[$2 + 1 >> 0] = $16 >> 8;
  HEAP8[$2 + 2 >> 0] = $16 >> 16;
  HEAP8[$2 + 3 >> 0] = $16 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($11, $12);
  $20 = $8 + 11 | 0;
  if ((HEAP8[$20 >> 0] | 0) < 0) {
   $23 = HEAP32[$8 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($23, $10);
   HEAP32[$8 + 4 >> 2] = 0;
   $$pre$phi$i$iZ2D = $8;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
   HEAP8[$20 >> 0] = 0;
   $$pre$phi$i$iZ2D = $8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8, 0);
  HEAP32[$$pre$phi$i$iZ2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$iZ2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$iZ2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i = 0;
  while (1) {
   if (($$0$i$i$i | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
   $$0$i$i$i = $$0$i$i$i + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($11, $12);
  $30 = $7 + 11 | 0;
  if ((HEAP8[$30 >> 0] | 0) < 0) {
   $33 = HEAP32[$7 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($33, $10);
   HEAP32[$7 + 4 >> 2] = 0;
   $$pre$phi$i$i39Z2D = $7;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10);
   HEAP8[$30 >> 0] = 0;
   $$pre$phi$i$i39Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($7, 0);
  HEAP32[$$pre$phi$i$i39Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i39Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i39Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i41 = 0;
  while (1) {
   if (($$0$i$i$i41 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i41 << 2) >> 2] = 0;
   $$0$i$i$i41 = $$0$i$i$i41 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  HEAP8[$3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 127]($11, $12);
  $48 = $5 + 11 | 0;
  if ((HEAP8[$48 >> 0] | 0) < 0) {
   $51 = HEAP32[$5 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($51, $10);
   HEAP32[$5 + 4 >> 2] = 0;
   $$pre$phi$i$i45Z2D = $5;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10);
   HEAP8[$48 >> 0] = 0;
   $$pre$phi$i$i45Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($5, 0);
  HEAP32[$$pre$phi$i$i45Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i45Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i45Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i47 = 0;
  while (1) {
   if (($$0$i$i$i47 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i47 << 2) >> 2] = 0;
   $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 127]($11, $12);
  $58 = $6 + 11 | 0;
  if ((HEAP8[$58 >> 0] | 0) < 0) {
   $61 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($61, $10);
   HEAP32[$6 + 4 >> 2] = 0;
   $$pre$phi$i$i51Z2D = $6;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$58 >> 0] = 0;
   $$pre$phi$i$i51Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6, 0);
  HEAP32[$$pre$phi$i$i51Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i51Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i51Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i53 = 0;
  while (1) {
   if (($$0$i$i$i53 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i53 << 2) >> 2] = 0;
   $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $69 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 32912) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 44 >> 2] & 127]($10, $69);
  $73 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = $73;
  HEAP8[$2 + 1 >> 0] = $73 >> 8;
  HEAP8[$2 + 2 >> 0] = $73 >> 16;
  HEAP8[$2 + 3 >> 0] = $73 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 32 >> 2] & 127]($11, $69);
  $77 = $8 + 11 | 0;
  if ((HEAP8[$77 >> 0] | 0) < 0) {
   $80 = HEAP32[$8 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($80, $10);
   HEAP32[$8 + 4 >> 2] = 0;
   $$pre$phi$i$i57Z2D = $8;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
   HEAP8[$77 >> 0] = 0;
   $$pre$phi$i$i57Z2D = $8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8, 0);
  HEAP32[$$pre$phi$i$i57Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i57Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i57Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i59 = 0;
  while (1) {
   if (($$0$i$i$i59 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i59 << 2) >> 2] = 0;
   $$0$i$i$i59 = $$0$i$i$i59 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 28 >> 2] & 127]($11, $69);
  $87 = $7 + 11 | 0;
  if ((HEAP8[$87 >> 0] | 0) < 0) {
   $90 = HEAP32[$7 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($90, $10);
   HEAP32[$7 + 4 >> 2] = 0;
   $$pre$phi$i$i63Z2D = $7;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10);
   HEAP8[$87 >> 0] = 0;
   $$pre$phi$i$i63Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($7, 0);
  HEAP32[$$pre$phi$i$i63Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i63Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i63Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i65 = 0;
  while (1) {
   if (($$0$i$i$i65 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i65 << 2) >> 2] = 0;
   $$0$i$i$i65 = $$0$i$i$i65 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  HEAP8[$3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 12 >> 2] & 127]($69) | 0;
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 16 >> 2] & 127]($69) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 20 >> 2] & 127]($11, $69);
  $105 = $5 + 11 | 0;
  if ((HEAP8[$105 >> 0] | 0) < 0) {
   $108 = HEAP32[$5 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($108, $10);
   HEAP32[$5 + 4 >> 2] = 0;
   $$pre$phi$i$i69Z2D = $5;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10);
   HEAP8[$105 >> 0] = 0;
   $$pre$phi$i$i69Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($5, 0);
  HEAP32[$$pre$phi$i$i69Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i69Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i69Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i71 = 0;
  while (1) {
   if (($$0$i$i$i71 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i71 << 2) >> 2] = 0;
   $$0$i$i$i71 = $$0$i$i$i71 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 24 >> 2] & 127]($11, $69);
  $115 = $6 + 11 | 0;
  if ((HEAP8[$115 >> 0] | 0) < 0) {
   $118 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($118, $10);
   HEAP32[$6 + 4 >> 2] = 0;
   $$pre$phi$i$i75Z2D = $6;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$115 >> 0] = 0;
   $$pre$phi$i$i75Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6, 0);
  HEAP32[$$pre$phi$i$i75Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i75Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i75Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i77 = 0;
  while (1) {
   if (($$0$i$i$i77 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i77 << 2) >> 2] = 0;
   $$0$i$i$i77 = $$0$i$i$i77 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 36 >> 2] & 127]($69) | 0;
 }
 HEAP32[$9 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEEixEOS6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$05398$i = 0, $$05399$i = 0, $$05399$i$us = 0, $$05399$us$i = 0, $$05399$us$i$us = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$sink = 0, $10 = 0, $103 = 0, $107 = 0, $111 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $132 = 0, $135 = 0, $148 = 0, $149 = 0, $153 = 0, $156 = 0.0, $159 = 0.0, $169 = 0, $172 = 0, $174 = 0, $175 = 0, $182 = 0, $183 = 0, $185 = 0, $187 = 0, $190 = 0, $191 = 0, $199 = 0, $203 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $67 = 0, $76 = 0, $80 = 0, $82 = 0, $83 = 0, $86 = 0, $89 = 0, $9 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0;
 $4 = $3 << 24 >> 24 < 0;
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1;
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255;
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i$i = $9;
  $$03738$i$i$i$i$i = $10;
  $$040$i$i$i$i$i = $10;
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0;
   $$03738$i$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i, 1540483477) | 0);
   $$040$i$i$i$i$i = $$040$i$i$i$i$i + -4 | 0;
   if ($$040$i$i$i$i$i >>> 0 <= 3) break; else $$03639$i$i$i$i$i = $$03639$i$i$i$i$i + 4 | 0;
  }
  $21 = $10 + -4 | 0;
  $22 = $21 & -4;
  $$0$lcssa$i$i$i$i$i = $21 - $22 | 0;
  $$036$lcssa$i$i$i$i$i = $9 + ($22 + 4) | 0;
  $$037$lcssa$i$i$i$i$i = $$03738$i$i$i$i$i;
 } else {
  $$0$lcssa$i$i$i$i$i = $10;
  $$036$lcssa$i$i$i$i$i = $9;
  $$037$lcssa$i$i$i$i$i = $10;
 }
 switch ($$0$lcssa$i$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i;
   label = 7;
   break;
  }
 case 2:
  {
   $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
   label = 7;
   break;
  }
 case 1:
  {
   $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
   label = 8;
   break;
  }
 default:
  $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
 }
 if ((label | 0) == 7) {
  $$2$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i;
  label = 8;
 }
 if ((label | 0) == 8) $$3$i$i$i$i$i = Math_imul($$2$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i >> 0], 1540483477) | 0;
 $41 = Math_imul($$3$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i, 1540483477) | 0;
 $43 = $41 >>> 15 ^ $41;
 $44 = $0 + 4 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 $46 = ($45 | 0) == 0;
 L14 : do if ($46) $$054$i = 0; else {
  $47 = $45 + -1 | 0;
  $49 = ($47 & $45 | 0) == 0;
  if ($49) $55 = $43 & $47; else if ($43 >>> 0 < $45 >>> 0) $55 = $43; else $55 = ($43 >>> 0) % ($45 >>> 0) | 0;
  $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0;
  if (!$56) $$054$i = $55; else {
   $$05398$i = HEAP32[$56 >> 2] | 0;
   if (!$$05398$i) $$054$i = $55; else {
    $59 = ($10 | 0) == 0;
    if ($49) {
     if ($59) {
      $$05399$us$i$us = $$05398$i;
      while (1) {
       $61 = HEAP32[$$05399$us$i$us + 4 >> 2] | 0;
       if (!(($61 | 0) == ($43 | 0) | ($61 & $47 | 0) == ($55 | 0))) {
        $$054$i = $55;
        break L14;
       }
       $67 = HEAP8[$$05399$us$i$us + 8 + 11 >> 0] | 0;
       if (!(($67 << 24 >> 24 < 0 ? HEAP32[$$05399$us$i$us + 12 >> 2] | 0 : $67 & 255) | 0)) {
        $$1$i = $$05399$us$i$us;
        break;
       }
       $$05399$us$i$us = HEAP32[$$05399$us$i$us >> 2] | 0;
       if (!$$05399$us$i$us) {
        $$054$i = $55;
        break L14;
       }
      }
      $203 = $$1$i + 20 | 0;
      return $203 | 0;
     }
     $$05399$us$i = $$05398$i;
     L33 : while (1) {
      $76 = HEAP32[$$05399$us$i + 4 >> 2] | 0;
      if (!(($76 | 0) == ($43 | 0) | ($76 & $47 | 0) == ($55 | 0))) {
       $$054$i = $55;
       break L14;
      }
      $80 = $$05399$us$i + 8 | 0;
      $82 = HEAP8[$80 + 11 >> 0] | 0;
      $83 = $82 << 24 >> 24 < 0;
      $86 = $82 & 255;
      do if ((($83 ? HEAP32[$$05399$us$i + 12 >> 2] | 0 : $86) | 0) == ($10 | 0)) {
       $89 = HEAP32[$80 >> 2] | 0;
       if ($83) if (!(_memcmp($89, $9, $10) | 0)) {
        $$1$i = $$05399$us$i;
        label = 68;
        break L33;
       } else break;
       if ((HEAP8[$9 >> 0] | 0) == ($89 & 255) << 24 >> 24) {
        $$02026$i$i4$i$us$i = $80;
        $$02125$i$i5$i$us$i = $86;
        $$027$i$i3$i$us$i = $9;
        do {
         $$02125$i$i5$i$us$i = $$02125$i$i5$i$us$i + -1 | 0;
         $$02026$i$i4$i$us$i = $$02026$i$i4$i$us$i + 1 | 0;
         if (!$$02125$i$i5$i$us$i) {
          $$1$i = $$05399$us$i;
          label = 68;
          break L33;
         }
         $$027$i$i3$i$us$i = $$027$i$i3$i$us$i + 1 | 0;
        } while ((HEAP8[$$02026$i$i4$i$us$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i >> 0] | 0));
       }
      } while (0);
      $$05399$us$i = HEAP32[$$05399$us$i >> 2] | 0;
      if (!$$05399$us$i) {
       $$054$i = $55;
       break L14;
      }
     }
     if ((label | 0) == 68) {
      $203 = $$1$i + 20 | 0;
      return $203 | 0;
     }
    }
    if ($59) {
     $$05399$i$us = $$05398$i;
     while (1) {
      $103 = HEAP32[$$05399$i$us + 4 >> 2] | 0;
      if (($103 | 0) != ($43 | 0)) {
       if ($103 >>> 0 < $45 >>> 0) $107 = $103; else $107 = ($103 >>> 0) % ($45 >>> 0) | 0;
       if (($107 | 0) != ($55 | 0)) {
        $$054$i = $55;
        break L14;
       }
      }
      $111 = HEAP8[$$05399$i$us + 8 + 11 >> 0] | 0;
      if (!(($111 << 24 >> 24 < 0 ? HEAP32[$$05399$i$us + 12 >> 2] | 0 : $111 & 255) | 0)) {
       $$1$i = $$05399$i$us;
       break;
      }
      $$05399$i$us = HEAP32[$$05399$i$us >> 2] | 0;
      if (!$$05399$i$us) {
       $$054$i = $55;
       break L14;
      }
     }
     $203 = $$1$i + 20 | 0;
     return $203 | 0;
    }
    $$05399$i = $$05398$i;
    L63 : while (1) {
     $120 = HEAP32[$$05399$i + 4 >> 2] | 0;
     if (($120 | 0) != ($43 | 0)) {
      if ($120 >>> 0 < $45 >>> 0) $124 = $120; else $124 = ($120 >>> 0) % ($45 >>> 0) | 0;
      if (($124 | 0) != ($55 | 0)) {
       $$054$i = $55;
       break L14;
      }
     }
     $126 = $$05399$i + 8 | 0;
     $128 = HEAP8[$126 + 11 >> 0] | 0;
     $129 = $128 << 24 >> 24 < 0;
     $132 = $128 & 255;
     do if ((($129 ? HEAP32[$$05399$i + 12 >> 2] | 0 : $132) | 0) == ($10 | 0)) {
      $135 = HEAP32[$126 >> 2] | 0;
      if ($129) if (!(_memcmp($135, $9, $10) | 0)) {
       $$1$i = $$05399$i;
       label = 68;
       break L63;
      } else break;
      if ((HEAP8[$9 >> 0] | 0) == ($135 & 255) << 24 >> 24) {
       $$02026$i$i4$i$i = $126;
       $$02125$i$i5$i$i = $132;
       $$027$i$i3$i$i = $9;
       do {
        $$02125$i$i5$i$i = $$02125$i$i5$i$i + -1 | 0;
        $$02026$i$i4$i$i = $$02026$i$i4$i$i + 1 | 0;
        if (!$$02125$i$i5$i$i) {
         $$1$i = $$05399$i;
         label = 68;
         break L63;
        }
        $$027$i$i3$i$i = $$027$i$i3$i$i + 1 | 0;
       } while ((HEAP8[$$02026$i$i4$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i >> 0] | 0));
      }
     } while (0);
     $$05399$i = HEAP32[$$05399$i >> 2] | 0;
     if (!$$05399$i) {
      $$054$i = $55;
      break L14;
     }
    }
    if ((label | 0) == 68) {
     $203 = $$1$i + 20 | 0;
     return $203 | 0;
    }
   }
  }
 } while (0);
 $148 = __Znwm(28) | 0;
 $149 = $148 + 8 | 0;
 HEAP32[$149 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$149 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$149 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$148 + 20 >> 2] = 0;
 HEAP32[$148 + 24 >> 2] = 0;
 HEAP32[$148 + 4 >> 2] = $43;
 HEAP32[$148 >> 2] = 0;
 $153 = $0 + 12 | 0;
 $156 = +(((HEAP32[$153 >> 2] | 0) + 1 | 0) >>> 0);
 $159 = +HEAPF32[$0 + 16 >> 2];
 do if ($46 | $159 * +($45 >>> 0) < $156) {
  $169 = $45 << 1 | ($45 >>> 0 < 3 | ($45 + -1 & $45 | 0) != 0) & 1;
  $172 = ~~+Math_ceil(+($156 / $159)) >>> 0;
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE6rehashEm($0, $169 >>> 0 < $172 >>> 0 ? $172 : $169);
  $174 = HEAP32[$44 >> 2] | 0;
  $175 = $174 + -1 | 0;
  if (!($175 & $174)) {
   $$0$i = $174;
   $$155$i = $175 & $43;
   break;
  }
  if ($43 >>> 0 < $174 >>> 0) {
   $$0$i = $174;
   $$155$i = $43;
  } else {
   $$0$i = $174;
   $$155$i = ($43 >>> 0) % ($174 >>> 0) | 0;
  }
 } else {
  $$0$i = $45;
  $$155$i = $$054$i;
 } while (0);
 $182 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0;
 $183 = HEAP32[$182 >> 2] | 0;
 if (!$183) {
  $185 = $0 + 8 | 0;
  HEAP32[$148 >> 2] = HEAP32[$185 >> 2];
  HEAP32[$185 >> 2] = $148;
  HEAP32[$182 >> 2] = $185;
  $187 = HEAP32[$148 >> 2] | 0;
  if ($187 | 0) {
   $190 = HEAP32[$187 + 4 >> 2] | 0;
   $191 = $$0$i + -1 | 0;
   if (!($191 & $$0$i)) $199 = $190 & $191; else if ($190 >>> 0 < $$0$i >>> 0) $199 = $190; else $199 = ($190 >>> 0) % ($$0$i >>> 0) | 0;
   $$sink = (HEAP32[$0 >> 2] | 0) + ($199 << 2) | 0;
   label = 66;
  }
 } else {
  HEAP32[$148 >> 2] = HEAP32[$183 >> 2];
  $$sink = $183;
  label = 66;
 }
 if ((label | 0) == 66) HEAP32[$$sink >> 2] = $148;
 HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
 $$1$i = $148;
 $203 = $$1$i + 20 | 0;
 return $203 | 0;
}

function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$0$i$i$i67 = 0, $$0$i$i$i71 = 0, $$pre$phi$i$i65Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $103 = 0, $11 = 0, $118 = 0, $12 = 0, $121 = 0, $129 = 0, $132 = 0, $16 = 0, $21 = 0, $24 = 0, $31 = 0, $36 = 0, $39 = 0, $54 = 0, $57 = 0, $65 = 0, $68 = 0, $76 = 0, $80 = 0, $85 = 0, $88 = 0, $95 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 32936) | 0;
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 127]($10, $12);
   $16 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $16;
   HEAP8[$3 + 1 >> 0] = $16 >> 8;
   HEAP8[$3 + 2 >> 0] = $16 >> 16;
   HEAP8[$3 + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($11, $12);
   $21 = $8 + 8 + 3 | 0;
   if ((HEAP8[$21 >> 0] | 0) < 0) {
    $24 = HEAP32[$8 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($24, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
    HEAP8[$21 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8, 0);
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 40 >> 2] & 127]($10, $12);
   $31 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $31;
   HEAP8[$3 + 1 >> 0] = $31 >> 8;
   HEAP8[$3 + 2 >> 0] = $31 >> 16;
   HEAP8[$3 + 3 >> 0] = $31 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($11, $12);
   $36 = $8 + 8 + 3 | 0;
   if ((HEAP8[$36 >> 0] | 0) < 0) {
    $39 = HEAP32[$8 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($39, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
    HEAP8[$36 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8, 0);
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i47 = 0;
   while (1) {
    if (($$0$i$i$i47 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i47 << 2) >> 2] = 0;
    $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  }
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP32[$5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 127]($11, $12);
  $54 = $6 + 11 | 0;
  if ((HEAP8[$54 >> 0] | 0) < 0) {
   $57 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($57, $10);
   HEAP32[$6 + 4 >> 2] = 0;
   $$pre$phi$i$iZ2D = $6;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$54 >> 0] = 0;
   $$pre$phi$i$iZ2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6, 0);
  HEAP32[$$pre$phi$i$iZ2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$iZ2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$iZ2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i50 = 0;
  while (1) {
   if (($$0$i$i$i50 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i50 << 2) >> 2] = 0;
   $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 127]($11, $12);
  $65 = $7 + 8 + 3 | 0;
  if ((HEAP8[$65 >> 0] | 0) < 0) {
   $68 = HEAP32[$7 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($68, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10);
   HEAP8[$65 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($7, 0);
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i53 = 0;
  while (1) {
   if (($$0$i$i$i53 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i53 << 2) >> 2] = 0;
   $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $76 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 32928) | 0;
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$76 >> 2] | 0) + 44 >> 2] & 127]($10, $76);
   $80 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $80;
   HEAP8[$3 + 1 >> 0] = $80 >> 8;
   HEAP8[$3 + 2 >> 0] = $80 >> 16;
   HEAP8[$3 + 3 >> 0] = $80 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$76 >> 2] | 0) + 32 >> 2] & 127]($11, $76);
   $85 = $8 + 8 + 3 | 0;
   if ((HEAP8[$85 >> 0] | 0) < 0) {
    $88 = HEAP32[$8 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($88, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
    HEAP8[$85 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8, 0);
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i57 = 0;
   while (1) {
    if (($$0$i$i$i57 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i57 << 2) >> 2] = 0;
    $$0$i$i$i57 = $$0$i$i$i57 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$76 >> 2] | 0) + 40 >> 2] & 127]($10, $76);
   $95 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $95;
   HEAP8[$3 + 1 >> 0] = $95 >> 8;
   HEAP8[$3 + 2 >> 0] = $95 >> 16;
   HEAP8[$3 + 3 >> 0] = $95 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$76 >> 2] | 0) + 28 >> 2] & 127]($11, $76);
   $100 = $8 + 8 + 3 | 0;
   if ((HEAP8[$100 >> 0] | 0) < 0) {
    $103 = HEAP32[$8 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($103, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
    HEAP8[$100 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8, 0);
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i61 = 0;
   while (1) {
    if (($$0$i$i$i61 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i61 << 2) >> 2] = 0;
    $$0$i$i$i61 = $$0$i$i$i61 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  }
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 12 >> 2] & 127]($76) | 0;
  HEAP32[$5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 16 >> 2] & 127]($76) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$76 >> 2] | 0) + 20 >> 2] & 127]($11, $76);
  $118 = $6 + 11 | 0;
  if ((HEAP8[$118 >> 0] | 0) < 0) {
   $121 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($121, $10);
   HEAP32[$6 + 4 >> 2] = 0;
   $$pre$phi$i$i65Z2D = $6;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$118 >> 0] = 0;
   $$pre$phi$i$i65Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6, 0);
  HEAP32[$$pre$phi$i$i65Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i65Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i65Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i67 = 0;
  while (1) {
   if (($$0$i$i$i67 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i67 << 2) >> 2] = 0;
   $$0$i$i$i67 = $$0$i$i$i67 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$76 >> 2] | 0) + 24 >> 2] & 127]($11, $76);
  $129 = $7 + 8 + 3 | 0;
  if ((HEAP8[$129 >> 0] | 0) < 0) {
   $132 = HEAP32[$7 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($132, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10);
   HEAP8[$129 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($7, 0);
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i71 = 0;
  while (1) {
   if (($$0$i$i$i71 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i71 << 2) >> 2] = 0;
   $$0$i$i$i71 = $$0$i$i$i71 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] & 127]($76) | 0;
 }
 HEAP32[$9 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEEixERSG_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$05398$i = 0, $$05399$i = 0, $$05399$i$us = 0, $$05399$us$i = 0, $$05399$us$i$us = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$sink = 0, $10 = 0, $103 = 0, $107 = 0, $111 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $132 = 0, $135 = 0, $148 = 0, $153 = 0, $156 = 0.0, $159 = 0.0, $169 = 0, $172 = 0, $174 = 0, $175 = 0, $182 = 0, $183 = 0, $185 = 0, $187 = 0, $190 = 0, $191 = 0, $199 = 0, $203 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $67 = 0, $76 = 0, $80 = 0, $82 = 0, $83 = 0, $86 = 0, $89 = 0, $9 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0;
 $4 = $3 << 24 >> 24 < 0;
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1;
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255;
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i$i = $9;
  $$03738$i$i$i$i$i = $10;
  $$040$i$i$i$i$i = $10;
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0;
   $$03738$i$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i, 1540483477) | 0);
   $$040$i$i$i$i$i = $$040$i$i$i$i$i + -4 | 0;
   if ($$040$i$i$i$i$i >>> 0 <= 3) break; else $$03639$i$i$i$i$i = $$03639$i$i$i$i$i + 4 | 0;
  }
  $21 = $10 + -4 | 0;
  $22 = $21 & -4;
  $$0$lcssa$i$i$i$i$i = $21 - $22 | 0;
  $$036$lcssa$i$i$i$i$i = $9 + ($22 + 4) | 0;
  $$037$lcssa$i$i$i$i$i = $$03738$i$i$i$i$i;
 } else {
  $$0$lcssa$i$i$i$i$i = $10;
  $$036$lcssa$i$i$i$i$i = $9;
  $$037$lcssa$i$i$i$i$i = $10;
 }
 switch ($$0$lcssa$i$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i;
   label = 7;
   break;
  }
 case 2:
  {
   $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
   label = 7;
   break;
  }
 case 1:
  {
   $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
   label = 8;
   break;
  }
 default:
  $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
 }
 if ((label | 0) == 7) {
  $$2$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i;
  label = 8;
 }
 if ((label | 0) == 8) $$3$i$i$i$i$i = Math_imul($$2$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i >> 0], 1540483477) | 0;
 $41 = Math_imul($$3$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i, 1540483477) | 0;
 $43 = $41 >>> 15 ^ $41;
 $44 = $0 + 4 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 $46 = ($45 | 0) == 0;
 L14 : do if ($46) $$054$i = 0; else {
  $47 = $45 + -1 | 0;
  $49 = ($47 & $45 | 0) == 0;
  if ($49) $55 = $43 & $47; else if ($43 >>> 0 < $45 >>> 0) $55 = $43; else $55 = ($43 >>> 0) % ($45 >>> 0) | 0;
  $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0;
  if (!$56) $$054$i = $55; else {
   $$05398$i = HEAP32[$56 >> 2] | 0;
   if (!$$05398$i) $$054$i = $55; else {
    $59 = ($10 | 0) == 0;
    if ($49) {
     if ($59) {
      $$05399$us$i$us = $$05398$i;
      while (1) {
       $61 = HEAP32[$$05399$us$i$us + 4 >> 2] | 0;
       if (!(($61 | 0) == ($43 | 0) | ($61 & $47 | 0) == ($55 | 0))) {
        $$054$i = $55;
        break L14;
       }
       $67 = HEAP8[$$05399$us$i$us + 8 + 11 >> 0] | 0;
       if (!(($67 << 24 >> 24 < 0 ? HEAP32[$$05399$us$i$us + 12 >> 2] | 0 : $67 & 255) | 0)) {
        $$1$i = $$05399$us$i$us;
        break;
       }
       $$05399$us$i$us = HEAP32[$$05399$us$i$us >> 2] | 0;
       if (!$$05399$us$i$us) {
        $$054$i = $55;
        break L14;
       }
      }
      $203 = $$1$i + 20 | 0;
      return $203 | 0;
     }
     $$05399$us$i = $$05398$i;
     L33 : while (1) {
      $76 = HEAP32[$$05399$us$i + 4 >> 2] | 0;
      if (!(($76 | 0) == ($43 | 0) | ($76 & $47 | 0) == ($55 | 0))) {
       $$054$i = $55;
       break L14;
      }
      $80 = $$05399$us$i + 8 | 0;
      $82 = HEAP8[$80 + 11 >> 0] | 0;
      $83 = $82 << 24 >> 24 < 0;
      $86 = $82 & 255;
      do if ((($83 ? HEAP32[$$05399$us$i + 12 >> 2] | 0 : $86) | 0) == ($10 | 0)) {
       $89 = HEAP32[$80 >> 2] | 0;
       if ($83) if (!(_memcmp($89, $9, $10) | 0)) {
        $$1$i = $$05399$us$i;
        label = 68;
        break L33;
       } else break;
       if ((HEAP8[$9 >> 0] | 0) == ($89 & 255) << 24 >> 24) {
        $$02026$i$i4$i$us$i = $80;
        $$02125$i$i5$i$us$i = $86;
        $$027$i$i3$i$us$i = $9;
        do {
         $$02125$i$i5$i$us$i = $$02125$i$i5$i$us$i + -1 | 0;
         $$02026$i$i4$i$us$i = $$02026$i$i4$i$us$i + 1 | 0;
         if (!$$02125$i$i5$i$us$i) {
          $$1$i = $$05399$us$i;
          label = 68;
          break L33;
         }
         $$027$i$i3$i$us$i = $$027$i$i3$i$us$i + 1 | 0;
        } while ((HEAP8[$$02026$i$i4$i$us$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i >> 0] | 0));
       }
      } while (0);
      $$05399$us$i = HEAP32[$$05399$us$i >> 2] | 0;
      if (!$$05399$us$i) {
       $$054$i = $55;
       break L14;
      }
     }
     if ((label | 0) == 68) {
      $203 = $$1$i + 20 | 0;
      return $203 | 0;
     }
    }
    if ($59) {
     $$05399$i$us = $$05398$i;
     while (1) {
      $103 = HEAP32[$$05399$i$us + 4 >> 2] | 0;
      if (($103 | 0) != ($43 | 0)) {
       if ($103 >>> 0 < $45 >>> 0) $107 = $103; else $107 = ($103 >>> 0) % ($45 >>> 0) | 0;
       if (($107 | 0) != ($55 | 0)) {
        $$054$i = $55;
        break L14;
       }
      }
      $111 = HEAP8[$$05399$i$us + 8 + 11 >> 0] | 0;
      if (!(($111 << 24 >> 24 < 0 ? HEAP32[$$05399$i$us + 12 >> 2] | 0 : $111 & 255) | 0)) {
       $$1$i = $$05399$i$us;
       break;
      }
      $$05399$i$us = HEAP32[$$05399$i$us >> 2] | 0;
      if (!$$05399$i$us) {
       $$054$i = $55;
       break L14;
      }
     }
     $203 = $$1$i + 20 | 0;
     return $203 | 0;
    }
    $$05399$i = $$05398$i;
    L63 : while (1) {
     $120 = HEAP32[$$05399$i + 4 >> 2] | 0;
     if (($120 | 0) != ($43 | 0)) {
      if ($120 >>> 0 < $45 >>> 0) $124 = $120; else $124 = ($120 >>> 0) % ($45 >>> 0) | 0;
      if (($124 | 0) != ($55 | 0)) {
       $$054$i = $55;
       break L14;
      }
     }
     $126 = $$05399$i + 8 | 0;
     $128 = HEAP8[$126 + 11 >> 0] | 0;
     $129 = $128 << 24 >> 24 < 0;
     $132 = $128 & 255;
     do if ((($129 ? HEAP32[$$05399$i + 12 >> 2] | 0 : $132) | 0) == ($10 | 0)) {
      $135 = HEAP32[$126 >> 2] | 0;
      if ($129) if (!(_memcmp($135, $9, $10) | 0)) {
       $$1$i = $$05399$i;
       label = 68;
       break L63;
      } else break;
      if ((HEAP8[$9 >> 0] | 0) == ($135 & 255) << 24 >> 24) {
       $$02026$i$i4$i$i = $126;
       $$02125$i$i5$i$i = $132;
       $$027$i$i3$i$i = $9;
       do {
        $$02125$i$i5$i$i = $$02125$i$i5$i$i + -1 | 0;
        $$02026$i$i4$i$i = $$02026$i$i4$i$i + 1 | 0;
        if (!$$02125$i$i5$i$i) {
         $$1$i = $$05399$i;
         label = 68;
         break L63;
        }
        $$027$i$i3$i$i = $$027$i$i3$i$i + 1 | 0;
       } while ((HEAP8[$$02026$i$i4$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i >> 0] | 0));
      }
     } while (0);
     $$05399$i = HEAP32[$$05399$i >> 2] | 0;
     if (!$$05399$i) {
      $$054$i = $55;
      break L14;
     }
    }
    if ((label | 0) == 68) {
     $203 = $$1$i + 20 | 0;
     return $203 | 0;
    }
   }
  }
 } while (0);
 $148 = __Znwm(28) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($148 + 8 | 0, $1);
 HEAP32[$148 + 20 >> 2] = 0;
 HEAP32[$148 + 24 >> 2] = 0;
 HEAP32[$148 + 4 >> 2] = $43;
 HEAP32[$148 >> 2] = 0;
 $153 = $0 + 12 | 0;
 $156 = +(((HEAP32[$153 >> 2] | 0) + 1 | 0) >>> 0);
 $159 = +HEAPF32[$0 + 16 >> 2];
 do if ($46 | $159 * +($45 >>> 0) < $156) {
  $169 = $45 << 1 | ($45 >>> 0 < 3 | ($45 + -1 & $45 | 0) != 0) & 1;
  $172 = ~~+Math_ceil(+($156 / $159)) >>> 0;
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE6rehashEm($0, $169 >>> 0 < $172 >>> 0 ? $172 : $169);
  $174 = HEAP32[$44 >> 2] | 0;
  $175 = $174 + -1 | 0;
  if (!($175 & $174)) {
   $$0$i = $174;
   $$155$i = $175 & $43;
   break;
  }
  if ($43 >>> 0 < $174 >>> 0) {
   $$0$i = $174;
   $$155$i = $43;
  } else {
   $$0$i = $174;
   $$155$i = ($43 >>> 0) % ($174 >>> 0) | 0;
  }
 } else {
  $$0$i = $45;
  $$155$i = $$054$i;
 } while (0);
 $182 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0;
 $183 = HEAP32[$182 >> 2] | 0;
 if (!$183) {
  $185 = $0 + 8 | 0;
  HEAP32[$148 >> 2] = HEAP32[$185 >> 2];
  HEAP32[$185 >> 2] = $148;
  HEAP32[$182 >> 2] = $185;
  $187 = HEAP32[$148 >> 2] | 0;
  if ($187 | 0) {
   $190 = HEAP32[$187 + 4 >> 2] | 0;
   $191 = $$0$i + -1 | 0;
   if (!($191 & $$0$i)) $199 = $190 & $191; else if ($190 >>> 0 < $$0$i >>> 0) $199 = $190; else $199 = ($190 >>> 0) % ($$0$i >>> 0) | 0;
   $$sink = (HEAP32[$0 >> 2] | 0) + ($199 << 2) | 0;
   label = 66;
  }
 } else {
  HEAP32[$148 >> 2] = HEAP32[$183 >> 2];
  $$sink = $183;
  label = 66;
 }
 if ((label | 0) == 66) HEAP32[$$sink >> 2] = $148;
 HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
 $$1$i = $148;
 $203 = $$1$i + 20 | 0;
 return $203 | 0;
}

function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$05397$i = 0, $$05398$i = 0, $$05398$i$us = 0, $$05398$us$i = 0, $$05398$us$i$us = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$sink = 0, $10 = 0, $103 = 0, $107 = 0, $111 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $132 = 0, $135 = 0, $148 = 0, $152 = 0, $155 = 0.0, $158 = 0.0, $168 = 0, $171 = 0, $173 = 0, $174 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $189 = 0, $190 = 0, $198 = 0, $202 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $67 = 0, $76 = 0, $80 = 0, $82 = 0, $83 = 0, $86 = 0, $89 = 0, $9 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0;
 $4 = $3 << 24 >> 24 < 0;
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1;
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255;
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i$i = $9;
  $$03738$i$i$i$i$i = $10;
  $$040$i$i$i$i$i = $10;
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0;
   $$03738$i$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i, 1540483477) | 0);
   $$040$i$i$i$i$i = $$040$i$i$i$i$i + -4 | 0;
   if ($$040$i$i$i$i$i >>> 0 <= 3) break; else $$03639$i$i$i$i$i = $$03639$i$i$i$i$i + 4 | 0;
  }
  $21 = $10 + -4 | 0;
  $22 = $21 & -4;
  $$0$lcssa$i$i$i$i$i = $21 - $22 | 0;
  $$036$lcssa$i$i$i$i$i = $9 + ($22 + 4) | 0;
  $$037$lcssa$i$i$i$i$i = $$03738$i$i$i$i$i;
 } else {
  $$0$lcssa$i$i$i$i$i = $10;
  $$036$lcssa$i$i$i$i$i = $9;
  $$037$lcssa$i$i$i$i$i = $10;
 }
 switch ($$0$lcssa$i$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i;
   label = 7;
   break;
  }
 case 2:
  {
   $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
   label = 7;
   break;
  }
 case 1:
  {
   $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
   label = 8;
   break;
  }
 default:
  $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
 }
 if ((label | 0) == 7) {
  $$2$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i;
  label = 8;
 }
 if ((label | 0) == 8) $$3$i$i$i$i$i = Math_imul($$2$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i >> 0], 1540483477) | 0;
 $41 = Math_imul($$3$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i, 1540483477) | 0;
 $43 = $41 >>> 15 ^ $41;
 $44 = $0 + 4 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 $46 = ($45 | 0) == 0;
 L14 : do if ($46) $$054$i = 0; else {
  $47 = $45 + -1 | 0;
  $49 = ($47 & $45 | 0) == 0;
  if ($49) $55 = $43 & $47; else if ($43 >>> 0 < $45 >>> 0) $55 = $43; else $55 = ($43 >>> 0) % ($45 >>> 0) | 0;
  $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0;
  if (!$56) $$054$i = $55; else {
   $$05397$i = HEAP32[$56 >> 2] | 0;
   if (!$$05397$i) $$054$i = $55; else {
    $59 = ($10 | 0) == 0;
    if ($49) {
     if ($59) {
      $$05398$us$i$us = $$05397$i;
      while (1) {
       $61 = HEAP32[$$05398$us$i$us + 4 >> 2] | 0;
       if (!(($61 | 0) == ($43 | 0) | ($61 & $47 | 0) == ($55 | 0))) {
        $$054$i = $55;
        break L14;
       }
       $67 = HEAP8[$$05398$us$i$us + 8 + 11 >> 0] | 0;
       if (!(($67 << 24 >> 24 < 0 ? HEAP32[$$05398$us$i$us + 12 >> 2] | 0 : $67 & 255) | 0)) {
        $$1$i = $$05398$us$i$us;
        break;
       }
       $$05398$us$i$us = HEAP32[$$05398$us$i$us >> 2] | 0;
       if (!$$05398$us$i$us) {
        $$054$i = $55;
        break L14;
       }
      }
      $202 = $$1$i + 20 | 0;
      return $202 | 0;
     }
     $$05398$us$i = $$05397$i;
     L33 : while (1) {
      $76 = HEAP32[$$05398$us$i + 4 >> 2] | 0;
      if (!(($76 | 0) == ($43 | 0) | ($76 & $47 | 0) == ($55 | 0))) {
       $$054$i = $55;
       break L14;
      }
      $80 = $$05398$us$i + 8 | 0;
      $82 = HEAP8[$80 + 11 >> 0] | 0;
      $83 = $82 << 24 >> 24 < 0;
      $86 = $82 & 255;
      do if ((($83 ? HEAP32[$$05398$us$i + 12 >> 2] | 0 : $86) | 0) == ($10 | 0)) {
       $89 = HEAP32[$80 >> 2] | 0;
       if ($83) if (!(_memcmp($89, $9, $10) | 0)) {
        $$1$i = $$05398$us$i;
        label = 68;
        break L33;
       } else break;
       if ((HEAP8[$9 >> 0] | 0) == ($89 & 255) << 24 >> 24) {
        $$02026$i$i4$i$us$i = $80;
        $$02125$i$i5$i$us$i = $86;
        $$027$i$i3$i$us$i = $9;
        do {
         $$02125$i$i5$i$us$i = $$02125$i$i5$i$us$i + -1 | 0;
         $$02026$i$i4$i$us$i = $$02026$i$i4$i$us$i + 1 | 0;
         if (!$$02125$i$i5$i$us$i) {
          $$1$i = $$05398$us$i;
          label = 68;
          break L33;
         }
         $$027$i$i3$i$us$i = $$027$i$i3$i$us$i + 1 | 0;
        } while ((HEAP8[$$02026$i$i4$i$us$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i >> 0] | 0));
       }
      } while (0);
      $$05398$us$i = HEAP32[$$05398$us$i >> 2] | 0;
      if (!$$05398$us$i) {
       $$054$i = $55;
       break L14;
      }
     }
     if ((label | 0) == 68) {
      $202 = $$1$i + 20 | 0;
      return $202 | 0;
     }
    }
    if ($59) {
     $$05398$i$us = $$05397$i;
     while (1) {
      $103 = HEAP32[$$05398$i$us + 4 >> 2] | 0;
      if (($103 | 0) != ($43 | 0)) {
       if ($103 >>> 0 < $45 >>> 0) $107 = $103; else $107 = ($103 >>> 0) % ($45 >>> 0) | 0;
       if (($107 | 0) != ($55 | 0)) {
        $$054$i = $55;
        break L14;
       }
      }
      $111 = HEAP8[$$05398$i$us + 8 + 11 >> 0] | 0;
      if (!(($111 << 24 >> 24 < 0 ? HEAP32[$$05398$i$us + 12 >> 2] | 0 : $111 & 255) | 0)) {
       $$1$i = $$05398$i$us;
       break;
      }
      $$05398$i$us = HEAP32[$$05398$i$us >> 2] | 0;
      if (!$$05398$i$us) {
       $$054$i = $55;
       break L14;
      }
     }
     $202 = $$1$i + 20 | 0;
     return $202 | 0;
    }
    $$05398$i = $$05397$i;
    L63 : while (1) {
     $120 = HEAP32[$$05398$i + 4 >> 2] | 0;
     if (($120 | 0) != ($43 | 0)) {
      if ($120 >>> 0 < $45 >>> 0) $124 = $120; else $124 = ($120 >>> 0) % ($45 >>> 0) | 0;
      if (($124 | 0) != ($55 | 0)) {
       $$054$i = $55;
       break L14;
      }
     }
     $126 = $$05398$i + 8 | 0;
     $128 = HEAP8[$126 + 11 >> 0] | 0;
     $129 = $128 << 24 >> 24 < 0;
     $132 = $128 & 255;
     do if ((($129 ? HEAP32[$$05398$i + 12 >> 2] | 0 : $132) | 0) == ($10 | 0)) {
      $135 = HEAP32[$126 >> 2] | 0;
      if ($129) if (!(_memcmp($135, $9, $10) | 0)) {
       $$1$i = $$05398$i;
       label = 68;
       break L63;
      } else break;
      if ((HEAP8[$9 >> 0] | 0) == ($135 & 255) << 24 >> 24) {
       $$02026$i$i4$i$i = $126;
       $$02125$i$i5$i$i = $132;
       $$027$i$i3$i$i = $9;
       do {
        $$02125$i$i5$i$i = $$02125$i$i5$i$i + -1 | 0;
        $$02026$i$i4$i$i = $$02026$i$i4$i$i + 1 | 0;
        if (!$$02125$i$i5$i$i) {
         $$1$i = $$05398$i;
         label = 68;
         break L63;
        }
        $$027$i$i3$i$i = $$027$i$i3$i$i + 1 | 0;
       } while ((HEAP8[$$02026$i$i4$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i >> 0] | 0));
      }
     } while (0);
     $$05398$i = HEAP32[$$05398$i >> 2] | 0;
     if (!$$05398$i) {
      $$054$i = $55;
      break L14;
     }
    }
    if ((label | 0) == 68) {
     $202 = $$1$i + 20 | 0;
     return $202 | 0;
    }
   }
  }
 } while (0);
 $148 = __Znwm(24) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($148 + 8 | 0, $1);
 HEAP32[$148 + 20 >> 2] = 0;
 HEAP32[$148 + 4 >> 2] = $43;
 HEAP32[$148 >> 2] = 0;
 $152 = $0 + 12 | 0;
 $155 = +(((HEAP32[$152 >> 2] | 0) + 1 | 0) >>> 0);
 $158 = +HEAPF32[$0 + 16 >> 2];
 do if ($46 | $158 * +($45 >>> 0) < $155) {
  $168 = $45 << 1 | ($45 >>> 0 < 3 | ($45 + -1 & $45 | 0) != 0) & 1;
  $171 = ~~+Math_ceil(+($155 / $158)) >>> 0;
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm($0, $168 >>> 0 < $171 >>> 0 ? $171 : $168);
  $173 = HEAP32[$44 >> 2] | 0;
  $174 = $173 + -1 | 0;
  if (!($174 & $173)) {
   $$0$i = $173;
   $$155$i = $174 & $43;
   break;
  }
  if ($43 >>> 0 < $173 >>> 0) {
   $$0$i = $173;
   $$155$i = $43;
  } else {
   $$0$i = $173;
   $$155$i = ($43 >>> 0) % ($173 >>> 0) | 0;
  }
 } else {
  $$0$i = $45;
  $$155$i = $$054$i;
 } while (0);
 $181 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0;
 $182 = HEAP32[$181 >> 2] | 0;
 if (!$182) {
  $184 = $0 + 8 | 0;
  HEAP32[$148 >> 2] = HEAP32[$184 >> 2];
  HEAP32[$184 >> 2] = $148;
  HEAP32[$181 >> 2] = $184;
  $186 = HEAP32[$148 >> 2] | 0;
  if ($186 | 0) {
   $189 = HEAP32[$186 + 4 >> 2] | 0;
   $190 = $$0$i + -1 | 0;
   if (!($190 & $$0$i)) $198 = $189 & $190; else if ($189 >>> 0 < $$0$i >>> 0) $198 = $189; else $198 = ($189 >>> 0) % ($$0$i >>> 0) | 0;
   $$sink = (HEAP32[$0 >> 2] | 0) + ($198 << 2) | 0;
   label = 66;
  }
 } else {
  HEAP32[$148 >> 2] = HEAP32[$182 >> 2];
  $$sink = $182;
  label = 66;
 }
 if ((label | 0) == 66) HEAP32[$$sink >> 2] = $148;
 HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
 $$1$i = $148;
 $202 = $$1$i + 20 | 0;
 return $202 | 0;
}

function _mbsrtowcs($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0105132 = 0, $$0111131 = 0, $$097 = 0, $$098$lcssa = 0, $$098133 = 0, $$10 = 0, $$1106$ph = 0, $$1106147 = 0, $$1112 = 0, $$1112$ph = 0, $$11122124 = 0, $$11182 = 0, $$11183 = 0, $$199 = 0, $$199$ph = 0, $$2 = 0, $$2100154 = 0, $$2107135 = 0, $$2113153 = 0, $$3101 = 0, $$3108 = 0, $$3108$ph = 0, $$3108176 = 0, $$3114 = 0, $$4 = 0, $$4102 = 0, $$4109 = 0, $$4115 = 0, $$5 = 0, $$5103 = 0, $$5110 = 0, $$5110180 = 0, $$5110181 = 0, $$5116$ph = 0, $$5116146 = 0, $$6 = 0, $$6104$lcssa = 0, $$6104$ph = 0, $$6104148 = 0, $$6117134 = 0, $$7118 = 0, $$7118$ph = 0, $$7118175 = 0, $$7136 = 0, $$8 = 0, $$8$ph = 0, $$8119 = 0, $$8177 = 0, $$9 = 0, $$9$sink = 0, $$9120 = 0, $$9120179 = 0, $$pre = 0, $$pre$phi173Z2D = 0, $$pre$phi174Z2D = 0, $$pre$phiZ2D = 0, $$pre171 = 0, $105 = 0, $108 = 0, $109 = 0, $113 = 0, $117 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $153 = 0, $17 = 0, $19 = 0, $23 = 0, $26 = 0, $33 = 0, $38 = 0, $4 = 0, $41 = 0, $47 = 0, $48 = 0, $53 = 0, $6 = 0, $60 = 0, $66 = 0, $72 = 0, $82 = 0, $83 = 0, $89 = 0, label = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 if (!$3) label = 5; else {
  $6 = HEAP32[$3 >> 2] | 0;
  if (!$6) label = 5; else if (!$0) {
   $$2 = $6;
   $$4102 = $4;
   $$4115 = $2;
   label = 26;
  } else {
   HEAP32[$3 >> 2] = 0;
   $$4 = $6;
   $$4109 = $0;
   $$8119 = $2;
   $$9 = $4;
   label = 48;
  }
 }
 L5 : do if ((label | 0) == 5) {
  $14 = ($0 | 0) != 0;
  if (HEAP32[HEAP32[(___pthread_self_434() | 0) + 188 >> 2] >> 2] | 0) if ($14) {
   $$1106$ph = $0;
   $$5116$ph = $2;
   $$6104$ph = $4;
   label = 33;
   break;
  } else {
   $$1112$ph = $2;
   $$199$ph = $4;
   label = 15;
   break;
  }
  if (!$14) {
   $$097 = _strlen($4) | 0;
   label = 63;
   break;
  }
  L13 : do if (!$2) $$098$lcssa = $4; else {
   $$0105132 = $0;
   $$0111131 = $2;
   $$098133 = $4;
   while (1) {
    $17 = HEAP8[$$098133 >> 0] | 0;
    if (!($17 << 24 >> 24)) break;
    $19 = $$098133 + 1 | 0;
    HEAP32[$$0105132 >> 2] = $17 << 24 >> 24 & 57343;
    $23 = $$0111131 + -1 | 0;
    if (!$23) {
     $$098$lcssa = $19;
     break L13;
    } else {
     $$0105132 = $$0105132 + 4 | 0;
     $$0111131 = $23;
     $$098133 = $19;
    }
   }
   HEAP32[$$0105132 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   $$097 = $2 - $$0111131 | 0;
   label = 63;
   break L5;
  } while (0);
  HEAP32[$1 >> 2] = $$098$lcssa;
  $$097 = $2;
  label = 63;
 } while (0);
 L20 : while (1) {
  L21 : do if ((label | 0) == 15) {
   label = 0;
   $$1112 = $$1112$ph;
   $$199 = $$199$ph;
   while (1) {
    $26 = HEAP8[$$199 >> 0] | 0;
    if ((($26 & 255) + -1 | 0) >>> 0 < 127) if (!($$199 & 3)) {
     $33 = HEAP32[$$199 >> 2] | 0;
     $38 = $33 & 255;
     if (!(($33 + -16843009 | $33) & -2139062144)) {
      $$2100154 = $$199;
      $$2113153 = $$1112;
      do {
       $$2100154 = $$2100154 + 4 | 0;
       $$2113153 = $$2113153 + -4 | 0;
       $41 = HEAP32[$$2100154 >> 2] | 0;
      } while (!(($41 + -16843009 | $41) & -2139062144 | 0));
      $$3101 = $$2100154;
      $$3114 = $$2113153;
      $48 = $41 & 255;
     } else {
      $$3101 = $$199;
      $$3114 = $$1112;
      $48 = $38;
     }
    } else {
     $$3101 = $$199;
     $$3114 = $$1112;
     $48 = $26;
    } else {
     $$3101 = $$199;
     $$3114 = $$1112;
     $48 = $26;
    }
    $47 = $48 & 255;
    if (($47 + -1 | 0) >>> 0 >= 127) break;
    $$1112 = $$3114 + -1 | 0;
    $$199 = $$3101 + 1 | 0;
   }
   $53 = $47 + -194 | 0;
   if ($53 >>> 0 > 50) {
    $$11182 = $$3101;
    $$5110180 = $0;
    $$9120179 = $$3114;
    label = 57;
   } else {
    $$2 = HEAP32[976 + ($53 << 2) >> 2] | 0;
    $$4102 = $$3101 + 1 | 0;
    $$4115 = $$3114;
    label = 26;
    continue L20;
   }
  } else if ((label | 0) == 26) {
   label = 0;
   $60 = (HEAPU8[$$4102 >> 0] | 0) >>> 3;
   if (($60 + -16 | $60 + ($$2 >> 26)) >>> 0 > 7) {
    $$5110 = $0;
    $$6 = $$2;
    $$9$sink = $$4102;
    $$9120 = $$4115;
    label = 56;
   } else {
    $66 = $$4102 + 1 | 0;
    if (!($$2 & 33554432)) $$5103 = $66; else {
     if ((HEAP8[$66 >> 0] & -64) << 24 >> 24 != -128) {
      $$5110 = $0;
      $$6 = $$2;
      $$9$sink = $$4102;
      $$9120 = $$4115;
      label = 56;
      break;
     }
     $72 = $$4102 + 2 | 0;
     if (!($$2 & 524288)) $$5103 = $72; else {
      if ((HEAP8[$72 >> 0] & -64) << 24 >> 24 != -128) {
       $$5110 = $0;
       $$6 = $$2;
       $$9$sink = $$4102;
       $$9120 = $$4115;
       label = 56;
       break;
      }
      $$5103 = $$4102 + 3 | 0;
     }
    }
    $$1112$ph = $$4115 + -1 | 0;
    $$199$ph = $$5103;
    label = 15;
    continue L20;
   }
  } else if ((label | 0) == 33) {
   label = 0;
   L23 : do if (!$$5116$ph) $$6104$lcssa = $$6104$ph; else {
    $$1106147 = $$1106$ph;
    $$5116146 = $$5116$ph;
    $$6104148 = $$6104$ph;
    while (1) {
     $82 = HEAPU8[$$6104148 >> 0] | 0;
     $83 = $82 + -1 | 0;
     if ($83 >>> 0 < 127) if (($$6104148 & 3 | 0) == 0 & $$5116146 >>> 0 > 4) {
      $$2107135 = $$1106147;
      $$6117134 = $$5116146;
      $$7136 = $$6104148;
      while (1) {
       $89 = HEAP32[$$7136 >> 2] | 0;
       if (($89 + -16843009 | $89) & -2139062144 | 0) {
        label = 42;
        break;
       }
       HEAP32[$$2107135 >> 2] = $89 & 255;
       HEAP32[$$2107135 + 4 >> 2] = HEAPU8[$$7136 + 1 >> 0];
       HEAP32[$$2107135 + 8 >> 2] = HEAPU8[$$7136 + 2 >> 0];
       $105 = $$7136 + 4 | 0;
       $108 = $$2107135 + 16 | 0;
       HEAP32[$$2107135 + 12 >> 2] = HEAPU8[$$7136 + 3 >> 0];
       $109 = $$6117134 + -4 | 0;
       if ($109 >>> 0 > 4) {
        $$2107135 = $108;
        $$6117134 = $109;
        $$7136 = $105;
       } else {
        label = 41;
        break;
       }
      }
      if ((label | 0) == 41) {
       label = 0;
       $$3108$ph = $108;
       $$7118$ph = $109;
       $$8$ph = $105;
       $$pre = HEAP8[$105 >> 0] | 0;
      } else if ((label | 0) == 42) {
       label = 0;
       $$3108$ph = $$2107135;
       $$7118$ph = $$6117134;
       $$8$ph = $$7136;
       $$pre = $89 & 255;
      }
      $$pre171 = $$pre & 255;
      $$3108 = $$3108$ph;
      $$7118 = $$7118$ph;
      $$8 = $$8$ph;
      $$pre$phi173Z2D = $$pre171 + -1 | 0;
      $$pre$phiZ2D = $$pre171;
      label = 44;
     } else {
      $$3108176 = $$1106147;
      $$7118175 = $$5116146;
      $$8177 = $$6104148;
      $$pre$phi174Z2D = $82;
     } else {
      $$3108 = $$1106147;
      $$7118 = $$5116146;
      $$8 = $$6104148;
      $$pre$phi173Z2D = $83;
      $$pre$phiZ2D = $82;
      label = 44;
     }
     if ((label | 0) == 44) {
      label = 0;
      if ($$pre$phi173Z2D >>> 0 < 127) {
       $$3108176 = $$3108;
       $$7118175 = $$7118;
       $$8177 = $$8;
       $$pre$phi174Z2D = $$pre$phiZ2D;
      } else break;
     }
     $113 = $$8177 + 1 | 0;
     HEAP32[$$3108176 >> 2] = $$pre$phi174Z2D;
     $$5116146 = $$7118175 + -1 | 0;
     if (!$$5116146) {
      $$6104$lcssa = $113;
      break L23;
     } else {
      $$1106147 = $$3108176 + 4 | 0;
      $$6104148 = $113;
     }
    }
    $117 = $$pre$phiZ2D + -194 | 0;
    if ($117 >>> 0 > 50) {
     $$11182 = $$8;
     $$5110180 = $$3108;
     $$9120179 = $$7118;
     label = 57;
     break L21;
    }
    $$4 = HEAP32[976 + ($117 << 2) >> 2] | 0;
    $$4109 = $$3108;
    $$8119 = $$7118;
    $$9 = $$8 + 1 | 0;
    label = 48;
    continue L20;
   } while (0);
   HEAP32[$1 >> 2] = $$6104$lcssa;
   $$097 = $2;
   label = 63;
   continue L20;
  } else if ((label | 0) == 48) {
   label = 0;
   $123 = HEAPU8[$$9 >> 0] | 0;
   $124 = $123 >>> 3;
   if (($124 + -16 | $124 + ($$4 >> 26)) >>> 0 > 7) {
    $$5110 = $$4109;
    $$6 = $$4;
    $$9$sink = $$9;
    $$9120 = $$8119;
    label = 56;
   } else {
    $131 = $$9 + 1 | 0;
    $133 = $123 + -128 | $$4 << 6;
    do if (($133 | 0) < 0) {
     $137 = (HEAPU8[$131 >> 0] | 0) + -128 | 0;
     if ($137 >>> 0 <= 63) {
      $140 = $$9 + 2 | 0;
      $141 = $137 | $133 << 6;
      if (($141 | 0) >= 0) {
       $$10 = $140;
       $$5 = $141;
       break;
      }
      $145 = (HEAPU8[$140 >> 0] | 0) + -128 | 0;
      if ($145 >>> 0 <= 63) {
       $$10 = $$9 + 3 | 0;
       $$5 = $145 | $141 << 6;
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 84;
     $$11122124 = $$9 + -1 | 0;
     break L21;
    } else {
     $$10 = $131;
     $$5 = $133;
    } while (0);
    HEAP32[$$4109 >> 2] = $$5;
    $$1106$ph = $$4109 + 4 | 0;
    $$5116$ph = $$8119 + -1 | 0;
    $$6104$ph = $$10;
    label = 33;
    continue L20;
   }
  } else if ((label | 0) == 63) {
   label = 0;
   return $$097 | 0;
  } while (0);
  if ((label | 0) == 56) {
   label = 0;
   $153 = $$9$sink + -1 | 0;
   if (!$$6) {
    $$11182 = $153;
    $$5110180 = $$5110;
    $$9120179 = $$9120;
    label = 57;
   } else {
    $$11183 = $153;
    $$5110181 = $$5110;
    label = 61;
   }
  }
  if ((label | 0) == 57) {
   label = 0;
   if (!(HEAP8[$$11182 >> 0] | 0)) {
    if ($$5110180 | 0) {
     HEAP32[$$5110180 >> 2] = 0;
     HEAP32[$1 >> 2] = 0;
    }
    $$097 = $2 - $$9120179 | 0;
    label = 63;
    continue;
   } else {
    $$11183 = $$11182;
    $$5110181 = $$5110180;
    label = 61;
   }
  }
  if ((label | 0) == 61) {
   label = 0;
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   if (!$$5110181) {
    $$097 = -1;
    label = 63;
    continue;
   } else $$11122124 = $$11183;
  }
  HEAP32[$1 >> 2] = $$11122124;
  $$097 = -1;
  label = 63;
 }
 return 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i53 = 0, $$0$i$i$i$i68 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i59 = 0, $$0$i$i2$i$i74 = 0, $$0$i$i65 = 0, $$0$pn = 0, $$049 = 0, $$050 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$sroa$047$0$copyload = 0, $10 = 0, $106 = 0, $109 = 0, $11 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $141 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $165 = 0, $17 = 0, $172 = 0, $181 = 0, $184 = 0, $19 = 0, $196 = 0, $199 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $31 = 0, $33 = 0, $35 = 0, $53 = 0, $59 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $8 = 0, $84 = 0, $9 = 0, $91 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy1, $3);
 $10 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1, 32688) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy1);
 HEAP32[$4 >> 2] = 0;
 $11 = $10 + 8 | 0;
 $$0 = $6;
 $13 = 0;
 L1 : while (1) {
  $15 = HEAP32[$1 >> 2] | 0;
  if (!(($$0 | 0) != ($7 | 0) & ($13 | 0) == 0)) {
   $181 = $15;
   break;
  }
  $17 = $15;
  if (!$15) {
   $150 = 0;
   $213 = 1;
   $70 = $17;
  } else {
   $19 = HEAP32[$15 + 12 >> 2] | 0;
   if (($19 | 0) == (HEAP32[$15 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 127]($15) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$19 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $150 = 0;
    $213 = 1;
    $70 = 0;
   } else {
    $150 = $15;
    $213 = 0;
    $70 = $17;
   }
  }
  $31 = HEAP32[$2 >> 2] | 0;
  $33 = $31;
  do if (!$31) {
   $$ph = $33;
   label = 15;
  } else {
   $35 = HEAP32[$31 + 12 >> 2] | 0;
   if (($35 | 0) == (HEAP32[$31 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 127]($31) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$35 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    $$ph = 0;
    label = 15;
    break;
   } else if ($213) {
    $214 = $31;
    $71 = $33;
    break;
   } else {
    label = 63;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($213) {
    label = 63;
    break;
   } else {
    $214 = 0;
    $71 = $$ph;
   }
  }
  L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 31]($10, HEAP8[$$0 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
   $53 = $$0 + 1 | 0;
   if (($53 | 0) == ($7 | 0)) {
    label = 63;
    break L1;
   }
   $59 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 31]($10, HEAP8[$53 >> 0] | 0, 0) | 0;
   switch ($59 << 24 >> 24) {
   case 48:
   case 69:
    {
     $60 = $$0 + 2 | 0;
     if (($60 | 0) == ($7 | 0)) {
      label = 63;
      break L1;
     }
     $$049 = $59;
     $$050 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 31]($10, HEAP8[$60 >> 0] | 0, 0) | 0;
     $74 = $53;
     break;
    }
   default:
    {
     $$049 = 0;
     $$050 = $59;
     $74 = $$0;
    }
   }
   $69 = HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$8 >> 2] = $70;
   HEAP32[$9 >> 2] = $71;
   HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiiiii[$69 & 15]($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $$050, $$049) | 0;
   $$4 = $74 + 2 | 0;
  } else {
   $75 = HEAP8[$$0 >> 0] | 0;
   if ($75 << 24 >> 24 > -1) {
    $78 = HEAP32[$11 >> 2] | 0;
    if (HEAP16[$78 + ($75 << 24 >> 24 << 1) >> 1] & 8192) {
     $$0$pn = $$0;
     while (1) {
      $$3 = $$0$pn + 1 | 0;
      if (($$3 | 0) == ($7 | 0)) {
       $$3$lcssa = $7;
       break;
      }
      $84 = HEAP8[$$3 >> 0] | 0;
      if ($84 << 24 >> 24 <= -1) {
       $$3$lcssa = $$3;
       break;
      }
      if (!(HEAP16[$78 + ($84 << 24 >> 24 << 1) >> 1] & 8192)) {
       $$3$lcssa = $$3;
       break;
      } else $$0$pn = $$3;
     }
     $106 = $214;
     $91 = $150;
     while (1) {
      if (!$91) {
       $122 = 0;
       $215 = 1;
      } else {
       $94 = HEAP32[$91 + 12 >> 2] | 0;
       if (($94 | 0) == (HEAP32[$91 + 16 >> 2] | 0)) $$0$i$i$i$i53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$91 >> 2] | 0) + 36 >> 2] & 127]($91) | 0; else $$0$i$i$i$i53 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$94 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i53, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        $122 = 0;
        $215 = 1;
       } else {
        $122 = $91;
        $215 = 0;
       }
      }
      do if (!$106) label = 42; else {
       $109 = HEAP32[$106 + 12 >> 2] | 0;
       if (($109 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) $$0$i$i2$i$i59 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 127]($106) | 0; else $$0$i$i2$i$i59 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$109 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i59, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$2 >> 2] = 0;
        label = 42;
        break;
       } else if ($215) {
        $216 = $106;
        break;
       } else {
        $$4 = $$3$lcssa;
        break L24;
       }
      } while (0);
      if ((label | 0) == 42) {
       label = 0;
       if ($215) {
        $$4 = $$3$lcssa;
        break L24;
       } else $216 = 0;
      }
      $121 = $122 + 12 | 0;
      $123 = HEAP32[$121 >> 2] | 0;
      $124 = $122 + 16 | 0;
      if (($123 | 0) == (HEAP32[$124 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 36 >> 2] & 127]($122) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$123 >> 0] | 0) | 0;
      if (($$0$i$i & 255) << 24 >> 24 <= -1) {
       $$4 = $$3$lcssa;
       break L24;
      }
      if (!(HEAP16[(HEAP32[$11 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
       $$4 = $$3$lcssa;
       break L24;
      }
      $141 = HEAP32[$121 >> 2] | 0;
      if (($141 | 0) == (HEAP32[$124 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 40 >> 2] & 127]($122) | 0; else {
       HEAP32[$121 >> 2] = $141 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$141 >> 0] | 0) | 0;
      }
      $106 = $216;
      $91 = $122;
     }
    }
   }
   $149 = $150 + 12 | 0;
   $151 = HEAP32[$149 >> 2] | 0;
   $152 = $150 + 16 | 0;
   if (($151 | 0) == (HEAP32[$152 >> 2] | 0)) $$0$i$i65 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$150 >> 2] | 0) + 36 >> 2] & 127]($150) | 0; else $$0$i$i65 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$151 >> 0] | 0) | 0;
   $165 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 31]($10, $$0$i$i65 & 255) | 0;
   if ($165 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 31]($10, HEAP8[$$0 >> 0] | 0) | 0) << 24 >> 24) {
    HEAP32[$4 >> 2] = 4;
    $$4 = $$0;
    break;
   }
   $172 = HEAP32[$149 >> 2] | 0;
   if (($172 | 0) == (HEAP32[$152 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$150 >> 2] | 0) + 40 >> 2] & 127]($150) | 0; else {
    HEAP32[$149 >> 2] = $172 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$172 >> 0] | 0) | 0;
   }
   $$4 = $$0 + 1 | 0;
  } while (0);
  $$0 = $$4;
  $13 = HEAP32[$4 >> 2] | 0;
 }
 if ((label | 0) == 63) {
  HEAP32[$4 >> 2] = 4;
  $181 = $150;
 }
 if (!$181) {
  $$sroa$047$0$copyload = 0;
  $217 = 1;
 } else {
  $184 = HEAP32[$181 + 12 >> 2] | 0;
  if (($184 | 0) == (HEAP32[$181 + 16 >> 2] | 0)) $$0$i$i$i$i68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$181 >> 2] | 0) + 36 >> 2] & 127]($181) | 0; else $$0$i$i$i$i68 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$184 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i68, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $$sroa$047$0$copyload = 0;
   $217 = 1;
  } else {
   $$sroa$047$0$copyload = $181;
   $217 = 0;
  }
 }
 $196 = HEAP32[$2 >> 2] | 0;
 do if (!$196) label = 76; else {
  $199 = HEAP32[$196 + 12 >> 2] | 0;
  if (($199 | 0) == (HEAP32[$196 + 16 >> 2] | 0)) $$0$i$i2$i$i74 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$196 >> 2] | 0) + 36 >> 2] & 127]($196) | 0; else $$0$i$i2$i$i74 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$199 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i74, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 76;
   break;
  } else if ($217) break; else {
   label = 78;
   break;
  }
 } while (0);
 if ((label | 0) == 76) if ($217) label = 78;
 if ((label | 0) == 78) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 STACKTOP = sp;
 return $$sroa$047$0$copyload | 0;
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i39 = 0, $$0$i$i$i42 = 0, $$0$i$i$i45 = 0, $$0$i$i$i49 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i63 = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $11 = 0, $110 = 0, $113 = 0, $12 = 0, $121 = 0, $124 = 0, $16 = 0, $21 = 0, $24 = 0, $32 = 0, $35 = 0, $50 = 0, $53 = 0, $61 = 0, $64 = 0, $72 = 0, $76 = 0, $81 = 0, $84 = 0, $92 = 0, $95 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 32936) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 127]($10, $12);
  $16 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = $16;
  HEAP8[$2 + 1 >> 0] = $16 >> 8;
  HEAP8[$2 + 2 >> 0] = $16 >> 16;
  HEAP8[$2 + 3 >> 0] = $16 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($11, $12);
  $21 = $8 + 8 + 3 | 0;
  if ((HEAP8[$21 >> 0] | 0) < 0) {
   $24 = HEAP32[$8 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($24, $10);
   HEAP32[$8 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
   HEAP8[$21 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8, 0);
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i = 0;
  while (1) {
   if (($$0$i$i$i | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
   $$0$i$i$i = $$0$i$i$i + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($11, $12);
  $32 = $7 + 8 + 3 | 0;
  if ((HEAP8[$32 >> 0] | 0) < 0) {
   $35 = HEAP32[$7 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($35, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10);
   HEAP8[$32 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($7, 0);
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i39 = 0;
  while (1) {
   if (($$0$i$i$i39 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i39 << 2) >> 2] = 0;
   $$0$i$i$i39 = $$0$i$i$i39 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  HEAP32[$3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 127]($11, $12);
  $50 = $5 + 11 | 0;
  if ((HEAP8[$50 >> 0] | 0) < 0) {
   $53 = HEAP32[$5 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($53, $10);
   HEAP32[$5 + 4 >> 2] = 0;
   $$pre$phi$i$iZ2D = $5;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10);
   HEAP8[$50 >> 0] = 0;
   $$pre$phi$i$iZ2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($5, 0);
  HEAP32[$$pre$phi$i$iZ2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$iZ2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$iZ2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i42 = 0;
  while (1) {
   if (($$0$i$i$i42 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i42 << 2) >> 2] = 0;
   $$0$i$i$i42 = $$0$i$i$i42 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 127]($11, $12);
  $61 = $6 + 8 + 3 | 0;
  if ((HEAP8[$61 >> 0] | 0) < 0) {
   $64 = HEAP32[$6 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($64, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6, $10);
   HEAP8[$61 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($6, 0);
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i45 = 0;
  while (1) {
   if (($$0$i$i$i45 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i45 << 2) >> 2] = 0;
   $$0$i$i$i45 = $$0$i$i$i45 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $72 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 32928) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 44 >> 2] & 127]($10, $72);
  $76 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = $76;
  HEAP8[$2 + 1 >> 0] = $76 >> 8;
  HEAP8[$2 + 2 >> 0] = $76 >> 16;
  HEAP8[$2 + 3 >> 0] = $76 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 32 >> 2] & 127]($11, $72);
  $81 = $8 + 8 + 3 | 0;
  if ((HEAP8[$81 >> 0] | 0) < 0) {
   $84 = HEAP32[$8 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($84, $10);
   HEAP32[$8 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
   HEAP8[$81 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8, 0);
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i49 = 0;
  while (1) {
   if (($$0$i$i$i49 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i49 << 2) >> 2] = 0;
   $$0$i$i$i49 = $$0$i$i$i49 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 28 >> 2] & 127]($11, $72);
  $92 = $7 + 8 + 3 | 0;
  if ((HEAP8[$92 >> 0] | 0) < 0) {
   $95 = HEAP32[$7 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($95, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10);
   HEAP8[$92 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($7, 0);
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i53 = 0;
  while (1) {
   if (($$0$i$i$i53 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i53 << 2) >> 2] = 0;
   $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  HEAP32[$3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 12 >> 2] & 127]($72) | 0;
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 16 >> 2] & 127]($72) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 20 >> 2] & 127]($11, $72);
  $110 = $5 + 11 | 0;
  if ((HEAP8[$110 >> 0] | 0) < 0) {
   $113 = HEAP32[$5 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($113, $10);
   HEAP32[$5 + 4 >> 2] = 0;
   $$pre$phi$i$i57Z2D = $5;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10);
   HEAP8[$110 >> 0] = 0;
   $$pre$phi$i$i57Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($5, 0);
  HEAP32[$$pre$phi$i$i57Z2D >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$pre$phi$i$i57Z2D + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$pre$phi$i$i57Z2D + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i59 = 0;
  while (1) {
   if (($$0$i$i$i59 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i59 << 2) >> 2] = 0;
   $$0$i$i$i59 = $$0$i$i$i59 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 24 >> 2] & 127]($11, $72);
  $121 = $6 + 8 + 3 | 0;
  if ((HEAP8[$121 >> 0] | 0) < 0) {
   $124 = HEAP32[$6 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($124, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6, $10);
   HEAP8[$121 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($6, 0);
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i63 = 0;
  while (1) {
   if (($$0$i$i$i63 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i63 << 2) >> 2] = 0;
   $$0$i$i$i63 = $$0$i$i$i63 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] & 127]($72) | 0;
 }
 HEAP32[$9 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0, $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5168 = 0, $$pre = 0, $$pre$phi204Z2D = 0.0, $105 = 0, $106 = 0, $107 = 0, $117 = 0, $118 = 0, $131 = 0, $133 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $142 = 0, $144 = 0, $154 = 0, $156 = 0, $167 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $177 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $194 = 0.0, $195 = 0, $208 = 0.0, $21 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $28 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $66 = 0.0, $7 = 0, $73 = 0, $75 = 0, $84 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond172 = 0, label = 0, $106$looptemp = 0, $107$looptemp = 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0 + 100 | 0;
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1;
  $$0$ph = HEAPU8[$6 >> 0] | 0;
 } else $$0$ph = ___shgetc($0) | 0;
 $$0 = $$0$ph;
 $$0143 = 0;
 L5 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 10;
    break L5;
    break;
   }
  case 48:
   break;
  default:
   {
    $$1149$ph = 0;
    $$3$ph = $$0;
    $$3146$ph = $$0143;
    $212 = 0;
    $213 = 0;
    break L5;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0;
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1;
   $$0$be = HEAPU8[$14 >> 0] | 0;
  } else $$0$be = ___shgetc($0) | 0;
  $$0 = $$0$be;
  $$0143 = 1;
 }
 if ((label | 0) == 10) {
  $21 = HEAP32[$5 >> 2] | 0;
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1;
   $28 = HEAPU8[$21 >> 0] | 0;
  } else $28 = ___shgetc($0) | 0;
  if (($28 | 0) == 48) {
   $37 = 0;
   $38 = 0;
   while (1) {
    $30 = HEAP32[$5 >> 2] | 0;
    if ($30 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $30 + 1;
     $41 = HEAPU8[$30 >> 0] | 0;
    } else $41 = ___shgetc($0) | 0;
    $39 = _i64Add($37 | 0, $38 | 0, -1, -1) | 0;
    $40 = getTempRet0() | 0;
    if (($41 | 0) == 48) {
     $37 = $39;
     $38 = $40;
    } else {
     $$1149$ph = 1;
     $$3$ph = $41;
     $$3146$ph = 1;
     $212 = $39;
     $213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;
   $$3$ph = $28;
   $$3146$ph = $$0143;
   $212 = 0;
   $213 = 0;
  }
 }
 $$0151 = 0;
 $$0155 = 1.0;
 $$0158 = 0.0;
 $$0163 = 0;
 $$1149 = $$1149$ph;
 $$3 = $$3$ph;
 $$3146 = $$3146$ph;
 $51 = 0;
 $53 = 0;
 $96 = $212;
 $98 = $213;
 while (1) {
  $43 = $$3 + -48 | 0;
  $$pre = $$3 | 32;
  if ($43 >>> 0 < 10) label = 24; else {
   $47 = ($$3 | 0) == 46;
   if (!($47 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) if (!$$1149) {
    $$2150 = 1;
    $$2153 = $$0151;
    $$2157 = $$0155;
    $$2160 = $$0158;
    $$2165 = $$0163;
    $$4147 = $$3146;
    $214 = $53;
    $215 = $51;
    $216 = $53;
    $217 = $51;
   } else {
    $$3$lcssa = 46;
    break;
   } else label = 24;
  }
  if ((label | 0) == 24) {
   label = 0;
   $$0133 = ($$3 | 0) > 57 ? $$pre + -87 | 0 : $43;
   do if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$1152 = $$0151;
    $$1156 = $$0155;
    $$1159 = $$0158;
    $$1164 = $$0133 + ($$0163 << 4) | 0;
   } else if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
    $66 = $$0155 * .0625;
    $$1152 = $$0151;
    $$1156 = $66;
    $$1159 = $$0158 + $66 * +($$0133 | 0);
    $$1164 = $$0163;
    break;
   } else {
    $or$cond = ($$0151 | 0) != 0 | ($$0133 | 0) == 0;
    $$1152 = $or$cond ? $$0151 : 1;
    $$1156 = $$0155;
    $$1159 = $or$cond ? $$0158 : $$0158 + $$0155 * .5;
    $$1164 = $$0163;
    break;
   } while (0);
   $73 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0;
   $$2150 = $$1149;
   $$2153 = $$1152;
   $$2157 = $$1156;
   $$2160 = $$1159;
   $$2165 = $$1164;
   $$4147 = 1;
   $214 = $96;
   $215 = $98;
   $216 = $73;
   $217 = getTempRet0() | 0;
  }
  $75 = HEAP32[$5 >> 2] | 0;
  if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $75 + 1;
   $$3$be = HEAPU8[$75 >> 0] | 0;
  } else $$3$be = ___shgetc($0) | 0;
  $$0151 = $$2153;
  $$0155 = $$2157;
  $$0158 = $$2160;
  $$0163 = $$2165;
  $$1149 = $$2150;
  $$3 = $$3$be;
  $$3146 = $$4147;
  $51 = $217;
  $53 = $216;
  $96 = $214;
  $98 = $215;
 }
 do if (!$$3146) {
  $84 = (HEAP32[$7 >> 2] | 0) == 0;
  if (!$84) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  if (!$4) ___shlim($0, 0); else if (!$84) {
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
   if (!(($$1149 | 0) == 0 | $84)) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  }
  $$0169 = +($3 | 0) * 0.0;
 } else {
  $95 = ($$1149 | 0) == 0;
  $97 = $95 ? $53 : $96;
  $99 = $95 ? $51 : $98;
  if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
   $$3166185 = $$0163;
   $106 = $53;
   $107 = $51;
   while (1) {
    $105 = $$3166185 << 4;
    $106$looptemp = $106;
    $106 = _i64Add($106 | 0, $107 | 0, 1, 0) | 0;
    $107$looptemp = $107;
    $107 = getTempRet0() | 0;
    if (!(($107$looptemp | 0) < 0 | ($107$looptemp | 0) == 0 & $106$looptemp >>> 0 < 7)) {
     $$3166$lcssa = $105;
     break;
    } else $$3166185 = $105;
   }
  } else $$3166$lcssa = $$0163;
  if (($$3$lcssa | 32 | 0) == 112) {
   $117 = _scanexp($0, $4) | 0;
   $118 = getTempRet0() | 0;
   if (($117 | 0) == 0 & ($118 | 0) == -2147483648) {
    if (!$4) {
     ___shlim($0, 0);
     $$0169 = 0.0;
     break;
    }
    if (!(HEAP32[$7 >> 2] | 0)) {
     $135 = 0;
     $136 = 0;
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
     $135 = 0;
     $136 = 0;
    }
   } else {
    $135 = $117;
    $136 = $118;
   }
  } else if (!(HEAP32[$7 >> 2] | 0)) {
   $135 = 0;
   $136 = 0;
  } else {
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
   $135 = 0;
   $136 = 0;
  }
  $131 = _bitshift64Shl($97 | 0, $99 | 0, 2) | 0;
  $133 = _i64Add($131 | 0, getTempRet0() | 0, -32, -1) | 0;
  $137 = _i64Add($133 | 0, getTempRet0() | 0, $135 | 0, $136 | 0) | 0;
  $138 = getTempRet0() | 0;
  if (!$$3166$lcssa) {
   $$0169 = +($3 | 0) * 0.0;
   break;
  }
  $142 = 0 - $2 | 0;
  $144 = (($142 | 0) < 0) << 31 >> 31;
  if (($138 | 0) > ($144 | 0) | ($138 | 0) == ($144 | 0) & $137 >>> 0 > $142 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$0169 = +($3 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $154 = $2 + -106 | 0;
  $156 = (($154 | 0) < 0) << 31 >> 31;
  if (($138 | 0) < ($156 | 0) | ($138 | 0) == ($156 | 0) & $137 >>> 0 < $154 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$0169 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($$3166$lcssa | 0) > -1) {
   $$3161181 = $$0158;
   $$4167180 = $$3166$lcssa;
   $171 = $137;
   $172 = $138;
   while (1) {
    $167 = !($$3161181 >= .5);
    $$5168 = $$4167180 << 1 | ($167 ^ 1) & 1;
    $$4162 = $$3161181 + ($167 ? $$3161181 : $$3161181 + -1.0);
    $173 = _i64Add($171 | 0, $172 | 0, -1, -1) | 0;
    $174 = getTempRet0() | 0;
    if (($$5168 | 0) > -1) {
     $$3161181 = $$4162;
     $$4167180 = $$5168;
     $171 = $173;
     $172 = $174;
    } else {
     $$3161$lcssa = $$4162;
     $$4167$lcssa = $$5168;
     $182 = $173;
     $183 = $174;
     break;
    }
   }
  } else {
   $$3161$lcssa = $$0158;
   $$4167$lcssa = $$3166$lcssa;
   $182 = $137;
   $183 = $138;
  }
  $177 = (($1 | 0) < 0) << 31 >> 31;
  $180 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0;
  $184 = _i64Add($180 | 0, getTempRet0() | 0, $182 | 0, $183 | 0) | 0;
  $185 = getTempRet0() | 0;
  if (($185 | 0) < ($177 | 0) | ($185 | 0) == ($177 | 0) & $184 >>> 0 < $1 >>> 0) if (($184 | 0) > 0) {
   $$0170 = $184;
   label = 65;
  } else {
   $$0170174 = 0;
   $195 = 84;
   label = 67;
  } else {
   $$0170 = $1;
   label = 65;
  }
  if ((label | 0) == 65) if (($$0170 | 0) < 53) {
   $$0170174 = $$0170;
   $195 = 84 - $$0170 | 0;
   label = 67;
  } else {
   $$0154 = 0.0;
   $$0170173 = $$0170;
   $$pre$phi204Z2D = +($3 | 0);
  }
  if ((label | 0) == 67) {
   $194 = +($3 | 0);
   $$0154 = +_copysignl(+_scalbn(1.0, $195), $194);
   $$0170173 = $$0170174;
   $$pre$phi204Z2D = $194;
  }
  $or$cond172 = ($$4167$lcssa & 1 | 0) == 0 & ($$3161$lcssa != 0.0 & ($$0170173 | 0) < 32);
  $208 = ($or$cond172 ? 0.0 : $$3161$lcssa) * $$pre$phi204Z2D + ($$0154 + $$pre$phi204Z2D * +(($$4167$lcssa + ($or$cond172 & 1) | 0) >>> 0)) - $$0154;
  if (!($208 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
  $$0169 = +_scalbnl($208, $182);
 } while (0);
 return +$$0169;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$029$lcssa$i$i$i$i$i = 0, $$029$lcssa$i$i$i$i$i57 = 0, $$029$lcssa$i$i$i$i$i70 = 0, $$029$lcssa$i$i$i$i$i82 = 0, $$02932$i$i$i$i$i = 0, $$02932$i$i$i$i$i54 = 0, $$02932$i$i$i$i$i67 = 0, $$02932$i$i$i$i$i79 = 0, $$030$lcssa$i$i$i$i$i = 0, $$030$lcssa$i$i$i$i$i56 = 0, $$030$lcssa$i$i$i$i$i69 = 0, $$030$lcssa$i$i$i$i$i81 = 0, $$03031$i$i$i$i$i = 0, $$03031$i$i$i$i$i55 = 0, $$03031$i$i$i$i$i68 = 0, $$03031$i$i$i$i$i80 = 0, $$sink = 0, $$sink125 = 0, $$sink126 = 0, $$sink128 = 0, $$sink129 = 0, $$sink131 = 0, $$sink132 = 0, $$sink134 = 0, $10 = 0, $100 = 0, $103 = 0, $110 = 0, $115 = 0, $124 = 0, $126 = 0, $128 = 0, $134 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $145 = 0, $147 = 0, $150 = 0, $157 = 0, $162 = 0, $171 = 0, $175 = 0, $18 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $190 = 0, $192 = 0, $194 = 0, $197 = 0, $20 = 0, $204 = 0, $209 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $49 = 0, $5 = 0, $54 = 0, $63 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $81 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $30 = $18 + $20 | 0;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  $31 = $30 + $26 | 0;
  $33 = HEAP32[$2 + 20 >> 2] | 0;
  $35 = HEAP32[$2 + 24 >> 2] | 0;
  if (($35 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
  $37 = $3 + $35 | 0;
  if ($33 >>> 0 > 99) {
   $$02932$i$i$i$i$i79 = $37;
   $$03031$i$i$i$i$i80 = $33;
   while (1) {
    $39 = ($$03031$i$i$i$i$i80 >>> 0) / 100 | 0;
    $42 = $$03031$i$i$i$i$i80 - ($39 * 100 | 0) << 1;
    HEAP8[$$02932$i$i$i$i$i79 + -1 >> 0] = HEAP8[64 + ($42 | 1) >> 0] | 0;
    $49 = $$02932$i$i$i$i$i79 + -2 | 0;
    HEAP8[$49 >> 0] = HEAP8[64 + $42 >> 0] | 0;
    if ($$03031$i$i$i$i$i80 >>> 0 > 9999) {
     $$02932$i$i$i$i$i79 = $49;
     $$03031$i$i$i$i$i80 = $39;
    } else {
     $$029$lcssa$i$i$i$i$i82 = $49;
     $$030$lcssa$i$i$i$i$i81 = $39;
     break;
    }
   }
  } else {
   $$029$lcssa$i$i$i$i$i82 = $37;
   $$030$lcssa$i$i$i$i$i81 = $33;
  }
  if ($$030$lcssa$i$i$i$i$i81 >>> 0 < 10) {
   $$sink = $$030$lcssa$i$i$i$i$i81 + 48 & 255;
   $$sink125 = -1;
  } else {
   $54 = $$030$lcssa$i$i$i$i$i81 << 1;
   HEAP8[$$029$lcssa$i$i$i$i$i82 + -1 >> 0] = HEAP8[64 + ($54 | 1) >> 0] | 0;
   $$sink = HEAP8[64 + $54 >> 0] | 0;
   $$sink125 = -2;
  }
  HEAP8[$$029$lcssa$i$i$i$i$i82 + $$sink125 >> 0] = $$sink;
  if ($35 | 0) _memcpy($31 | 0, $3 | 0, $35 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $63 = $9 + $4 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $63 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $63);
 HEAP32[$8 >> 2] = $63;
 $71 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $74 = HEAP32[$1 + 4 >> 2] & 255;
 $75 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($75 | 0) _memset($71 | 0, $74 | 0, $75 | 0) | 0;
   $79 = $71 + $75 | 0;
   $81 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$81) $91 = $79; else {
    _memmove($79 | 0, HEAP32[$2 + 4 >> 2] | 0, $81 | 0) | 0;
    $91 = $79 + $81 | 0;
   }
   $87 = HEAP32[$2 + 16 >> 2] | 0;
   if ($87 | 0) _memset($91 | 0, HEAP8[$2 + 12 >> 0] | 0, $87 | 0) | 0;
   $92 = $91 + $87 | 0;
   $94 = HEAP32[$2 + 20 >> 2] | 0;
   $96 = HEAP32[$2 + 24 >> 2] | 0;
   if (($96 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $98 = $3 + $96 | 0;
   if ($94 >>> 0 > 99) {
    $$02932$i$i$i$i$i67 = $98;
    $$03031$i$i$i$i$i68 = $94;
    while (1) {
     $100 = ($$03031$i$i$i$i$i68 >>> 0) / 100 | 0;
     $103 = $$03031$i$i$i$i$i68 - ($100 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i67 + -1 >> 0] = HEAP8[64 + ($103 | 1) >> 0] | 0;
     $110 = $$02932$i$i$i$i$i67 + -2 | 0;
     HEAP8[$110 >> 0] = HEAP8[64 + $103 >> 0] | 0;
     if ($$03031$i$i$i$i$i68 >>> 0 > 9999) {
      $$02932$i$i$i$i$i67 = $110;
      $$03031$i$i$i$i$i68 = $100;
     } else {
      $$029$lcssa$i$i$i$i$i70 = $110;
      $$030$lcssa$i$i$i$i$i69 = $100;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i70 = $98;
    $$030$lcssa$i$i$i$i$i69 = $94;
   }
   if ($$030$lcssa$i$i$i$i$i69 >>> 0 < 10) {
    $$sink126 = $$030$lcssa$i$i$i$i$i69 + 48 & 255;
    $$sink128 = -1;
   } else {
    $115 = $$030$lcssa$i$i$i$i$i69 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i70 + -1 >> 0] = HEAP8[64 + ($115 | 1) >> 0] | 0;
    $$sink126 = HEAP8[64 + $115 >> 0] | 0;
    $$sink128 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i70 + $$sink128 >> 0] = $$sink126;
   if ($96 | 0) _memcpy($92 | 0, $3 | 0, $96 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $124 = $75 >>> 1;
   if ($124 | 0) _memset($71 | 0, $74 | 0, $124 | 0) | 0;
   $126 = $71 + $124 | 0;
   $128 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$128) $138 = $126; else {
    _memmove($126 | 0, HEAP32[$2 + 4 >> 2] | 0, $128 | 0) | 0;
    $138 = $126 + $128 | 0;
   }
   $134 = HEAP32[$2 + 16 >> 2] | 0;
   if ($134 | 0) _memset($138 | 0, HEAP8[$2 + 12 >> 0] | 0, $134 | 0) | 0;
   $139 = $138 + $134 | 0;
   $141 = HEAP32[$2 + 20 >> 2] | 0;
   $143 = HEAP32[$2 + 24 >> 2] | 0;
   if (($143 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $145 = $3 + $143 | 0;
   if ($141 >>> 0 > 99) {
    $$02932$i$i$i$i$i54 = $145;
    $$03031$i$i$i$i$i55 = $141;
    while (1) {
     $147 = ($$03031$i$i$i$i$i55 >>> 0) / 100 | 0;
     $150 = $$03031$i$i$i$i$i55 - ($147 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i54 + -1 >> 0] = HEAP8[64 + ($150 | 1) >> 0] | 0;
     $157 = $$02932$i$i$i$i$i54 + -2 | 0;
     HEAP8[$157 >> 0] = HEAP8[64 + $150 >> 0] | 0;
     if ($$03031$i$i$i$i$i55 >>> 0 > 9999) {
      $$02932$i$i$i$i$i54 = $157;
      $$03031$i$i$i$i$i55 = $147;
     } else {
      $$029$lcssa$i$i$i$i$i57 = $157;
      $$030$lcssa$i$i$i$i$i56 = $147;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i57 = $145;
    $$030$lcssa$i$i$i$i$i56 = $141;
   }
   if ($$030$lcssa$i$i$i$i$i56 >>> 0 < 10) {
    $$sink129 = $$030$lcssa$i$i$i$i$i56 + 48 & 255;
    $$sink131 = -1;
   } else {
    $162 = $$030$lcssa$i$i$i$i$i56 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i57 + -1 >> 0] = HEAP8[64 + ($162 | 1) >> 0] | 0;
    $$sink129 = HEAP8[64 + $162 >> 0] | 0;
    $$sink131 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i57 + $$sink131 >> 0] = $$sink129;
   if ($143 | 0) _memcpy($139 | 0, $3 | 0, $143 | 0) | 0;
   $171 = $75 - $124 | 0;
   if (!$171) {
    STACKTOP = sp;
    return;
   }
   _memset($139 + $143 | 0, $74 | 0, $171 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $175 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$175) $185 = $71; else {
    _memmove($71 | 0, HEAP32[$2 + 4 >> 2] | 0, $175 | 0) | 0;
    $185 = $71 + $175 | 0;
   }
   $181 = HEAP32[$2 + 16 >> 2] | 0;
   if ($181 | 0) _memset($185 | 0, HEAP8[$2 + 12 >> 0] | 0, $181 | 0) | 0;
   $186 = $185 + $181 | 0;
   $188 = HEAP32[$2 + 20 >> 2] | 0;
   $190 = HEAP32[$2 + 24 >> 2] | 0;
   if (($190 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $192 = $3 + $190 | 0;
   if ($188 >>> 0 > 99) {
    $$02932$i$i$i$i$i = $192;
    $$03031$i$i$i$i$i = $188;
    while (1) {
     $194 = ($$03031$i$i$i$i$i >>> 0) / 100 | 0;
     $197 = $$03031$i$i$i$i$i - ($194 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($197 | 1) >> 0] | 0;
     $204 = $$02932$i$i$i$i$i + -2 | 0;
     HEAP8[$204 >> 0] = HEAP8[64 + $197 >> 0] | 0;
     if ($$03031$i$i$i$i$i >>> 0 > 9999) {
      $$02932$i$i$i$i$i = $204;
      $$03031$i$i$i$i$i = $194;
     } else {
      $$029$lcssa$i$i$i$i$i = $204;
      $$030$lcssa$i$i$i$i$i = $194;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i = $192;
    $$030$lcssa$i$i$i$i$i = $188;
   }
   if ($$030$lcssa$i$i$i$i$i >>> 0 < 10) {
    $$sink132 = $$030$lcssa$i$i$i$i$i + 48 & 255;
    $$sink134 = -1;
   } else {
    $209 = $$030$lcssa$i$i$i$i$i << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($209 | 1) >> 0] | 0;
    $$sink132 = HEAP8[64 + $209 >> 0] | 0;
    $$sink134 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i + $$sink134 >> 0] = $$sink132;
   if ($190 | 0) _memcpy($186 | 0, $3 | 0, $190 | 0) | 0;
   if (!$75) {
    STACKTOP = sp;
    return;
   }
   _memset($186 + $190 | 0, $74 | 0, $75 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$029$lcssa$i$i$i$i$i = 0, $$029$lcssa$i$i$i$i$i57 = 0, $$029$lcssa$i$i$i$i$i70 = 0, $$029$lcssa$i$i$i$i$i82 = 0, $$02932$i$i$i$i$i = 0, $$02932$i$i$i$i$i54 = 0, $$02932$i$i$i$i$i67 = 0, $$02932$i$i$i$i$i79 = 0, $$030$lcssa$i$i$i$i$i = 0, $$030$lcssa$i$i$i$i$i56 = 0, $$030$lcssa$i$i$i$i$i69 = 0, $$030$lcssa$i$i$i$i$i81 = 0, $$03031$i$i$i$i$i = 0, $$03031$i$i$i$i$i55 = 0, $$03031$i$i$i$i$i68 = 0, $$03031$i$i$i$i$i80 = 0, $$sink = 0, $$sink125 = 0, $$sink126 = 0, $$sink128 = 0, $$sink129 = 0, $$sink131 = 0, $$sink132 = 0, $$sink134 = 0, $10 = 0, $100 = 0, $103 = 0, $110 = 0, $115 = 0, $124 = 0, $126 = 0, $128 = 0, $134 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $145 = 0, $147 = 0, $150 = 0, $157 = 0, $162 = 0, $171 = 0, $175 = 0, $18 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $190 = 0, $192 = 0, $194 = 0, $197 = 0, $20 = 0, $204 = 0, $209 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $49 = 0, $5 = 0, $54 = 0, $63 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $81 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $30 = $18 + $20 | 0;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  $31 = $30 + $26 | 0;
  $33 = HEAP32[$2 + 20 >> 2] | 0;
  $35 = HEAP32[$2 + 24 >> 2] | 0;
  if (($35 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
  $37 = $3 + $35 | 0;
  if ($33 >>> 0 > 99) {
   $$02932$i$i$i$i$i79 = $37;
   $$03031$i$i$i$i$i80 = $33;
   while (1) {
    $39 = ($$03031$i$i$i$i$i80 >>> 0) / 100 | 0;
    $42 = $$03031$i$i$i$i$i80 - ($39 * 100 | 0) << 1;
    HEAP8[$$02932$i$i$i$i$i79 + -1 >> 0] = HEAP8[64 + ($42 | 1) >> 0] | 0;
    $49 = $$02932$i$i$i$i$i79 + -2 | 0;
    HEAP8[$49 >> 0] = HEAP8[64 + $42 >> 0] | 0;
    if ($$03031$i$i$i$i$i80 >>> 0 > 9999) {
     $$02932$i$i$i$i$i79 = $49;
     $$03031$i$i$i$i$i80 = $39;
    } else {
     $$029$lcssa$i$i$i$i$i82 = $49;
     $$030$lcssa$i$i$i$i$i81 = $39;
     break;
    }
   }
  } else {
   $$029$lcssa$i$i$i$i$i82 = $37;
   $$030$lcssa$i$i$i$i$i81 = $33;
  }
  if ($$030$lcssa$i$i$i$i$i81 >>> 0 < 10) {
   $$sink = $$030$lcssa$i$i$i$i$i81 + 48 & 255;
   $$sink125 = -1;
  } else {
   $54 = $$030$lcssa$i$i$i$i$i81 << 1;
   HEAP8[$$029$lcssa$i$i$i$i$i82 + -1 >> 0] = HEAP8[64 + ($54 | 1) >> 0] | 0;
   $$sink = HEAP8[64 + $54 >> 0] | 0;
   $$sink125 = -2;
  }
  HEAP8[$$029$lcssa$i$i$i$i$i82 + $$sink125 >> 0] = $$sink;
  if ($35 | 0) _memcpy($31 | 0, $3 | 0, $35 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $63 = $9 + $4 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $63 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $63);
 HEAP32[$8 >> 2] = $63;
 $71 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $74 = HEAP32[$1 + 4 >> 2] & 255;
 $75 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($75 | 0) _memset($71 | 0, $74 | 0, $75 | 0) | 0;
   $79 = $71 + $75 | 0;
   $81 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$81) $91 = $79; else {
    _memmove($79 | 0, HEAP32[$2 + 4 >> 2] | 0, $81 | 0) | 0;
    $91 = $79 + $81 | 0;
   }
   $87 = HEAP32[$2 + 16 >> 2] | 0;
   if ($87 | 0) _memset($91 | 0, HEAP8[$2 + 12 >> 0] | 0, $87 | 0) | 0;
   $92 = $91 + $87 | 0;
   $94 = HEAP32[$2 + 20 >> 2] | 0;
   $96 = HEAP32[$2 + 24 >> 2] | 0;
   if (($96 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $98 = $3 + $96 | 0;
   if ($94 >>> 0 > 99) {
    $$02932$i$i$i$i$i67 = $98;
    $$03031$i$i$i$i$i68 = $94;
    while (1) {
     $100 = ($$03031$i$i$i$i$i68 >>> 0) / 100 | 0;
     $103 = $$03031$i$i$i$i$i68 - ($100 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i67 + -1 >> 0] = HEAP8[64 + ($103 | 1) >> 0] | 0;
     $110 = $$02932$i$i$i$i$i67 + -2 | 0;
     HEAP8[$110 >> 0] = HEAP8[64 + $103 >> 0] | 0;
     if ($$03031$i$i$i$i$i68 >>> 0 > 9999) {
      $$02932$i$i$i$i$i67 = $110;
      $$03031$i$i$i$i$i68 = $100;
     } else {
      $$029$lcssa$i$i$i$i$i70 = $110;
      $$030$lcssa$i$i$i$i$i69 = $100;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i70 = $98;
    $$030$lcssa$i$i$i$i$i69 = $94;
   }
   if ($$030$lcssa$i$i$i$i$i69 >>> 0 < 10) {
    $$sink126 = $$030$lcssa$i$i$i$i$i69 + 48 & 255;
    $$sink128 = -1;
   } else {
    $115 = $$030$lcssa$i$i$i$i$i69 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i70 + -1 >> 0] = HEAP8[64 + ($115 | 1) >> 0] | 0;
    $$sink126 = HEAP8[64 + $115 >> 0] | 0;
    $$sink128 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i70 + $$sink128 >> 0] = $$sink126;
   if ($96 | 0) _memcpy($92 | 0, $3 | 0, $96 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $124 = $75 >>> 1;
   if ($124 | 0) _memset($71 | 0, $74 | 0, $124 | 0) | 0;
   $126 = $71 + $124 | 0;
   $128 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$128) $138 = $126; else {
    _memmove($126 | 0, HEAP32[$2 + 4 >> 2] | 0, $128 | 0) | 0;
    $138 = $126 + $128 | 0;
   }
   $134 = HEAP32[$2 + 16 >> 2] | 0;
   if ($134 | 0) _memset($138 | 0, HEAP8[$2 + 12 >> 0] | 0, $134 | 0) | 0;
   $139 = $138 + $134 | 0;
   $141 = HEAP32[$2 + 20 >> 2] | 0;
   $143 = HEAP32[$2 + 24 >> 2] | 0;
   if (($143 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $145 = $3 + $143 | 0;
   if ($141 >>> 0 > 99) {
    $$02932$i$i$i$i$i54 = $145;
    $$03031$i$i$i$i$i55 = $141;
    while (1) {
     $147 = ($$03031$i$i$i$i$i55 >>> 0) / 100 | 0;
     $150 = $$03031$i$i$i$i$i55 - ($147 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i54 + -1 >> 0] = HEAP8[64 + ($150 | 1) >> 0] | 0;
     $157 = $$02932$i$i$i$i$i54 + -2 | 0;
     HEAP8[$157 >> 0] = HEAP8[64 + $150 >> 0] | 0;
     if ($$03031$i$i$i$i$i55 >>> 0 > 9999) {
      $$02932$i$i$i$i$i54 = $157;
      $$03031$i$i$i$i$i55 = $147;
     } else {
      $$029$lcssa$i$i$i$i$i57 = $157;
      $$030$lcssa$i$i$i$i$i56 = $147;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i57 = $145;
    $$030$lcssa$i$i$i$i$i56 = $141;
   }
   if ($$030$lcssa$i$i$i$i$i56 >>> 0 < 10) {
    $$sink129 = $$030$lcssa$i$i$i$i$i56 + 48 & 255;
    $$sink131 = -1;
   } else {
    $162 = $$030$lcssa$i$i$i$i$i56 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i57 + -1 >> 0] = HEAP8[64 + ($162 | 1) >> 0] | 0;
    $$sink129 = HEAP8[64 + $162 >> 0] | 0;
    $$sink131 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i57 + $$sink131 >> 0] = $$sink129;
   if ($143 | 0) _memcpy($139 | 0, $3 | 0, $143 | 0) | 0;
   $171 = $75 - $124 | 0;
   if (!$171) {
    STACKTOP = sp;
    return;
   }
   _memset($139 + $143 | 0, $74 | 0, $171 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $175 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$175) $185 = $71; else {
    _memmove($71 | 0, HEAP32[$2 + 4 >> 2] | 0, $175 | 0) | 0;
    $185 = $71 + $175 | 0;
   }
   $181 = HEAP32[$2 + 16 >> 2] | 0;
   if ($181 | 0) _memset($185 | 0, HEAP8[$2 + 12 >> 0] | 0, $181 | 0) | 0;
   $186 = $185 + $181 | 0;
   $188 = HEAP32[$2 + 20 >> 2] | 0;
   $190 = HEAP32[$2 + 24 >> 2] | 0;
   if (($190 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $192 = $3 + $190 | 0;
   if ($188 >>> 0 > 99) {
    $$02932$i$i$i$i$i = $192;
    $$03031$i$i$i$i$i = $188;
    while (1) {
     $194 = ($$03031$i$i$i$i$i >>> 0) / 100 | 0;
     $197 = $$03031$i$i$i$i$i - ($194 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($197 | 1) >> 0] | 0;
     $204 = $$02932$i$i$i$i$i + -2 | 0;
     HEAP8[$204 >> 0] = HEAP8[64 + $197 >> 0] | 0;
     if ($$03031$i$i$i$i$i >>> 0 > 9999) {
      $$02932$i$i$i$i$i = $204;
      $$03031$i$i$i$i$i = $194;
     } else {
      $$029$lcssa$i$i$i$i$i = $204;
      $$030$lcssa$i$i$i$i$i = $194;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i = $192;
    $$030$lcssa$i$i$i$i$i = $188;
   }
   if ($$030$lcssa$i$i$i$i$i >>> 0 < 10) {
    $$sink132 = $$030$lcssa$i$i$i$i$i + 48 & 255;
    $$sink134 = -1;
   } else {
    $209 = $$030$lcssa$i$i$i$i$i << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($209 | 1) >> 0] | 0;
    $$sink132 = HEAP8[64 + $209 >> 0] | 0;
    $$sink134 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i + $$sink134 >> 0] = $$sink132;
   if ($190 | 0) _memcpy($186 | 0, $3 | 0, $190 | 0) | 0;
   if (!$75) {
    STACKTOP = sp;
    return;
   }
   _memset($186 + $190 | 0, $74 | 0, $75 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$029$lcssa$i$i$i$i$i = 0, $$029$lcssa$i$i$i$i$i57 = 0, $$029$lcssa$i$i$i$i$i70 = 0, $$029$lcssa$i$i$i$i$i82 = 0, $$02932$i$i$i$i$i = 0, $$02932$i$i$i$i$i54 = 0, $$02932$i$i$i$i$i67 = 0, $$02932$i$i$i$i$i79 = 0, $$030$lcssa$i$i$i$i$i = 0, $$030$lcssa$i$i$i$i$i56 = 0, $$030$lcssa$i$i$i$i$i69 = 0, $$030$lcssa$i$i$i$i$i81 = 0, $$03031$i$i$i$i$i = 0, $$03031$i$i$i$i$i55 = 0, $$03031$i$i$i$i$i68 = 0, $$03031$i$i$i$i$i80 = 0, $$sink = 0, $$sink125 = 0, $$sink126 = 0, $$sink128 = 0, $$sink129 = 0, $$sink131 = 0, $$sink132 = 0, $$sink134 = 0, $10 = 0, $100 = 0, $103 = 0, $110 = 0, $115 = 0, $124 = 0, $126 = 0, $128 = 0, $134 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $145 = 0, $147 = 0, $150 = 0, $157 = 0, $162 = 0, $171 = 0, $175 = 0, $18 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $190 = 0, $192 = 0, $194 = 0, $197 = 0, $20 = 0, $204 = 0, $209 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $49 = 0, $5 = 0, $54 = 0, $63 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $81 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $30 = $18 + $20 | 0;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  $31 = $30 + $26 | 0;
  $33 = HEAP32[$2 + 20 >> 2] | 0;
  $35 = HEAP32[$2 + 24 >> 2] | 0;
  if (($35 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
  $37 = $3 + $35 | 0;
  if ($33 >>> 0 > 99) {
   $$02932$i$i$i$i$i79 = $37;
   $$03031$i$i$i$i$i80 = $33;
   while (1) {
    $39 = ($$03031$i$i$i$i$i80 >>> 0) / 100 | 0;
    $42 = $$03031$i$i$i$i$i80 - ($39 * 100 | 0) << 1;
    HEAP8[$$02932$i$i$i$i$i79 + -1 >> 0] = HEAP8[64 + ($42 | 1) >> 0] | 0;
    $49 = $$02932$i$i$i$i$i79 + -2 | 0;
    HEAP8[$49 >> 0] = HEAP8[64 + $42 >> 0] | 0;
    if ($$03031$i$i$i$i$i80 >>> 0 > 9999) {
     $$02932$i$i$i$i$i79 = $49;
     $$03031$i$i$i$i$i80 = $39;
    } else {
     $$029$lcssa$i$i$i$i$i82 = $49;
     $$030$lcssa$i$i$i$i$i81 = $39;
     break;
    }
   }
  } else {
   $$029$lcssa$i$i$i$i$i82 = $37;
   $$030$lcssa$i$i$i$i$i81 = $33;
  }
  if ($$030$lcssa$i$i$i$i$i81 >>> 0 < 10) {
   $$sink = $$030$lcssa$i$i$i$i$i81 + 48 & 255;
   $$sink125 = -1;
  } else {
   $54 = $$030$lcssa$i$i$i$i$i81 << 1;
   HEAP8[$$029$lcssa$i$i$i$i$i82 + -1 >> 0] = HEAP8[64 + ($54 | 1) >> 0] | 0;
   $$sink = HEAP8[64 + $54 >> 0] | 0;
   $$sink125 = -2;
  }
  HEAP8[$$029$lcssa$i$i$i$i$i82 + $$sink125 >> 0] = $$sink;
  if ($35 | 0) _memcpy($31 | 0, $3 | 0, $35 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $63 = $9 + $4 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $63 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $63);
 HEAP32[$8 >> 2] = $63;
 $71 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $74 = HEAP32[$1 + 4 >> 2] & 255;
 $75 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($75 | 0) _memset($71 | 0, $74 | 0, $75 | 0) | 0;
   $79 = $71 + $75 | 0;
   $81 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$81) $91 = $79; else {
    _memmove($79 | 0, HEAP32[$2 + 4 >> 2] | 0, $81 | 0) | 0;
    $91 = $79 + $81 | 0;
   }
   $87 = HEAP32[$2 + 16 >> 2] | 0;
   if ($87 | 0) _memset($91 | 0, HEAP8[$2 + 12 >> 0] | 0, $87 | 0) | 0;
   $92 = $91 + $87 | 0;
   $94 = HEAP32[$2 + 20 >> 2] | 0;
   $96 = HEAP32[$2 + 24 >> 2] | 0;
   if (($96 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $98 = $3 + $96 | 0;
   if ($94 >>> 0 > 99) {
    $$02932$i$i$i$i$i67 = $98;
    $$03031$i$i$i$i$i68 = $94;
    while (1) {
     $100 = ($$03031$i$i$i$i$i68 >>> 0) / 100 | 0;
     $103 = $$03031$i$i$i$i$i68 - ($100 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i67 + -1 >> 0] = HEAP8[64 + ($103 | 1) >> 0] | 0;
     $110 = $$02932$i$i$i$i$i67 + -2 | 0;
     HEAP8[$110 >> 0] = HEAP8[64 + $103 >> 0] | 0;
     if ($$03031$i$i$i$i$i68 >>> 0 > 9999) {
      $$02932$i$i$i$i$i67 = $110;
      $$03031$i$i$i$i$i68 = $100;
     } else {
      $$029$lcssa$i$i$i$i$i70 = $110;
      $$030$lcssa$i$i$i$i$i69 = $100;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i70 = $98;
    $$030$lcssa$i$i$i$i$i69 = $94;
   }
   if ($$030$lcssa$i$i$i$i$i69 >>> 0 < 10) {
    $$sink126 = $$030$lcssa$i$i$i$i$i69 + 48 & 255;
    $$sink128 = -1;
   } else {
    $115 = $$030$lcssa$i$i$i$i$i69 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i70 + -1 >> 0] = HEAP8[64 + ($115 | 1) >> 0] | 0;
    $$sink126 = HEAP8[64 + $115 >> 0] | 0;
    $$sink128 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i70 + $$sink128 >> 0] = $$sink126;
   if ($96 | 0) _memcpy($92 | 0, $3 | 0, $96 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $124 = $75 >>> 1;
   if ($124 | 0) _memset($71 | 0, $74 | 0, $124 | 0) | 0;
   $126 = $71 + $124 | 0;
   $128 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$128) $138 = $126; else {
    _memmove($126 | 0, HEAP32[$2 + 4 >> 2] | 0, $128 | 0) | 0;
    $138 = $126 + $128 | 0;
   }
   $134 = HEAP32[$2 + 16 >> 2] | 0;
   if ($134 | 0) _memset($138 | 0, HEAP8[$2 + 12 >> 0] | 0, $134 | 0) | 0;
   $139 = $138 + $134 | 0;
   $141 = HEAP32[$2 + 20 >> 2] | 0;
   $143 = HEAP32[$2 + 24 >> 2] | 0;
   if (($143 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $145 = $3 + $143 | 0;
   if ($141 >>> 0 > 99) {
    $$02932$i$i$i$i$i54 = $145;
    $$03031$i$i$i$i$i55 = $141;
    while (1) {
     $147 = ($$03031$i$i$i$i$i55 >>> 0) / 100 | 0;
     $150 = $$03031$i$i$i$i$i55 - ($147 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i54 + -1 >> 0] = HEAP8[64 + ($150 | 1) >> 0] | 0;
     $157 = $$02932$i$i$i$i$i54 + -2 | 0;
     HEAP8[$157 >> 0] = HEAP8[64 + $150 >> 0] | 0;
     if ($$03031$i$i$i$i$i55 >>> 0 > 9999) {
      $$02932$i$i$i$i$i54 = $157;
      $$03031$i$i$i$i$i55 = $147;
     } else {
      $$029$lcssa$i$i$i$i$i57 = $157;
      $$030$lcssa$i$i$i$i$i56 = $147;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i57 = $145;
    $$030$lcssa$i$i$i$i$i56 = $141;
   }
   if ($$030$lcssa$i$i$i$i$i56 >>> 0 < 10) {
    $$sink129 = $$030$lcssa$i$i$i$i$i56 + 48 & 255;
    $$sink131 = -1;
   } else {
    $162 = $$030$lcssa$i$i$i$i$i56 << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i57 + -1 >> 0] = HEAP8[64 + ($162 | 1) >> 0] | 0;
    $$sink129 = HEAP8[64 + $162 >> 0] | 0;
    $$sink131 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i57 + $$sink131 >> 0] = $$sink129;
   if ($143 | 0) _memcpy($139 | 0, $3 | 0, $143 | 0) | 0;
   $171 = $75 - $124 | 0;
   if (!$171) {
    STACKTOP = sp;
    return;
   }
   _memset($139 + $143 | 0, $74 | 0, $171 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $175 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$175) $185 = $71; else {
    _memmove($71 | 0, HEAP32[$2 + 4 >> 2] | 0, $175 | 0) | 0;
    $185 = $71 + $175 | 0;
   }
   $181 = HEAP32[$2 + 16 >> 2] | 0;
   if ($181 | 0) _memset($185 | 0, HEAP8[$2 + 12 >> 0] | 0, $181 | 0) | 0;
   $186 = $185 + $181 | 0;
   $188 = HEAP32[$2 + 20 >> 2] | 0;
   $190 = HEAP32[$2 + 24 >> 2] | 0;
   if (($190 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
   $192 = $3 + $190 | 0;
   if ($188 >>> 0 > 99) {
    $$02932$i$i$i$i$i = $192;
    $$03031$i$i$i$i$i = $188;
    while (1) {
     $194 = ($$03031$i$i$i$i$i >>> 0) / 100 | 0;
     $197 = $$03031$i$i$i$i$i - ($194 * 100 | 0) << 1;
     HEAP8[$$02932$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($197 | 1) >> 0] | 0;
     $204 = $$02932$i$i$i$i$i + -2 | 0;
     HEAP8[$204 >> 0] = HEAP8[64 + $197 >> 0] | 0;
     if ($$03031$i$i$i$i$i >>> 0 > 9999) {
      $$02932$i$i$i$i$i = $204;
      $$03031$i$i$i$i$i = $194;
     } else {
      $$029$lcssa$i$i$i$i$i = $204;
      $$030$lcssa$i$i$i$i$i = $194;
      break;
     }
    }
   } else {
    $$029$lcssa$i$i$i$i$i = $192;
    $$030$lcssa$i$i$i$i$i = $188;
   }
   if ($$030$lcssa$i$i$i$i$i >>> 0 < 10) {
    $$sink132 = $$030$lcssa$i$i$i$i$i + 48 & 255;
    $$sink134 = -1;
   } else {
    $209 = $$030$lcssa$i$i$i$i$i << 1;
    HEAP8[$$029$lcssa$i$i$i$i$i + -1 >> 0] = HEAP8[64 + ($209 | 1) >> 0] | 0;
    $$sink132 = HEAP8[64 + $209 >> 0] | 0;
    $$sink134 = -2;
   }
   HEAP8[$$029$lcssa$i$i$i$i$i + $$sink134 >> 0] = $$sink132;
   if ($190 | 0) _memcpy($186 | 0, $3 | 0, $190 | 0) | 0;
   if (!$75) {
    STACKTOP = sp;
    return;
   }
   _memset($186 + $190 | 0, $74 | 0, $75 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i52 = 0, $$0$i$i$i$i66 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i58 = 0, $$0$i$i2$i$i72 = 0, $$0$i$i63 = 0, $$0$pn = 0, $$049 = 0, $$050 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$sroa$047$0$copyload = 0, $10 = 0, $100 = 0, $103 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $131 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $154 = 0, $16 = 0, $161 = 0, $170 = 0, $173 = 0, $18 = 0, $185 = 0, $188 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $30 = 0, $32 = 0, $34 = 0, $52 = 0, $58 = 0, $59 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $8 = 0, $85 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy1, $3);
 $10 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1, 32720) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy1);
 HEAP32[$4 >> 2] = 0;
 $$0 = $6;
 $12 = 0;
 L1 : while (1) {
  $14 = HEAP32[$1 >> 2] | 0;
  if (!(($$0 | 0) != ($7 | 0) & ($12 | 0) == 0)) {
   $170 = $14;
   break;
  }
  $16 = $14;
  if (!$14) {
   $140 = 0;
   $202 = 1;
   $69 = $16;
  } else {
   $18 = HEAP32[$14 + 12 >> 2] | 0;
   if (($18 | 0) == (HEAP32[$14 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$18 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $140 = 0;
    $202 = 1;
    $69 = 0;
   } else {
    $140 = $14;
    $202 = 0;
    $69 = $16;
   }
  }
  $30 = HEAP32[$2 >> 2] | 0;
  $32 = $30;
  do if (!$30) {
   $$ph = $32;
   label = 15;
  } else {
   $34 = HEAP32[$30 + 12 >> 2] | 0;
   if (($34 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    $$ph = 0;
    label = 15;
    break;
   } else if ($202) {
    $203 = $30;
    $70 = $32;
    break;
   } else {
    label = 60;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($202) {
    label = 60;
    break;
   } else {
    $203 = 0;
    $70 = $$ph;
   }
  }
  L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 31]($10, HEAP32[$$0 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
   $52 = $$0 + 4 | 0;
   if (($52 | 0) == ($7 | 0)) {
    label = 60;
    break L1;
   }
   $58 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 31]($10, HEAP32[$52 >> 2] | 0, 0) | 0;
   switch ($58 << 24 >> 24) {
   case 48:
   case 69:
    {
     $59 = $$0 + 8 | 0;
     if (($59 | 0) == ($7 | 0)) {
      label = 60;
      break L1;
     }
     $$049 = $58;
     $$050 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 31]($10, HEAP32[$59 >> 2] | 0, 0) | 0;
     $73 = $52;
     break;
    }
   default:
    {
     $$049 = 0;
     $$050 = $58;
     $73 = $$0;
    }
   }
   $68 = HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$8 >> 2] = $69;
   HEAP32[$9 >> 2] = $70;
   HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiiiii[$68 & 15]($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $$050, $$049) | 0;
   $$4 = $73 + 8 | 0;
  } else {
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 31]($10, 8192, HEAP32[$$0 >> 2] | 0) | 0)) {
    $139 = $140 + 12 | 0;
    $141 = HEAP32[$139 >> 2] | 0;
    $142 = $140 + 16 | 0;
    if (($141 | 0) == (HEAP32[$142 >> 2] | 0)) $$0$i$i63 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 36 >> 2] & 127]($140) | 0; else $$0$i$i63 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$141 >> 2] | 0) | 0;
    $154 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 31]($10, $$0$i$i63) | 0;
    if (($154 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 31]($10, HEAP32[$$0 >> 2] | 0) | 0)) {
     HEAP32[$4 >> 2] = 4;
     $$4 = $$0;
     break;
    }
    $161 = HEAP32[$139 >> 2] | 0;
    if (($161 | 0) == (HEAP32[$142 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 40 >> 2] & 127]($140) | 0; else {
     HEAP32[$139 >> 2] = $161 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$161 >> 2] | 0) | 0;
    }
    $$4 = $$0 + 4 | 0;
    break;
   }
   $$0$pn = $$0;
   while (1) {
    $$3 = $$0$pn + 4 | 0;
    if (($$3 | 0) == ($7 | 0)) {
     $$3$lcssa = $7;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 31]($10, 8192, HEAP32[$$3 >> 2] | 0) | 0) $$0$pn = $$3; else {
     $$3$lcssa = $$3;
     break;
    }
   }
   $100 = $203;
   $85 = $140;
   while (1) {
    if (!$85) {
     $116 = 0;
     $204 = 1;
    } else {
     $88 = HEAP32[$85 + 12 >> 2] | 0;
     if (($88 | 0) == (HEAP32[$85 + 16 >> 2] | 0)) $$0$i$i$i$i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 127]($85) | 0; else $$0$i$i$i$i52 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$88 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i52, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      $116 = 0;
      $204 = 1;
     } else {
      $116 = $85;
      $204 = 0;
     }
    }
    do if (!$100) label = 40; else {
     $103 = HEAP32[$100 + 12 >> 2] | 0;
     if (($103 | 0) == (HEAP32[$100 + 16 >> 2] | 0)) $$0$i$i2$i$i58 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] & 127]($100) | 0; else $$0$i$i2$i$i58 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$103 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i58, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0;
      label = 40;
      break;
     } else if ($204) {
      $205 = $100;
      break;
     } else {
      $$4 = $$3$lcssa;
      break L24;
     }
    } while (0);
    if ((label | 0) == 40) {
     label = 0;
     if ($204) {
      $$4 = $$3$lcssa;
      break L24;
     } else $205 = 0;
    }
    $115 = $116 + 12 | 0;
    $117 = HEAP32[$115 >> 2] | 0;
    $118 = $116 + 16 | 0;
    if (($117 | 0) == (HEAP32[$118 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$116 >> 2] | 0) + 36 >> 2] & 127]($116) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$117 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 31]($10, 8192, $$0$i$i) | 0)) {
     $$4 = $$3$lcssa;
     break L24;
    }
    $131 = HEAP32[$115 >> 2] | 0;
    if (($131 | 0) == (HEAP32[$118 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$116 >> 2] | 0) + 40 >> 2] & 127]($116) | 0; else {
     HEAP32[$115 >> 2] = $131 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$131 >> 2] | 0) | 0;
    }
    $100 = $205;
    $85 = $116;
   }
  } while (0);
  $$0 = $$4;
  $12 = HEAP32[$4 >> 2] | 0;
 }
 if ((label | 0) == 60) {
  HEAP32[$4 >> 2] = 4;
  $170 = $140;
 }
 if (!$170) {
  $$sroa$047$0$copyload = 0;
  $206 = 1;
 } else {
  $173 = HEAP32[$170 + 12 >> 2] | 0;
  if (($173 | 0) == (HEAP32[$170 + 16 >> 2] | 0)) $$0$i$i$i$i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$170 >> 2] | 0) + 36 >> 2] & 127]($170) | 0; else $$0$i$i$i$i66 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$173 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i66, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $$sroa$047$0$copyload = 0;
   $206 = 1;
  } else {
   $$sroa$047$0$copyload = $170;
   $206 = 0;
  }
 }
 $185 = HEAP32[$2 >> 2] | 0;
 do if (!$185) label = 73; else {
  $188 = HEAP32[$185 + 12 >> 2] | 0;
  if (($188 | 0) == (HEAP32[$185 + 16 >> 2] | 0)) $$0$i$i2$i$i72 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$185 >> 2] | 0) + 36 >> 2] & 127]($185) | 0; else $$0$i$i2$i$i72 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$188 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i72, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 73;
   break;
  } else if ($206) break; else {
   label = 75;
   break;
  }
 } while (0);
 if ((label | 0) == 73) if ($206) label = 75;
 if ((label | 0) == 75) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 STACKTOP = sp;
 return $$sroa$047$0$copyload | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function __ZNSt3__25dequeIPN3sgl5EventENS_9allocatorIS3_EEE19__add_back_capacityEv($0) {
 $0 = $0 | 0;
 var $$067 = 0, $$in = 0, $$pre$phi$i23Z2D = 0, $$pre$phi$iZ2D = 0, $$sroa$13$0$ptr$i = 0, $$sroa$13$0$ptr$i30 = 0, $$sroa$13$1$i = 0, $$sroa$13$1$i34 = 0, $$sroa$speculated = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i25 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $106 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $119 = 0, $12 = 0, $121 = 0, $127 = 0, $13 = 0, $130 = 0, $136 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $17 = 0, $170 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $50 = 0, $52 = 0, $58 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = $0 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if ($4 >>> 0 > 1023) {
  HEAP32[$3 >> 2] = $4 + -1024;
  $7 = $0 + 4 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $8 + 4 | 0;
  HEAP32[$7 >> 2] = $10;
  $11 = $0 + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  $13 = $0 + 12 | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  $16 = $14;
  do if (($12 | 0) == ($14 | 0)) {
   $17 = $10;
   $18 = HEAP32[$0 >> 2] | 0;
   $20 = $18;
   if ($10 >>> 0 > $18 >>> 0) {
    $24 = (($17 - $20 >> 2) + 1 | 0) / -2 | 0;
    $25 = $10 + ($24 << 2) | 0;
    $27 = $12 - $17 | 0;
    if (!$27) $$pre$phi$iZ2D = $25; else {
     _memmove($25 | 0, $10 | 0, $27 | 0) | 0;
     $$pre$phi$iZ2D = (HEAP32[$7 >> 2] | 0) + ($24 << 2) | 0;
    }
    $30 = $25 + ($27 >> 2 << 2) | 0;
    HEAP32[$11 >> 2] = $30;
    HEAP32[$7 >> 2] = $$pre$phi$iZ2D;
    $61 = $30;
    break;
   }
   $31 = $16 - $20 | 0;
   $$sroa$speculated$i = ($31 | 0) == 0 ? 1 : $31 >> 1;
   $34 = $$sroa$speculated$i >>> 2;
   do if (!$$sroa$speculated$i) $40 = 0; else if ($$sroa$speculated$i >>> 0 > 1073741823) {
    $37 = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc($37, 22468);
    HEAP32[$37 >> 2] = 15792;
    ___cxa_throw($37 | 0, 9584, 225);
   } else {
    $40 = __Znwm($$sroa$speculated$i << 2) | 0;
    break;
   } while (0);
   $41 = $40;
   $42 = $40 + ($34 << 2) | 0;
   $43 = $42;
   $45 = $40 + ($$sroa$speculated$i << 2) | 0;
   if (($10 | 0) == ($12 | 0)) {
    $$sroa$13$1$i = $43;
    $58 = $18;
   } else {
    $50 = (($12 + -4 - $17 | 0) >>> 2) + 1 | 0;
    $$sroa$13$0$ptr$i = $42;
    $52 = $10;
    while (1) {
     HEAP32[$$sroa$13$0$ptr$i >> 2] = HEAP32[$52 >> 2];
     $52 = $52 + 4 | 0;
     if (($52 | 0) == ($12 | 0)) break; else $$sroa$13$0$ptr$i = $$sroa$13$0$ptr$i + 4 | 0;
    }
    $$sroa$13$1$i = $40 + ($50 + $34 << 2) | 0;
    $58 = HEAP32[$0 >> 2] | 0;
   }
   HEAP32[$0 >> 2] = $41;
   HEAP32[$7 >> 2] = $43;
   HEAP32[$11 >> 2] = $$sroa$13$1$i;
   HEAP32[$13 >> 2] = $45;
   if (!$58) $61 = $$sroa$13$1$i; else {
    __ZdlPv($58);
    $61 = HEAP32[$11 >> 2] | 0;
   }
  } else $61 = $12; while (0);
  HEAP32[$61 >> 2] = $9;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 4;
  STACKTOP = sp;
  return;
 }
 $64 = $0 + 8 | 0;
 $65 = HEAP32[$64 >> 2] | 0;
 $66 = $0 + 4 | 0;
 $69 = $65 - (HEAP32[$66 >> 2] | 0) >> 2;
 $70 = $0 + 12 | 0;
 $71 = HEAP32[$70 >> 2] | 0;
 $73 = $71 - (HEAP32[$0 >> 2] | 0) | 0;
 if ($69 >>> 0 >= $73 >> 2 >>> 0) {
  $$sroa$speculated = ($73 | 0) == 0 ? 1 : $73 >> 1;
  $136 = $1 + 12 | 0;
  HEAP32[$136 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $0 + 12;
  do if (!$$sroa$speculated) $143 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $140 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($140, 22468);
   HEAP32[$140 >> 2] = 15792;
   ___cxa_throw($140 | 0, 9584, 225);
  } else {
   $143 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  HEAP32[$1 >> 2] = $143;
  $144 = $143 + ($69 << 2) | 0;
  $145 = $1 + 8 | 0;
  HEAP32[$145 >> 2] = $144;
  $146 = $1 + 4 | 0;
  HEAP32[$146 >> 2] = $144;
  HEAP32[$136 >> 2] = $143 + ($$sroa$speculated << 2);
  HEAP32[$2 >> 2] = __Znwm(4096) | 0;
  __ZNSt3__214__split_bufferIPPN3sgl5EventERNS_9allocatorIS4_EEE9push_backEOS4_($1, $2);
  $149 = HEAP32[$64 >> 2] | 0;
  $150 = HEAP32[$66 >> 2] | 0;
  if (($149 | 0) == ($150 | 0)) {
   $$in = $150;
   $158 = $149;
  } else {
   $$067 = $149;
   do {
    $$067 = $$067 + -4 | 0;
    __ZNSt3__214__split_bufferIPPN3sgl5EventERNS_9allocatorIS4_EEE10push_frontERKS4_($1, $$067);
    $170 = HEAP32[$66 >> 2] | 0;
   } while (($$067 | 0) != ($170 | 0));
   $$in = $170;
   $158 = HEAP32[$64 >> 2] | 0;
  }
  $153 = $$in;
  $154 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = $154;
  HEAP32[$66 >> 2] = HEAP32[$146 >> 2];
  HEAP32[$146 >> 2] = $153;
  HEAP32[$64 >> 2] = HEAP32[$145 >> 2];
  HEAP32[$145 >> 2] = $158;
  $159 = HEAP32[$70 >> 2] | 0;
  HEAP32[$70 >> 2] = HEAP32[$136 >> 2];
  HEAP32[$136 >> 2] = $159;
  $161 = $158;
  if (($$in | 0) != ($161 | 0)) HEAP32[$145 >> 2] = $161 + (~(($161 + -4 - $153 | 0) >>> 2) << 2);
  if ($154 | 0) __ZdlPv($154);
  STACKTOP = sp;
  return;
 }
 if (($71 | 0) != ($65 | 0)) {
  HEAP32[$1 >> 2] = __Znwm(4096) | 0;
  __ZNSt3__214__split_bufferIPPN3sgl5EventENS_9allocatorIS4_EEE9push_backEOS4_($0, $1);
  STACKTOP = sp;
  return;
 }
 HEAP32[$1 >> 2] = __Znwm(4096) | 0;
 __ZNSt3__214__split_bufferIPPN3sgl5EventENS_9allocatorIS4_EEE10push_frontEOS4_($0, $1);
 $79 = HEAP32[$66 >> 2] | 0;
 $80 = HEAP32[$79 >> 2] | 0;
 $81 = $79 + 4 | 0;
 HEAP32[$66 >> 2] = $81;
 $82 = HEAP32[$64 >> 2] | 0;
 $83 = HEAP32[$70 >> 2] | 0;
 $85 = $83;
 do if (($82 | 0) == ($83 | 0)) {
  $86 = $81;
  $87 = HEAP32[$0 >> 2] | 0;
  $89 = $87;
  if ($81 >>> 0 > $87 >>> 0) {
   $93 = (($86 - $89 >> 2) + 1 | 0) / -2 | 0;
   $94 = $81 + ($93 << 2) | 0;
   $96 = $82 - $86 | 0;
   if (!$96) $$pre$phi$i23Z2D = $94; else {
    _memmove($94 | 0, $81 | 0, $96 | 0) | 0;
    $$pre$phi$i23Z2D = (HEAP32[$66 >> 2] | 0) + ($93 << 2) | 0;
   }
   $99 = $94 + ($96 >> 2 << 2) | 0;
   HEAP32[$64 >> 2] = $99;
   HEAP32[$66 >> 2] = $$pre$phi$i23Z2D;
   $130 = $99;
   break;
  }
  $100 = $85 - $89 | 0;
  $$sroa$speculated$i25 = ($100 | 0) == 0 ? 1 : $100 >> 1;
  $103 = $$sroa$speculated$i25 >>> 2;
  do if (!$$sroa$speculated$i25) $109 = 0; else if ($$sroa$speculated$i25 >>> 0 > 1073741823) {
   $106 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($106, 22468);
   HEAP32[$106 >> 2] = 15792;
   ___cxa_throw($106 | 0, 9584, 225);
  } else {
   $109 = __Znwm($$sroa$speculated$i25 << 2) | 0;
   break;
  } while (0);
  $110 = $109;
  $111 = $109 + ($103 << 2) | 0;
  $112 = $111;
  $114 = $109 + ($$sroa$speculated$i25 << 2) | 0;
  if (($81 | 0) == ($82 | 0)) {
   $$sroa$13$1$i34 = $112;
   $127 = $87;
  } else {
   $119 = (($82 + -4 - $86 | 0) >>> 2) + 1 | 0;
   $$sroa$13$0$ptr$i30 = $111;
   $121 = $81;
   while (1) {
    HEAP32[$$sroa$13$0$ptr$i30 >> 2] = HEAP32[$121 >> 2];
    $121 = $121 + 4 | 0;
    if (($121 | 0) == ($82 | 0)) break; else $$sroa$13$0$ptr$i30 = $$sroa$13$0$ptr$i30 + 4 | 0;
   }
   $$sroa$13$1$i34 = $109 + ($119 + $103 << 2) | 0;
   $127 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $110;
  HEAP32[$66 >> 2] = $112;
  HEAP32[$64 >> 2] = $$sroa$13$1$i34;
  HEAP32[$70 >> 2] = $114;
  if (!$127) $130 = $$sroa$13$1$i34; else {
   __ZdlPv($127);
   $130 = HEAP32[$64 >> 2] | 0;
  }
 } else $130 = $82; while (0);
 HEAP32[$130 >> 2] = $80;
 HEAP32[$64 >> 2] = (HEAP32[$64 >> 2] | 0) + 4;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v516visit_format_argINS0_13arg_formatterINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEEENS0_20basic_format_contextINSt3__220back_insert_iteratorIS6_EEcEEEENS4_9result_ofIFT_iEE4typeEOSF_RKNS0_16basic_format_argIT0_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$$sroa_idx$i$i$pre$phi$iZZZZZZZZ2D = 0, $16 = 0, $2 = 0, $24 = 0, $26 = 0, $35 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $53 = 0, $55 = 0, $57 = 0.0, $59 = 0, $66 = 0.0, $68 = 0, $75 = 0, $77 = 0, $80 = 0, $84 = 0, $89 = 0, $9 = 0, $tmpcast23$sroa$4$0$extract$trunc$i$i = 0, $tmpcast4$sroa$4$0$extract$trunc$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 8 | 0;
 $2 = sp;
 do switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 13:
  {
   $89 = $1;
   FUNCTION_TABLE_vii[HEAP32[$89 + 4 >> 2] & 127](HEAP32[$89 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0);
   $$sroa$0$0 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 1:
  {
   ___assert_fail(17342, 18966, 837, 17377);
   break;
  }
 case 2:
  {
   $$sroa$0$0 = __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIiEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, HEAP32[$1 >> 2] | 0) | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 3:
  {
   $$sroa$0$0 = __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIjEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, HEAP32[$1 >> 2] | 0) | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 4:
  {
   $9 = $1;
   $$sroa$0$0 = __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIxEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, HEAP32[$9 >> 2] | 0, HEAP32[$9 + 4 >> 2] | 0) | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 5:
  {
   $16 = $1;
   $$sroa$0$0 = __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIyEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, HEAP32[$16 >> 2] | 0, HEAP32[$16 + 4 >> 2] | 0) | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 6:
  {
   $24 = (HEAP32[$1 >> 2] | 0) != 0;
   $26 = HEAP32[$0 + 8 >> 2] | 0;
   do if (!$26) {
    $tmpcast4$sroa$4$0$extract$trunc$i$i = $24 ? 4 : 5;
    $40 = HEAP32[$0 >> 2] | 0;
    $41 = $40 + 8 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = $42 + $tmpcast4$sroa$4$0$extract$trunc$i$i | 0;
    if ((HEAP32[$40 + 12 >> 2] | 0) >>> 0 < $43 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$40 >> 2] >> 2] & 127]($40, $43);
    HEAP32[$41 >> 2] = $43;
    _memmove((HEAP32[$40 + 4 >> 2] | 0) + $42 | 0, ($24 ? 25487 : 25481) | 0, $tmpcast4$sroa$4$0$extract$trunc$i$i | 0) | 0;
    $$sroa$0$0$$sroa_idx$i$i$pre$phi$iZZZZZZZZ2D = $0;
   } else {
    if (!(HEAP8[$26 + 17 >> 0] | 0)) {
     $tmpcast23$sroa$4$0$extract$trunc$i$i = $24 ? 4 : 5;
     $35 = HEAP32[$26 + 12 >> 2] | 0;
     HEAP32[$$byval_copy >> 2] = $24 ? 25487 : 25481;
     HEAP32[$$byval_copy + 4 >> 2] = ($35 | 0) > -1 & $35 >>> 0 < $tmpcast23$sroa$4$0$extract$trunc$i$i >>> 0 ? $35 : $tmpcast23$sroa$4$0$extract$trunc$i$i;
     __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_10str_writerIcEEEEvRKNS0_10align_specEOT_($0, $26, $$byval_copy);
     $$sroa$0$0$$sroa_idx$i$i$pre$phi$iZZZZZZZZ2D = $0;
     break;
    }
    $$sroa$0$0 = __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIiEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, $24 & 1) | 0;
    STACKTOP = sp;
    return $$sroa$0$0 | 0;
   } while (0);
   $$sroa$0$0 = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phi$iZZZZZZZZ2D >> 2] | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 7:
  {
   $53 = HEAP32[$1 >> 2] & 255;
   $55 = HEAP32[$0 + 8 >> 2] | 0;
   HEAP32[$$byval_copy >> 2] = $0;
   HEAP8[$$byval_copy + 4 >> 0] = $53;
   __ZN3fmt2v58internal17handle_char_specsIcNS1_18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE17char_spec_handlerEEEvPKNS0_18basic_format_specsIT_EEOT0_($55, $$byval_copy);
   $$sroa$0$0 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 8:
  {
   $57 = +HEAPF64[$1 >> 3];
   $59 = HEAP32[$0 + 8 >> 2] | 0;
   if (!$59) {
    HEAP32[$$byval_copy >> 2] = 0;
    HEAP32[$$byval_copy + 4 >> 2] = 32;
    HEAP32[$$byval_copy + 8 >> 2] = 0;
    HEAP32[$$byval_copy + 12 >> 2] = -1;
    HEAP8[$$byval_copy + 16 >> 0] = 0;
    HEAP8[$$byval_copy + 17 >> 0] = 0;
   } else {
    HEAP32[$$byval_copy >> 2] = HEAP32[$59 >> 2];
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$59 + 4 >> 2];
    HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$59 + 8 >> 2];
    HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$59 + 12 >> 2];
    HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$59 + 16 >> 2];
   }
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_doubleIdEEvT_RKNS0_18basic_format_specsIcEE($0, $57, $$byval_copy);
   $$sroa$0$0 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 9:
  {
   $66 = +HEAPF64[$1 >> 3];
   $68 = HEAP32[$0 + 8 >> 2] | 0;
   if (!$68) {
    HEAP32[$$byval_copy >> 2] = 0;
    HEAP32[$$byval_copy + 4 >> 2] = 32;
    HEAP32[$$byval_copy + 8 >> 2] = 0;
    HEAP32[$$byval_copy + 12 >> 2] = -1;
    HEAP8[$$byval_copy + 16 >> 0] = 0;
    HEAP8[$$byval_copy + 17 >> 0] = 0;
   } else {
    HEAP32[$$byval_copy >> 2] = HEAP32[$68 >> 2];
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$68 + 4 >> 2];
    HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$68 + 8 >> 2];
    HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$68 + 12 >> 2];
    HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$68 + 16 >> 2];
   }
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_doubleIeEEvT_RKNS0_18basic_format_specsIcEE($0, $66, $$byval_copy);
   $$sroa$0$0 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 10:
  {
   $75 = HEAP32[$1 >> 2] | 0;
   $77 = HEAP32[$0 + 8 >> 2] | 0;
   if (!$77) __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE5writeEPKc($0, $75); else {
    $80 = HEAP8[$77 + 17 >> 0] | 0;
    HEAP32[$$byval_copy >> 2] = $0;
    HEAP32[$$byval_copy + 4 >> 2] = $75;
    __ZN3fmt2v58internal24handle_cstring_type_specIcNS1_18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE20cstring_spec_handlerEEEvT_OT0_($80, $$byval_copy);
   }
   $$sroa$0$0 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 11:
  {
   $84 = HEAP32[$1 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $84;
   HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   $$sroa$0$0 = __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclENS0_17basic_string_viewIcEE($0, $$byval_copy) | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 case 12:
  {
   $$sroa$0$0 = __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclEPKv($0, HEAP32[$1 >> 2] | 0) | 0;
   STACKTOP = sp;
   return $$sroa$0$0 | 0;
  }
 default:
  ___assert_fail(17342, 17437, 1363, 17721);
 } while (0);
 return 0;
}

function __ZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$050 = 0, $$065 = 0, $$2 = 0, $$sroa$0$0$copyload$i$i = 0, $$sroa$0$0$copyload$i616$i$i = 0, $$sroa$0$0$copyload$i616$i$i40 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $48 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $71 = 0, $74 = 0, $76 = 0, $83 = 0, $9 = 0, $94 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $4 + $6 | 0;
 if (!$6) {
  STACKTOP = sp;
  return;
 }
 $9 = $7;
 $10 = $1 + 16 | 0;
 $11 = $1 + 20 | 0;
 $12 = $1 + 8 | 0;
 $13 = $1 + 56 | 0;
 $14 = $1 + 20 | 0;
 $15 = $1 + 12 | 0;
 $16 = $1 + 64 | 0;
 $17 = $1 + 40 | 0;
 $18 = $2 + 4 | 0;
 $19 = $2 + 8 | 0;
 $20 = $2 + 12 | 0;
 $21 = $2 + 4 | 0;
 $22 = $2 + 8 | 0;
 $23 = $2 + 12 | 0;
 $$065 = $4;
 L4 : while (1) {
  if ((HEAP8[$$065 >> 0] | 0) == 123) $$050 = $$065; else {
   $27 = $9 - $$065 | 0;
   if (($27 | 0) <= -1) {
    label = 5;
    break;
   }
   $29 = _memchr($$065, 123, $27) | 0;
   if (!$29) {
    label = 33;
    break;
   } else $$050 = $29;
  }
  __ZZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_EN6writerclEPKcSO_($3, $$065, $$050);
  $31 = $$050 + 1 | 0;
  if (($31 | 0) == ($7 | 0)) {
   label = 8;
   break;
  }
  L11 : do switch (HEAP8[$31 >> 0] | 0) {
  case 125:
   {
    $35 = HEAP32[$10 >> 2] | 0;
    if (($35 | 0) <= -1) {
     label = 11;
     break L4;
    }
    HEAP32[$10 >> 2] = $35 + 1;
    __ZN3fmt2v58internal12context_baseINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEENS0_20basic_format_contextIS7_cEEcE10do_get_argEj($2, $12, $35);
    HEAP32[$13 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$13 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$13 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    $39 = HEAP32[$12 >> 2] | 0;
    $41 = $31 - $39 | 0;
    if (($41 | 0) <= -1) {
     label = 13;
     break L4;
    }
    HEAP32[$12 >> 2] = $39 + $41;
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $41;
    switch (HEAP32[$16 >> 2] | 0) {
    case 1:
     {
      label = 15;
      break L4;
      break;
     }
    case 13:
     {
      $48 = $13;
      FUNCTION_TABLE_vii[HEAP32[$48 + 4 >> 2] & 127](HEAP32[$48 >> 2] | 0, $12);
      $$2 = $31;
      break L11;
      break;
     }
    default:
     {
      $$sroa$0$0$copyload$i616$i$i = HEAP32[$17 >> 2] | 0;
      HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
      HEAP32[$18 >> 2] = $$sroa$0$0$copyload$i616$i$i;
      HEAP32[$19 >> 2] = 0;
      HEAP32[$20 >> 2] = $12;
      HEAP32[$14 >> 2] = __ZN3fmt2v516visit_format_argINS0_13arg_formatterINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEEENS0_20basic_format_contextINSt3__220back_insert_iteratorIS6_EEcEEEENS4_9result_ofIFT_iEE4typeEOSF_RKNS0_16basic_format_argIT0_EE($2, $13) | 0;
      $$2 = $31;
      break L11;
     }
    }
    break;
   }
  case 123:
   {
    $$sroa$0$0$copyload$i$i = HEAP32[$11 >> 2] | 0;
    $59 = $$sroa$0$0$copyload$i$i + 8 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = $60 + 1 | 0;
    if ((HEAP32[$$sroa$0$0$copyload$i$i + 12 >> 2] | 0) >>> 0 < $61 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$$sroa$0$0$copyload$i$i >> 2] >> 2] & 127]($$sroa$0$0$copyload$i$i, $61);
    HEAP32[$59 >> 2] = $61;
    HEAP8[(HEAP32[$$sroa$0$0$copyload$i$i + 4 >> 2] | 0) + $60 >> 0] = HEAP8[$31 >> 0] | 0;
    HEAP32[$14 >> 2] = $$sroa$0$0$copyload$i$i;
    $$2 = $31;
    break;
   }
  default:
   {
    HEAP32[$2 >> 2] = $1;
    $71 = __ZN3fmt2v58internal12parse_arg_idIcNS1_10id_adapterIRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS8_EEcEEEEcEEEEPKT_SL_SL_OT0_($31, $7, $2) | 0;
    if (($71 | 0) == ($7 | 0)) {
     label = 32;
     break L4;
    }
    switch (HEAP8[$71 >> 0] | 0) {
    case 125:
     break;
    case 58:
     {
      $94 = __ZN3fmt2v514format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS6_EEcEEE15on_format_specsEPKcSG_($1, $71 + 1 | 0, $7) | 0;
      if (($94 | 0) == ($7 | 0)) {
       label = 31;
       break L4;
      }
      if ((HEAP8[$94 >> 0] | 0) == 125) {
       $$2 = $94;
       break L11;
      } else {
       label = 31;
       break L4;
      }
      break;
     }
    default:
     {
      label = 32;
      break L4;
     }
    }
    $74 = HEAP32[$12 >> 2] | 0;
    $76 = $71 - $74 | 0;
    if (($76 | 0) <= -1) {
     label = 24;
     break L4;
    }
    HEAP32[$12 >> 2] = $74 + $76;
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $76;
    switch (HEAP32[$16 >> 2] | 0) {
    case 1:
     {
      label = 26;
      break L4;
      break;
     }
    case 13:
     {
      $83 = $13;
      FUNCTION_TABLE_vii[HEAP32[$83 + 4 >> 2] & 127](HEAP32[$83 >> 2] | 0, $12);
      $$2 = $71;
      break L11;
      break;
     }
    default:
     {
      $$sroa$0$0$copyload$i616$i$i40 = HEAP32[$17 >> 2] | 0;
      HEAP32[$2 >> 2] = HEAP32[$11 >> 2];
      HEAP32[$21 >> 2] = $$sroa$0$0$copyload$i616$i$i40;
      HEAP32[$22 >> 2] = 0;
      HEAP32[$23 >> 2] = $12;
      HEAP32[$14 >> 2] = __ZN3fmt2v516visit_format_argINS0_13arg_formatterINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEEENS0_20basic_format_contextINSt3__220back_insert_iteratorIS6_EEcEEEENS4_9result_ofIFT_iEE4typeEOSF_RKNS0_16basic_format_argIT0_EE($2, $13) | 0;
      $$2 = $71;
      break L11;
     }
    }
   }
  } while (0);
  $100 = $$2 + 1 | 0;
  if (($100 | 0) == ($7 | 0)) {
   label = 35;
   break;
  } else $$065 = $100;
 }
 switch (label | 0) {
 case 5:
  {
   ___assert_fail(18933, 18966, 209, 19012);
   break;
  }
 case 8:
  {
   $33 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($33, 17126);
   ___cxa_throw($33 | 0, 6792, 18);
   break;
  }
 case 11:
  {
   $37 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($37, 17285);
   ___cxa_throw($37 | 0, 6792, 18);
   break;
  }
 case 13:
  {
   ___assert_fail(18933, 18966, 209, 19012);
   break;
  }
 case 15:
  {
   ___assert_fail(17342, 18966, 837, 17377);
   break;
  }
 case 24:
  {
   ___assert_fail(18933, 18966, 209, 19012);
   break;
  }
 case 26:
  {
   ___assert_fail(17342, 18966, 837, 17377);
   break;
  }
 case 31:
  {
   $98 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($98, 17148);
   ___cxa_throw($98 | 0, 6792, 18);
   break;
  }
 case 32:
  {
   $99 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($99, 17173);
   ___cxa_throw($99 | 0, 6792, 18);
   break;
  }
 case 33:
  {
   __ZZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_EN6writerclEPKcSO_($3, $$065, $7);
   STACKTOP = sp;
   return;
  }
 case 35:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEEEEEvcOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i7 = 0, $$0$i$i9 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $101 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $113 = 0, $116 = 0, $118 = 0, $119 = 0, $124 = 0, $125 = 0, $127 = 0, $13 = 0, $130 = 0, $132 = 0, $133 = 0, $139 = 0, $140 = 0, $148 = 0, $149 = 0, $152 = 0, $158 = 0, $161 = 0, $163 = 0, $165 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $39 = 0, $44 = 0, $50 = 0, $51 = 0, $56 = 0, $57 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $75 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $89 = 0, $94 = 0, $95 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy7 = sp + 16 | 0;
 $$byval_copy6 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp;
 switch ($0 << 24 >> 24 | 0) {
 case 100:
 case 0:
  {
   $6 = $1 + 8 | 0;
   $8 = HEAP32[$6 >> 2] | 0;
   $11 = HEAP32[$6 + 4 >> 2] | 0;
   $13 = _llvm_ctlz_i64($8 | 1 | 0, $11 | 0, 1) | 0;
   getTempRet0() | 0;
   $17 = ((64 - $13 | 0) * 1233 | 0) >>> 12;
   $19 = 272 + ($17 << 3) | 0;
   $24 = HEAP32[$19 + 4 >> 2] | 0;
   $31 = $17 + (($24 >>> 0 < $11 >>> 0 | (($24 | 0) == ($11 | 0) ? (HEAP32[$19 >> 2] | 0) >>> 0 <= $8 >>> 0 : 0)) & 1) | 0;
   $32 = HEAP32[$1 >> 2] | 0;
   $35 = HEAP32[$1 + 20 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 16;
   HEAP32[$2 + 4 >> 2] = $35;
   $38 = HEAP32[$1 + 4 >> 2] | 0;
   $39 = $3;
   HEAP32[$39 >> 2] = $8;
   HEAP32[$39 + 4 >> 2] = $11;
   HEAP32[$3 + 8 >> 2] = $31;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy7 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$$byval_copy7 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($32, $31, $$byval_copy6, $38, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 88:
 case 120:
  {
   $44 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$44 >> 2] | 0) + 16 >> 0] & 8) {
    $50 = $1 + 20 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    HEAP32[$50 >> 2] = $51 + 1;
    HEAP8[$1 + 16 + $51 >> 0] = 48;
    $56 = HEAP8[(HEAP32[$44 >> 2] | 0) + 17 >> 0] | 0;
    $57 = HEAP32[$50 >> 2] | 0;
    HEAP32[$50 >> 2] = $57 + 1;
    HEAP8[$1 + 16 + $57 >> 0] = $56;
   }
   $61 = $1 + 8 | 0;
   $$0$i$i = 0;
   $68 = HEAP32[$61 >> 2] | 0;
   $69 = HEAP32[$61 + 4 >> 2] | 0;
   do {
    $$0$i$i = $$0$i$i + 1 | 0;
    $68 = _bitshift64Lshr($68 | 0, $69 | 0, 4) | 0;
    $69 = getTempRet0() | 0;
   } while (!(($68 | 0) == 0 & ($69 | 0) == 0));
   $75 = HEAP32[$1 >> 2] | 0;
   $78 = HEAP32[$1 + 20 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 16;
   HEAP32[$2 + 4 >> 2] = $78;
   $80 = HEAP32[$44 >> 2] | 0;
   HEAP32[$3 >> 2] = $1;
   HEAP32[$3 + 4 >> 2] = $$0$i$i;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($75, $$0$i$i, $$byval_copy6, $80, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 66:
 case 98:
  {
   $82 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$82 >> 2] | 0) + 16 >> 0] & 8) {
    $88 = $1 + 20 | 0;
    $89 = HEAP32[$88 >> 2] | 0;
    HEAP32[$88 >> 2] = $89 + 1;
    HEAP8[$1 + 16 + $89 >> 0] = 48;
    $94 = HEAP8[(HEAP32[$82 >> 2] | 0) + 17 >> 0] | 0;
    $95 = HEAP32[$88 >> 2] | 0;
    HEAP32[$88 >> 2] = $95 + 1;
    HEAP8[$1 + 16 + $95 >> 0] = $94;
   }
   $99 = $1 + 8 | 0;
   $101 = HEAP32[$99 >> 2] | 0;
   $104 = HEAP32[$99 + 4 >> 2] | 0;
   $$0$i$i7 = 0;
   $106 = $101;
   $107 = $104;
   do {
    $$0$i$i7 = $$0$i$i7 + 1 | 0;
    $106 = _bitshift64Lshr($106 | 0, $107 | 0, 1) | 0;
    $107 = getTempRet0() | 0;
   } while (!(($106 | 0) == 0 & ($107 | 0) == 0));
   $113 = HEAP32[$1 >> 2] | 0;
   $116 = HEAP32[$1 + 20 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 16;
   HEAP32[$2 + 4 >> 2] = $116;
   $118 = HEAP32[$82 >> 2] | 0;
   $119 = $3;
   HEAP32[$119 >> 2] = $101;
   HEAP32[$119 + 4 >> 2] = $104;
   HEAP32[$3 + 8 >> 2] = $$0$i$i7;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy7 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$$byval_copy7 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($113, $$0$i$i7, $$byval_copy6, $118, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 111:
  {
   $124 = $1 + 8 | 0;
   $125 = $124;
   $127 = HEAP32[$125 >> 2] | 0;
   $130 = HEAP32[$125 + 4 >> 2] | 0;
   $$0$i$i9 = 0;
   $132 = $127;
   $133 = $130;
   do {
    $$0$i$i9 = $$0$i$i9 + 1 | 0;
    $132 = _bitshift64Lshr($132 | 0, $133 | 0, 3) | 0;
    $133 = getTempRet0() | 0;
   } while (!(($132 | 0) == 0 & ($133 | 0) == 0));
   $139 = $1 + 4 | 0;
   $140 = HEAP32[$139 >> 2] | 0;
   if (!(HEAP8[$140 + 16 >> 0] & 8)) {
    $165 = $127;
    $168 = $130;
    $170 = $140;
   } else if ((HEAP32[$140 + 12 >> 2] | 0) > ($$0$i$i9 | 0)) {
    $165 = $127;
    $168 = $130;
    $170 = $140;
   } else {
    $148 = $1 + 20 | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    HEAP32[$148 >> 2] = $149 + 1;
    HEAP8[$1 + 16 + $149 >> 0] = 48;
    $152 = $124;
    $165 = HEAP32[$152 >> 2] | 0;
    $168 = HEAP32[$152 + 4 >> 2] | 0;
    $170 = HEAP32[$139 >> 2] | 0;
   }
   $158 = HEAP32[$1 >> 2] | 0;
   $161 = HEAP32[$1 + 20 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 16;
   HEAP32[$2 + 4 >> 2] = $161;
   $163 = $3;
   HEAP32[$163 >> 2] = $165;
   HEAP32[$163 + 4 >> 2] = $168;
   HEAP32[$3 + 8 >> 2] = $$0$i$i9;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy7 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$$byval_copy7 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($158, $$0$i$i9, $$byval_copy6, $170, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 110:
  {
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEE6on_numEv($1);
   STACKTOP = sp;
   return;
  }
 default:
  {
   $171 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($171, 17534);
   ___cxa_throw($171 | 0, 6792, 18);
  }
 }
}

function __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEEEEEvcOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i7 = 0, $$0$i$i9 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $101 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $113 = 0, $116 = 0, $118 = 0, $119 = 0, $124 = 0, $125 = 0, $127 = 0, $13 = 0, $130 = 0, $132 = 0, $133 = 0, $139 = 0, $140 = 0, $148 = 0, $149 = 0, $152 = 0, $158 = 0, $161 = 0, $163 = 0, $165 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $39 = 0, $44 = 0, $50 = 0, $51 = 0, $56 = 0, $57 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $75 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $89 = 0, $94 = 0, $95 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy7 = sp + 16 | 0;
 $$byval_copy6 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp;
 switch ($0 << 24 >> 24 | 0) {
 case 100:
 case 0:
  {
   $6 = $1 + 8 | 0;
   $8 = HEAP32[$6 >> 2] | 0;
   $11 = HEAP32[$6 + 4 >> 2] | 0;
   $13 = _llvm_ctlz_i64($8 | 1 | 0, $11 | 0, 1) | 0;
   getTempRet0() | 0;
   $17 = ((64 - $13 | 0) * 1233 | 0) >>> 12;
   $19 = 272 + ($17 << 3) | 0;
   $24 = HEAP32[$19 + 4 >> 2] | 0;
   $31 = $17 + (($24 >>> 0 < $11 >>> 0 | (($24 | 0) == ($11 | 0) ? (HEAP32[$19 >> 2] | 0) >>> 0 <= $8 >>> 0 : 0)) & 1) | 0;
   $32 = HEAP32[$1 >> 2] | 0;
   $35 = HEAP32[$1 + 20 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 16;
   HEAP32[$2 + 4 >> 2] = $35;
   $38 = HEAP32[$1 + 4 >> 2] | 0;
   $39 = $3;
   HEAP32[$39 >> 2] = $8;
   HEAP32[$39 + 4 >> 2] = $11;
   HEAP32[$3 + 8 >> 2] = $31;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy7 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$$byval_copy7 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($32, $31, $$byval_copy6, $38, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 88:
 case 120:
  {
   $44 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$44 >> 2] | 0) + 16 >> 0] & 8) {
    $50 = $1 + 20 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    HEAP32[$50 >> 2] = $51 + 1;
    HEAP8[$1 + 16 + $51 >> 0] = 48;
    $56 = HEAP8[(HEAP32[$44 >> 2] | 0) + 17 >> 0] | 0;
    $57 = HEAP32[$50 >> 2] | 0;
    HEAP32[$50 >> 2] = $57 + 1;
    HEAP8[$1 + 16 + $57 >> 0] = $56;
   }
   $61 = $1 + 8 | 0;
   $$0$i$i = 0;
   $68 = HEAP32[$61 >> 2] | 0;
   $69 = HEAP32[$61 + 4 >> 2] | 0;
   do {
    $$0$i$i = $$0$i$i + 1 | 0;
    $68 = _bitshift64Lshr($68 | 0, $69 | 0, 4) | 0;
    $69 = getTempRet0() | 0;
   } while (!(($68 | 0) == 0 & ($69 | 0) == 0));
   $75 = HEAP32[$1 >> 2] | 0;
   $78 = HEAP32[$1 + 20 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 16;
   HEAP32[$2 + 4 >> 2] = $78;
   $80 = HEAP32[$44 >> 2] | 0;
   HEAP32[$3 >> 2] = $1;
   HEAP32[$3 + 4 >> 2] = $$0$i$i;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($75, $$0$i$i, $$byval_copy6, $80, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 66:
 case 98:
  {
   $82 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$82 >> 2] | 0) + 16 >> 0] & 8) {
    $88 = $1 + 20 | 0;
    $89 = HEAP32[$88 >> 2] | 0;
    HEAP32[$88 >> 2] = $89 + 1;
    HEAP8[$1 + 16 + $89 >> 0] = 48;
    $94 = HEAP8[(HEAP32[$82 >> 2] | 0) + 17 >> 0] | 0;
    $95 = HEAP32[$88 >> 2] | 0;
    HEAP32[$88 >> 2] = $95 + 1;
    HEAP8[$1 + 16 + $95 >> 0] = $94;
   }
   $99 = $1 + 8 | 0;
   $101 = HEAP32[$99 >> 2] | 0;
   $104 = HEAP32[$99 + 4 >> 2] | 0;
   $$0$i$i7 = 0;
   $106 = $101;
   $107 = $104;
   do {
    $$0$i$i7 = $$0$i$i7 + 1 | 0;
    $106 = _bitshift64Lshr($106 | 0, $107 | 0, 1) | 0;
    $107 = getTempRet0() | 0;
   } while (!(($106 | 0) == 0 & ($107 | 0) == 0));
   $113 = HEAP32[$1 >> 2] | 0;
   $116 = HEAP32[$1 + 20 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 16;
   HEAP32[$2 + 4 >> 2] = $116;
   $118 = HEAP32[$82 >> 2] | 0;
   $119 = $3;
   HEAP32[$119 >> 2] = $101;
   HEAP32[$119 + 4 >> 2] = $104;
   HEAP32[$3 + 8 >> 2] = $$0$i$i7;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy7 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$$byval_copy7 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($113, $$0$i$i7, $$byval_copy6, $118, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 111:
  {
   $124 = $1 + 8 | 0;
   $125 = $124;
   $127 = HEAP32[$125 >> 2] | 0;
   $130 = HEAP32[$125 + 4 >> 2] | 0;
   $$0$i$i9 = 0;
   $132 = $127;
   $133 = $130;
   do {
    $$0$i$i9 = $$0$i$i9 + 1 | 0;
    $132 = _bitshift64Lshr($132 | 0, $133 | 0, 3) | 0;
    $133 = getTempRet0() | 0;
   } while (!(($132 | 0) == 0 & ($133 | 0) == 0));
   $139 = $1 + 4 | 0;
   $140 = HEAP32[$139 >> 2] | 0;
   if (!(HEAP8[$140 + 16 >> 0] & 8)) {
    $165 = $127;
    $168 = $130;
    $170 = $140;
   } else if ((HEAP32[$140 + 12 >> 2] | 0) > ($$0$i$i9 | 0)) {
    $165 = $127;
    $168 = $130;
    $170 = $140;
   } else {
    $148 = $1 + 20 | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    HEAP32[$148 >> 2] = $149 + 1;
    HEAP8[$1 + 16 + $149 >> 0] = 48;
    $152 = $124;
    $165 = HEAP32[$152 >> 2] | 0;
    $168 = HEAP32[$152 + 4 >> 2] | 0;
    $170 = HEAP32[$139 >> 2] | 0;
   }
   $158 = HEAP32[$1 >> 2] | 0;
   $161 = HEAP32[$1 + 20 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 16;
   HEAP32[$2 + 4 >> 2] = $161;
   $163 = $3;
   HEAP32[$163 >> 2] = $165;
   HEAP32[$163 + 4 >> 2] = $168;
   HEAP32[$3 + 8 >> 2] = $$0$i$i9;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy7 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$$byval_copy7 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($158, $$0$i$i9, $$byval_copy6, $170, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 110:
  {
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEE6on_numEv($1);
   STACKTOP = sp;
   return;
  }
 default:
  {
   $171 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($171, 17534);
   ___cxa_throw($171 | 0, 6792, 18);
  }
 }
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i116 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i122 = 0, $$0101 = 0, $$0105 = 0, $$0111 = 0, $$0112 = 0, $$0112140 = 0, $$092 = 0, $$093 = 0, $$094$off0 = 0, $$095 = 0, $$096 = 0, $$097 = 0, $$098 = 0, $$1102 = 0, $$1106 = 0, $$199 = 0, $$2$off0 = 0, $$2100 = 0, $$2103 = 0, $$2103$be = 0, $$2107 = 0, $$3 = 0, $$3104 = 0, $$3108 = 0, $$5 = 0, $$5110 = 0, $$6 = 0, $$7 = 0, $$sroa$0129$0 = 0, $109 = 0, $11 = 0, $114 = 0, $119 = 0, $120 = 0, $126 = 0, $13 = 0, $131 = 0, $138 = 0, $139 = 0, $140 = 0, $156 = 0, $161 = 0, $175 = 0, $18 = 0, $23 = 0, $29 = 0, $32 = 0, $44 = 0, $47 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $7 = 0, $79 = 0, $82 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $7 = sp;
 $11 = ($3 - $2 | 0) / 12 | 0;
 if ($11 >>> 0 > 100) {
  $13 = _malloc($11) | 0;
  if (!$13) __ZSt17__throw_bad_allocv(); else {
   $$0111 = $13;
   $$sroa$0129$0 = $13;
  }
 } else {
  $$0111 = $7;
  $$sroa$0129$0 = 0;
 }
 $$0101 = 0;
 $$0105 = $11;
 $$097 = $2;
 $$098 = $$0111;
 while (1) {
  if (($$097 | 0) == ($3 | 0)) break;
  $18 = HEAP8[$$097 + 8 + 3 >> 0] | 0;
  if ($18 << 24 >> 24 < 0) $23 = HEAP32[$$097 + 4 >> 2] | 0; else $23 = $18 & 255;
  if (!$23) {
   HEAP8[$$098 >> 0] = 2;
   $$1102 = $$0101 + 1 | 0;
   $$1106 = $$0105 + -1 | 0;
  } else {
   HEAP8[$$098 >> 0] = 1;
   $$1102 = $$0101;
   $$1106 = $$0105;
  }
  $$0101 = $$1102;
  $$0105 = $$1106;
  $$097 = $$097 + 12 | 0;
  $$098 = $$098 + 1 | 0;
 }
 $$096 = 0;
 $$2103 = $$0101;
 $$2107 = $$0105;
 while (1) {
  $29 = HEAP32[$0 >> 2] | 0;
  do if (!$29) $60 = 1; else {
   $32 = HEAP32[$29 + 12 >> 2] | 0;
   if (($32 | 0) == (HEAP32[$29 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 127]($29) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$32 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$0 >> 2] = 0;
    $60 = 1;
    break;
   } else {
    $60 = (HEAP32[$0 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $44 = HEAP32[$1 >> 2] | 0;
  if (!$44) {
   $61 = 1;
   $79 = 0;
  } else {
   $47 = HEAP32[$44 + 12 >> 2] | 0;
   if (($47 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$47 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $61 = 1;
    $79 = 0;
   } else {
    $61 = 0;
    $79 = $44;
   }
  }
  $64 = HEAP32[$0 >> 2] | 0;
  if (!(($$2107 | 0) != 0 & ($60 ^ $61))) break;
  $95 = HEAP32[$64 + 12 >> 2] | 0;
  if (($95 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$95 >> 2] | 0) | 0;
  if ($6) $$095 = $$0$i$i; else $$095 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 31]($4, $$0$i$i) | 0;
  $109 = $$096 + 1 | 0;
  $$093 = $2;
  $$094$off0 = 0;
  $$199 = $$0111;
  $$3104 = $$2103;
  $$3108 = $$2107;
  while (1) {
   if (($$093 | 0) == ($3 | 0)) break;
   do if ((HEAP8[$$199 >> 0] | 0) == 1) {
    $114 = $$093 + 8 + 3 | 0;
    if ((HEAP8[$114 >> 0] | 0) < 0) $119 = HEAP32[$$093 >> 2] | 0; else $119 = $$093;
    $120 = HEAP32[$119 + ($$096 << 2) >> 2] | 0;
    if ($6) $$092 = $120; else $$092 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 31]($4, $120) | 0;
    if (($$095 | 0) != ($$092 | 0)) {
     HEAP8[$$199 >> 0] = 0;
     $$2$off0 = $$094$off0;
     $$5 = $$3104;
     $$5110 = $$3108 + -1 | 0;
     break;
    }
    $126 = HEAP8[$114 >> 0] | 0;
    if ($126 << 24 >> 24 < 0) $131 = HEAP32[$$093 + 4 >> 2] | 0; else $131 = $126 & 255;
    if (($131 | 0) == ($109 | 0)) {
     HEAP8[$$199 >> 0] = 2;
     $$2$off0 = 1;
     $$5 = $$3104 + 1 | 0;
     $$5110 = $$3108 + -1 | 0;
    } else {
     $$2$off0 = 1;
     $$5 = $$3104;
     $$5110 = $$3108;
    }
   } else {
    $$2$off0 = $$094$off0;
    $$5 = $$3104;
    $$5110 = $$3108;
   } while (0);
   $$093 = $$093 + 12 | 0;
   $$094$off0 = $$2$off0;
   $$199 = $$199 + 1 | 0;
   $$3104 = $$5;
   $$3108 = $$5110;
  }
  L67 : do if ($$094$off0) {
   $138 = HEAP32[$0 >> 2] | 0;
   $139 = $138 + 12 | 0;
   $140 = HEAP32[$139 >> 2] | 0;
   if (($140 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 40 >> 2] & 127]($138) | 0; else {
    HEAP32[$139 >> 2] = $140 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$140 >> 2] | 0) | 0;
   }
   if (($$3104 + $$3108 | 0) >>> 0 > 1) {
    $$0 = $2;
    $$2100 = $$0111;
    $$6 = $$3104;
    while (1) {
     if (($$0 | 0) == ($3 | 0)) {
      $$2103$be = $$6;
      break L67;
     }
     if ((HEAP8[$$2100 >> 0] | 0) == 2) {
      $156 = HEAP8[$$0 + 8 + 3 >> 0] | 0;
      if ($156 << 24 >> 24 < 0) $161 = HEAP32[$$0 + 4 >> 2] | 0; else $161 = $156 & 255;
      if (($161 | 0) == ($109 | 0)) $$7 = $$6; else {
       HEAP8[$$2100 >> 0] = 0;
       $$7 = $$6 + -1 | 0;
      }
     } else $$7 = $$6;
     $$0 = $$0 + 12 | 0;
     $$2100 = $$2100 + 1 | 0;
     $$6 = $$7;
    }
   } else $$2103$be = $$3104;
  } else $$2103$be = $$3104; while (0);
  $$096 = $109;
  $$2103 = $$2103$be;
  $$2107 = $$3108;
 }
 do if (!$64) $175 = 1; else {
  $67 = HEAP32[$64 + 12 >> 2] | 0;
  if (($67 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) $$0$i$i$i$i116 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $$0$i$i$i$i116 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$67 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i116, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$0 >> 2] = 0;
   $175 = 1;
   break;
  } else {
   $175 = (HEAP32[$0 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$79) label = 41; else {
  $82 = HEAP32[$79 + 12 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$79 + 16 >> 2] | 0)) $$0$i$i2$i$i122 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$79 >> 2] | 0) + 36 >> 2] & 127]($79) | 0; else $$0$i$i2$i$i122 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$82 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i122, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   label = 41;
   break;
  } else if ($175) break; else {
   label = 79;
   break;
  }
 } while (0);
 if ((label | 0) == 41) if ($175) label = 79;
 if ((label | 0) == 79) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 $$0112 = $2;
 $$3 = $$0111;
 while (1) {
  if (($$0112 | 0) == ($3 | 0)) {
   label = 84;
   break;
  }
  if ((HEAP8[$$3 >> 0] | 0) == 2) {
   $$0112140 = $$0112;
   break;
  }
  $$0112 = $$0112 + 12 | 0;
  $$3 = $$3 + 1 | 0;
 }
 if ((label | 0) == 84) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$0112140 = $3;
 }
 _free($$sroa$0129$0);
 STACKTOP = sp;
 return $$0112140 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i112 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i118 = 0, $$0101 = 0, $$0107 = 0, $$0108 = 0, $$0108136 = 0, $$088 = 0, $$089 = 0, $$090$off0 = 0, $$091 = 0, $$092 = 0, $$093 = 0, $$094 = 0, $$097 = 0, $$1102 = 0, $$195 = 0, $$198 = 0, $$2$off0 = 0, $$2103 = 0, $$296 = 0, $$299 = 0, $$299$be = 0, $$3 = 0, $$3100 = 0, $$3104 = 0, $$5 = 0, $$5106 = 0, $$6 = 0, $$7 = 0, $$sroa$0125$0 = 0, $104 = 0, $109 = 0, $11 = 0, $113 = 0, $118 = 0, $119 = 0, $125 = 0, $13 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $154 = 0, $159 = 0, $17 = 0, $173 = 0, $22 = 0, $28 = 0, $31 = 0, $43 = 0, $46 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $7 = 0, $78 = 0, $81 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $7 = sp;
 $11 = ($3 - $2 | 0) / 12 | 0;
 if ($11 >>> 0 > 100) {
  $13 = _malloc($11) | 0;
  if (!$13) __ZSt17__throw_bad_allocv(); else {
   $$0107 = $13;
   $$sroa$0125$0 = $13;
  }
 } else {
  $$0107 = $7;
  $$sroa$0125$0 = 0;
 }
 $$0101 = $11;
 $$093 = $2;
 $$094 = $$0107;
 $$097 = 0;
 while (1) {
  if (($$093 | 0) == ($3 | 0)) break;
  $17 = HEAP8[$$093 + 11 >> 0] | 0;
  if ($17 << 24 >> 24 < 0) $22 = HEAP32[$$093 + 4 >> 2] | 0; else $22 = $17 & 255;
  if (!$22) {
   HEAP8[$$094 >> 0] = 2;
   $$1102 = $$0101 + -1 | 0;
   $$198 = $$097 + 1 | 0;
  } else {
   HEAP8[$$094 >> 0] = 1;
   $$1102 = $$0101;
   $$198 = $$097;
  }
  $$0101 = $$1102;
  $$093 = $$093 + 12 | 0;
  $$094 = $$094 + 1 | 0;
  $$097 = $$198;
 }
 $$092 = 0;
 $$2103 = $$0101;
 $$299 = $$097;
 while (1) {
  $28 = HEAP32[$0 >> 2] | 0;
  do if (!$28) $59 = 1; else {
   $31 = HEAP32[$28 + 12 >> 2] | 0;
   if (($31 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$31 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$0 >> 2] = 0;
    $59 = 1;
    break;
   } else {
    $59 = (HEAP32[$0 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $43 = HEAP32[$1 >> 2] | 0;
  if (!$43) {
   $60 = 1;
   $78 = 0;
  } else {
   $46 = HEAP32[$43 + 12 >> 2] | 0;
   if (($46 | 0) == (HEAP32[$43 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$43 >> 2] | 0) + 36 >> 2] & 127]($43) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$46 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $60 = 1;
    $78 = 0;
   } else {
    $60 = 0;
    $78 = $43;
   }
  }
  $63 = HEAP32[$0 >> 2] | 0;
  if (!(($$2103 | 0) != 0 & ($59 ^ $60))) break;
  $94 = HEAP32[$63 + 12 >> 2] | 0;
  if (($94 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 36 >> 2] & 127]($63) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$94 >> 0] | 0) | 0;
  $104 = $$0$i$i & 255;
  if ($6) $$091 = $104; else $$091 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, $104) | 0;
  $109 = $$092 + 1 | 0;
  $$089 = $2;
  $$090$off0 = 0;
  $$195 = $$0107;
  $$3100 = $$299;
  $$3104 = $$2103;
  while (1) {
   if (($$089 | 0) == ($3 | 0)) break;
   do if ((HEAP8[$$195 >> 0] | 0) == 1) {
    $113 = $$089 + 11 | 0;
    if ((HEAP8[$113 >> 0] | 0) < 0) $118 = HEAP32[$$089 >> 2] | 0; else $118 = $$089;
    $119 = HEAP8[$118 + $$092 >> 0] | 0;
    if ($6) $$088 = $119; else $$088 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, $119) | 0;
    if ($$091 << 24 >> 24 != $$088 << 24 >> 24) {
     HEAP8[$$195 >> 0] = 0;
     $$2$off0 = $$090$off0;
     $$5 = $$3100;
     $$5106 = $$3104 + -1 | 0;
     break;
    }
    $125 = HEAP8[$113 >> 0] | 0;
    if ($125 << 24 >> 24 < 0) $130 = HEAP32[$$089 + 4 >> 2] | 0; else $130 = $125 & 255;
    if (($130 | 0) == ($109 | 0)) {
     HEAP8[$$195 >> 0] = 2;
     $$2$off0 = 1;
     $$5 = $$3100 + 1 | 0;
     $$5106 = $$3104 + -1 | 0;
    } else {
     $$2$off0 = 1;
     $$5 = $$3100;
     $$5106 = $$3104;
    }
   } else {
    $$2$off0 = $$090$off0;
    $$5 = $$3100;
    $$5106 = $$3104;
   } while (0);
   $$089 = $$089 + 12 | 0;
   $$090$off0 = $$2$off0;
   $$195 = $$195 + 1 | 0;
   $$3100 = $$5;
   $$3104 = $$5106;
  }
  L67 : do if ($$090$off0) {
   $137 = HEAP32[$0 >> 2] | 0;
   $138 = $137 + 12 | 0;
   $139 = HEAP32[$138 >> 2] | 0;
   if (($139 | 0) == (HEAP32[$137 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$137 >> 2] | 0) + 40 >> 2] & 127]($137) | 0; else {
    HEAP32[$138 >> 2] = $139 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$139 >> 0] | 0) | 0;
   }
   if (($$3100 + $$3104 | 0) >>> 0 > 1) {
    $$0 = $2;
    $$296 = $$0107;
    $$6 = $$3100;
    while (1) {
     if (($$0 | 0) == ($3 | 0)) {
      $$299$be = $$6;
      break L67;
     }
     if ((HEAP8[$$296 >> 0] | 0) == 2) {
      $154 = HEAP8[$$0 + 11 >> 0] | 0;
      if ($154 << 24 >> 24 < 0) $159 = HEAP32[$$0 + 4 >> 2] | 0; else $159 = $154 & 255;
      if (($159 | 0) == ($109 | 0)) $$7 = $$6; else {
       HEAP8[$$296 >> 0] = 0;
       $$7 = $$6 + -1 | 0;
      }
     } else $$7 = $$6;
     $$0 = $$0 + 12 | 0;
     $$296 = $$296 + 1 | 0;
     $$6 = $$7;
    }
   } else $$299$be = $$3100;
  } else $$299$be = $$3100; while (0);
  $$092 = $109;
  $$2103 = $$3104;
  $$299 = $$299$be;
 }
 do if (!$63) $173 = 1; else {
  $66 = HEAP32[$63 + 12 >> 2] | 0;
  if (($66 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) $$0$i$i$i$i112 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 36 >> 2] & 127]($63) | 0; else $$0$i$i$i$i112 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$66 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i112, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$0 >> 2] = 0;
   $173 = 1;
   break;
  } else {
   $173 = (HEAP32[$0 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$78) label = 41; else {
  $81 = HEAP32[$78 + 12 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$78 + 16 >> 2] | 0)) $$0$i$i2$i$i118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$78 >> 2] | 0) + 36 >> 2] & 127]($78) | 0; else $$0$i$i2$i$i118 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i118, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   label = 41;
   break;
  } else if ($173) break; else {
   label = 79;
   break;
  }
 } while (0);
 if ((label | 0) == 41) if ($173) label = 79;
 if ((label | 0) == 79) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 $$0108 = $2;
 $$3 = $$0107;
 while (1) {
  if (($$0108 | 0) == ($3 | 0)) {
   label = 84;
   break;
  }
  if ((HEAP8[$$3 >> 0] | 0) == 2) {
   $$0108136 = $$0108;
   break;
  }
  $$0108 = $$0108 + 12 | 0;
  $$3 = $$3 + 1 | 0;
 }
 if ((label | 0) == 84) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  $$0108136 = $3;
 }
 _free($$sroa$0125$0);
 STACKTOP = sp;
 return $$0108136 | 0;
}

function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$lcssa237 = 0, $$0175219 = 0, $$0179218 = 0, $$0185217 = 0, $$0189$lcssa236 = 0, $$0189216 = 0, $$0193$lcssa234235 = 0, $$0193225 = 0, $$1176 = 0, $$1180 = 0, $$1186 = 0, $$1190 = 0, $$2177$$0175 = 0, $$2177$lcssa = 0, $$2177210 = 0, $$2181209 = 0, $$2187208 = 0, $$2191$$0189 = 0, $$2191$lcssa = 0, $$2191207 = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182 = 0, $$3188 = 0, $$3192 = 0, $$4183$sink = 0, $$5 = 0, $$5184201 = 0, $$6202 = 0, $$pre$phiZ2D = 0, $10 = 0, $102 = 0, $104 = 0, $14 = 0, $2 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $80 = 0, $9 = 0, $90 = 0, $95 = 0, $96 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 $2 = sp + 1024 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 $4 = HEAP8[$1 >> 0] | 0;
 L1 : do if (!($4 << 24 >> 24)) {
  $$0175$lcssa237 = 1;
  $$0189$lcssa236 = -1;
  $$0193$lcssa234235 = 0;
  $$2177$lcssa = 1;
  $$2191$lcssa = -1;
  label = 25;
 } else {
  $$0193225 = 0;
  $10 = $4;
  do {
   if (!(HEAP8[$0 + $$0193225 >> 0] | 0)) {
    $$3 = 0;
    break L1;
   }
   $9 = $10 & 255;
   $14 = $2 + ($9 >>> 5 << 2) | 0;
   HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($9 & 31);
   $$0193225 = $$0193225 + 1 | 0;
   HEAP32[$3 + ($9 << 2) >> 2] = $$0193225;
   $10 = HEAP8[$1 + $$0193225 >> 0] | 0;
  } while ($10 << 24 >> 24 != 0);
  $22 = $$0193225 >>> 0 > 1;
  if ($22) {
   $$0175219 = 1;
   $$0179218 = 1;
   $$0185217 = 0;
   $$0189216 = -1;
   $27 = 1;
   while (1) {
    $25 = HEAP8[$1 + ($$0179218 + $$0189216) >> 0] | 0;
    $28 = HEAP8[$1 + $27 >> 0] | 0;
    do if ($25 << 24 >> 24 == $28 << 24 >> 24) if (($$0179218 | 0) == ($$0175219 | 0)) {
     $$1176 = $$0175219;
     $$1180 = 1;
     $$1186 = $$0175219 + $$0185217 | 0;
     $$1190 = $$0189216;
     break;
    } else {
     $$1176 = $$0175219;
     $$1180 = $$0179218 + 1 | 0;
     $$1186 = $$0185217;
     $$1190 = $$0189216;
     break;
    } else if (($25 & 255) > ($28 & 255)) {
     $$1176 = $27 - $$0189216 | 0;
     $$1180 = 1;
     $$1186 = $27;
     $$1190 = $$0189216;
     break;
    } else {
     $$1176 = 1;
     $$1180 = 1;
     $$1186 = $$0185217 + 1 | 0;
     $$1190 = $$0185217;
     break;
    } while (0);
    $27 = $$1180 + $$1186 | 0;
    if ($27 >>> 0 >= $$0193225 >>> 0) break; else {
     $$0175219 = $$1176;
     $$0179218 = $$1180;
     $$0185217 = $$1186;
     $$0189216 = $$1190;
    }
   }
   if ($22) {
    $$2177210 = 1;
    $$2181209 = 1;
    $$2187208 = 0;
    $$2191207 = -1;
    $42 = 1;
    while (1) {
     $40 = HEAP8[$1 + ($$2181209 + $$2191207) >> 0] | 0;
     $43 = HEAP8[$1 + $42 >> 0] | 0;
     do if ($40 << 24 >> 24 == $43 << 24 >> 24) if (($$2181209 | 0) == ($$2177210 | 0)) {
      $$3178 = $$2177210;
      $$3182 = 1;
      $$3188 = $$2177210 + $$2187208 | 0;
      $$3192 = $$2191207;
      break;
     } else {
      $$3178 = $$2177210;
      $$3182 = $$2181209 + 1 | 0;
      $$3188 = $$2187208;
      $$3192 = $$2191207;
      break;
     } else if (($40 & 255) < ($43 & 255)) {
      $$3178 = $42 - $$2191207 | 0;
      $$3182 = 1;
      $$3188 = $42;
      $$3192 = $$2191207;
      break;
     } else {
      $$3178 = 1;
      $$3182 = 1;
      $$3188 = $$2187208 + 1 | 0;
      $$3192 = $$2187208;
      break;
     } while (0);
     $42 = $$3182 + $$3188 | 0;
     if ($42 >>> 0 >= $$0193225 >>> 0) {
      $$0175$lcssa237 = $$1176;
      $$0189$lcssa236 = $$1190;
      $$0193$lcssa234235 = $$0193225;
      $$2177$lcssa = $$3178;
      $$2191$lcssa = $$3192;
      label = 25;
      break;
     } else {
      $$2177210 = $$3178;
      $$2181209 = $$3182;
      $$2187208 = $$3188;
      $$2191207 = $$3192;
     }
    }
   } else {
    $$0175$lcssa237 = $$1176;
    $$0189$lcssa236 = $$1190;
    $$0193$lcssa234235 = $$0193225;
    $$2177$lcssa = 1;
    $$2191$lcssa = -1;
    label = 25;
   }
  } else {
   $$0175$lcssa237 = 1;
   $$0189$lcssa236 = -1;
   $$0193$lcssa234235 = $$0193225;
   $$2177$lcssa = 1;
   $$2191$lcssa = -1;
   label = 25;
  }
 } while (0);
 L34 : do if ((label | 0) == 25) {
  $55 = ($$2191$lcssa + 1 | 0) >>> 0 > ($$0189$lcssa236 + 1 | 0) >>> 0;
  $$2177$$0175 = $55 ? $$2177$lcssa : $$0175$lcssa237;
  $$2191$$0189 = $55 ? $$2191$lcssa : $$0189$lcssa236;
  $57 = $$2191$$0189 + 1 | 0;
  if (!(_memcmp($1, $1 + $$2177$$0175 | 0, $57) | 0)) {
   $64 = $$0193$lcssa234235 - $$2177$$0175 | 0;
   $$0168 = $64;
   $$5 = $$2177$$0175;
   $$pre$phiZ2D = $64;
  } else {
   $61 = $$0193$lcssa234235 - $$2191$$0189 + -1 | 0;
   $63 = ($$2191$$0189 >>> 0 > $61 >>> 0 ? $$2191$$0189 : $61) + 1 | 0;
   $$0168 = 0;
   $$5 = $63;
   $$pre$phiZ2D = $$0193$lcssa234235 - $63 | 0;
  }
  $65 = $$0193$lcssa234235 | 63;
  $66 = $$0193$lcssa234235 + -1 | 0;
  $67 = ($$0168 | 0) != 0;
  $$0166 = $0;
  $$0169 = 0;
  $$0170 = $0;
  while (1) {
   $69 = $$0166;
   do if (($$0170 - $69 | 0) >>> 0 < $$0193$lcssa234235 >>> 0) {
    $72 = _memchr($$0170, 0, $65) | 0;
    if (!$72) {
     $$3173 = $$0170 + $65 | 0;
     break;
    } else if (($72 - $69 | 0) >>> 0 < $$0193$lcssa234235 >>> 0) {
     $$3 = 0;
     break L34;
    } else {
     $$3173 = $72;
     break;
    }
   } else $$3173 = $$0170; while (0);
   $80 = HEAPU8[$$0166 + $66 >> 0] | 0;
   L48 : do if (!(1 << ($80 & 31) & HEAP32[$2 + ($80 >>> 5 << 2) >> 2])) {
    $$0169$be = 0;
    $$4183$sink = $$0193$lcssa234235;
   } else {
    $90 = $$0193$lcssa234235 - (HEAP32[$3 + ($80 << 2) >> 2] | 0) | 0;
    if ($90 | 0) {
     $$0169$be = 0;
     $$4183$sink = $67 & ($$0169 | 0) != 0 & $90 >>> 0 < $$5 >>> 0 ? $$pre$phiZ2D : $90;
     break;
    }
    $95 = $57 >>> 0 > $$0169 >>> 0;
    $96 = $95 ? $57 : $$0169;
    $98 = HEAP8[$1 + $96 >> 0] | 0;
    L53 : do if ($98 << 24 >> 24) {
     $$5184201 = $96;
     $102 = $98;
     while (1) {
      if ($102 << 24 >> 24 != (HEAP8[$$0166 + $$5184201 >> 0] | 0)) break;
      $104 = $$5184201 + 1 | 0;
      $102 = HEAP8[$1 + $104 >> 0] | 0;
      if (!($102 << 24 >> 24)) break L53; else $$5184201 = $104;
     }
     $$0169$be = 0;
     $$4183$sink = $$5184201 - $$2191$$0189 | 0;
     break L48;
    } while (0);
    if (!$95) {
     $$3 = $$0166;
     break L34;
    }
    $$6202 = $57;
    while (1) {
     $$6202 = $$6202 + -1 | 0;
     if ((HEAP8[$1 + $$6202 >> 0] | 0) != (HEAP8[$$0166 + $$6202 >> 0] | 0)) {
      $$0169$be = $$0168;
      $$4183$sink = $$5;
      break L48;
     }
     if ($$6202 >>> 0 <= $$0169 >>> 0) {
      $$3 = $$0166;
      break L34;
     }
    }
   } while (0);
   $$0166 = $$0166 + $$4183$sink | 0;
   $$0169 = $$0169$be;
   $$0170 = $$3173;
  }
 } while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0$ph = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0, $$3 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $126 = 0, $129 = 0, $130 = 0, $132 = 0, $135 = 0, $136 = 0, $138 = 0, $142 = 0, $144 = 0, $146 = 0, $147 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $93 = 0, $99 = 0, $spec$select = 0;
 HEAP32[$2 >> 2] = $0;
 $16 = $13 + 8 + 3 | 0;
 $17 = $13 + 4 | 0;
 $19 = $12 + 8 + 3 | 0;
 $20 = $12 + 4 | 0;
 $22 = ($3 & 512 | 0) == 0;
 $23 = ($14 | 0) > 0;
 $24 = $11 + 11 | 0;
 $25 = $11 + 4 | 0;
 $$0106 = 0;
 $$099 = $4;
 while (1) {
  if (($$0106 | 0) == 4) break;
  L4 : do switch (HEAP8[$8 + $$0106 >> 0] | 0) {
  case 0:
   {
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $$2 = $$099;
    break;
   }
  case 1:
   {
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 31]($6, 32) | 0;
    $41 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $41 + 4;
    HEAP32[$41 >> 2] = $40;
    $$2 = $$099;
    break;
   }
  case 3:
   {
    $43 = HEAP8[$16 >> 0] | 0;
    $44 = $43 << 24 >> 24 < 0;
    if (!(($44 ? HEAP32[$17 >> 2] | 0 : $43 & 255) | 0)) $$2 = $$099; else {
     $51 = HEAP32[($44 ? HEAP32[$13 >> 2] | 0 : $13) >> 2] | 0;
     $52 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $52 + 4;
     HEAP32[$52 >> 2] = $51;
     $$2 = $$099;
    }
    break;
   }
  case 2:
   {
    $54 = HEAP8[$19 >> 0] | 0;
    $55 = $54 << 24 >> 24 < 0;
    $58 = $55 ? HEAP32[$20 >> 2] | 0 : $54 & 255;
    if ($22 | ($58 | 0) == 0) $$2 = $$099; else {
     $61 = $55 ? HEAP32[$12 >> 2] | 0 : $12;
     $62 = $61 + ($58 << 2) | 0;
     $63 = HEAP32[$2 >> 2] | 0;
     $$0$i$i112 = $63;
     $64 = $61;
     while (1) {
      if (($64 | 0) == ($62 | 0)) break;
      HEAP32[$$0$i$i112 >> 2] = HEAP32[$64 >> 2];
      $$0$i$i112 = $$0$i$i112 + 4 | 0;
      $64 = $64 + 4 | 0;
     }
     HEAP32[$2 >> 2] = $63 + ($58 << 2);
     $$2 = $$099;
    }
    break;
   }
  case 4:
   {
    $69 = HEAP32[$2 >> 2] | 0;
    $spec$select = $7 ? $$099 + 4 | 0 : $$099;
    $$0103 = $spec$select;
    while (1) {
     if ($$0103 >>> 0 >= $5 >>> 0) break;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] & 31]($6, 2048, HEAP32[$$0103 >> 2] | 0) | 0)) break;
     $$0103 = $$0103 + 4 | 0;
    }
    if ($23) {
     $$0101 = $14;
     $$1104 = $$0103;
     while (1) {
      $79 = ($$0101 | 0) > 0;
      if (!($$1104 >>> 0 > $spec$select >>> 0 & $79)) break;
      $81 = $$1104 + -4 | 0;
      $82 = HEAP32[$81 >> 2] | 0;
      $83 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $83 + 4;
      HEAP32[$83 >> 2] = $82;
      $$0101 = $$0101 + -1 | 0;
      $$1104 = $81;
     }
     if ($79) $93 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 31]($6, 48) | 0; else $93 = 0;
     $$1102 = $$0101;
     $92 = HEAP32[$2 >> 2] | 0;
     while (1) {
      $91 = $92 + 4 | 0;
      if (($$1102 | 0) <= 0) break;
      HEAP32[$92 >> 2] = $93;
      $$1102 = $$1102 + -1 | 0;
      $92 = $91;
     }
     HEAP32[$2 >> 2] = $91;
     HEAP32[$92 >> 2] = $9;
     $$2105 = $$1104;
    } else $$2105 = $$0103;
    if (($$2105 | 0) == ($spec$select | 0)) {
     $99 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 31]($6, 48) | 0;
     $100 = HEAP32[$2 >> 2] | 0;
     $101 = $100 + 4 | 0;
     HEAP32[$2 >> 2] = $101;
     HEAP32[$100 >> 2] = $99;
     $135 = $101;
    } else {
     $102 = HEAP8[$24 >> 0] | 0;
     $103 = $102 << 24 >> 24 < 0;
     if (!(($103 ? HEAP32[$25 >> 2] | 0 : $102 & 255) | 0)) $$0$ph = -1; else $$0$ph = HEAP8[($103 ? HEAP32[$11 >> 2] | 0 : $11) >> 0] | 0;
     $$0 = $$0$ph;
     $$095 = 0;
     $$097 = 0;
     $$3 = $$2105;
     while (1) {
      if (($$3 | 0) == ($spec$select | 0)) break;
      $114 = HEAP32[$2 >> 2] | 0;
      if (($$097 | 0) == ($$0 | 0)) {
       $115 = $114 + 4 | 0;
       HEAP32[$2 >> 2] = $115;
       HEAP32[$114 >> 2] = $10;
       $116 = $$095 + 1 | 0;
       $117 = HEAP8[$24 >> 0] | 0;
       $118 = $117 << 24 >> 24 < 0;
       if ($116 >>> 0 < ($118 ? HEAP32[$25 >> 2] | 0 : $117 & 255) >>> 0) {
        $126 = HEAP8[($118 ? HEAP32[$11 >> 2] | 0 : $11) + $116 >> 0] | 0;
        $$1 = $126 << 24 >> 24 == 127 ? -1 : $126 << 24 >> 24;
        $$196 = $116;
        $$198 = 0;
        $132 = $115;
       } else {
        $$1 = $$097;
        $$196 = $116;
        $$198 = 0;
        $132 = $115;
       }
      } else {
       $$1 = $$0;
       $$196 = $$095;
       $$198 = $$097;
       $132 = $114;
      }
      $129 = $$3 + -4 | 0;
      $130 = HEAP32[$129 >> 2] | 0;
      HEAP32[$2 >> 2] = $132 + 4;
      HEAP32[$132 >> 2] = $130;
      $$0 = $$1;
      $$095 = $$196;
      $$097 = $$198 + 1 | 0;
      $$3 = $129;
     }
     $135 = HEAP32[$2 >> 2] | 0;
    }
    if (($69 | 0) == ($135 | 0)) $$2 = $spec$select; else {
     $$0$i$i108 = $135;
     $$07$i$i = $69;
     while (1) {
      $136 = $$0$i$i108 + -4 | 0;
      if ($$07$i$i >>> 0 >= $136 >>> 0) {
       $$2 = $spec$select;
       break L4;
      }
      $138 = HEAP32[$$07$i$i >> 2] | 0;
      HEAP32[$$07$i$i >> 2] = HEAP32[$136 >> 2];
      HEAP32[$136 >> 2] = $138;
      $$0$i$i108 = $136;
      $$07$i$i = $$07$i$i + 4 | 0;
     }
    }
    break;
   }
  default:
   $$2 = $$099;
  } while (0);
  $$0106 = $$0106 + 1 | 0;
  $$099 = $$2;
 }
 $26 = HEAP8[$16 >> 0] | 0;
 $27 = $26 << 24 >> 24 < 0;
 $30 = $27 ? HEAP32[$17 >> 2] | 0 : $26 & 255;
 if ($30 >>> 0 > 1) {
  $142 = HEAP32[$13 >> 2] | 0;
  $144 = $27 ? $142 + 4 | 0 : $17;
  $146 = ($27 ? $142 : $13) + ($30 << 2) | 0;
  $147 = HEAP32[$2 >> 2] | 0;
  $150 = $146 - $144 | 0;
  $$0$i$i = $147;
  $151 = $144;
  while (1) {
   if (($151 | 0) == ($146 | 0)) break;
   HEAP32[$$0$i$i >> 2] = HEAP32[$151 >> 2];
   $$0$i$i = $$0$i$i + 4 | 0;
   $151 = $151 + 4 | 0;
  }
  HEAP32[$2 >> 2] = $147 + ($150 >>> 2 << 2);
 }
 switch (($3 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$1 >> 2] = $0;
 }
 return;
}

function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i$i$i40 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i2$i$i46 = 0, $$0$i$i36 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $107 = 0, $108 = 0, $111 = 0, $113 = 0, $123 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $151 = 0, $163 = 0, $166 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $49 = 0, $5 = 0, $52 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $79 = 0, $8 = 0, $91 = 0, $94 = 0, label = 0;
 $5 = HEAP32[$0 >> 2] | 0;
 do if (!$5) $180 = 1; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$0 >> 2] = 0;
   $180 = 1;
   break;
  } else {
   $180 = (HEAP32[$0 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $20 = HEAP32[$1 >> 2] | 0;
 do if (!$20) label = 14; else {
  $23 = HEAP32[$20 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   label = 14;
   break;
  } else if ($180) {
   $181 = $20;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($180) label = 16; else {
  $181 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
  $$2 = 0;
 } else if ((label | 0) == 17) {
  $37 = HEAP32[$0 >> 2] | 0;
  $39 = HEAP32[$37 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  $49 = $$0$i$i & 255;
  if ($49 << 24 >> 24 > -1) {
   $52 = $3 + 8 | 0;
   if (HEAP16[(HEAP32[$52 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
    $64 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 31]($3, $49, 0) | 0) << 24 >> 24;
    $65 = HEAP32[$0 >> 2] | 0;
    $66 = $65 + 12 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if (($67 | 0) == (HEAP32[$65 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 40 >> 2] & 127]($65) | 0; else {
     HEAP32[$66 >> 2] = $67 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$67 >> 0] | 0) | 0;
    }
    $$0$in = $64;
    $$023$in = $4;
    $182 = $181;
    $91 = $181;
    while (1) {
     $$0 = $$0$in + -48 | 0;
     $$023 = $$023$in + -1 | 0;
     $76 = HEAP32[$0 >> 2] | 0;
     do if (!$76) $107 = 1; else {
      $79 = HEAP32[$76 + 12 >> 2] | 0;
      if (($79 | 0) == (HEAP32[$76 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] & 127]($76) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$79 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $107 = 1;
       break;
      } else {
       $107 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$91) {
      $108 = 1;
      $163 = $182;
      $183 = 0;
     } else {
      $94 = HEAP32[$91 + 12 >> 2] | 0;
      if (($94 | 0) == (HEAP32[$91 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$91 >> 2] | 0) + 36 >> 2] & 127]($91) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$94 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $108 = 1;
       $163 = 0;
       $183 = 0;
      } else {
       $108 = 0;
       $163 = $182;
       $183 = $91;
      }
     }
     $111 = HEAP32[$0 >> 2] | 0;
     if (!(($$023$in | 0) > 1 & ($107 ^ $108))) break;
     $113 = HEAP32[$111 + 12 >> 2] | 0;
     if (($113 | 0) == (HEAP32[$111 + 16 >> 2] | 0)) $$0$i$i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$111 >> 2] | 0) + 36 >> 2] & 127]($111) | 0; else $$0$i$i36 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$113 >> 0] | 0) | 0;
     $123 = $$0$i$i36 & 255;
     if ($123 << 24 >> 24 <= -1) {
      $$2 = $$0;
      break L22;
     }
     if (!(HEAP16[(HEAP32[$52 >> 2] | 0) + ($$0$i$i36 << 24 >> 24 << 1) >> 1] & 2048)) {
      $$2 = $$0;
      break L22;
     }
     $137 = ($$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 31]($3, $123, 0) | 0) << 24 >> 24) | 0;
     $138 = HEAP32[$0 >> 2] | 0;
     $139 = $138 + 12 | 0;
     $140 = HEAP32[$139 >> 2] | 0;
     if (($140 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 40 >> 2] & 127]($138) | 0; else {
      HEAP32[$139 >> 2] = $140 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$140 >> 0] | 0) | 0;
     }
     $$0$in = $137;
     $$023$in = $$023;
     $182 = $163;
     $91 = $183;
    }
    do if (!$111) $184 = 1; else {
     $151 = HEAP32[$111 + 12 >> 2] | 0;
     if (($151 | 0) == (HEAP32[$111 + 16 >> 2] | 0)) $$0$i$i$i$i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$111 >> 2] | 0) + 36 >> 2] & 127]($111) | 0; else $$0$i$i$i$i40 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$151 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i40, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0;
      $184 = 1;
      break;
     } else {
      $184 = (HEAP32[$0 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!$163) label = 63; else {
     $166 = HEAP32[$163 + 12 >> 2] | 0;
     if (($166 | 0) == (HEAP32[$163 + 16 >> 2] | 0)) $$0$i$i2$i$i46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$163 >> 2] | 0) + 36 >> 2] & 127]($163) | 0; else $$0$i$i2$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$166 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i46, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      label = 63;
      break;
     } else if ($184) {
      $$2 = $$0;
      break L22;
     } else break;
    } while (0);
    if ((label | 0) == 63) if (!$184) {
     $$2 = $$0;
     break;
    }
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
    $$2 = $$0;
    break;
   }
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
  $$2 = 0;
 } while (0);
 return $$2 | 0;
}

function __ZN9MainLayerC2Ev($0) {
 $0 = $0 | 0;
 var $$0214 = 0, $$028215 = 0, $$pre$phi9$i$i$i83Z2D = 0, $$pre$phi9$i$i$iZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $33 = 0.0, $34 = 0, $39 = 0, $41 = 0, $44 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 = sp;
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 >> 2] = 0;
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 + 4 >> 2] = 0;
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 + 8 >> 2] = 0;
 $1 = $_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 + 11 | 0;
 HEAP8[$1 >> 0] = 9;
 dest = $_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1;
 src = 22561;
 stop = dest + 9 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 + 9 >> 0] = 0;
 __ZN3sgl5LayerC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1);
 if ((HEAP8[$1 >> 0] | 0) < 0) __ZdlPv(HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 >> 2] | 0);
 HEAP32[$0 >> 2] = 11504;
 $6 = $0 + 20 | 0;
 __ZN3sgl6ShaderC2EPKcS2_($6, 21081, 21389);
 $7 = $0 + 68 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 + 12 >> 2] = 0;
 $8 = $0 + 84 | 0;
 HEAPF32[$8 >> 2] = 1.0;
 $9 = $0 + 88 | 0;
 HEAPF32[$9 >> 2] = 1.0;
 $10 = $0 + 92 | 0;
 HEAPF32[$10 >> 2] = 1.0;
 $11 = $0 + 96 | 0;
 HEAPF32[$11 >> 2] = 1.0;
 $12 = $0 + 100 | 0;
 HEAP32[$12 >> 2] = 0;
 $13 = $0 + 104 | 0;
 HEAP32[$13 >> 2] = 0;
 $14 = $0 + 108 | 0;
 HEAP32[$14 >> 2] = 0;
 $15 = __Znwm(32) | 0;
 HEAP32[$12 >> 2] = $15;
 $16 = $15 + 32 | 0;
 HEAP32[$14 >> 2] = $16;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$15 + 4 >> 2] = 0;
 HEAP32[$15 + 8 >> 2] = 1065353216;
 HEAP32[$15 + 12 >> 2] = 0;
 HEAP32[$15 + 16 >> 2] = 1065353216;
 HEAP32[$15 + 20 >> 2] = 1065353216;
 HEAP32[$15 + 24 >> 2] = 0;
 HEAP32[$15 + 28 >> 2] = 1065353216;
 HEAP32[$13 >> 2] = $16;
 $17 = $0 + 112 | 0;
 $19 = $0 + 132 | 0;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$17 + 4 >> 2] = 0;
 HEAP32[$17 + 8 >> 2] = 0;
 HEAP32[$17 + 12 >> 2] = 0;
 HEAP32[$17 + 16 >> 2] = 0;
 HEAPF32[$19 >> 2] = 1.0;
 $20 = $0 + 136 | 0;
 HEAPF32[$20 >> 2] = 1.0;
 $21 = $0 + 140 | 0;
 HEAPF32[$21 >> 2] = 1.0;
 $22 = $0 + 144 | 0;
 HEAPF32[$22 >> 2] = 1.0;
 $23 = $0 + 148 | 0;
 HEAP32[$23 >> 2] = 0;
 $24 = $0 + 152 | 0;
 HEAP32[$24 >> 2] = 0;
 $25 = $0 + 156 | 0;
 HEAP32[$25 >> 2] = 0;
 $26 = __Znwm(32) | 0;
 HEAP32[$23 >> 2] = $26;
 $27 = $26 + 32 | 0;
 HEAP32[$25 >> 2] = $27;
 HEAP32[$26 >> 2] = 0;
 HEAP32[$26 + 4 >> 2] = 0;
 HEAP32[$26 + 8 >> 2] = 1065353216;
 HEAP32[$26 + 12 >> 2] = 0;
 HEAP32[$26 + 16 >> 2] = 1065353216;
 HEAP32[$26 + 20 >> 2] = 1065353216;
 HEAP32[$26 + 24 >> 2] = 0;
 HEAP32[$26 + 28 >> 2] = 1065353216;
 HEAP32[$24 >> 2] = $27;
 $28 = $0 + 160 | 0;
 HEAPF32[$28 >> 2] = 0.0;
 $29 = $0 + 164 | 0;
 HEAPF32[$29 >> 2] = 1.0666667222976685;
 HEAP32[$0 + 16 >> 2] = __ZN3sgl10Renderer2D6CreateEiiRKNS_6ShaderE(1280, 720, $6) | 0;
 $33 = +HEAPF32[$29 >> 2] * 720.0;
 $34 = __Znwm(32) | 0;
 $39 = $34 + 32 | 0;
 HEAP32[$34 >> 2] = 0;
 HEAP32[$34 + 4 >> 2] = 0;
 HEAP32[$34 + 8 >> 2] = 1065353216;
 HEAP32[$34 + 12 >> 2] = 0;
 HEAP32[$34 + 16 >> 2] = 1065353216;
 HEAP32[$34 + 20 >> 2] = 1065353216;
 HEAP32[$34 + 24 >> 2] = 0;
 HEAP32[$34 + 28 >> 2] = 1065353216;
 HEAPF32[$7 >> 2] = $33;
 HEAP32[$0 + 72 >> 2] = 1144258560;
 HEAPF32[$0 + 76 >> 2] = 640.0 - $33 * .5;
 HEAP32[$0 + 80 >> 2] = 0;
 HEAPF32[$8 >> 2] = 1.0;
 HEAPF32[$9 >> 2] = 1.0;
 HEAPF32[$10 >> 2] = 1.0;
 HEAPF32[$11 >> 2] = 1.0;
 $41 = HEAP32[$12 >> 2] | 0;
 if (!$41) $$pre$phi9$i$i$iZ2D = $13; else {
  HEAP32[$13 >> 2] = $41;
  __ZdlPv($41);
  HEAP32[$14 >> 2] = 0;
  HEAP32[$13 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  $$pre$phi9$i$i$iZ2D = $13;
 }
 HEAP32[$12 >> 2] = $34;
 HEAP32[$$pre$phi9$i$i$iZ2D >> 2] = $39;
 HEAP32[$14 >> 2] = $39;
 HEAP32[$17 >> 2] = 0;
 $44 = __Znwm(32) | 0;
 $47 = $44 + 32 | 0;
 HEAP32[$44 >> 2] = 0;
 HEAP32[$44 + 4 >> 2] = 0;
 HEAP32[$44 + 8 >> 2] = 1065353216;
 HEAP32[$44 + 12 >> 2] = 0;
 HEAP32[$44 + 16 >> 2] = 1065353216;
 HEAP32[$44 + 20 >> 2] = 1065353216;
 HEAP32[$44 + 24 >> 2] = 0;
 HEAP32[$44 + 28 >> 2] = 1065353216;
 HEAP32[$0 + 116 >> 2] = 1120403456;
 HEAP32[$0 + 120 >> 2] = 1120403456;
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAPF32[$19 >> 2] = 1.0;
 HEAPF32[$20 >> 2] = 1.0;
 HEAPF32[$21 >> 2] = 1.0;
 HEAPF32[$22 >> 2] = 1.0;
 $48 = HEAP32[$23 >> 2] | 0;
 if (!$48) $$pre$phi9$i$i$i83Z2D = $24; else {
  HEAP32[$24 >> 2] = $48;
  __ZdlPv($48);
  HEAP32[$25 >> 2] = 0;
  HEAP32[$24 >> 2] = 0;
  HEAP32[$23 >> 2] = 0;
  $$pre$phi9$i$i$i83Z2D = $24;
 }
 HEAP32[$23 >> 2] = $44;
 HEAP32[$$pre$phi9$i$i$i83Z2D >> 2] = $47;
 HEAP32[$25 >> 2] = $47;
 HEAPF32[$28 >> 2] = 1.0;
 $51 = __Znwm(40) | 0;
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 >> 2] = HEAP32[2849];
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 + 4 >> 2] = HEAP32[2850];
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 + 8 >> 2] = HEAP32[2851];
 __ZN3sgl9Texture2DC2EiiNS_17TextureParametersE($51, 512, 480, $_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1);
 $52 = $0 + 56 | 0;
 HEAP32[$52 >> 2] = $51;
 $53 = __Znwm(40) | 0;
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 >> 2] = HEAP32[2849];
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 + 4 >> 2] = HEAP32[2850];
 HEAP32[$_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1 + 8 >> 2] = HEAP32[2851];
 __ZN3sgl9Texture2DC2EiiNS_17TextureParametersE($53, 100, 100, $_ZN3sgl9Texture2D13DefaultParamsE$byval_copy1);
 HEAP32[$0 + 60 >> 2] = $53;
 __ZN3sgl9Texture2D8SetColorEhhhh($53, -1, -106, -106, -1);
 _srand(_time(0) | 0);
 $57 = $0 + 64 | 0;
 HEAP32[$57 >> 2] = __Znam(983040) | 0;
 $$028215 = 0;
 do {
  $58 = $$028215 * 1920 | 0;
  $$0214 = 0;
  do {
   $62 = HEAP32[688 + (((_rand() | 0) % 64 | 0) << 2) >> 2] | 0;
   $68 = ($$0214 << 2) + $58 | 0;
   HEAP8[(HEAP32[$57 >> 2] | 0) + $68 >> 0] = $62 >>> 16;
   HEAP8[(HEAP32[$57 >> 2] | 0) + ($68 | 1) >> 0] = $62 >>> 8;
   HEAP8[(HEAP32[$57 >> 2] | 0) + ($68 | 2) >> 0] = $62;
   HEAP8[(HEAP32[$57 >> 2] | 0) + ($68 | 3) >> 0] = -1;
   $$0214 = $$0214 + 1 | 0;
  } while ($$0214 >>> 0 < 480);
  $$028215 = $$028215 + 1 | 0;
 } while ($$028215 >>> 0 < 512);
 __ZN3sgl9Texture2D7SetDataEPv(HEAP32[$52 >> 2] | 0, HEAP32[$57 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0$ph = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0, $$3 = 0, $$pn = 0, $$pn$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $92 = 0, $94 = 0, $spec$select = 0;
 HEAP32[$2 >> 2] = $0;
 $15 = $13 + 11 | 0;
 $16 = $13 + 4 | 0;
 $17 = $12 + 11 | 0;
 $18 = $12 + 4 | 0;
 $20 = ($3 & 512 | 0) == 0;
 $21 = $6 + 8 | 0;
 $22 = ($14 | 0) > 0;
 $23 = $11 + 11 | 0;
 $24 = $11 + 4 | 0;
 $$0104 = 0;
 $$097 = $4;
 while (1) {
  if (($$0104 | 0) == 4) break;
  L4 : do switch (HEAP8[$8 + $$0104 >> 0] | 0) {
  case 0:
   {
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $$2 = $$097;
    break;
   }
  case 1:
   {
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $39 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 31]($6, 32) | 0;
    $40 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $40 + 1;
    HEAP8[$40 >> 0] = $39;
    $$2 = $$097;
    break;
   }
  case 3:
   {
    $42 = HEAP8[$15 >> 0] | 0;
    $43 = $42 << 24 >> 24 < 0;
    if (!(($43 ? HEAP32[$16 >> 2] | 0 : $42 & 255) | 0)) $$2 = $$097; else {
     $50 = HEAP8[($43 ? HEAP32[$13 >> 2] | 0 : $13) >> 0] | 0;
     $51 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $51 + 1;
     HEAP8[$51 >> 0] = $50;
     $$2 = $$097;
    }
    break;
   }
  case 2:
   {
    $53 = HEAP8[$17 >> 0] | 0;
    $54 = $53 << 24 >> 24 < 0;
    $57 = $54 ? HEAP32[$18 >> 2] | 0 : $53 & 255;
    if ($20 | ($57 | 0) == 0) $$2 = $$097; else {
     $60 = $54 ? HEAP32[$12 >> 2] | 0 : $12;
     $61 = $60 + $57 | 0;
     $$0$i$i113 = HEAP32[$2 >> 2] | 0;
     $$sroa$08$0$i112 = $60;
     while (1) {
      if (($$sroa$08$0$i112 | 0) == ($61 | 0)) break;
      HEAP8[$$0$i$i113 >> 0] = HEAP8[$$sroa$08$0$i112 >> 0] | 0;
      $$0$i$i113 = $$0$i$i113 + 1 | 0;
      $$sroa$08$0$i112 = $$sroa$08$0$i112 + 1 | 0;
     }
     HEAP32[$2 >> 2] = $$0$i$i113;
     $$2 = $$097;
    }
    break;
   }
  case 4:
   {
    $67 = HEAP32[$2 >> 2] | 0;
    $spec$select = $7 ? $$097 + 1 | 0 : $$097;
    $$0101 = $spec$select;
    while (1) {
     if ($$0101 >>> 0 >= $5 >>> 0) break;
     $70 = HEAP8[$$0101 >> 0] | 0;
     if ($70 << 24 >> 24 <= -1) break;
     if (!(HEAP16[(HEAP32[$21 >> 2] | 0) + ($70 << 24 >> 24 << 1) >> 1] & 2048)) break;
     $$0101 = $$0101 + 1 | 0;
    }
    if ($22) {
     $$099 = $14;
     $$1102 = $$0101;
     while (1) {
      $80 = ($$099 | 0) > 0;
      if (!($$1102 >>> 0 > $spec$select >>> 0 & $80)) break;
      $82 = $$1102 + -1 | 0;
      $83 = HEAP8[$82 >> 0] | 0;
      $84 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $84 + 1;
      HEAP8[$84 >> 0] = $83;
      $$099 = $$099 + -1 | 0;
      $$1102 = $82;
     }
     if ($80) $94 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 31]($6, 48) | 0; else $94 = 0;
     $$1100 = $$099;
     while (1) {
      $92 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $92 + 1;
      if (($$1100 | 0) <= 0) break;
      HEAP8[$92 >> 0] = $94;
      $$1100 = $$1100 + -1 | 0;
     }
     HEAP8[$92 >> 0] = $9;
     $$2103 = $$1102;
    } else $$2103 = $$0101;
    L36 : do if (($$2103 | 0) == ($spec$select | 0)) {
     $100 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 31]($6, 48) | 0;
     $101 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $101 + 1;
     HEAP8[$101 >> 0] = $100;
    } else {
     $103 = HEAP8[$23 >> 0] | 0;
     $104 = $103 << 24 >> 24 < 0;
     if (!(($104 ? HEAP32[$24 >> 2] | 0 : $103 & 255) | 0)) $$0$ph = -1; else $$0$ph = HEAP8[($104 ? HEAP32[$11 >> 2] | 0 : $11) >> 0] | 0;
     $$0 = $$0$ph;
     $$093 = 0;
     $$095 = 0;
     $$3 = $$2103;
     while (1) {
      if (($$3 | 0) == ($spec$select | 0)) break L36;
      if (($$095 | 0) == ($$0 | 0)) {
       $115 = HEAP32[$2 >> 2] | 0;
       HEAP32[$2 >> 2] = $115 + 1;
       HEAP8[$115 >> 0] = $10;
       $117 = $$093 + 1 | 0;
       $118 = HEAP8[$23 >> 0] | 0;
       $119 = $118 << 24 >> 24 < 0;
       if ($117 >>> 0 < ($119 ? HEAP32[$24 >> 2] | 0 : $118 & 255) >>> 0) {
        $127 = HEAP8[($119 ? HEAP32[$11 >> 2] | 0 : $11) + $117 >> 0] | 0;
        $$1 = $127 << 24 >> 24 == 127 ? -1 : $127 << 24 >> 24;
        $$194 = $117;
        $$196 = 0;
       } else {
        $$1 = $$095;
        $$194 = $117;
        $$196 = 0;
       }
      } else {
       $$1 = $$0;
       $$194 = $$093;
       $$196 = $$095;
      }
      $130 = $$3 + -1 | 0;
      $131 = HEAP8[$130 >> 0] | 0;
      $132 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $132 + 1;
      HEAP8[$132 >> 0] = $131;
      $$0 = $$1;
      $$093 = $$194;
      $$095 = $$196 + 1 | 0;
      $$3 = $130;
     }
    } while (0);
    $135 = HEAP32[$2 >> 2] | 0;
    if (($67 | 0) == ($135 | 0)) $$2 = $spec$select; else {
     $$0$i$i106 = $135;
     $$07$i$i = $67;
     while (1) {
      $137 = $$0$i$i106 + -1 | 0;
      if ($$07$i$i >>> 0 >= $137 >>> 0) {
       $$2 = $spec$select;
       break L4;
      }
      $139 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$137 >> 0] | 0;
      HEAP8[$137 >> 0] = $139;
      $$0$i$i106 = $137;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    }
    break;
   }
  default:
   $$2 = $$097;
  } while (0);
  $$0104 = $$0104 + 1 | 0;
  $$097 = $$2;
 }
 $25 = HEAP8[$15 >> 0] | 0;
 $26 = $25 << 24 >> 24 < 0;
 $29 = $26 ? HEAP32[$16 >> 2] | 0 : $25 & 255;
 if ($29 >>> 0 > 1) {
  $$pn = $26 ? HEAP32[$13 >> 2] | 0 : $13;
  $144 = $$pn + $29 | 0;
  $$0$i$i = HEAP32[$2 >> 2] | 0;
  $$pn$pn = $$pn;
  while (1) {
   $$sroa$08$0$i = $$pn$pn + 1 | 0;
   if (($$sroa$08$0$i | 0) == ($144 | 0)) break;
   HEAP8[$$0$i$i >> 0] = HEAP8[$$sroa$08$0$i >> 0] | 0;
   $$0$i$i = $$0$i$i + 1 | 0;
   $$pn$pn = $$sroa$08$0$i;
  }
  HEAP32[$2 >> 2] = $$0$i$i;
 }
 switch (($3 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$1 >> 2] = $0;
 }
 return;
}

function __ZN6spdlog7details11c_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i = 0, $$010$i$i$i31 = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i = 0, $$089$i$i$i32 = 0, $$pre$i = 0, $$pre$i37 = 0, $$pre$i42 = 0, $$pre$i47 = 0, $$pre$i52 = 0, $$pre$i57 = 0, $$pre$phi$i39Z2D = 0, $$pre$phi$i44Z2D = 0, $$pre$phi$i49Z2D = 0, $$pre$phi$i54Z2D = 0, $$pre$phi$i59Z2D = 0, $$pre$phi$iZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $108 = 0, $11 = 0, $110 = 0, $115 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $138 = 0, $15 = 0, $16 = 0, $30 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $60 = 0, $65 = 0, $67 = 0, $70 = 0, $71 = 0, $76 = 0, $78 = 0, $81 = 0, $82 = 0, $87 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 24, $0 + 4 | 0, $3);
 $9 = HEAP32[432 + (HEAP32[$2 + 24 >> 2] << 2) >> 2] | 0;
 $10 = _strlen($9) | 0;
 $11 = $9 + $10 | 0;
 $12 = $3 + 8 | 0;
 if (($10 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $15 = (HEAP32[$12 >> 2] | 0) + $10 | 0;
 $16 = $3 + 12 | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 < $15 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $15);
 if ($10 | 0) {
  $$010$i$i$i = $9;
  $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($11 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$12 >> 2] = $15;
 $30 = $15 + 1 | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 < $30 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $30);
  $$pre$i = HEAP32[$12 >> 2] | 0;
  $$pre$phi$iZ2D = $$pre$i + 1 | 0;
  $38 = $$pre$i;
 } else {
  $$pre$phi$iZ2D = $30;
  $38 = $15;
 }
 $35 = $3 + 4 | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 HEAP32[$12 >> 2] = $$pre$phi$iZ2D;
 HEAP8[$36 + $38 >> 0] = 32;
 $42 = HEAP32[464 + (HEAP32[$2 + 16 >> 2] << 2) >> 2] | 0;
 $43 = _strlen($42) | 0;
 $44 = $42 + $43 | 0;
 if (($43 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $47 = (HEAP32[$12 >> 2] | 0) + $43 | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 < $47 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $47);
 if ($43 | 0) {
  $$010$i$i$i31 = $42;
  $$089$i$i$i32 = (HEAP32[$35 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i32 >> 0] = HEAP8[$$010$i$i$i31 >> 0] | 0;
   $$010$i$i$i31 = $$010$i$i$i31 + 1 | 0;
   if (($$010$i$i$i31 | 0) == ($44 | 0)) break; else $$089$i$i$i32 = $$089$i$i$i32 + 1 | 0;
  }
 }
 HEAP32[$12 >> 2] = $47;
 $60 = $47 + 1 | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 < $60 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $60);
  $$pre$i37 = HEAP32[$12 >> 2] | 0;
  $$pre$phi$i39Z2D = $$pre$i37 + 1 | 0;
  $67 = $$pre$i37;
 } else {
  $$pre$phi$i39Z2D = $60;
  $67 = $47;
 }
 $65 = HEAP32[$35 >> 2] | 0;
 HEAP32[$12 >> 2] = $$pre$phi$i39Z2D;
 HEAP8[$65 + $67 >> 0] = 32;
 __ZN6spdlog7details10fmt_helper10append_intIiLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 12 >> 2] | 0, $3);
 $70 = HEAP32[$12 >> 2] | 0;
 $71 = $70 + 1 | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 < $71 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $71);
  $$pre$i42 = HEAP32[$12 >> 2] | 0;
  $$pre$phi$i44Z2D = $$pre$i42 + 1 | 0;
  $78 = $$pre$i42;
 } else {
  $$pre$phi$i44Z2D = $71;
  $78 = $70;
 }
 $76 = HEAP32[$35 >> 2] | 0;
 HEAP32[$12 >> 2] = $$pre$phi$i44Z2D;
 HEAP8[$76 + $78 >> 0] = 32;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 8 >> 2] | 0, $3);
 $81 = HEAP32[$12 >> 2] | 0;
 $82 = $81 + 1 | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 < $82 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $82);
  $$pre$i47 = HEAP32[$12 >> 2] | 0;
  $$pre$phi$i49Z2D = $$pre$i47 + 1 | 0;
  $89 = $$pre$i47;
 } else {
  $$pre$phi$i49Z2D = $82;
  $89 = $81;
 }
 $87 = HEAP32[$35 >> 2] | 0;
 HEAP32[$12 >> 2] = $$pre$phi$i49Z2D;
 HEAP8[$87 + $89 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 4 >> 2] | 0, $3);
 $92 = HEAP32[$12 >> 2] | 0;
 $93 = $92 + 1 | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 < $93 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $93);
  $$pre$i52 = HEAP32[$12 >> 2] | 0;
  $$pre$phi$i54Z2D = $$pre$i52 + 1 | 0;
  $100 = $$pre$i52;
 } else {
  $$pre$phi$i54Z2D = $93;
  $100 = $92;
 }
 $98 = HEAP32[$35 >> 2] | 0;
 HEAP32[$12 >> 2] = $$pre$phi$i54Z2D;
 HEAP8[$98 + $100 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 >> 2] | 0, $3);
 $102 = HEAP32[$12 >> 2] | 0;
 $103 = $102 + 1 | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 < $103 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $103);
  $$pre$i57 = HEAP32[$12 >> 2] | 0;
  $$pre$phi$i59Z2D = $$pre$i57 + 1 | 0;
  $110 = $$pre$i57;
 } else {
  $$pre$phi$i59Z2D = $103;
  $110 = $102;
 }
 $108 = HEAP32[$35 >> 2] | 0;
 HEAP32[$12 >> 2] = $$pre$phi$i59Z2D;
 HEAP8[$108 + $110 >> 0] = 32;
 __ZN6spdlog7details10fmt_helper10append_intIiLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE((HEAP32[$2 + 20 >> 2] | 0) + 1900 | 0, $3);
 $115 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$115) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $115 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $121 = HEAP32[$4 + 12 >> 2] | 0;
 $123 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$121) {
  STACKTOP = sp;
  return;
 }
 $125 = $121 + $115 | 0;
 $126 = $123 + 8 | 0;
 if (($115 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $128 = HEAP32[$126 >> 2] | 0;
 $129 = $128 + $115 | 0;
 if ((HEAP32[$123 + 12 >> 2] | 0) >>> 0 < $129 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$123 >> 2] >> 2] & 127]($123, $129);
  $138 = HEAP32[$126 >> 2] | 0;
 } else $138 = $128;
 $$010$i$i$i$i$i = $121;
 $$089$i$i$i$i$i = (HEAP32[$123 + 4 >> 2] | 0) + $138 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($125 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$126 >> 2] = $129;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal18parse_format_specsIcRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEEEPKT_SH_SH_OT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$027$i = 0, $$053 = 0, $$1 = 0, $$154 = 0, $$2 = 0, $$3 = 0, $$5 = 0, $$6 = 0, $$lcssa = 0, $$sink63 = 0, $12 = 0, $17 = 0, $20 = 0, $23 = 0, $25 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $46 = 0, $48 = 0, $57 = 0, $60 = 0, $61 = 0, $66 = 0, $7 = 0, $70 = 0, $72 = 0, $77 = 0, $78 = 0, $81 = 0, $83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) {
  $$1 = $0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if ((HEAP8[$0 >> 0] | 0) == 125) {
  $$1 = $0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $7 = __ZN3fmt2v58internal11parse_alignIcRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEEEPKT_SH_SH_OT0_($0, $1, $2) | 0;
 if (($7 | 0) == ($1 | 0)) {
  $$1 = $1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 switch (HEAP8[$7 >> 0] | 0) {
 case 43:
  {
   __ZN3fmt2v58internal13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEE10check_signEv($2);
   $$sink63 = 3;
   label = 8;
   break;
  }
 case 45:
  {
   __ZN3fmt2v58internal13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEE10check_signEv($2);
   $$sink63 = 4;
   label = 8;
   break;
  }
 case 32:
  {
   __ZN3fmt2v58internal13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEE10check_signEv($2);
   $$sink63 = 1;
   label = 8;
   break;
  }
 default:
  $$053 = $7;
 }
 if ((label | 0) == 8) {
  $12 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
  HEAP8[$12 >> 0] = HEAP8[$12 >> 0] | $$sink63;
  $$053 = $7 + 1 | 0;
 }
 if (($$053 | 0) == ($1 | 0)) {
  $$1 = $1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $17 = HEAP8[$$053 >> 0] | 0;
 do if ($17 << 24 >> 24 == 35) {
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (($20 | 0) == 1) ___assert_fail(18052, 18966, 546, 18111);
  if (($20 + -1 | 0) >>> 0 >= 9) {
   $23 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($23, 18009);
   ___cxa_throw($23 | 0, 6792, 18);
  }
  $25 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
  HEAP8[$25 >> 0] = HEAP8[$25 >> 0] | 8;
  $28 = $$053 + 1 | 0;
  if (($28 | 0) == ($1 | 0)) {
   $$1 = $1;
   STACKTOP = sp;
   return $$1 | 0;
  } else {
   $$154 = $28;
   $30 = HEAP8[$28 >> 0] | 0;
   break;
  }
 } else {
  $$154 = $$053;
  $30 = $17;
 } while (0);
 if ($30 << 24 >> 24 == 48) {
  $33 = HEAP32[$2 + 8 >> 2] | 0;
  if (($33 | 0) == 1) ___assert_fail(18052, 18966, 546, 18111);
  if (($33 + -1 | 0) >>> 0 >= 9) {
   $36 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($36, 18009);
   ___cxa_throw($36 | 0, 6792, 18);
  }
  $37 = HEAP32[$2 >> 2] | 0;
  HEAP32[$37 + 8 >> 2] = 4;
  HEAP32[$37 + 4 >> 2] = 48;
  $40 = $$154 + 1 | 0;
  if (($40 | 0) == ($1 | 0)) {
   $$1 = $1;
   STACKTOP = sp;
   return $$1 | 0;
  } else $$2 = $40;
 } else $$2 = $$154;
 $42 = __ZN3fmt2v58internal11parse_widthIcRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEEEPKT_SH_SH_OT0_($$2, $1, $2) | 0;
 if (($42 | 0) == ($1 | 0)) {
  $$1 = $1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 L45 : do if ((HEAP8[$42 >> 0] | 0) == 46) {
  $46 = $42 + 1 | 0;
  if (($46 | 0) == ($1 | 0)) {
   $78 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($78, 17921);
   ___cxa_throw($78 | 0, 6792, 18);
  }
  $48 = HEAP8[$46 >> 0] | 0;
  if ((($48 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
   if (($48 + -48 & 255) >= 10) ___assert_fail(17758, 17437, 1456, 17805);
   if ($48 << 24 >> 24 == 48) {
    $$0$i = 0;
    $$3 = $42 + 2 | 0;
   } else {
    $$027$i = 0;
    $57 = $48;
    $61 = $46;
    while (1) {
     if ($$027$i >>> 0 > 214748364) {
      label = 36;
      break;
     }
     $$027$i = ($57 << 24 >> 24) + -48 + ($$027$i * 10 | 0) | 0;
     $60 = $61 + 1 | 0;
     if (($60 | 0) == ($1 | 0)) {
      $$lcssa = $1;
      break;
     }
     $57 = HEAP8[$60 >> 0] | 0;
     if (($57 + -48 & 255) >= 10) {
      $$lcssa = $60;
      break;
     } else $61 = $60;
    }
    if ((label | 0) == 36) {
     $66 = ___cxa_allocate_exception(8) | 0;
     __ZN3fmt2v512format_errorC2EPKc($66, 17827);
     ___cxa_throw($66 | 0, 6792, 18);
    }
    if (($$027$i | 0) < 0) {
     $66 = ___cxa_allocate_exception(8) | 0;
     __ZN3fmt2v512format_errorC2EPKc($66, 17827);
     ___cxa_throw($66 | 0, 6792, 18);
    } else {
     $$0$i = $$027$i;
     $$3 = $$lcssa;
    }
   }
   HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] = $$0$i;
   $$5 = $$3;
  } else {
   if ($48 << 24 >> 24 != 123) {
    $78 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($78, 17921);
    ___cxa_throw($78 | 0, 6792, 18);
   }
   $70 = $42 + 2 | 0;
   if (($70 | 0) == ($1 | 0)) {
    $77 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($77, 17126);
    ___cxa_throw($77 | 0, 6792, 18);
   }
   HEAP32[$3 >> 2] = $2;
   $72 = __ZN3fmt2v58internal12parse_arg_idIcNS1_17precision_adapterIRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEcEEEEPKT_SJ_SJ_OT0_($70, $1, $3) | 0;
   if (($72 | 0) == ($1 | 0)) {
    $77 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($77, 17126);
    ___cxa_throw($77 | 0, 6792, 18);
   }
   if ((HEAP8[$72 >> 0] | 0) == 125) $$5 = $72 + 1 | 0; else {
    $77 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($77, 17126);
    ___cxa_throw($77 | 0, 6792, 18);
   }
  }
  switch (HEAP32[$2 + 8 >> 2] | 0) {
  case 1:
   {
    ___assert_fail(18052, 18966, 541, 18167);
    break;
   }
  case 2:
  case 3:
  case 4:
  case 5:
  case 6:
  case 7:
  case 12:
   {
    $81 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($81, 18271);
    ___cxa_throw($81 | 0, 6792, 18);
    break;
   }
  default:
   {
    $$6 = $$5;
    break L45;
   }
  }
 } else $$6 = $42; while (0);
 if (($$6 | 0) == ($1 | 0)) {
  $$1 = $1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $83 = HEAP8[$$6 >> 0] | 0;
 if ($83 << 24 >> 24 == 125) {
  $$1 = $$6;
  STACKTOP = sp;
  return $$1 | 0;
 }
 HEAP8[(HEAP32[$2 >> 2] | 0) + 17 >> 0] = $83;
 $$1 = $$6 + 1 | 0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $103 = 0, $11 = 0, $110 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $14 = 0, $140 = 0, $143 = 0, $15 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $157 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $132 = 0;
   $158 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $132 = 0;
    $158 = 1;
    $80 = 0;
   } else {
    $132 = $157;
    $158 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($158) {
    $159 = $45;
    break;
   } else {
    $$2 = $$0;
    $140 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;
    $140 = 0;
    break;
   } else $159 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$81 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41, $14, $$1, $10, $13, HEAP32[$6 >> 2] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $140 = $159;
   break;
  }
  $94 = HEAP32[$79 >> 2] | 0;
  if (($94 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $94 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$94 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $157 = $132;
  $30 = $80;
 }
 $103 = HEAP8[$8 + 11 >> 0] | 0;
 if (($103 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $103 & 255) | 0) {
  $110 = HEAP32[$12 >> 2] | 0;
  if (($110 - $11 | 0) < 160) {
   $115 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $110 + 4;
   HEAP32[$110 >> 2] = $115;
  }
 }
 $118 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 $119 = getTempRet0() | 0;
 $120 = $5;
 HEAP32[$120 >> 2] = $118;
 HEAP32[$120 + 4 >> 2] = $119;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $160 = 1; else {
  $127 = HEAP32[$80 + 12 >> 2] | 0;
  if (($127 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$132 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$127 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $160 = 1;
  } else $160 = 0;
 }
 do if (!$140) label = 48; else {
  $143 = HEAP32[$140 + 12 >> 2] | 0;
  if (($143 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 36 >> 2] & 127]($140) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$143 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($160) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($160) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $11 = 0, $111 = 0, $116 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $133 = 0, $14 = 0, $141 = 0, $144 = 0, $15 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $158 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $133 = 0;
   $159 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $133 = 0;
    $159 = 1;
    $80 = 0;
   } else {
    $133 = $158;
    $159 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$48 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($159) {
    $160 = $45;
    break;
   } else {
    $$2 = $$0;
    $141 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($159) {
    $$2 = $$0;
    $141 = 0;
    break;
   } else $160 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($$0$i$i41 & 255, $14, $$1, $10, $13, HEAP8[$6 >> 0] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $141 = $160;
   break;
  }
  $95 = HEAP32[$79 >> 2] | 0;
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $95 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$95 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $158 = $133;
  $30 = $80;
 }
 $104 = HEAP8[$8 + 11 >> 0] | 0;
 if (($104 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $104 & 255) | 0) {
  $111 = HEAP32[$12 >> 2] | 0;
  if (($111 - $11 | 0) < 160) {
   $116 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $111 + 4;
   HEAP32[$111 >> 2] = $116;
  }
 }
 $119 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 $120 = getTempRet0() | 0;
 $121 = $5;
 HEAP32[$121 >> 2] = $119;
 HEAP32[$121 + 4 >> 2] = $120;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $161 = 1; else {
  $128 = HEAP32[$80 + 12 >> 2] | 0;
  if (($128 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$133 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$128 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $161 = 1;
  } else $161 = 0;
 }
 do if (!$141) label = 48; else {
  $144 = HEAP32[$141 + 12 >> 2] | 0;
  if (($144 | 0) == (HEAP32[$141 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$141 >> 2] | 0) + 36 >> 2] & 127]($141) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$144 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($161) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($161) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $103 = 0, $11 = 0, $110 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $14 = 0, $140 = 0, $143 = 0, $15 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $157 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $132 = 0;
   $158 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $132 = 0;
    $158 = 1;
    $80 = 0;
   } else {
    $132 = $157;
    $158 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($158) {
    $159 = $45;
    break;
   } else {
    $$2 = $$0;
    $140 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;
    $140 = 0;
    break;
   } else $159 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$81 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41, $14, $$1, $10, $13, HEAP32[$6 >> 2] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $140 = $159;
   break;
  }
  $94 = HEAP32[$79 >> 2] | 0;
  if (($94 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $94 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$94 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $157 = $132;
  $30 = $80;
 }
 $103 = HEAP8[$8 + 11 >> 0] | 0;
 if (($103 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $103 & 255) | 0) {
  $110 = HEAP32[$12 >> 2] | 0;
  if (($110 - $11 | 0) < 160) {
   $115 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $110 + 4;
   HEAP32[$110 >> 2] = $115;
  }
 }
 $118 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 $119 = getTempRet0() | 0;
 $120 = $5;
 HEAP32[$120 >> 2] = $118;
 HEAP32[$120 + 4 >> 2] = $119;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $160 = 1; else {
  $127 = HEAP32[$80 + 12 >> 2] | 0;
  if (($127 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$132 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$127 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $160 = 1;
  } else $160 = 0;
 }
 do if (!$140) label = 48; else {
  $143 = HEAP32[$140 + 12 >> 2] | 0;
  if (($143 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 36 >> 2] & 127]($140) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$143 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($160) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($160) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $11 = 0, $111 = 0, $116 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $133 = 0, $14 = 0, $141 = 0, $144 = 0, $15 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $158 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $133 = 0;
   $159 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $133 = 0;
    $159 = 1;
    $80 = 0;
   } else {
    $133 = $158;
    $159 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$48 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($159) {
    $160 = $45;
    break;
   } else {
    $$2 = $$0;
    $141 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($159) {
    $$2 = $$0;
    $141 = 0;
    break;
   } else $160 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($$0$i$i41 & 255, $14, $$1, $10, $13, HEAP8[$6 >> 0] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $141 = $160;
   break;
  }
  $95 = HEAP32[$79 >> 2] | 0;
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $95 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$95 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $158 = $133;
  $30 = $80;
 }
 $104 = HEAP8[$8 + 11 >> 0] | 0;
 if (($104 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $104 & 255) | 0) {
  $111 = HEAP32[$12 >> 2] | 0;
  if (($111 - $11 | 0) < 160) {
   $116 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $111 + 4;
   HEAP32[$111 >> 2] = $116;
  }
 }
 $119 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 $120 = getTempRet0() | 0;
 $121 = $5;
 HEAP32[$121 >> 2] = $119;
 HEAP32[$121 + 4 >> 2] = $120;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $161 = 1; else {
  $128 = HEAP32[$80 + 12 >> 2] | 0;
  if (($128 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$133 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$128 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $161 = 1;
  } else $161 = 0;
 }
 do if (!$141) label = 48; else {
  $144 = HEAP32[$141 + 12 >> 2] | 0;
  if (($144 | 0) == (HEAP32[$141 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$141 >> 2] | 0) + 36 >> 2] & 127]($141) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$144 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($161) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($161) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $139 = 0, $14 = 0, $142 = 0, $15 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $46 = 0, $49 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $6 = sp + 160 | 0;
 $7 = sp + 328 | 0;
 $8 = sp + 324 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 300 | 0;
 $11 = sp + 296 | 0;
 $12 = sp;
 $13 = sp + 292 | 0;
 $14 = sp + 288 | 0;
 $15 = sp + 333 | 0;
 $16 = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 $22 = $10 + 8 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $25, 0);
 $29 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
 HEAP32[$11 >> 2] = $29;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$14 >> 2] = 0;
 HEAP8[$15 >> 0] = 1;
 HEAP8[$16 >> 0] = 69;
 $30 = $10 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $29;
 $156 = $$pre;
 $31 = $$pre;
 L8 : while (1) {
  if (!$31) {
   $131 = 0;
   $157 = 1;
   $81 = 0;
  } else {
   $34 = HEAP32[$31 + 12 >> 2] | 0;
   if (($34 | 0) == (HEAP32[$31 + 16 >> 2] | 0)) $$0$i$i$i$i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 127]($31) | 0; else $$0$i$i$i$i15 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $131 = 0;
    $157 = 1;
    $81 = 0;
   } else {
    $131 = $156;
    $157 = 0;
    $81 = $31;
   }
  }
  $46 = HEAP32[$2 >> 2] | 0;
  do if (!$46) label = 19; else {
   $49 = HEAP32[$46 + 12 >> 2] | 0;
   if (($49 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $$0$i$i2$i$i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 127]($46) | 0; else $$0$i$i2$i$i21 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$49 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($157) {
    $158 = $46;
    break;
   } else {
    $$2 = $$0;
    $139 = $46;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($157) {
    $$2 = $$0;
    $139 = 0;
    break;
   } else $158 = 0;
  }
  $62 = HEAP8[$19 >> 0] | 0;
  $66 = $62 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $62 & 255;
  if ((HEAP32[$11 >> 2] | 0) == ($$0 + $66 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $66 << 1, 0);
   if ((HEAP8[$19 >> 0] | 0) < 0) $74 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $74 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $74, 0);
   $78 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
   HEAP32[$11 >> 2] = $78 + $66;
   $$1 = $78;
  } else $$1 = $$0;
  $80 = $81 + 12 | 0;
  $82 = HEAP32[$80 >> 2] | 0;
  $83 = $81 + 16 | 0;
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) $$0$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$82 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31, $15, $16, $$1, $11, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9, $12, $13, $14, $6) | 0) {
   $$2 = $$1;
   $139 = $158;
   break;
  }
  $96 = HEAP32[$80 >> 2] | 0;
  if (($96 | 0) == (HEAP32[$83 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 40 >> 2] & 127]($81) | 0; else {
   HEAP32[$80 >> 2] = $96 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$96 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $156 = $131;
  $31 = $81;
 }
 $105 = HEAP8[$9 + 11 >> 0] | 0;
 if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($105 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $105 & 255) | 0) == 0)) {
  $114 = HEAP32[$13 >> 2] | 0;
  if (($114 - $12 | 0) < 160) {
   $119 = HEAP32[$14 >> 2] | 0;
   HEAP32[$13 >> 2] = $114 + 4;
   HEAP32[$114 >> 2] = $119;
  }
 }
 HEAPF32[$5 >> 2] = +__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($$2, HEAP32[$11 >> 2] | 0, $4);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9, $12, HEAP32[$13 >> 2] | 0, $4);
 if (!$81) $159 = 1; else {
  $126 = HEAP32[$81 + 12 >> 2] | 0;
  if (($126 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$131 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$126 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $159 = 1;
  } else $159 = 0;
 }
 do if (!$139) label = 48; else {
  $142 = HEAP32[$139 + 12 >> 2] | 0;
  if (($142 | 0) == (HEAP32[$139 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$139 >> 2] | 0) + 36 >> 2] & 127]($139) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($159) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($159) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $139 = 0, $14 = 0, $142 = 0, $15 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $46 = 0, $49 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $6 = sp + 160 | 0;
 $7 = sp + 328 | 0;
 $8 = sp + 324 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 300 | 0;
 $11 = sp + 296 | 0;
 $12 = sp;
 $13 = sp + 292 | 0;
 $14 = sp + 288 | 0;
 $15 = sp + 333 | 0;
 $16 = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 $22 = $10 + 8 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $25, 0);
 $29 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
 HEAP32[$11 >> 2] = $29;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$14 >> 2] = 0;
 HEAP8[$15 >> 0] = 1;
 HEAP8[$16 >> 0] = 69;
 $30 = $10 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $29;
 $156 = $$pre;
 $31 = $$pre;
 L8 : while (1) {
  if (!$31) {
   $131 = 0;
   $157 = 1;
   $81 = 0;
  } else {
   $34 = HEAP32[$31 + 12 >> 2] | 0;
   if (($34 | 0) == (HEAP32[$31 + 16 >> 2] | 0)) $$0$i$i$i$i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 127]($31) | 0; else $$0$i$i$i$i15 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $131 = 0;
    $157 = 1;
    $81 = 0;
   } else {
    $131 = $156;
    $157 = 0;
    $81 = $31;
   }
  }
  $46 = HEAP32[$2 >> 2] | 0;
  do if (!$46) label = 19; else {
   $49 = HEAP32[$46 + 12 >> 2] | 0;
   if (($49 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $$0$i$i2$i$i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 127]($46) | 0; else $$0$i$i2$i$i21 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$49 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($157) {
    $158 = $46;
    break;
   } else {
    $$2 = $$0;
    $139 = $46;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($157) {
    $$2 = $$0;
    $139 = 0;
    break;
   } else $158 = 0;
  }
  $62 = HEAP8[$19 >> 0] | 0;
  $66 = $62 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $62 & 255;
  if ((HEAP32[$11 >> 2] | 0) == ($$0 + $66 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $66 << 1, 0);
   if ((HEAP8[$19 >> 0] | 0) < 0) $74 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $74 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $74, 0);
   $78 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
   HEAP32[$11 >> 2] = $78 + $66;
   $$1 = $78;
  } else $$1 = $$0;
  $80 = $81 + 12 | 0;
  $82 = HEAP32[$80 >> 2] | 0;
  $83 = $81 + 16 | 0;
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) $$0$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$82 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31, $15, $16, $$1, $11, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9, $12, $13, $14, $6) | 0) {
   $$2 = $$1;
   $139 = $158;
   break;
  }
  $96 = HEAP32[$80 >> 2] | 0;
  if (($96 | 0) == (HEAP32[$83 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 40 >> 2] & 127]($81) | 0; else {
   HEAP32[$80 >> 2] = $96 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$96 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $156 = $131;
  $31 = $81;
 }
 $105 = HEAP8[$9 + 11 >> 0] | 0;
 if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($105 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $105 & 255) | 0) == 0)) {
  $114 = HEAP32[$13 >> 2] | 0;
  if (($114 - $12 | 0) < 160) {
   $119 = HEAP32[$14 >> 2] | 0;
   HEAP32[$13 >> 2] = $114 + 4;
   HEAP32[$114 >> 2] = $119;
  }
 }
 HEAPF64[$5 >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($$2, HEAP32[$11 >> 2] | 0, $4);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9, $12, HEAP32[$13 >> 2] | 0, $4);
 if (!$81) $159 = 1; else {
  $126 = HEAP32[$81 + 12 >> 2] | 0;
  if (($126 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$131 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$126 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $159 = 1;
  } else $159 = 0;
 }
 do if (!$139) label = 48; else {
  $142 = HEAP32[$139 + 12 >> 2] | 0;
  if (($142 | 0) == (HEAP32[$139 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$139 >> 2] | 0) + 36 >> 2] & 127]($139) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($159) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($159) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $139 = 0, $14 = 0, $142 = 0, $15 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $46 = 0, $49 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $6 = sp + 160 | 0;
 $7 = sp + 328 | 0;
 $8 = sp + 324 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 300 | 0;
 $11 = sp + 296 | 0;
 $12 = sp;
 $13 = sp + 292 | 0;
 $14 = sp + 288 | 0;
 $15 = sp + 333 | 0;
 $16 = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 $22 = $10 + 8 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $25, 0);
 $29 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
 HEAP32[$11 >> 2] = $29;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$14 >> 2] = 0;
 HEAP8[$15 >> 0] = 1;
 HEAP8[$16 >> 0] = 69;
 $30 = $10 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $29;
 $156 = $$pre;
 $31 = $$pre;
 L8 : while (1) {
  if (!$31) {
   $131 = 0;
   $157 = 1;
   $81 = 0;
  } else {
   $34 = HEAP32[$31 + 12 >> 2] | 0;
   if (($34 | 0) == (HEAP32[$31 + 16 >> 2] | 0)) $$0$i$i$i$i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 127]($31) | 0; else $$0$i$i$i$i15 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $131 = 0;
    $157 = 1;
    $81 = 0;
   } else {
    $131 = $156;
    $157 = 0;
    $81 = $31;
   }
  }
  $46 = HEAP32[$2 >> 2] | 0;
  do if (!$46) label = 19; else {
   $49 = HEAP32[$46 + 12 >> 2] | 0;
   if (($49 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $$0$i$i2$i$i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 127]($46) | 0; else $$0$i$i2$i$i21 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$49 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($157) {
    $158 = $46;
    break;
   } else {
    $$2 = $$0;
    $139 = $46;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($157) {
    $$2 = $$0;
    $139 = 0;
    break;
   } else $158 = 0;
  }
  $62 = HEAP8[$19 >> 0] | 0;
  $66 = $62 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $62 & 255;
  if ((HEAP32[$11 >> 2] | 0) == ($$0 + $66 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $66 << 1, 0);
   if ((HEAP8[$19 >> 0] | 0) < 0) $74 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $74 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $74, 0);
   $78 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
   HEAP32[$11 >> 2] = $78 + $66;
   $$1 = $78;
  } else $$1 = $$0;
  $80 = $81 + 12 | 0;
  $82 = HEAP32[$80 >> 2] | 0;
  $83 = $81 + 16 | 0;
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) $$0$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$82 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31, $15, $16, $$1, $11, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9, $12, $13, $14, $6) | 0) {
   $$2 = $$1;
   $139 = $158;
   break;
  }
  $96 = HEAP32[$80 >> 2] | 0;
  if (($96 | 0) == (HEAP32[$83 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 40 >> 2] & 127]($81) | 0; else {
   HEAP32[$80 >> 2] = $96 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$96 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $156 = $131;
  $31 = $81;
 }
 $105 = HEAP8[$9 + 11 >> 0] | 0;
 if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($105 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $105 & 255) | 0) == 0)) {
  $114 = HEAP32[$13 >> 2] | 0;
  if (($114 - $12 | 0) < 160) {
   $119 = HEAP32[$14 >> 2] | 0;
   HEAP32[$13 >> 2] = $114 + 4;
   HEAP32[$114 >> 2] = $119;
  }
 }
 HEAPF64[$5 >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($$2, HEAP32[$11 >> 2] | 0, $4);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9, $12, HEAP32[$13 >> 2] | 0, $4);
 if (!$81) $159 = 1; else {
  $126 = HEAP32[$81 + 12 >> 2] | 0;
  if (($126 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$131 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$126 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $159 = 1;
  } else $159 = 0;
 }
 do if (!$139) label = 48; else {
  $142 = HEAP32[$139 + 12 >> 2] | 0;
  if (($142 | 0) == (HEAP32[$139 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$139 >> 2] | 0) + 36 >> 2] & 127]($139) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($159) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($159) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $14 = 0, $140 = 0, $143 = 0, $15 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $19 = 0, $22 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $46 = 0, $49 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 160 | 0;
 $7 = sp + 231 | 0;
 $8 = sp + 230 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 204 | 0;
 $11 = sp + 200 | 0;
 $12 = sp;
 $13 = sp + 196 | 0;
 $14 = sp + 192 | 0;
 $15 = sp + 229 | 0;
 $16 = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 $22 = $10 + 8 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $25, 0);
 $29 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
 HEAP32[$11 >> 2] = $29;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$14 >> 2] = 0;
 HEAP8[$15 >> 0] = 1;
 HEAP8[$16 >> 0] = 69;
 $30 = $10 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $29;
 $157 = $$pre;
 $31 = $$pre;
 L8 : while (1) {
  if (!$31) {
   $132 = 0;
   $158 = 1;
   $81 = 0;
  } else {
   $34 = HEAP32[$31 + 12 >> 2] | 0;
   if (($34 | 0) == (HEAP32[$31 + 16 >> 2] | 0)) $$0$i$i$i$i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 127]($31) | 0; else $$0$i$i$i$i15 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $132 = 0;
    $158 = 1;
    $81 = 0;
   } else {
    $132 = $157;
    $158 = 0;
    $81 = $31;
   }
  }
  $46 = HEAP32[$2 >> 2] | 0;
  do if (!$46) label = 19; else {
   $49 = HEAP32[$46 + 12 >> 2] | 0;
   if (($49 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $$0$i$i2$i$i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 127]($46) | 0; else $$0$i$i2$i$i21 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$49 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($158) {
    $159 = $46;
    break;
   } else {
    $$2 = $$0;
    $140 = $46;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;
    $140 = 0;
    break;
   } else $159 = 0;
  }
  $62 = HEAP8[$19 >> 0] | 0;
  $66 = $62 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $62 & 255;
  if ((HEAP32[$11 >> 2] | 0) == ($$0 + $66 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $66 << 1, 0);
   if ((HEAP8[$19 >> 0] | 0) < 0) $74 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $74 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $74, 0);
   $78 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
   HEAP32[$11 >> 2] = $78 + $66;
   $$1 = $78;
  } else $$1 = $$0;
  $80 = $81 + 12 | 0;
  $82 = HEAP32[$80 >> 2] | 0;
  $83 = $81 + 16 | 0;
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) $$0$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$82 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i31 & 255, $15, $16, $$1, $11, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9, $12, $13, $14, $6) | 0) {
   $$2 = $$1;
   $140 = $159;
   break;
  }
  $97 = HEAP32[$80 >> 2] | 0;
  if (($97 | 0) == (HEAP32[$83 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 40 >> 2] & 127]($81) | 0; else {
   HEAP32[$80 >> 2] = $97 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$97 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $157 = $132;
  $31 = $81;
 }
 $106 = HEAP8[$9 + 11 >> 0] | 0;
 if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($106 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $106 & 255) | 0) == 0)) {
  $115 = HEAP32[$13 >> 2] | 0;
  if (($115 - $12 | 0) < 160) {
   $120 = HEAP32[$14 >> 2] | 0;
   HEAP32[$13 >> 2] = $115 + 4;
   HEAP32[$115 >> 2] = $120;
  }
 }
 HEAPF32[$5 >> 2] = +__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($$2, HEAP32[$11 >> 2] | 0, $4);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9, $12, HEAP32[$13 >> 2] | 0, $4);
 if (!$81) $160 = 1; else {
  $127 = HEAP32[$81 + 12 >> 2] | 0;
  if (($127 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$132 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$127 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $160 = 1;
  } else $160 = 0;
 }
 do if (!$140) label = 48; else {
  $143 = HEAP32[$140 + 12 >> 2] | 0;
  if (($143 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 36 >> 2] & 127]($140) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$143 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($160) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($160) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $14 = 0, $140 = 0, $143 = 0, $15 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $19 = 0, $22 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $46 = 0, $49 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 160 | 0;
 $7 = sp + 231 | 0;
 $8 = sp + 230 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 204 | 0;
 $11 = sp + 200 | 0;
 $12 = sp;
 $13 = sp + 196 | 0;
 $14 = sp + 192 | 0;
 $15 = sp + 229 | 0;
 $16 = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 $22 = $10 + 8 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $25, 0);
 $29 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
 HEAP32[$11 >> 2] = $29;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$14 >> 2] = 0;
 HEAP8[$15 >> 0] = 1;
 HEAP8[$16 >> 0] = 69;
 $30 = $10 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $29;
 $157 = $$pre;
 $31 = $$pre;
 L8 : while (1) {
  if (!$31) {
   $132 = 0;
   $158 = 1;
   $81 = 0;
  } else {
   $34 = HEAP32[$31 + 12 >> 2] | 0;
   if (($34 | 0) == (HEAP32[$31 + 16 >> 2] | 0)) $$0$i$i$i$i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 127]($31) | 0; else $$0$i$i$i$i15 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $132 = 0;
    $158 = 1;
    $81 = 0;
   } else {
    $132 = $157;
    $158 = 0;
    $81 = $31;
   }
  }
  $46 = HEAP32[$2 >> 2] | 0;
  do if (!$46) label = 19; else {
   $49 = HEAP32[$46 + 12 >> 2] | 0;
   if (($49 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $$0$i$i2$i$i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 127]($46) | 0; else $$0$i$i2$i$i21 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$49 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($158) {
    $159 = $46;
    break;
   } else {
    $$2 = $$0;
    $140 = $46;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;
    $140 = 0;
    break;
   } else $159 = 0;
  }
  $62 = HEAP8[$19 >> 0] | 0;
  $66 = $62 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $62 & 255;
  if ((HEAP32[$11 >> 2] | 0) == ($$0 + $66 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $66 << 1, 0);
   if ((HEAP8[$19 >> 0] | 0) < 0) $74 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $74 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $74, 0);
   $78 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
   HEAP32[$11 >> 2] = $78 + $66;
   $$1 = $78;
  } else $$1 = $$0;
  $80 = $81 + 12 | 0;
  $82 = HEAP32[$80 >> 2] | 0;
  $83 = $81 + 16 | 0;
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) $$0$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$82 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i31 & 255, $15, $16, $$1, $11, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9, $12, $13, $14, $6) | 0) {
   $$2 = $$1;
   $140 = $159;
   break;
  }
  $97 = HEAP32[$80 >> 2] | 0;
  if (($97 | 0) == (HEAP32[$83 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 40 >> 2] & 127]($81) | 0; else {
   HEAP32[$80 >> 2] = $97 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$97 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $157 = $132;
  $31 = $81;
 }
 $106 = HEAP8[$9 + 11 >> 0] | 0;
 if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($106 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $106 & 255) | 0) == 0)) {
  $115 = HEAP32[$13 >> 2] | 0;
  if (($115 - $12 | 0) < 160) {
   $120 = HEAP32[$14 >> 2] | 0;
   HEAP32[$13 >> 2] = $115 + 4;
   HEAP32[$115 >> 2] = $120;
  }
 }
 HEAPF64[$5 >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($$2, HEAP32[$11 >> 2] | 0, $4);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9, $12, HEAP32[$13 >> 2] | 0, $4);
 if (!$81) $160 = 1; else {
  $127 = HEAP32[$81 + 12 >> 2] | 0;
  if (($127 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$132 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$127 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $160 = 1;
  } else $160 = 0;
 }
 do if (!$140) label = 48; else {
  $143 = HEAP32[$140 + 12 >> 2] | 0;
  if (($143 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 36 >> 2] & 127]($140) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$143 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($160) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($160) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $106 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $14 = 0, $140 = 0, $143 = 0, $15 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $19 = 0, $22 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $46 = 0, $49 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 160 | 0;
 $7 = sp + 231 | 0;
 $8 = sp + 230 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 204 | 0;
 $11 = sp + 200 | 0;
 $12 = sp;
 $13 = sp + 196 | 0;
 $14 = sp + 192 | 0;
 $15 = sp + 229 | 0;
 $16 = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 $22 = $10 + 8 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $25, 0);
 $29 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
 HEAP32[$11 >> 2] = $29;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$14 >> 2] = 0;
 HEAP8[$15 >> 0] = 1;
 HEAP8[$16 >> 0] = 69;
 $30 = $10 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $29;
 $157 = $$pre;
 $31 = $$pre;
 L8 : while (1) {
  if (!$31) {
   $132 = 0;
   $158 = 1;
   $81 = 0;
  } else {
   $34 = HEAP32[$31 + 12 >> 2] | 0;
   if (($34 | 0) == (HEAP32[$31 + 16 >> 2] | 0)) $$0$i$i$i$i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 127]($31) | 0; else $$0$i$i$i$i15 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $132 = 0;
    $158 = 1;
    $81 = 0;
   } else {
    $132 = $157;
    $158 = 0;
    $81 = $31;
   }
  }
  $46 = HEAP32[$2 >> 2] | 0;
  do if (!$46) label = 19; else {
   $49 = HEAP32[$46 + 12 >> 2] | 0;
   if (($49 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $$0$i$i2$i$i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 127]($46) | 0; else $$0$i$i2$i$i21 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$49 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($158) {
    $159 = $46;
    break;
   } else {
    $$2 = $$0;
    $140 = $46;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;
    $140 = 0;
    break;
   } else $159 = 0;
  }
  $62 = HEAP8[$19 >> 0] | 0;
  $66 = $62 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $62 & 255;
  if ((HEAP32[$11 >> 2] | 0) == ($$0 + $66 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $66 << 1, 0);
   if ((HEAP8[$19 >> 0] | 0) < 0) $74 = (HEAP32[$22 >> 2] & 2147483647) + -1 | 0; else $74 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10, $74, 0);
   $78 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
   HEAP32[$11 >> 2] = $78 + $66;
   $$1 = $78;
  } else $$1 = $$0;
  $80 = $81 + 12 | 0;
  $82 = HEAP32[$80 >> 2] | 0;
  $83 = $81 + 16 | 0;
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) $$0$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$82 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i31 & 255, $15, $16, $$1, $11, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9, $12, $13, $14, $6) | 0) {
   $$2 = $$1;
   $140 = $159;
   break;
  }
  $97 = HEAP32[$80 >> 2] | 0;
  if (($97 | 0) == (HEAP32[$83 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 40 >> 2] & 127]($81) | 0; else {
   HEAP32[$80 >> 2] = $97 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$97 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $157 = $132;
  $31 = $81;
 }
 $106 = HEAP8[$9 + 11 >> 0] | 0;
 if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($106 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $106 & 255) | 0) == 0)) {
  $115 = HEAP32[$13 >> 2] | 0;
  if (($115 - $12 | 0) < 160) {
   $120 = HEAP32[$14 >> 2] | 0;
   HEAP32[$13 >> 2] = $115 + 4;
   HEAP32[$115 >> 2] = $120;
  }
 }
 HEAPF64[$5 >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($$2, HEAP32[$11 >> 2] | 0, $4);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9, $12, HEAP32[$13 >> 2] | 0, $4);
 if (!$81) $160 = 1; else {
  $127 = HEAP32[$81 + 12 >> 2] | 0;
  if (($127 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$132 >> 2] | 0) + 36 >> 2] & 127]($81) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$127 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $160 = 1;
  } else $160 = 0;
 }
 do if (!$140) label = 48; else {
  $143 = HEAP32[$140 + 12 >> 2] | 0;
  if (($143 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$140 >> 2] | 0) + 36 >> 2] & 127]($140) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$143 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($160) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($160) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i22 = 0, $$0$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i28 = 0, $$0$i$i38 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $12 = 0, $121 = 0, $129 = 0, $132 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $21 = 0, $24 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $48 = 0, $51 = 0, $6 = 0, $64 = 0, $68 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $vararg_buffer = sp + 264 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 292 | 0;
 $8 = sp + 280 | 0;
 $9 = sp + 276 | 0;
 $10 = sp;
 $11 = sp + 272 | 0;
 $12 = sp + 268 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$7 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($8, $3);
 $15 = __ZNKSt3__26locale9use_facetERNS0_2idE($8, 32720) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 48 >> 2] & 7]($15, 6320, 6346, $6) | 0;
 __ZNSt3__26localeD2Ev($8);
 HEAP32[$8 >> 2] = 0;
 HEAP32[$8 + 4 >> 2] = 0;
 HEAP32[$8 + 8 >> 2] = 0;
 $$0$i$i19 = 0;
 while (1) {
  if (($$0$i$i19 | 0) == 3) break;
  HEAP32[$8 + ($$0$i$i19 << 2) >> 2] = 0;
  $$0$i$i19 = $$0$i$i19 + 1 | 0;
 }
 $21 = $8 + 11 | 0;
 $24 = $8 + 8 | 0;
 if ((HEAP8[$21 >> 0] | 0) < 0) $27 = (HEAP32[$24 >> 2] & 2147483647) + -1 | 0; else $27 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($8, $27, 0);
 $31 = (HEAP8[$21 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
 HEAP32[$9 >> 2] = $31;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$12 >> 2] = 0;
 $32 = $8 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $31;
 $146 = $$pre;
 $33 = $$pre;
 L12 : while (1) {
  if (!$33) {
   $121 = 0;
   $147 = 1;
   $83 = 0;
  } else {
   $36 = HEAP32[$33 + 12 >> 2] | 0;
   if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) $$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0; else $$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i22, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $121 = 0;
    $147 = 1;
    $83 = 0;
   } else {
    $121 = $146;
    $147 = 0;
    $83 = $33;
   }
  }
  $48 = HEAP32[$2 >> 2] | 0;
  do if (!$48) label = 22; else {
   $51 = HEAP32[$48 + 12 >> 2] | 0;
   if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $$0$i$i2$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $$0$i$i2$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$51 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 22;
    break;
   } else if ($147) {
    $148 = $48;
    break;
   } else {
    $$2 = $$0;
    $129 = $48;
    break L12;
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($147) {
    $$2 = $$0;
    $129 = 0;
    break;
   } else $148 = 0;
  }
  $64 = HEAP8[$21 >> 0] | 0;
  $68 = $64 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $64 & 255;
  if ((HEAP32[$9 >> 2] | 0) == ($$0 + $68 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($8, $68 << 1, 0);
   if ((HEAP8[$21 >> 0] | 0) < 0) $76 = (HEAP32[$24 >> 2] & 2147483647) + -1 | 0; else $76 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($8, $76, 0);
   $80 = (HEAP8[$21 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
   HEAP32[$9 >> 2] = $80 + $68;
   $$1 = $80;
  } else $$1 = $$0;
  $82 = $83 + 12 | 0;
  $84 = HEAP32[$82 >> 2] | 0;
  $85 = $83 + 16 | 0;
  if (($84 | 0) == (HEAP32[$85 >> 2] | 0)) $$0$i$i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 36 >> 2] & 127]($83) | 0; else $$0$i$i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$84 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i38, 16, $$1, $9, $12, 0, $7, $10, $11, $6) | 0) {
   $$2 = $$1;
   $129 = $148;
   break;
  }
  $96 = HEAP32[$82 >> 2] | 0;
  if (($96 | 0) == (HEAP32[$85 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 40 >> 2] & 127]($83) | 0; else {
   HEAP32[$82 >> 2] = $96 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$96 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $146 = $121;
  $33 = $83;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($8, (HEAP32[$9 >> 2] | 0) - $$2 | 0, 0);
 $110 = (HEAP8[$21 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
 $111 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $5;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($110, $111, 23423, $vararg_buffer) | 0) != 1) HEAP32[$4 >> 2] = 4;
 if (!$83) $149 = 1; else {
  $116 = HEAP32[$83 + 12 >> 2] | 0;
  if (($116 | 0) == (HEAP32[$83 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 36 >> 2] & 127]($83) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$116 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $149 = 1;
  } else $149 = 0;
 }
 do if (!$129) label = 50; else {
  $132 = HEAP32[$129 + 12 >> 2] | 0;
  if (($132 | 0) == (HEAP32[$129 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$129 >> 2] | 0) + 36 >> 2] & 127]($129) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$132 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 50;
   break;
  } else if ($149) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($149) label = 52;
 if ((label | 0) == 52) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i20 = 0, $$0$i$i17 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i26 = 0, $$0$i$i36 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $111 = 0, $112 = 0, $117 = 0, $12 = 0, $122 = 0, $130 = 0, $133 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $21 = 0, $24 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $48 = 0, $51 = 0, $6 = 0, $64 = 0, $68 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $vararg_buffer = sp + 192 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 220 | 0;
 $8 = sp + 208 | 0;
 $9 = sp + 204 | 0;
 $10 = sp;
 $11 = sp + 200 | 0;
 $12 = sp + 196 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$7 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($8, $3);
 $15 = __ZNKSt3__26locale9use_facetERNS0_2idE($8, 32688) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 32 >> 2] & 7]($15, 6320, 6346, $6) | 0;
 __ZNSt3__26localeD2Ev($8);
 HEAP32[$8 >> 2] = 0;
 HEAP32[$8 + 4 >> 2] = 0;
 HEAP32[$8 + 8 >> 2] = 0;
 $$0$i$i17 = 0;
 while (1) {
  if (($$0$i$i17 | 0) == 3) break;
  HEAP32[$8 + ($$0$i$i17 << 2) >> 2] = 0;
  $$0$i$i17 = $$0$i$i17 + 1 | 0;
 }
 $21 = $8 + 11 | 0;
 $24 = $8 + 8 | 0;
 if ((HEAP8[$21 >> 0] | 0) < 0) $27 = (HEAP32[$24 >> 2] & 2147483647) + -1 | 0; else $27 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($8, $27, 0);
 $31 = (HEAP8[$21 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
 HEAP32[$9 >> 2] = $31;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$12 >> 2] = 0;
 $32 = $8 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $31;
 $147 = $$pre;
 $33 = $$pre;
 L12 : while (1) {
  if (!$33) {
   $122 = 0;
   $148 = 1;
   $83 = 0;
  } else {
   $36 = HEAP32[$33 + 12 >> 2] | 0;
   if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) $$0$i$i$i$i20 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0; else $$0$i$i$i$i20 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i20, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $122 = 0;
    $148 = 1;
    $83 = 0;
   } else {
    $122 = $147;
    $148 = 0;
    $83 = $33;
   }
  }
  $48 = HEAP32[$2 >> 2] | 0;
  do if (!$48) label = 22; else {
   $51 = HEAP32[$48 + 12 >> 2] | 0;
   if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $$0$i$i2$i$i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $$0$i$i2$i$i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$51 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i26, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 22;
    break;
   } else if ($148) {
    $149 = $48;
    break;
   } else {
    $$2 = $$0;
    $130 = $48;
    break L12;
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($148) {
    $$2 = $$0;
    $130 = 0;
    break;
   } else $149 = 0;
  }
  $64 = HEAP8[$21 >> 0] | 0;
  $68 = $64 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $64 & 255;
  if ((HEAP32[$9 >> 2] | 0) == ($$0 + $68 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($8, $68 << 1, 0);
   if ((HEAP8[$21 >> 0] | 0) < 0) $76 = (HEAP32[$24 >> 2] & 2147483647) + -1 | 0; else $76 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($8, $76, 0);
   $80 = (HEAP8[$21 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
   HEAP32[$9 >> 2] = $80 + $68;
   $$1 = $80;
  } else $$1 = $$0;
  $82 = $83 + 12 | 0;
  $84 = HEAP32[$82 >> 2] | 0;
  $85 = $83 + 16 | 0;
  if (($84 | 0) == (HEAP32[$85 >> 2] | 0)) $$0$i$i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 36 >> 2] & 127]($83) | 0; else $$0$i$i36 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$84 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($$0$i$i36 & 255, 16, $$1, $9, $12, 0, $7, $10, $11, $6) | 0) {
   $$2 = $$1;
   $130 = $149;
   break;
  }
  $97 = HEAP32[$82 >> 2] | 0;
  if (($97 | 0) == (HEAP32[$85 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 40 >> 2] & 127]($83) | 0; else {
   HEAP32[$82 >> 2] = $97 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$97 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $147 = $122;
  $33 = $83;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($8, (HEAP32[$9 >> 2] | 0) - $$2 | 0, 0);
 $111 = (HEAP8[$21 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
 $112 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $5;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($111, $112, 23423, $vararg_buffer) | 0) != 1) HEAP32[$4 >> 2] = 4;
 if (!$83) $150 = 1; else {
  $117 = HEAP32[$83 + 12 >> 2] | 0;
  if (($117 | 0) == (HEAP32[$83 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 36 >> 2] & 127]($83) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$117 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $150 = 1;
  } else $150 = 0;
 }
 do if (!$130) label = 50; else {
  $133 = HEAP32[$130 + 12 >> 2] | 0;
  if (($133 | 0) == (HEAP32[$130 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$130 >> 2] | 0) + 36 >> 2] & 127]($130) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$133 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 50;
   break;
  } else if ($150) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($150) label = 52;
 if ((label | 0) == 52) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i41 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i47 = 0, $$0$i$i38 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $102 = 0, $103 = 0, $106 = 0, $108 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $142 = 0, $154 = 0, $157 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $5 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $71 = 0, $74 = 0, $8 = 0, $86 = 0, $89 = 0, label = 0;
 $5 = HEAP32[$0 >> 2] | 0;
 do if (!$5) $171 = 1; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$0 >> 2] = 0;
   $171 = 1;
   break;
  } else {
   $171 = (HEAP32[$0 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $20 = HEAP32[$1 >> 2] | 0;
 do if (!$20) label = 14; else {
  $23 = HEAP32[$20 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   label = 14;
   break;
  } else if ($171) {
   $172 = $20;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($171) label = 16; else {
  $172 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
  $$2 = 0;
 } else if ((label | 0) == 17) {
  $37 = HEAP32[$0 >> 2] | 0;
  $39 = HEAP32[$37 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 31]($3, 2048, $$0$i$i) | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
   $$2 = 0;
   break;
  }
  $59 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] & 31]($3, $$0$i$i, 0) | 0) << 24 >> 24;
  $60 = HEAP32[$0 >> 2] | 0;
  $61 = $60 + 12 | 0;
  $62 = HEAP32[$61 >> 2] | 0;
  if (($62 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 40 >> 2] & 127]($60) | 0; else {
   HEAP32[$61 >> 2] = $62 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$62 >> 2] | 0) | 0;
  }
  $$0$in = $59;
  $$025$in = $4;
  $173 = $172;
  $86 = $172;
  while (1) {
   $$0 = $$0$in + -48 | 0;
   $$025 = $$025$in + -1 | 0;
   $71 = HEAP32[$0 >> 2] | 0;
   do if (!$71) $102 = 1; else {
    $74 = HEAP32[$71 + 12 >> 2] | 0;
    if (($74 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) $$0$i$i$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] & 127]($71) | 0; else $$0$i$i$i$i27 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$74 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i27, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$0 >> 2] = 0;
     $102 = 1;
     break;
    } else {
     $102 = (HEAP32[$0 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!$86) {
    $103 = 1;
    $154 = $173;
    $174 = 0;
   } else {
    $89 = HEAP32[$86 + 12 >> 2] | 0;
    if (($89 | 0) == (HEAP32[$86 + 16 >> 2] | 0)) $$0$i$i2$i$i33 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$86 >> 2] | 0) + 36 >> 2] & 127]($86) | 0; else $$0$i$i2$i$i33 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$89 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i33, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $103 = 1;
     $154 = 0;
     $174 = 0;
    } else {
     $103 = 0;
     $154 = $173;
     $174 = $86;
    }
   }
   $106 = HEAP32[$0 >> 2] | 0;
   if (!(($$025$in | 0) > 1 & ($102 ^ $103))) break;
   $108 = HEAP32[$106 + 12 >> 2] | 0;
   if (($108 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) $$0$i$i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 127]($106) | 0; else $$0$i$i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 31]($3, 2048, $$0$i$i38) | 0)) {
    $$2 = $$0;
    break L22;
   }
   $128 = ($$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] & 31]($3, $$0$i$i38, 0) | 0) << 24 >> 24) | 0;
   $129 = HEAP32[$0 >> 2] | 0;
   $130 = $129 + 12 | 0;
   $131 = HEAP32[$130 >> 2] | 0;
   if (($131 | 0) == (HEAP32[$129 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$129 >> 2] | 0) + 40 >> 2] & 127]($129) | 0; else {
    HEAP32[$130 >> 2] = $131 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$131 >> 2] | 0) | 0;
   }
   $$0$in = $128;
   $$025$in = $$025;
   $173 = $154;
   $86 = $174;
  }
  do if (!$106) $175 = 1; else {
   $142 = HEAP32[$106 + 12 >> 2] | 0;
   if (($142 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) $$0$i$i$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 127]($106) | 0; else $$0$i$i$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i41, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$0 >> 2] = 0;
    $175 = 1;
    break;
   } else {
    $175 = (HEAP32[$0 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$154) label = 61; else {
   $157 = HEAP32[$154 + 12 >> 2] | 0;
   if (($157 | 0) == (HEAP32[$154 + 16 >> 2] | 0)) $$0$i$i2$i$i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$154 >> 2] | 0) + 36 >> 2] & 127]($154) | 0; else $$0$i$i2$i$i47 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$157 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i47, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    label = 61;
    break;
   } else if ($175) {
    $$2 = $$0;
    break L22;
   } else break;
  } while (0);
  if ((label | 0) == 61) if (!$175) {
   $$2 = $$0;
   break;
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
  $$2 = $$0;
 } while (0);
 return $$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $103 = 0, $11 = 0, $110 = 0, $115 = 0, $12 = 0, $122 = 0, $127 = 0, $13 = 0, $135 = 0, $138 = 0, $14 = 0, $15 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $152 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $127 = 0;
   $153 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $127 = 0;
    $153 = 1;
    $80 = 0;
   } else {
    $127 = $152;
    $153 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($153) {
    $154 = $45;
    break;
   } else {
    $$2 = $$0;
    $135 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($153) {
    $$2 = $$0;
    $135 = 0;
    break;
   } else $154 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$81 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41, $14, $$1, $10, $13, HEAP32[$6 >> 2] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $135 = $154;
   break;
  }
  $94 = HEAP32[$79 >> 2] | 0;
  if (($94 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $94 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$94 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $152 = $127;
  $30 = $80;
 }
 $103 = HEAP8[$8 + 11 >> 0] | 0;
 if (($103 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $103 & 255) | 0) {
  $110 = HEAP32[$12 >> 2] | 0;
  if (($110 - $11 | 0) < 160) {
   $115 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $110 + 4;
   HEAP32[$110 >> 2] = $115;
  }
 }
 HEAP16[$5 >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $155 = 1; else {
  $122 = HEAP32[$80 + 12 >> 2] | 0;
  if (($122 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$127 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$122 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $155 = 1;
  } else $155 = 0;
 }
 do if (!$135) label = 48; else {
  $138 = HEAP32[$135 + 12 >> 2] | 0;
  if (($138 | 0) == (HEAP32[$135 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$135 >> 2] | 0) + 36 >> 2] & 127]($135) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$138 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($155) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($155) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $103 = 0, $11 = 0, $110 = 0, $115 = 0, $12 = 0, $122 = 0, $127 = 0, $13 = 0, $135 = 0, $138 = 0, $14 = 0, $15 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $152 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $127 = 0;
   $153 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $127 = 0;
    $153 = 1;
    $80 = 0;
   } else {
    $127 = $152;
    $153 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($153) {
    $154 = $45;
    break;
   } else {
    $$2 = $$0;
    $135 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($153) {
    $$2 = $$0;
    $135 = 0;
    break;
   } else $154 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$81 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41, $14, $$1, $10, $13, HEAP32[$6 >> 2] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $135 = $154;
   break;
  }
  $94 = HEAP32[$79 >> 2] | 0;
  if (($94 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $94 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$94 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $152 = $127;
  $30 = $80;
 }
 $103 = HEAP8[$8 + 11 >> 0] | 0;
 if (($103 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $103 & 255) | 0) {
  $110 = HEAP32[$12 >> 2] | 0;
  if (($110 - $11 | 0) < 160) {
   $115 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $110 + 4;
   HEAP32[$110 >> 2] = $115;
  }
 }
 HEAP32[$5 >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $155 = 1; else {
  $122 = HEAP32[$80 + 12 >> 2] | 0;
  if (($122 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$127 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$122 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $155 = 1;
  } else $155 = 0;
 }
 do if (!$135) label = 48; else {
  $138 = HEAP32[$135 + 12 >> 2] | 0;
  if (($138 | 0) == (HEAP32[$135 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$135 >> 2] | 0) + 36 >> 2] & 127]($135) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$138 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($155) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($155) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $103 = 0, $11 = 0, $110 = 0, $115 = 0, $12 = 0, $122 = 0, $127 = 0, $13 = 0, $135 = 0, $138 = 0, $14 = 0, $15 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $152 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $127 = 0;
   $153 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $127 = 0;
    $153 = 1;
    $80 = 0;
   } else {
    $127 = $152;
    $153 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($153) {
    $154 = $45;
    break;
   } else {
    $$2 = $$0;
    $135 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($153) {
    $$2 = $$0;
    $135 = 0;
    break;
   } else $154 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$81 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41, $14, $$1, $10, $13, HEAP32[$6 >> 2] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $135 = $154;
   break;
  }
  $94 = HEAP32[$79 >> 2] | 0;
  if (($94 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $94 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$94 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $152 = $127;
  $30 = $80;
 }
 $103 = HEAP8[$8 + 11 >> 0] | 0;
 if (($103 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $103 & 255) | 0) {
  $110 = HEAP32[$12 >> 2] | 0;
  if (($110 - $11 | 0) < 160) {
   $115 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $110 + 4;
   HEAP32[$110 >> 2] = $115;
  }
 }
 HEAP32[$5 >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $155 = 1; else {
  $122 = HEAP32[$80 + 12 >> 2] | 0;
  if (($122 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$127 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$122 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $155 = 1;
  } else $155 = 0;
 }
 do if (!$135) label = 48; else {
  $138 = HEAP32[$135 + 12 >> 2] | 0;
  if (($138 | 0) == (HEAP32[$135 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$135 >> 2] | 0) + 36 >> 2] & 127]($135) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$138 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($155) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($155) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $11 = 0, $111 = 0, $116 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $15 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $153 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $128 = 0;
   $154 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $128 = 0;
    $154 = 1;
    $80 = 0;
   } else {
    $128 = $153;
    $154 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$48 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($154) {
    $155 = $45;
    break;
   } else {
    $$2 = $$0;
    $136 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;
    $136 = 0;
    break;
   } else $155 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($$0$i$i41 & 255, $14, $$1, $10, $13, HEAP8[$6 >> 0] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $136 = $155;
   break;
  }
  $95 = HEAP32[$79 >> 2] | 0;
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $95 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$95 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $153 = $128;
  $30 = $80;
 }
 $104 = HEAP8[$8 + 11 >> 0] | 0;
 if (($104 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $104 & 255) | 0) {
  $111 = HEAP32[$12 >> 2] | 0;
  if (($111 - $11 | 0) < 160) {
   $116 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $111 + 4;
   HEAP32[$111 >> 2] = $116;
  }
 }
 HEAP16[$5 >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $156 = 1; else {
  $123 = HEAP32[$80 + 12 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$128 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$123 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $156 = 1;
  } else $156 = 0;
 }
 do if (!$136) label = 48; else {
  $139 = HEAP32[$136 + 12 >> 2] | 0;
  if (($139 | 0) == (HEAP32[$136 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$136 >> 2] | 0) + 36 >> 2] & 127]($136) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$139 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($156) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($156) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $11 = 0, $111 = 0, $116 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $15 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $153 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $128 = 0;
   $154 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $128 = 0;
    $154 = 1;
    $80 = 0;
   } else {
    $128 = $153;
    $154 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$48 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($154) {
    $155 = $45;
    break;
   } else {
    $$2 = $$0;
    $136 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;
    $136 = 0;
    break;
   } else $155 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($$0$i$i41 & 255, $14, $$1, $10, $13, HEAP8[$6 >> 0] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $136 = $155;
   break;
  }
  $95 = HEAP32[$79 >> 2] | 0;
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $95 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$95 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $153 = $128;
  $30 = $80;
 }
 $104 = HEAP8[$8 + 11 >> 0] | 0;
 if (($104 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $104 & 255) | 0) {
  $111 = HEAP32[$12 >> 2] | 0;
  if (($111 - $11 | 0) < 160) {
   $116 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $111 + 4;
   HEAP32[$111 >> 2] = $116;
  }
 }
 HEAP32[$5 >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $156 = 1; else {
  $123 = HEAP32[$80 + 12 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$128 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$123 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $156 = 1;
  } else $156 = 0;
 }
 do if (!$136) label = 48; else {
  $139 = HEAP32[$136 + 12 >> 2] | 0;
  if (($139 | 0) == (HEAP32[$136 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$136 >> 2] | 0) + 36 >> 2] & 127]($136) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$139 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($156) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($156) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $11 = 0, $111 = 0, $116 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $15 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $153 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $128 = 0;
   $154 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $128 = 0;
    $154 = 1;
    $80 = 0;
   } else {
    $128 = $153;
    $154 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$48 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($154) {
    $155 = $45;
    break;
   } else {
    $$2 = $$0;
    $136 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;
    $136 = 0;
    break;
   } else $155 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($$0$i$i41 & 255, $14, $$1, $10, $13, HEAP8[$6 >> 0] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $136 = $155;
   break;
  }
  $95 = HEAP32[$79 >> 2] | 0;
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $95 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$95 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $153 = $128;
  $30 = $80;
 }
 $104 = HEAP8[$8 + 11 >> 0] | 0;
 if (($104 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $104 & 255) | 0) {
  $111 = HEAP32[$12 >> 2] | 0;
  if (($111 - $11 | 0) < 160) {
   $116 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $111 + 4;
   HEAP32[$111 >> 2] = $116;
  }
 }
 HEAP32[$5 >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $156 = 1; else {
  $123 = HEAP32[$80 + 12 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$128 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$123 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $156 = 1;
  } else $156 = 0;
 }
 do if (!$136) label = 48; else {
  $139 = HEAP32[$136 + 12 >> 2] | 0;
  if (($139 | 0) == (HEAP32[$136 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$136 >> 2] | 0) + 36 >> 2] & 127]($136) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$139 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($156) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($156) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $103 = 0, $11 = 0, $110 = 0, $115 = 0, $12 = 0, $122 = 0, $127 = 0, $13 = 0, $135 = 0, $138 = 0, $14 = 0, $15 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $152 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $127 = 0;
   $153 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $127 = 0;
    $153 = 1;
    $80 = 0;
   } else {
    $127 = $152;
    $153 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($153) {
    $154 = $45;
    break;
   } else {
    $$2 = $$0;
    $135 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($153) {
    $$2 = $$0;
    $135 = 0;
    break;
   } else $154 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$81 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41, $14, $$1, $10, $13, HEAP32[$6 >> 2] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $135 = $154;
   break;
  }
  $94 = HEAP32[$79 >> 2] | 0;
  if (($94 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $94 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$94 >> 2] | 0) | 0;
  }
  $$0 = $$1;
  $152 = $127;
  $30 = $80;
 }
 $103 = HEAP8[$8 + 11 >> 0] | 0;
 if (($103 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $103 & 255) | 0) {
  $110 = HEAP32[$12 >> 2] | 0;
  if (($110 - $11 | 0) < 160) {
   $115 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $110 + 4;
   HEAP32[$110 >> 2] = $115;
  }
 }
 HEAP32[$5 >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $155 = 1; else {
  $122 = HEAP32[$80 + 12 >> 2] | 0;
  if (($122 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$127 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$122 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $155 = 1;
  } else $155 = 0;
 }
 do if (!$135) label = 48; else {
  $138 = HEAP32[$135 + 12 >> 2] | 0;
  if (($138 | 0) == (HEAP32[$135 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$135 >> 2] | 0) + 36 >> 2] & 127]($135) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$138 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($155) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($155) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $11 = 0, $111 = 0, $116 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $15 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $45 = 0, $48 = 0, $6 = 0, $61 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 $21 = $9 + 8 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $24, 0);
 $28 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
 HEAP32[$10 >> 2] = $28;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$13 >> 2] = 0;
 $29 = $9 + 4 | 0;
 $$pre = HEAP32[$1 >> 2] | 0;
 $$0 = $28;
 $153 = $$pre;
 $30 = $$pre;
 L8 : while (1) {
  if (!$30) {
   $128 = 0;
   $154 = 1;
   $80 = 0;
  } else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $128 = 0;
    $154 = 1;
    $80 = 0;
   } else {
    $128 = $153;
    $154 = 0;
    $80 = $30;
   }
  }
  $45 = HEAP32[$2 >> 2] | 0;
  do if (!$45) label = 19; else {
   $48 = HEAP32[$45 + 12 >> 2] | 0;
   if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$48 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 19;
    break;
   } else if ($154) {
    $155 = $45;
    break;
   } else {
    $$2 = $$0;
    $136 = $45;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;
    $136 = 0;
    break;
   } else $155 = 0;
  }
  $61 = HEAP8[$18 >> 0] | 0;
  $65 = $61 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $61 & 255;
  if ((HEAP32[$10 >> 2] | 0) == ($$0 + $65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $65 << 1, 0);
   if ((HEAP8[$18 >> 0] | 0) < 0) $73 = (HEAP32[$21 >> 2] & 2147483647) + -1 | 0; else $73 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9, $73, 0);
   $77 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
   HEAP32[$10 >> 2] = $77 + $65;
   $$1 = $77;
  } else $$1 = $$0;
  $79 = $80 + 12 | 0;
  $81 = HEAP32[$79 >> 2] | 0;
  $82 = $80 + 16 | 0;
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($$0$i$i41 & 255, $14, $$1, $10, $13, HEAP8[$6 >> 0] | 0, $8, $11, $12, $15) | 0) {
   $$2 = $$1;
   $136 = $155;
   break;
  }
  $95 = HEAP32[$79 >> 2] | 0;
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 127]($80) | 0; else {
   HEAP32[$79 >> 2] = $95 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$95 >> 0] | 0) | 0;
  }
  $$0 = $$1;
  $153 = $128;
  $30 = $80;
 }
 $104 = HEAP8[$8 + 11 >> 0] | 0;
 if (($104 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $104 & 255) | 0) {
  $111 = HEAP32[$12 >> 2] | 0;
  if (($111 - $11 | 0) < 160) {
   $116 = HEAP32[$13 >> 2] | 0;
   HEAP32[$12 >> 2] = $111 + 4;
   HEAP32[$111 >> 2] = $116;
  }
 }
 HEAP32[$5 >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($$2, HEAP32[$10 >> 2] | 0, $4, $14) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8, $11, HEAP32[$12 >> 2] | 0, $4);
 if (!$80) $156 = 1; else {
  $123 = HEAP32[$80 + 12 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$80 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$128 >> 2] | 0) + 36 >> 2] & 127]($80) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$123 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $156 = 1;
  } else $156 = 0;
 }
 do if (!$136) label = 48; else {
  $139 = HEAP32[$136 + 12 >> 2] | 0;
  if (($139 | 0) == (HEAP32[$136 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$136 >> 2] | 0) + 36 >> 2] & 127]($136) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$139 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 48;
   break;
  } else if ($156) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($156) label = 50;
 if ((label | 0) == 50) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZN3sgl14Renderer2D_ES24InitEv($0) {
 $0 = $0 | 0;
 var $$02235 = 0, $$02334 = 0, $$sroa$15$0$$sroa_idx18$i = 0, $$sroa$5$0$$sroa_idx8$i = 0, $1 = 0, $100 = 0, $114 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $5 = 0, $54 = 0, $57 = 0, $6 = 0, $63 = 0, $70 = 0, $71 = 0, $75 = 0.0, $76 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $82 = 0.0, $84 = 0.0, $85 = 0.0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(24144);
 $1 = sp + 24080 | 0;
 $2 = sp;
 $3 = sp + 24064 | 0;
 $4 = sp + 24e3 | 0;
 $5 = $0 + 168 | 0;
 $6 = $0 + 176 | 0;
 $8 = HEAP32[$5 >> 2] | 0;
 if ((((HEAP32[$6 >> 2] | 0) - $8 | 0) / 40 | 0) >>> 0 < 16e4) {
  $12 = $0 + 172 | 0;
  $14 = (HEAP32[$12 >> 2] | 0) - $8 | 0;
  $16 = __Znwm(64e5) | 0;
  $17 = $16 + ((($14 | 0) / 40 | 0) * 40 | 0) | 0;
  $22 = $17 + ((($14 | 0) / -40 | 0) * 40 | 0) | 0;
  if (($14 | 0) > 0) _memcpy($22 | 0, $8 | 0, $14 | 0) | 0;
  HEAP32[$5 >> 2] = $22;
  HEAP32[$12 >> 2] = $17;
  HEAP32[$6 >> 2] = $16 + 64e5;
  if ($8 | 0) __ZdlPv($8);
 }
 $28 = $0 + 20 | 0;
 __ZN3sgl12VertexBuffer15InitDynamicDrawEm($28, 16e4);
 $29 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 5126;
 HEAP32[$1 + 4 >> 2] = 3;
 HEAP32[$1 + 8 >> 2] = 0;
 $32 = $0 + 8 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 $34 = $0 + 12 | 0;
 if ($33 >>> 0 < (HEAP32[$34 >> 2] | 0) >>> 0) {
  HEAP32[$33 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$33 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$33 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $38 = (HEAP32[$32 >> 2] | 0) + 12 | 0;
  HEAP32[$32 >> 2] = $38;
  $45 = $38;
 } else {
  __ZNSt3__26vectorI19VertexBufferElementNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($29, $1);
  $45 = HEAP32[$32 >> 2] | 0;
 }
 $39 = $0 + 16 | 0;
 HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 12;
 HEAP32[$1 >> 2] = 5126;
 HEAP32[$1 + 4 >> 2] = 4;
 HEAP32[$1 + 8 >> 2] = 0;
 if ($45 >>> 0 < (HEAP32[$34 >> 2] | 0) >>> 0) {
  HEAP32[$45 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$45 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$45 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $48 = (HEAP32[$32 >> 2] | 0) + 12 | 0;
  HEAP32[$32 >> 2] = $48;
  $54 = $48;
 } else {
  __ZNSt3__26vectorI19VertexBufferElementNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($29, $1);
  $54 = HEAP32[$32 >> 2] | 0;
 }
 HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 16;
 HEAP32[$1 >> 2] = 5126;
 HEAP32[$1 + 4 >> 2] = 2;
 HEAP32[$1 + 8 >> 2] = 0;
 if ($54 >>> 0 < (HEAP32[$34 >> 2] | 0) >>> 0) {
  HEAP32[$54 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$54 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$54 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $57 = (HEAP32[$32 >> 2] | 0) + 12 | 0;
  HEAP32[$32 >> 2] = $57;
  $63 = $57;
 } else {
  __ZNSt3__26vectorI19VertexBufferElementNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($29, $1);
  $63 = HEAP32[$32 >> 2] | 0;
 }
 HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 8;
 HEAP32[$1 >> 2] = 5126;
 HEAP32[$1 + 4 >> 2] = 1;
 HEAP32[$1 + 8 >> 2] = 0;
 if ($63 >>> 0 < (HEAP32[$34 >> 2] | 0) >>> 0) {
  HEAP32[$63 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$63 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$63 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 12;
 } else __ZNSt3__26vectorI19VertexBufferElementNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($29, $1);
 HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 4;
 __ZN3sgl12VertexBuffer10BindLayoutERK18VertexBufferLayout($28, $29);
 __ZNK3sgl12VertexBuffer6UnbindEv($28);
 $$02235 = 0;
 $$02334 = 0;
 while (1) {
  HEAP32[$2 + ($$02235 << 2) >> 2] = $$02334;
  HEAP32[$2 + (($$02235 | 1) << 2) >> 2] = $$02334 | 1;
  $100 = $$02334 | 2;
  HEAP32[$2 + ($$02235 + 2 << 2) >> 2] = $100;
  HEAP32[$2 + ($$02235 + 3 << 2) >> 2] = $100;
  HEAP32[$2 + ($$02235 + 4 << 2) >> 2] = $$02334 | 3;
  HEAP32[$2 + ($$02235 + 5 << 2) >> 2] = $$02334;
  $$02235 = $$02235 + 6 | 0;
  if ($$02235 >>> 0 >= 6e3) break; else $$02334 = $$02334 + 4 | 0;
 }
 __ZN3sgl11IndexBuffer4LoadEPKjj($0 + 24 | 0, $2, 6e3);
 $70 = $0 + 32 | 0;
 __ZNK3sgl6Shader4BindEv($70);
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $71 = $3 + 11 | 0;
 HEAP8[$71 >> 0] = 6;
 HEAP8[$3 >> 0] = HEAP8[22296] | 0;
 HEAP8[$3 + 1 >> 0] = HEAP8[22297] | 0;
 HEAP8[$3 + 2 >> 0] = HEAP8[22298] | 0;
 HEAP8[$3 + 3 >> 0] = HEAP8[22299] | 0;
 HEAP8[$3 + 4 >> 0] = HEAP8[22300] | 0;
 HEAP8[$3 + 5 >> 0] = HEAP8[22301] | 0;
 HEAP8[$3 + 6 >> 0] = 0;
 HEAP32[$1 >> 2] = 1065353216;
 $$sroa$5$0$$sroa_idx8$i = $1 + 4 | 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i + 4 >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i + 8 >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i + 12 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 1065353216;
 $$sroa$15$0$$sroa_idx18$i = $1 + 24 | 0;
 HEAP32[$$sroa$15$0$$sroa_idx18$i >> 2] = 0;
 HEAP32[$$sroa$15$0$$sroa_idx18$i + 4 >> 2] = 0;
 HEAP32[$$sroa$15$0$$sroa_idx18$i + 8 >> 2] = 0;
 HEAP32[$$sroa$15$0$$sroa_idx18$i + 12 >> 2] = 0;
 HEAP32[$1 + 40 >> 2] = 1065353216;
 HEAPF32[$1 + 44 >> 2] = 0.0;
 $75 = +HEAPF32[$0 + 140 >> 2];
 $76 = $75 * 0.0;
 $78 = +HEAPF32[$0 + 144 >> 2];
 $79 = $78 * 0.0;
 $82 = $76 + $79;
 $84 = +HEAPF32[$0 + 148 >> 2];
 $85 = $84 * 0.0;
 HEAPF32[$1 + 48 >> 2] = $75 + $79 + $85 + 0.0;
 HEAPF32[$1 + 52 >> 2] = $76 + $78 + $85 + 0.0;
 HEAPF32[$1 + 56 >> 2] = $84 + $82 + 0.0;
 HEAPF32[$1 + 60 >> 2] = $82 + $85 + 1.0;
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($4, $0 + 76 | 0, $1);
 __ZN3sgl6Shader15SetUniformMat4fERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3glm3matILi4ELi4EfLNSA_9qualifierE0EEE($70, $3, $4);
 if ((HEAP8[$71 >> 0] | 0) < 0) __ZdlPv(HEAP32[$3 >> 2] | 0);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $114 = $1 + 11 | 0;
 HEAP8[$114 >> 0] = 9;
 dest = $1;
 src = 22345;
 stop = dest + 9 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$1 + 9 >> 0] = 0;
 __ZN3sgl6Shader13SetUniform1ivERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiPKi($70, $1, 16, 624);
 if ((HEAP8[$114 >> 0] | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa$i$i$i$i = 0, $$02026$i$i4$i = 0, $$02026$i$i4$i$us = 0, $$02125$i$i5$i = 0, $$02125$i$i5$i$us = 0, $$027$i$i3$i = 0, $$027$i$i3$i$us = 0, $$02836 = 0, $$02837 = 0, $$02837$us = 0, $$036$lcssa$i$i$i$i = 0, $$03639$i$i$i$i = 0, $$037$lcssa$i$i$i$i = 0, $$03738$i$i$i$i = 0, $$040$i$i$i$i = 0, $$1$i$i$i$i = 0, $$2$i$i$i$i = 0, $$3$i$i$i$i = 0, $$sroa$0$0 = 0, $10 = 0, $101 = 0, $104 = 0, $105 = 0, $107 = 0, $12 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $75 = 0, $77 = 0, $89 = 0, $9 = 0, $93 = 0, $95 = 0, $97 = 0, $98 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0;
 $4 = $3 << 24 >> 24 < 0;
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1;
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255;
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i = $9;
  $$03738$i$i$i$i = $10;
  $$040$i$i$i$i = $10;
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0;
   $$03738$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i, 1540483477) | 0);
   $$040$i$i$i$i = $$040$i$i$i$i + -4 | 0;
   if ($$040$i$i$i$i >>> 0 <= 3) break; else $$03639$i$i$i$i = $$03639$i$i$i$i + 4 | 0;
  }
  $21 = $10 + -4 | 0;
  $22 = $21 & -4;
  $$0$lcssa$i$i$i$i = $21 - $22 | 0;
  $$036$lcssa$i$i$i$i = $9 + ($22 + 4) | 0;
  $$037$lcssa$i$i$i$i = $$03738$i$i$i$i;
 } else {
  $$0$lcssa$i$i$i$i = $10;
  $$036$lcssa$i$i$i$i = $9;
  $$037$lcssa$i$i$i$i = $10;
 }
 switch ($$0$lcssa$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i;
   label = 7;
   break;
  }
 case 2:
  {
   $$1$i$i$i$i = $$037$lcssa$i$i$i$i;
   label = 7;
   break;
  }
 case 1:
  {
   $$2$i$i$i$i = $$037$lcssa$i$i$i$i;
   label = 8;
   break;
  }
 default:
  $$3$i$i$i$i = $$037$lcssa$i$i$i$i;
 }
 if ((label | 0) == 7) {
  $$2$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i;
  label = 8;
 }
 if ((label | 0) == 8) $$3$i$i$i$i = Math_imul($$2$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i >> 0], 1540483477) | 0;
 $41 = Math_imul($$3$i$i$i$i >>> 13 ^ $$3$i$i$i$i, 1540483477) | 0;
 $43 = $41 >>> 15 ^ $41;
 $45 = HEAP32[$0 + 4 >> 2] | 0;
 if (!$45) {
  $$sroa$0$0 = 0;
  return $$sroa$0$0 | 0;
 }
 $47 = $45 + -1 | 0;
 $49 = ($47 & $45 | 0) == 0;
 if ($49) $55 = $43 & $47; else if ($43 >>> 0 < $45 >>> 0) $55 = $43; else $55 = ($43 >>> 0) % ($45 >>> 0) | 0;
 $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0;
 if (!$56) {
  $$sroa$0$0 = 0;
  return $$sroa$0$0 | 0;
 }
 $$02836 = HEAP32[$56 >> 2] | 0;
 if (!$$02836) {
  $$sroa$0$0 = 0;
  return $$sroa$0$0 | 0;
 }
 $59 = ($10 | 0) == 0;
 if ($49) {
  $$02837$us = $$02836;
  L30 : while (1) {
   $61 = HEAP32[$$02837$us + 4 >> 2] | 0;
   $62 = ($61 | 0) == ($43 | 0);
   if (!($62 | ($61 & $47 | 0) == ($55 | 0))) {
    $$sroa$0$0 = 0;
    label = 45;
    break;
   }
   do if ($62) {
    $65 = $$02837$us + 8 | 0;
    $67 = HEAP8[$65 + 11 >> 0] | 0;
    $68 = $67 << 24 >> 24 < 0;
    $71 = $67 & 255;
    if ((($68 ? HEAP32[$$02837$us + 12 >> 2] | 0 : $71) | 0) == ($10 | 0)) {
     $74 = HEAP32[$65 >> 2] | 0;
     $75 = $68 ? $74 : $65;
     $77 = $74 & 255;
     if ($68) {
      if ($59) {
       $$sroa$0$0 = $$02837$us;
       label = 45;
       break L30;
      }
      if (!(_memcmp($75, $9, $10) | 0)) {
       $$sroa$0$0 = $$02837$us;
       label = 45;
       break L30;
      } else break;
     }
     if ($59) {
      $$sroa$0$0 = $$02837$us;
      label = 45;
      break L30;
     }
     if ((HEAP8[$9 >> 0] | 0) == $77 << 24 >> 24) {
      $$02026$i$i4$i$us = $65;
      $$02125$i$i5$i$us = $71;
      $$027$i$i3$i$us = $9;
      do {
       $$02125$i$i5$i$us = $$02125$i$i5$i$us + -1 | 0;
       $$02026$i$i4$i$us = $$02026$i$i4$i$us + 1 | 0;
       if (!$$02125$i$i5$i$us) {
        $$sroa$0$0 = $$02837$us;
        label = 45;
        break L30;
       }
       $$027$i$i3$i$us = $$027$i$i3$i$us + 1 | 0;
      } while ((HEAP8[$$02026$i$i4$i$us >> 0] | 0) == (HEAP8[$$027$i$i3$i$us >> 0] | 0));
     }
    }
   } while (0);
   $$02837$us = HEAP32[$$02837$us >> 2] | 0;
   if (!$$02837$us) {
    $$sroa$0$0 = 0;
    label = 45;
    break;
   }
  }
  if ((label | 0) == 45) return $$sroa$0$0 | 0;
 }
 $$02837 = $$02836;
 L54 : while (1) {
  $89 = HEAP32[$$02837 + 4 >> 2] | 0;
  do if (($89 | 0) == ($43 | 0)) {
   $95 = $$02837 + 8 | 0;
   $97 = HEAP8[$95 + 11 >> 0] | 0;
   $98 = $97 << 24 >> 24 < 0;
   $101 = $97 & 255;
   if ((($98 ? HEAP32[$$02837 + 12 >> 2] | 0 : $101) | 0) == ($10 | 0)) {
    $104 = HEAP32[$95 >> 2] | 0;
    $105 = $98 ? $104 : $95;
    $107 = $104 & 255;
    if ($98) {
     if ($59) {
      $$sroa$0$0 = $$02837;
      label = 45;
      break L54;
     }
     if (!(_memcmp($105, $9, $10) | 0)) {
      $$sroa$0$0 = $$02837;
      label = 45;
      break L54;
     } else break;
    }
    if ($59) {
     $$sroa$0$0 = $$02837;
     label = 45;
     break L54;
    }
    if ((HEAP8[$9 >> 0] | 0) == $107 << 24 >> 24) {
     $$02026$i$i4$i = $95;
     $$02125$i$i5$i = $101;
     $$027$i$i3$i = $9;
     do {
      $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0;
      $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0;
      if (!$$02125$i$i5$i) {
       $$sroa$0$0 = $$02837;
       label = 45;
       break L54;
      }
      $$027$i$i3$i = $$027$i$i3$i + 1 | 0;
     } while ((HEAP8[$$02026$i$i4$i >> 0] | 0) == (HEAP8[$$027$i$i3$i >> 0] | 0));
    }
   }
  } else {
   if ($89 >>> 0 < $45 >>> 0) $93 = $89; else $93 = ($89 >>> 0) % ($45 >>> 0) | 0;
   if (($93 | 0) != ($55 | 0)) {
    $$sroa$0$0 = 0;
    label = 45;
    break L54;
   }
  } while (0);
  $$02837 = HEAP32[$$02837 >> 2] | 0;
  if (!$$02837) {
   $$sroa$0$0 = 0;
   label = 45;
   break;
  }
 }
 if ((label | 0) == 45) return $$sroa$0$0 | 0;
 return 0;
}

function __ZNSt3__25dequeIPN3sgl5LayerENS_9allocatorIS3_EEE20__add_front_capacityEv($0) {
 $0 = $0 | 0;
 var $$050 = 0, $$in = 0, $$pre$phi$iZ2D = 0, $$pre$phi55Z2D = 0, $$pre$phi56Z2D = 0, $$pre$phi58Z2D = 0, $$pre$phiZ2D = 0, $$sroa$13$0$ptr$i = 0, $$sroa$13$1$i = 0, $$sroa$speculated = 0, $$sroa$speculated$i = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $109 = 0, $11 = 0, $111 = 0, $12 = 0, $120 = 0, $123 = 0, $127 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $31 = 0, $39 = 0, $4 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $86 = 0, $89 = 0, $90 = 0, $93 = 0, $96 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $4 - $6 | 0;
 $11 = $0 + 16 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (((($7 | 0) == 0 ? 0 : ($7 << 8) + -1 | 0) - ((HEAP32[$0 + 20 >> 2] | 0) + $12) | 0) >>> 0 > 1023) {
  HEAP32[$11 >> 2] = $12 + 1024;
  $20 = $4 + -4 | 0;
  HEAP32[$1 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$3 >> 2] = $20;
  __ZNSt3__214__split_bufferIPPN3sgl5LayerENS_9allocatorIS4_EEE10push_frontERKS4_($0, $1);
  STACKTOP = sp;
  return;
 }
 $22 = $0 + 12 | 0;
 $24 = HEAP32[$0 >> 2] | 0;
 $25 = (HEAP32[$22 >> 2] | 0) - $24 | 0;
 if ($7 >>> 0 < $25 >>> 0) {
  if (($6 | 0) == ($24 | 0)) {
   HEAP32[$1 >> 2] = __Znwm(4096) | 0;
   __ZNSt3__214__split_bufferIPPN3sgl5LayerENS_9allocatorIS4_EEE9push_backEOS4_($0, $1);
   $31 = (HEAP32[$3 >> 2] | 0) + -4 | 0;
   HEAP32[$1 >> 2] = HEAP32[$31 >> 2];
   HEAP32[$3 >> 2] = $31;
   __ZNSt3__214__split_bufferIPPN3sgl5LayerENS_9allocatorIS4_EEE10push_frontERKS4_($0, $1);
  } else {
   HEAP32[$1 >> 2] = __Znwm(4096) | 0;
   __ZNSt3__214__split_bufferIPPN3sgl5LayerENS_9allocatorIS4_EEE10push_frontEOS4_($0, $1);
  }
  if (((HEAP32[$3 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) | 0) == 4) $39 = 512; else $39 = (HEAP32[$11 >> 2] | 0) + 1024 | 0;
  HEAP32[$11 >> 2] = $39;
  STACKTOP = sp;
  return;
 }
 $$sroa$speculated = ($25 | 0) == 0 ? 1 : $25 >> 1;
 $43 = $1 + 12 | 0;
 HEAP32[$43 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = $0 + 12;
 do if (!$$sroa$speculated) $50 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
  $47 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($47, 22468);
  HEAP32[$47 >> 2] = 15792;
  ___cxa_throw($47 | 0, 9584, 225);
 } else {
  $50 = __Znwm($$sroa$speculated << 2) | 0;
  break;
 } while (0);
 HEAP32[$1 >> 2] = $50;
 $51 = $1 + 8 | 0;
 HEAP32[$51 >> 2] = $50;
 $52 = $1 + 4 | 0;
 HEAP32[$52 >> 2] = $50;
 HEAP32[$43 >> 2] = $50 + ($$sroa$speculated << 2);
 HEAP32[$2 >> 2] = __Znwm(4096) | 0;
 __ZNSt3__214__split_bufferIPPN3sgl5LayerERNS_9allocatorIS4_EEE9push_backEOS4_($1, $2);
 $55 = HEAP32[$5 >> 2] | 0;
 $56 = HEAP32[$3 >> 2] | 0;
 do if (($55 | 0) == ($56 | 0)) {
  $$in = $56;
  $$pre$phi55Z2D = $52;
  $$pre$phi56Z2D = $51;
  $$pre$phi58Z2D = $43;
  $$pre$phiZ2D = $1;
  $65 = $55;
  $66 = HEAP32[$51 >> 2] | 0;
 } else {
  $$050 = $55;
  $73 = HEAP32[$51 >> 2] | 0;
  L25 : while (1) {
   $72 = HEAP32[$43 >> 2] | 0;
   $75 = $72;
   do if (($73 | 0) == ($72 | 0)) {
    $76 = HEAP32[$52 >> 2] | 0;
    $77 = $76;
    $78 = HEAP32[$1 >> 2] | 0;
    $80 = $78;
    if ($76 >>> 0 > $78 >>> 0) {
     $84 = (($77 - $80 >> 2) + 1 | 0) / -2 | 0;
     $85 = $76 + ($84 << 2) | 0;
     $86 = $75 - $77 | 0;
     if (!$86) $$pre$phi$iZ2D = $85; else {
      _memmove($85 | 0, $76 | 0, $86 | 0) | 0;
      $$pre$phi$iZ2D = (HEAP32[$52 >> 2] | 0) + ($84 << 2) | 0;
     }
     $89 = $85 + ($86 >> 2 << 2) | 0;
     HEAP32[$51 >> 2] = $89;
     HEAP32[$52 >> 2] = $$pre$phi$iZ2D;
     $120 = $89;
     break;
    }
    $90 = $75 - $80 | 0;
    $$sroa$speculated$i = ($90 | 0) == 0 ? 1 : $90 >> 1;
    $93 = $$sroa$speculated$i >>> 2;
    if (!$$sroa$speculated$i) $99 = 0; else {
     if ($$sroa$speculated$i >>> 0 > 1073741823) {
      label = 26;
      break L25;
     }
     $99 = __Znwm($$sroa$speculated$i << 2) | 0;
    }
    $100 = $99;
    $101 = $99 + ($93 << 2) | 0;
    $102 = $101;
    $104 = $99 + ($$sroa$speculated$i << 2) | 0;
    if (($76 | 0) == ($73 | 0)) $$sroa$13$1$i = $102; else {
     $109 = (($73 + -4 - $77 | 0) >>> 2) + 1 | 0;
     $$sroa$13$0$ptr$i = $101;
     $111 = $76;
     while (1) {
      HEAP32[$$sroa$13$0$ptr$i >> 2] = HEAP32[$111 >> 2];
      $111 = $111 + 4 | 0;
      if (($111 | 0) == ($73 | 0)) break; else $$sroa$13$0$ptr$i = $$sroa$13$0$ptr$i + 4 | 0;
     }
     $$sroa$13$1$i = $99 + ($109 + $93 << 2) | 0;
    }
    HEAP32[$1 >> 2] = $100;
    HEAP32[$52 >> 2] = $102;
    HEAP32[$51 >> 2] = $$sroa$13$1$i;
    HEAP32[$43 >> 2] = $104;
    if (!$78) $120 = $$sroa$13$1$i; else {
     __ZdlPv($78);
     $120 = HEAP32[$51 >> 2] | 0;
    }
   } else $120 = $73; while (0);
   HEAP32[$120 >> 2] = HEAP32[$$050 >> 2];
   $73 = (HEAP32[$51 >> 2] | 0) + 4 | 0;
   HEAP32[$51 >> 2] = $73;
   $$050 = $$050 + 4 | 0;
   $123 = HEAP32[$3 >> 2] | 0;
   if (($$050 | 0) == ($123 | 0)) {
    label = 17;
    break;
   }
  }
  if ((label | 0) == 17) {
   $$in = $123;
   $$pre$phi55Z2D = $52;
   $$pre$phi56Z2D = $51;
   $$pre$phi58Z2D = $43;
   $$pre$phiZ2D = $1;
   $65 = HEAP32[$5 >> 2] | 0;
   $66 = $73;
   break;
  } else if ((label | 0) == 26) {
   $96 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($96, 22468);
   HEAP32[$96 >> 2] = 15792;
   ___cxa_throw($96 | 0, 9584, 225);
  }
 } while (0);
 $62 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 HEAP32[$$pre$phiZ2D >> 2] = $62;
 $64 = HEAP32[$$pre$phi55Z2D >> 2] | 0;
 HEAP32[$5 >> 2] = $64;
 HEAP32[$$pre$phi55Z2D >> 2] = $65;
 HEAP32[$3 >> 2] = $66;
 HEAP32[$$pre$phi56Z2D >> 2] = $$in;
 $67 = HEAP32[$22 >> 2] | 0;
 HEAP32[$22 >> 2] = HEAP32[$$pre$phi58Z2D >> 2];
 HEAP32[$$pre$phi58Z2D >> 2] = $67;
 if (($66 - $64 | 0) == 4) $127 = 512; else $127 = (HEAP32[$11 >> 2] | 0) + 1024 | 0;
 HEAP32[$11 >> 2] = $127;
 if (($$in | 0) != ($65 | 0)) HEAP32[$51 >> 2] = $$in + (~(($$in + -4 - $65 | 0) >>> 2) << 2);
 if ($62 | 0) __ZdlPv($62);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa$i$i$i$i = 0, $$02026$i$i4$i = 0, $$02026$i$i4$i$us = 0, $$02125$i$i5$i = 0, $$02125$i$i5$i$us = 0, $$027$i$i3$i = 0, $$027$i$i3$i$us = 0, $$02836 = 0, $$02837 = 0, $$02837$us = 0, $$036$lcssa$i$i$i$i = 0, $$03639$i$i$i$i = 0, $$037$lcssa$i$i$i$i = 0, $$03738$i$i$i$i = 0, $$040$i$i$i$i = 0, $$1$i$i$i$i = 0, $$2$i$i$i$i = 0, $$3$i$i$i$i = 0, $$sroa$0$0 = 0, $10 = 0, $101 = 0, $104 = 0, $105 = 0, $107 = 0, $12 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $75 = 0, $77 = 0, $89 = 0, $9 = 0, $93 = 0, $95 = 0, $97 = 0, $98 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0;
 $4 = $3 << 24 >> 24 < 0;
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1;
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255;
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i = $9;
  $$03738$i$i$i$i = $10;
  $$040$i$i$i$i = $10;
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0;
   $$03738$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i, 1540483477) | 0);
   $$040$i$i$i$i = $$040$i$i$i$i + -4 | 0;
   if ($$040$i$i$i$i >>> 0 <= 3) break; else $$03639$i$i$i$i = $$03639$i$i$i$i + 4 | 0;
  }
  $21 = $10 + -4 | 0;
  $22 = $21 & -4;
  $$0$lcssa$i$i$i$i = $21 - $22 | 0;
  $$036$lcssa$i$i$i$i = $9 + ($22 + 4) | 0;
  $$037$lcssa$i$i$i$i = $$03738$i$i$i$i;
 } else {
  $$0$lcssa$i$i$i$i = $10;
  $$036$lcssa$i$i$i$i = $9;
  $$037$lcssa$i$i$i$i = $10;
 }
 switch ($$0$lcssa$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i;
   label = 7;
   break;
  }
 case 2:
  {
   $$1$i$i$i$i = $$037$lcssa$i$i$i$i;
   label = 7;
   break;
  }
 case 1:
  {
   $$2$i$i$i$i = $$037$lcssa$i$i$i$i;
   label = 8;
   break;
  }
 default:
  $$3$i$i$i$i = $$037$lcssa$i$i$i$i;
 }
 if ((label | 0) == 7) {
  $$2$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i;
  label = 8;
 }
 if ((label | 0) == 8) $$3$i$i$i$i = Math_imul($$2$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i >> 0], 1540483477) | 0;
 $41 = Math_imul($$3$i$i$i$i >>> 13 ^ $$3$i$i$i$i, 1540483477) | 0;
 $43 = $41 >>> 15 ^ $41;
 $45 = HEAP32[$0 + 4 >> 2] | 0;
 if (!$45) {
  $$sroa$0$0 = 0;
  return $$sroa$0$0 | 0;
 }
 $47 = $45 + -1 | 0;
 $49 = ($47 & $45 | 0) == 0;
 if ($49) $55 = $43 & $47; else if ($43 >>> 0 < $45 >>> 0) $55 = $43; else $55 = ($43 >>> 0) % ($45 >>> 0) | 0;
 $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0;
 if (!$56) {
  $$sroa$0$0 = 0;
  return $$sroa$0$0 | 0;
 }
 $$02836 = HEAP32[$56 >> 2] | 0;
 if (!$$02836) {
  $$sroa$0$0 = 0;
  return $$sroa$0$0 | 0;
 }
 $59 = ($10 | 0) == 0;
 if ($49) {
  $$02837$us = $$02836;
  L30 : while (1) {
   $61 = HEAP32[$$02837$us + 4 >> 2] | 0;
   $62 = ($61 | 0) == ($43 | 0);
   if (!($62 | ($61 & $47 | 0) == ($55 | 0))) {
    $$sroa$0$0 = 0;
    label = 45;
    break;
   }
   do if ($62) {
    $65 = $$02837$us + 8 | 0;
    $67 = HEAP8[$65 + 11 >> 0] | 0;
    $68 = $67 << 24 >> 24 < 0;
    $71 = $67 & 255;
    if ((($68 ? HEAP32[$$02837$us + 12 >> 2] | 0 : $71) | 0) == ($10 | 0)) {
     $74 = HEAP32[$65 >> 2] | 0;
     $75 = $68 ? $74 : $65;
     $77 = $74 & 255;
     if ($68) {
      if ($59) {
       $$sroa$0$0 = $$02837$us;
       label = 45;
       break L30;
      }
      if (!(_memcmp($75, $9, $10) | 0)) {
       $$sroa$0$0 = $$02837$us;
       label = 45;
       break L30;
      } else break;
     }
     if ($59) {
      $$sroa$0$0 = $$02837$us;
      label = 45;
      break L30;
     }
     if ((HEAP8[$9 >> 0] | 0) == $77 << 24 >> 24) {
      $$02026$i$i4$i$us = $65;
      $$02125$i$i5$i$us = $71;
      $$027$i$i3$i$us = $9;
      do {
       $$02125$i$i5$i$us = $$02125$i$i5$i$us + -1 | 0;
       $$02026$i$i4$i$us = $$02026$i$i4$i$us + 1 | 0;
       if (!$$02125$i$i5$i$us) {
        $$sroa$0$0 = $$02837$us;
        label = 45;
        break L30;
       }
       $$027$i$i3$i$us = $$027$i$i3$i$us + 1 | 0;
      } while ((HEAP8[$$02026$i$i4$i$us >> 0] | 0) == (HEAP8[$$027$i$i3$i$us >> 0] | 0));
     }
    }
   } while (0);
   $$02837$us = HEAP32[$$02837$us >> 2] | 0;
   if (!$$02837$us) {
    $$sroa$0$0 = 0;
    label = 45;
    break;
   }
  }
  if ((label | 0) == 45) return $$sroa$0$0 | 0;
 }
 $$02837 = $$02836;
 L54 : while (1) {
  $89 = HEAP32[$$02837 + 4 >> 2] | 0;
  do if (($89 | 0) == ($43 | 0)) {
   $95 = $$02837 + 8 | 0;
   $97 = HEAP8[$95 + 11 >> 0] | 0;
   $98 = $97 << 24 >> 24 < 0;
   $101 = $97 & 255;
   if ((($98 ? HEAP32[$$02837 + 12 >> 2] | 0 : $101) | 0) == ($10 | 0)) {
    $104 = HEAP32[$95 >> 2] | 0;
    $105 = $98 ? $104 : $95;
    $107 = $104 & 255;
    if ($98) {
     if ($59) {
      $$sroa$0$0 = $$02837;
      label = 45;
      break L54;
     }
     if (!(_memcmp($105, $9, $10) | 0)) {
      $$sroa$0$0 = $$02837;
      label = 45;
      break L54;
     } else break;
    }
    if ($59) {
     $$sroa$0$0 = $$02837;
     label = 45;
     break L54;
    }
    if ((HEAP8[$9 >> 0] | 0) == $107 << 24 >> 24) {
     $$02026$i$i4$i = $95;
     $$02125$i$i5$i = $101;
     $$027$i$i3$i = $9;
     do {
      $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0;
      $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0;
      if (!$$02125$i$i5$i) {
       $$sroa$0$0 = $$02837;
       label = 45;
       break L54;
      }
      $$027$i$i3$i = $$027$i$i3$i + 1 | 0;
     } while ((HEAP8[$$02026$i$i4$i >> 0] | 0) == (HEAP8[$$027$i$i3$i >> 0] | 0));
    }
   }
  } else {
   if ($89 >>> 0 < $45 >>> 0) $93 = $89; else $93 = ($89 >>> 0) % ($45 >>> 0) | 0;
   if (($93 | 0) != ($55 | 0)) {
    $$sroa$0$0 = 0;
    label = 45;
    break L54;
   }
  } while (0);
  $$02837 = HEAP32[$$02837 >> 2] | 0;
  if (!$$02837) {
   $$sroa$0$0 = 0;
   label = 45;
   break;
  }
 }
 if ((label | 0) == 45) return $$sroa$0$0 | 0;
 return 0;
}

function __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sroa$0651$0$copyload = 0.0, $$sroa$0662$0$copyload = 0.0, $$sroa$0673$0$copyload = 0.0, $$sroa$0684$0$copyload = 0.0, $$sroa$0695$0$copyload = 0.0, $$sroa$0703$0$copyload = 0.0, $$sroa$0714$0$copyload = 0.0, $$sroa$0725$0$copyload = 0.0, $$sroa$11$0$copyload = 0.0, $$sroa$11708$0$copyload = 0.0, $$sroa$11719$0$copyload = 0.0, $$sroa$11730$0$copyload = 0.0, $$sroa$15$0$copyload = 0.0, $$sroa$15711$0$copyload = 0.0, $$sroa$15722$0$copyload = 0.0, $$sroa$15733$0$copyload = 0.0, $$sroa$4653$0$copyload = 0.0, $$sroa$4664$0$copyload = 0.0, $$sroa$4675$0$copyload = 0.0, $$sroa$4686$0$copyload = 0.0, $$sroa$5656$0$copyload = 0.0, $$sroa$5667$0$copyload = 0.0, $$sroa$5678$0$copyload = 0.0, $$sroa$5689$0$copyload = 0.0, $$sroa$6659$0$copyload = 0.0, $$sroa$6670$0$copyload = 0.0, $$sroa$6681$0$copyload = 0.0, $$sroa$6692$0$copyload = 0.0, $$sroa$7$0$copyload = 0.0, $$sroa$7705$0$copyload = 0.0, $$sroa$7716$0$copyload = 0.0, $$sroa$7727$0$copyload = 0.0;
 $$sroa$0725$0$copyload = +HEAPF32[$1 >> 2];
 $$sroa$7727$0$copyload = +HEAPF32[$1 + 4 >> 2];
 $$sroa$11730$0$copyload = +HEAPF32[$1 + 8 >> 2];
 $$sroa$15733$0$copyload = +HEAPF32[$1 + 12 >> 2];
 $$sroa$0714$0$copyload = +HEAPF32[$1 + 16 >> 2];
 $$sroa$7716$0$copyload = +HEAPF32[$1 + 20 >> 2];
 $$sroa$11719$0$copyload = +HEAPF32[$1 + 24 >> 2];
 $$sroa$15722$0$copyload = +HEAPF32[$1 + 28 >> 2];
 $$sroa$0703$0$copyload = +HEAPF32[$1 + 32 >> 2];
 $$sroa$7705$0$copyload = +HEAPF32[$1 + 36 >> 2];
 $$sroa$11708$0$copyload = +HEAPF32[$1 + 40 >> 2];
 $$sroa$15711$0$copyload = +HEAPF32[$1 + 44 >> 2];
 $$sroa$0695$0$copyload = +HEAPF32[$1 + 48 >> 2];
 $$sroa$7$0$copyload = +HEAPF32[$1 + 52 >> 2];
 $$sroa$11$0$copyload = +HEAPF32[$1 + 56 >> 2];
 $$sroa$15$0$copyload = +HEAPF32[$1 + 60 >> 2];
 $$sroa$0684$0$copyload = +HEAPF32[$2 >> 2];
 $$sroa$4686$0$copyload = +HEAPF32[$2 + 4 >> 2];
 $$sroa$5689$0$copyload = +HEAPF32[$2 + 8 >> 2];
 $$sroa$6692$0$copyload = +HEAPF32[$2 + 12 >> 2];
 $$sroa$0673$0$copyload = +HEAPF32[$2 + 16 >> 2];
 $$sroa$4675$0$copyload = +HEAPF32[$2 + 20 >> 2];
 $$sroa$5678$0$copyload = +HEAPF32[$2 + 24 >> 2];
 $$sroa$6681$0$copyload = +HEAPF32[$2 + 28 >> 2];
 $$sroa$0662$0$copyload = +HEAPF32[$2 + 32 >> 2];
 $$sroa$4664$0$copyload = +HEAPF32[$2 + 36 >> 2];
 $$sroa$5667$0$copyload = +HEAPF32[$2 + 40 >> 2];
 $$sroa$6670$0$copyload = +HEAPF32[$2 + 44 >> 2];
 $$sroa$0651$0$copyload = +HEAPF32[$2 + 48 >> 2];
 $$sroa$4653$0$copyload = +HEAPF32[$2 + 52 >> 2];
 $$sroa$5656$0$copyload = +HEAPF32[$2 + 56 >> 2];
 $$sroa$6659$0$copyload = +HEAPF32[$2 + 60 >> 2];
 HEAPF32[$0 >> 2] = $$sroa$0725$0$copyload * $$sroa$0684$0$copyload + $$sroa$0714$0$copyload * $$sroa$4686$0$copyload + $$sroa$0703$0$copyload * $$sroa$5689$0$copyload + $$sroa$0695$0$copyload * $$sroa$6692$0$copyload;
 HEAPF32[$0 + 4 >> 2] = $$sroa$7727$0$copyload * $$sroa$0684$0$copyload + $$sroa$7716$0$copyload * $$sroa$4686$0$copyload + $$sroa$7705$0$copyload * $$sroa$5689$0$copyload + $$sroa$7$0$copyload * $$sroa$6692$0$copyload;
 HEAPF32[$0 + 8 >> 2] = $$sroa$11730$0$copyload * $$sroa$0684$0$copyload + $$sroa$11719$0$copyload * $$sroa$4686$0$copyload + $$sroa$11708$0$copyload * $$sroa$5689$0$copyload + $$sroa$11$0$copyload * $$sroa$6692$0$copyload;
 HEAPF32[$0 + 12 >> 2] = $$sroa$15733$0$copyload * $$sroa$0684$0$copyload + $$sroa$15722$0$copyload * $$sroa$4686$0$copyload + $$sroa$15711$0$copyload * $$sroa$5689$0$copyload + $$sroa$15$0$copyload * $$sroa$6692$0$copyload;
 HEAPF32[$0 + 16 >> 2] = $$sroa$0725$0$copyload * $$sroa$0673$0$copyload + $$sroa$0714$0$copyload * $$sroa$4675$0$copyload + $$sroa$0703$0$copyload * $$sroa$5678$0$copyload + $$sroa$0695$0$copyload * $$sroa$6681$0$copyload;
 HEAPF32[$0 + 20 >> 2] = $$sroa$7727$0$copyload * $$sroa$0673$0$copyload + $$sroa$7716$0$copyload * $$sroa$4675$0$copyload + $$sroa$7705$0$copyload * $$sroa$5678$0$copyload + $$sroa$7$0$copyload * $$sroa$6681$0$copyload;
 HEAPF32[$0 + 24 >> 2] = $$sroa$11730$0$copyload * $$sroa$0673$0$copyload + $$sroa$11719$0$copyload * $$sroa$4675$0$copyload + $$sroa$11708$0$copyload * $$sroa$5678$0$copyload + $$sroa$11$0$copyload * $$sroa$6681$0$copyload;
 HEAPF32[$0 + 28 >> 2] = $$sroa$15733$0$copyload * $$sroa$0673$0$copyload + $$sroa$15722$0$copyload * $$sroa$4675$0$copyload + $$sroa$15711$0$copyload * $$sroa$5678$0$copyload + $$sroa$15$0$copyload * $$sroa$6681$0$copyload;
 HEAPF32[$0 + 32 >> 2] = $$sroa$0725$0$copyload * $$sroa$0662$0$copyload + $$sroa$0714$0$copyload * $$sroa$4664$0$copyload + $$sroa$0703$0$copyload * $$sroa$5667$0$copyload + $$sroa$0695$0$copyload * $$sroa$6670$0$copyload;
 HEAPF32[$0 + 36 >> 2] = $$sroa$7727$0$copyload * $$sroa$0662$0$copyload + $$sroa$7716$0$copyload * $$sroa$4664$0$copyload + $$sroa$7705$0$copyload * $$sroa$5667$0$copyload + $$sroa$7$0$copyload * $$sroa$6670$0$copyload;
 HEAPF32[$0 + 40 >> 2] = $$sroa$11730$0$copyload * $$sroa$0662$0$copyload + $$sroa$11719$0$copyload * $$sroa$4664$0$copyload + $$sroa$11708$0$copyload * $$sroa$5667$0$copyload + $$sroa$11$0$copyload * $$sroa$6670$0$copyload;
 HEAPF32[$0 + 44 >> 2] = $$sroa$15733$0$copyload * $$sroa$0662$0$copyload + $$sroa$15722$0$copyload * $$sroa$4664$0$copyload + $$sroa$15711$0$copyload * $$sroa$5667$0$copyload + $$sroa$15$0$copyload * $$sroa$6670$0$copyload;
 HEAPF32[$0 + 48 >> 2] = $$sroa$0725$0$copyload * $$sroa$0651$0$copyload + $$sroa$0714$0$copyload * $$sroa$4653$0$copyload + $$sroa$0703$0$copyload * $$sroa$5656$0$copyload + $$sroa$0695$0$copyload * $$sroa$6659$0$copyload;
 HEAPF32[$0 + 52 >> 2] = $$sroa$7727$0$copyload * $$sroa$0651$0$copyload + $$sroa$7716$0$copyload * $$sroa$4653$0$copyload + $$sroa$7705$0$copyload * $$sroa$5656$0$copyload + $$sroa$7$0$copyload * $$sroa$6659$0$copyload;
 HEAPF32[$0 + 56 >> 2] = $$sroa$11730$0$copyload * $$sroa$0651$0$copyload + $$sroa$11719$0$copyload * $$sroa$4653$0$copyload + $$sroa$11708$0$copyload * $$sroa$5656$0$copyload + $$sroa$11$0$copyload * $$sroa$6659$0$copyload;
 HEAPF32[$0 + 60 >> 2] = $$sroa$15733$0$copyload * $$sroa$0651$0$copyload + $$sroa$15722$0$copyload * $$sroa$4653$0$copyload + $$sroa$15711$0$copyload * $$sroa$5656$0$copyload + $$sroa$15$0$copyload * $$sroa$6659$0$copyload;
 return;
}

function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i110 = 0, $$0101 = 0, $$0102 = 0, $$0104 = 0, $$0106 = 0, $$07$i$i = 0, $$07$i$i109 = 0, $$1 = 0, $$1103 = 0, $$1105 = 0, $$1107 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $105 = 0, $107 = 0, $119 = 0, $120 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $137 = 0, $138 = 0, $139 = 0, $144 = 0, $148 = 0, $154 = 0, $155 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $32 = 0, $33 = 0, $35 = 0, $40 = 0, $41 = 0, $45 = 0, $52 = 0, $57 = 0, $58 = 0, $60 = 0, $7 = 0, $73 = 0, $75 = 0, $77 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $7 = sp;
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32720) | 0;
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32728) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 127]($7, $9);
 HEAP32[$5 >> 2] = $3;
 $13 = HEAP8[$0 >> 0] | 0;
 switch ($13 << 24 >> 24) {
 case 43:
 case 45:
  {
   $18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] & 31]($8, $13) | 0;
   $19 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $19 + 4;
   HEAP32[$19 >> 2] = $18;
   $$0104 = $0 + 1 | 0;
   break;
  }
 default:
  $$0104 = $0;
 }
 $21 = $2;
 L4 : do if (($21 - $$0104 | 0) > 1) if ((HEAP8[$$0104 >> 0] | 0) == 48) {
  $27 = $$0104 + 1 | 0;
  switch (HEAP8[$27 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    label = 4;
    break L4;
   }
  }
  $32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] & 31]($8, 48) | 0;
  $33 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $32;
  $35 = $$0104 + 2 | 0;
  $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] & 31]($8, HEAP8[$27 >> 0] | 0) | 0;
  $41 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $41 + 4;
  HEAP32[$41 >> 2] = $40;
  $$0106 = $35;
  while (1) {
   if ($$0106 >>> 0 >= $2 >>> 0) {
    $$1105 = $35;
    $$2108 = $$0106;
    break L4;
   }
   $45 = HEAP8[$$0106 >> 0] | 0;
   if (!(_isxdigit_l($45, __ZNSt3__26__clocEv() | 0) | 0)) {
    $$1105 = $35;
    $$2108 = $$0106;
    break L4;
   }
   $$0106 = $$0106 + 1 | 0;
  }
 } else label = 4; else label = 4; while (0);
 L12 : do if ((label | 0) == 4) {
  $$1107 = $$0104;
  while (1) {
   if ($$1107 >>> 0 >= $2 >>> 0) {
    $$1105 = $$0104;
    $$2108 = $$1107;
    break L12;
   }
   $52 = HEAP8[$$1107 >> 0] | 0;
   if (!(_isdigit_l($52, __ZNSt3__26__clocEv() | 0) | 0)) {
    $$1105 = $$0104;
    $$2108 = $$1107;
    break L12;
   }
   $$1107 = $$1107 + 1 | 0;
  }
 } while (0);
 $57 = $7 + 11 | 0;
 $58 = HEAP8[$57 >> 0] | 0;
 $60 = $7 + 4 | 0;
 L19 : do if (!(($58 << 24 >> 24 < 0 ? HEAP32[$60 >> 2] | 0 : $58 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] & 7]($8, $$1105, $$2108, HEAP32[$5 >> 2] | 0) | 0;
  $73 = (HEAP32[$5 >> 2] | 0) + ($$2108 - $$1105 << 2) | 0;
  HEAP32[$5 >> 2] = $73;
  $$pre$phiZ2D = $8;
  $154 = $73;
 } else {
  L22 : do if (($$1105 | 0) != ($$2108 | 0)) {
   $$0$i$i = $$2108;
   $$07$i$i = $$1105;
   while (1) {
    $75 = $$0$i$i + -1 | 0;
    if ($$07$i$i >>> 0 >= $75 >>> 0) break L22;
    $77 = HEAP8[$$07$i$i >> 0] | 0;
    HEAP8[$$07$i$i >> 0] = HEAP8[$75 >> 0] | 0;
    HEAP8[$75 >> 0] = $77;
    $$0$i$i = $75;
    $$07$i$i = $$07$i$i + 1 | 0;
   }
  } while (0);
  $83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] & 127]($9) | 0;
  $$0 = $$1105;
  $$0101 = 0;
  $$0102 = 0;
  while (1) {
   if ($$0 >>> 0 >= $$2108 >>> 0) break;
   $101 = HEAP8[((HEAP8[$57 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$0101 >> 0] | 0;
   if ($101 << 24 >> 24 > 0 & ($$0102 | 0) == ($101 << 24 >> 24 | 0)) {
    $105 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $105 + 4;
    HEAP32[$105 >> 2] = $83;
    $107 = HEAP8[$57 >> 0] | 0;
    $$1 = $$0101 + ($$0101 >>> 0 < (($107 << 24 >> 24 < 0 ? HEAP32[$60 >> 2] | 0 : $107 & 255) + -1 | 0) >>> 0 & 1) | 0;
    $$1103 = 0;
   } else {
    $$1 = $$0101;
    $$1103 = $$0102;
   }
   $119 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] & 31]($8, HEAP8[$$0 >> 0] | 0) | 0;
   $120 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $120 + 4;
   HEAP32[$120 >> 2] = $119;
   $$0 = $$0 + 1 | 0;
   $$0101 = $$1;
   $$0102 = $$1103 + 1 | 0;
  }
  $88 = $3 + ($$1105 - $0 << 2) | 0;
  $89 = HEAP32[$5 >> 2] | 0;
  if (($88 | 0) == ($89 | 0)) {
   $$pre$phiZ2D = $8;
   $154 = $88;
  } else {
   $$0$i$i110 = $89;
   $$07$i$i109 = $88;
   while (1) {
    $91 = $$0$i$i110 + -4 | 0;
    if ($$07$i$i109 >>> 0 >= $91 >>> 0) {
     $$pre$phiZ2D = $8;
     $154 = $89;
     break L19;
    }
    $93 = HEAP32[$$07$i$i109 >> 2] | 0;
    HEAP32[$$07$i$i109 >> 2] = HEAP32[$91 >> 2];
    HEAP32[$91 >> 2] = $93;
    $$0$i$i110 = $91;
    $$07$i$i109 = $$07$i$i109 + 4 | 0;
   }
  }
 } while (0);
 $$2 = $$2108;
 $155 = $154;
 while (1) {
  if ($$2 >>> 0 >= $2 >>> 0) {
   $$3 = $$2;
   $144 = $155;
   break;
  }
  $125 = HEAP8[$$2 >> 0] | 0;
  if ($125 << 24 >> 24 == 46) {
   label = 32;
   break;
  }
  $137 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] & 31]($8, $125) | 0;
  $138 = HEAP32[$5 >> 2] | 0;
  $139 = $138 + 4 | 0;
  HEAP32[$5 >> 2] = $139;
  HEAP32[$138 >> 2] = $137;
  $$2 = $$2 + 1 | 0;
  $155 = $139;
 }
 if ((label | 0) == 32) {
  $130 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 127]($9) | 0;
  $131 = HEAP32[$5 >> 2] | 0;
  $132 = $131 + 4 | 0;
  HEAP32[$5 >> 2] = $132;
  HEAP32[$131 >> 2] = $130;
  $$3 = $$2 + 1 | 0;
  $144 = $132;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] & 7]($8, $$3, $2, $144) | 0;
 $148 = (HEAP32[$5 >> 2] | 0) + ($21 - $$3 << 2) | 0;
 HEAP32[$5 >> 2] = $148;
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $148 : $3 + ($1 - $0 << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog17pattern_formatter16compile_pattern_ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$029$lcssa$i = 0, $$02931$i = 0, $$08$i$i$i = 0, $$pre$phiZ2D = 0, $$sroa$027$0 = 0, $$sroa$034$063 = 0, $$sroa$034$1 = 0, $$sroa$034$2 = 0, $$sroa$034$3 = 0, $$sroa$034$4 = 0, $$sroa$034$5 = 0, $$sroa$044$064 = 0, $$sroa$044$2 = 0, $$sroa$044$3 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $71 = 0, $72 = 0, $73 = 0, $77 = 0, $81 = 0, $86 = 0, $storemerge30$i = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmpcast$byval_copy = sp + 8 | 0;
 $2 = sp;
 $3 = $1 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 $12 = ($5 ? HEAP32[$1 >> 2] | 0 : $1) + ($5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255) | 0;
 $13 = $0 + 88 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $0 + 92 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 if (($16 | 0) != ($14 | 0)) {
  $$08$i$i$i = $16;
  do {
   $$08$i$i$i = $$08$i$i$i + -4 | 0;
   $19 = HEAP32[$$08$i$i$i >> 2] | 0;
   HEAP32[$$08$i$i$i >> 2] = 0;
   if ($19 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$19 >> 2] | 0) + 4 >> 2] & 255]($19);
  } while (($$08$i$i$i | 0) != ($14 | 0));
 }
 HEAP32[$15 >> 2] = $14;
 $28 = (HEAP8[$3 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1;
 if (($28 | 0) == ($12 | 0)) {
  STACKTOP = sp;
  return;
 }
 $30 = $0 + 96 | 0;
 $$sroa$034$063 = $28;
 $$sroa$044$064 = 0;
 while (1) {
  $31 = HEAP8[$$sroa$034$063 >> 0] | 0;
  $33 = ($$sroa$044$064 | 0) != 0;
  if ($31 << 24 >> 24 == 37) {
   if ($33) {
    HEAP32[$tmpcast$byval_copy >> 2] = $$sroa$044$064;
    $34 = HEAP32[$15 >> 2] | 0;
    if ($34 >>> 0 < (HEAP32[$30 >> 2] | 0) >>> 0) {
     HEAP32[$tmpcast$byval_copy >> 2] = 0;
     HEAP32[$34 >> 2] = $$sroa$044$064;
     HEAP32[$15 >> 2] = $34 + 4;
    } else __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($13, $tmpcast$byval_copy);
    $38 = HEAP32[$tmpcast$byval_copy >> 2] | 0;
    HEAP32[$tmpcast$byval_copy >> 2] = 0;
    if ($38 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$38 >> 2] | 0) + 4 >> 2] & 255]($38);
   }
   $43 = $$sroa$034$063 + 1 | 0;
   if (($43 | 0) == ($12 | 0)) {
    label = 40;
    break;
   }
   switch (HEAP8[$43 >> 0] | 0) {
   case 45:
    {
     $$sroa$034$1 = $$sroa$034$063 + 2 | 0;
     $66 = 0;
     $71 = 1;
     break;
    }
   case 61:
    {
     $$sroa$034$1 = $$sroa$034$063 + 2 | 0;
     $66 = 0;
     $71 = 2;
     break;
    }
   default:
    {
     $$sroa$034$1 = $43;
     $66 = 0;
     $71 = 0;
    }
   }
   if (($$sroa$034$1 | 0) == ($12 | 0)) {
    label = 40;
    break;
   }
   $50 = HEAP8[$$sroa$034$1 >> 0] | 0;
   if ((($50 & 255) + -48 | 0) >>> 0 < 10) {
    $53 = ($50 << 24 >> 24) + -48 | 0;
    $storemerge30$i = $$sroa$034$1 + 1 | 0;
    L34 : do if (($storemerge30$i | 0) == ($12 | 0)) {
     $$029$lcssa$i = $53;
     $$sroa$034$3 = $12;
    } else {
     $$02931$i = $53;
     $$sroa$034$2 = $storemerge30$i;
     while (1) {
      $55 = HEAP8[$$sroa$034$2 >> 0] | 0;
      if ((($55 & 255) + -48 | 0) >>> 0 >= 10) {
       $$029$lcssa$i = $$02931$i;
       $$sroa$034$3 = $$sroa$034$2;
       break L34;
      }
      $60 = ($$02931$i * 10 | 0) + -48 + ($55 << 24 >> 24) | 0;
      $$sroa$034$2 = $$sroa$034$2 + 1 | 0;
      if (($$sroa$034$2 | 0) == ($12 | 0)) {
       $$029$lcssa$i = $60;
       $$sroa$034$3 = $12;
       break;
      } else $$02931$i = $60;
     }
    } while (0);
    $$sroa$027$0 = $$029$lcssa$i >>> 0 < 128 ? $$029$lcssa$i : 128;
    $$sroa$034$4 = $$sroa$034$3;
   } else {
    $$sroa$027$0 = 0;
    $$sroa$034$4 = $$sroa$034$1;
   }
   if (($$sroa$034$4 | 0) == ($12 | 0)) {
    label = 40;
    break;
   }
   $64 = HEAP8[$$sroa$034$4 >> 0] | 0;
   $67 = $2;
   HEAP32[$67 >> 2] = $66 | $$sroa$027$0;
   HEAP32[$67 + 4 >> 2] = $71;
   HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$2 >> 2];
   HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   __ZN6spdlog17pattern_formatter12handle_flag_EcNS_7details12padding_infoE($0, $64, $tmpcast$byval_copy);
   $$sroa$034$5 = $$sroa$034$4;
   $$sroa$044$3 = 0;
  } else {
   if ($33) {
    $$sroa$044$2 = $$sroa$044$064;
    $77 = $31;
   } else {
    $72 = __Znwm(24) | 0;
    HEAP32[$72 >> 2] = 0;
    HEAP32[$72 + 4 >> 2] = 0;
    HEAP32[$72 + 8 >> 2] = 0;
    HEAP32[$72 + 12 >> 2] = 0;
    HEAP32[$72 + 16 >> 2] = 0;
    HEAP32[$72 + 20 >> 2] = 0;
    HEAP32[$72 >> 2] = 10056;
    $73 = $72 + 12 | 0;
    HEAP32[$73 >> 2] = 0;
    HEAP32[$73 + 4 >> 2] = 0;
    HEAP32[$73 + 8 >> 2] = 0;
    $$sroa$044$2 = $72;
    $77 = HEAP8[$$sroa$034$063 >> 0] | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($$sroa$044$2 + 12 | 0, $77);
   $$sroa$034$5 = $$sroa$034$063;
   $$sroa$044$3 = $$sroa$044$2;
  }
  $$sroa$034$063 = $$sroa$034$5 + 1 | 0;
  if (($$sroa$034$063 | 0) == ($12 | 0)) {
   label = 33;
   break;
  } else $$sroa$044$064 = $$sroa$044$3;
 }
 if ((label | 0) == 33) {
  if (!$$sroa$044$3) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$tmpcast$byval_copy >> 2] = $$sroa$044$3;
  $81 = HEAP32[$15 >> 2] | 0;
  if ($81 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
   HEAP32[$tmpcast$byval_copy >> 2] = 0;
   HEAP32[$81 >> 2] = $$sroa$044$3;
   HEAP32[$15 >> 2] = $81 + 4;
   $$pre$phiZ2D = $tmpcast$byval_copy;
  } else {
   __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($13, $tmpcast$byval_copy);
   $$pre$phiZ2D = $tmpcast$byval_copy;
  }
  $86 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  HEAP32[$$pre$phiZ2D >> 2] = 0;
  if ($86 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$86 >> 2] | 0) + 4 >> 2] & 255]($86);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 40) {
  STACKTOP = sp;
  return;
 }
}

function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $139 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge3 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & -8;
 $5 = $0 + $4 | 0;
 $6 = HEAP32[7785] | 0;
 $8 = $3 & 3;
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) _abort();
 $11 = $5 + 4 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (!($12 & 1)) _abort();
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0;
   return $$2 | 0;
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) if (($4 - $1 | 0) >>> 0 <= HEAP32[7901] << 1 >>> 0) {
   $$2 = $0;
   return $$2 | 0;
  }
  $$2 = 0;
  return $$2 | 0;
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0;
  if ($24 >>> 0 <= 15) {
   $$2 = $0;
   return $$2 | 0;
  }
  $26 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$26 + 4 >> 2] = $24 | 3;
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1;
  _dispose_chunk($26, $24);
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[7787] | 0) == ($5 | 0)) {
  $37 = (HEAP32[7784] | 0) + $4 | 0;
  $39 = $37 - $1 | 0;
  $40 = $0 + $1 | 0;
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$40 + 4 >> 2] = $39 | 1;
  HEAP32[7787] = $40;
  HEAP32[7784] = $39;
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[7786] | 0) == ($5 | 0)) {
  $49 = (HEAP32[7783] | 0) + $4 | 0;
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  $51 = $49 - $1 | 0;
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0;
   $54 = $0 + $49 | 0;
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
   HEAP32[$53 + 4 >> 2] = $51 | 1;
   HEAP32[$54 >> 2] = $51;
   $60 = $54 + 4 | 0;
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2;
   $storemerge = $53;
   $storemerge3 = $51;
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2;
   $67 = $0 + $49 + 4 | 0;
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[7783] = $storemerge3;
  HEAP32[7786] = $storemerge;
  $$2 = $0;
  return $$2 | 0;
 }
 if ($12 & 2 | 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $73 = ($12 & -8) + $4 | 0;
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $75 = $73 - $1 | 0;
 $76 = $12 >>> 3;
 L49 : do if ($12 >>> 0 < 256) {
  $79 = HEAP32[$5 + 8 >> 2] | 0;
  $81 = HEAP32[$5 + 12 >> 2] | 0;
  $83 = 31164 + ($76 << 1 << 2) | 0;
  if (($79 | 0) != ($83 | 0)) {
   if ($6 >>> 0 > $79 >>> 0) _abort();
   if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) _abort();
  }
  if (($81 | 0) == ($79 | 0)) {
   HEAP32[7781] = HEAP32[7781] & ~(1 << $76);
   break;
  }
  if (($81 | 0) == ($83 | 0)) $$pre$phiZ2D = $81 + 8 | 0; else {
   if ($6 >>> 0 > $81 >>> 0) _abort();
   $96 = $81 + 8 | 0;
   if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) $$pre$phiZ2D = $96; else _abort();
  }
  HEAP32[$79 + 12 >> 2] = $81;
  HEAP32[$$pre$phiZ2D >> 2] = $79;
 } else {
  $101 = HEAP32[$5 + 24 >> 2] | 0;
  $103 = HEAP32[$5 + 12 >> 2] | 0;
  do if (($103 | 0) == ($5 | 0)) {
   $114 = $5 + 16 | 0;
   $115 = $114 + 4 | 0;
   $116 = HEAP32[$115 >> 2] | 0;
   if (!$116) {
    $118 = HEAP32[$114 >> 2] | 0;
    if (!$118) {
     $$3 = 0;
     break;
    } else {
     $$1271$ph = $118;
     $$1274$ph = $114;
    }
   } else {
    $$1271$ph = $116;
    $$1274$ph = $115;
   }
   $$1271 = $$1271$ph;
   $$1274 = $$1274$ph;
   while (1) {
    $120 = $$1271 + 20 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    if (!$121) {
     $123 = $$1271 + 16 | 0;
     $124 = HEAP32[$123 >> 2] | 0;
     if (!$124) break; else {
      $$1271$be = $124;
      $$1274$be = $123;
     }
    } else {
     $$1271$be = $121;
     $$1274$be = $120;
    }
    $$1271 = $$1271$be;
    $$1274 = $$1274$be;
   }
   if ($6 >>> 0 > $$1274 >>> 0) _abort(); else {
    HEAP32[$$1274 >> 2] = 0;
    $$3 = $$1271;
    break;
   }
  } else {
   $106 = HEAP32[$5 + 8 >> 2] | 0;
   if ($6 >>> 0 > $106 >>> 0) _abort();
   $108 = $106 + 12 | 0;
   if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) _abort();
   $111 = $103 + 8 | 0;
   if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$108 >> 2] = $103;
    HEAP32[$111 >> 2] = $106;
    $$3 = $103;
    break;
   } else _abort();
  } while (0);
  if ($101 | 0) {
   $129 = HEAP32[$5 + 28 >> 2] | 0;
   $130 = 31428 + ($129 << 2) | 0;
   do if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$130 >> 2] = $$3;
    if (!$$3) {
     HEAP32[7782] = HEAP32[7782] & ~(1 << $129);
     break L49;
    }
   } else if ((HEAP32[7785] | 0) >>> 0 > $101 >>> 0) _abort(); else {
    $139 = $101 + 16 | 0;
    HEAP32[((HEAP32[$139 >> 2] | 0) == ($5 | 0) ? $139 : $101 + 20 | 0) >> 2] = $$3;
    if (!$$3) break L49; else break;
   } while (0);
   $144 = HEAP32[7785] | 0;
   if ($144 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $101;
   $147 = $5 + 16 | 0;
   $148 = HEAP32[$147 >> 2] | 0;
   do if ($148 | 0) if ($144 >>> 0 > $148 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $148;
    HEAP32[$148 + 24 >> 2] = $$3;
    break;
   } while (0);
   $154 = HEAP32[$147 + 4 >> 2] | 0;
   if ($154 | 0) if ((HEAP32[7785] | 0) >>> 0 > $154 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $154;
    HEAP32[$154 + 24 >> 2] = $$3;
    break;
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $3 & 1 | $73 | 2;
  $165 = $0 + $73 + 4 | 0;
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1;
  $$2 = $0;
  return $$2 | 0;
 } else {
  $168 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$168 + 4 >> 2] = $75 | 3;
  $175 = $0 + $73 + 4 | 0;
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1;
  _dispose_chunk($168, $75);
  $$2 = $0;
  return $$2 | 0;
 }
 return 0;
}

function __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIjNS0_18basic_format_specsIcEEEEEEvcOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i7 = 0, $$0$i$i9 = 0, $$06$i$i = 0, $$06$i$i6 = 0, $$06$i$i8 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $102 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $46 = 0, $49 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $70 = 0, $74 = 0, $77 = 0, $79 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $95 = 0, $96 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy7 = sp + 24 | 0;
 $$byval_copy6 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 switch ($0 << 24 >> 24 | 0) {
 case 100:
 case 0:
  {
   $6 = HEAP32[$1 + 8 >> 2] | 0;
   $11 = ((32 - (Math_clz32($6 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
   $16 = $11 + ((HEAP32[16 + ($11 << 2) >> 2] | 0) >>> 0 <= $6 >>> 0 & 1) | 0;
   $17 = HEAP32[$1 >> 2] | 0;
   $20 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $20;
   $23 = HEAP32[$1 + 4 >> 2] | 0;
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 4 >> 2] = $16;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($17, $16, $$byval_copy6, $23, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 88:
 case 120:
  {
   $25 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$25 >> 2] | 0) + 16 >> 0] & 8) {
    $31 = $1 + 16 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    HEAP32[$31 >> 2] = $32 + 1;
    HEAP8[$1 + 12 + $32 >> 0] = 48;
    $37 = HEAP8[(HEAP32[$25 >> 2] | 0) + 17 >> 0] | 0;
    $38 = HEAP32[$31 >> 2] | 0;
    HEAP32[$31 >> 2] = $38 + 1;
    HEAP8[$1 + 12 + $38 >> 0] = $37;
   }
   $$0$i$i = 0;
   $$06$i$i = HEAP32[$1 + 8 >> 2] | 0;
   do {
    $$0$i$i = $$0$i$i + 1 | 0;
    $$06$i$i = $$06$i$i >>> 4;
   } while (($$06$i$i | 0) != 0);
   $46 = HEAP32[$1 >> 2] | 0;
   $49 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $49;
   $51 = HEAP32[$25 >> 2] | 0;
   HEAP32[$3 >> 2] = $1;
   HEAP32[$3 + 4 >> 2] = $$0$i$i;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($46, $$0$i$i, $$byval_copy6, $51, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 66:
 case 98:
  {
   $53 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$53 >> 2] | 0) + 16 >> 0] & 8) {
    $59 = $1 + 16 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    HEAP32[$59 >> 2] = $60 + 1;
    HEAP8[$1 + 12 + $60 >> 0] = 48;
    $65 = HEAP8[(HEAP32[$53 >> 2] | 0) + 17 >> 0] | 0;
    $66 = HEAP32[$59 >> 2] | 0;
    HEAP32[$59 >> 2] = $66 + 1;
    HEAP8[$1 + 12 + $66 >> 0] = $65;
   }
   $70 = HEAP32[$1 + 8 >> 2] | 0;
   $$0$i$i7 = 0;
   $$06$i$i6 = $70;
   do {
    $$0$i$i7 = $$0$i$i7 + 1 | 0;
    $$06$i$i6 = $$06$i$i6 >>> 1;
   } while (($$06$i$i6 | 0) != 0);
   $74 = HEAP32[$1 >> 2] | 0;
   $77 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $77;
   $79 = HEAP32[$53 >> 2] | 0;
   HEAP32[$3 >> 2] = $70;
   HEAP32[$3 + 4 >> 2] = $$0$i$i7;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($74, $$0$i$i7, $$byval_copy6, $79, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 111:
  {
   $81 = $1 + 8 | 0;
   $82 = HEAP32[$81 >> 2] | 0;
   $$0$i$i9 = 0;
   $$06$i$i8 = $82;
   do {
    $$0$i$i9 = $$0$i$i9 + 1 | 0;
    $$06$i$i8 = $$06$i$i8 >>> 3;
   } while (($$06$i$i8 | 0) != 0);
   $86 = $1 + 4 | 0;
   $87 = HEAP32[$86 >> 2] | 0;
   if (!(HEAP8[$87 + 16 >> 0] & 8)) {
    $104 = $82;
    $106 = $87;
   } else if ((HEAP32[$87 + 12 >> 2] | 0) > ($$0$i$i9 | 0)) {
    $104 = $82;
    $106 = $87;
   } else {
    $95 = $1 + 16 | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    HEAP32[$95 >> 2] = $96 + 1;
    HEAP8[$1 + 12 + $96 >> 0] = 48;
    $104 = HEAP32[$81 >> 2] | 0;
    $106 = HEAP32[$86 >> 2] | 0;
   }
   $99 = HEAP32[$1 >> 2] | 0;
   $102 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $102;
   HEAP32[$3 >> 2] = $104;
   HEAP32[$3 + 4 >> 2] = $$0$i$i9;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($99, $$0$i$i9, $$byval_copy6, $106, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 110:
  {
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIjNS0_18basic_format_specsIcEEE6on_numEv($1);
   STACKTOP = sp;
   return;
  }
 default:
  {
   $107 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($107, 17534);
   ___cxa_throw($107 | 0, 6792, 18);
  }
 }
}

function __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIiNS0_18basic_format_specsIcEEEEEEvcOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i7 = 0, $$0$i$i9 = 0, $$06$i$i = 0, $$06$i$i6 = 0, $$06$i$i8 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $102 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $46 = 0, $49 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $70 = 0, $74 = 0, $77 = 0, $79 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $95 = 0, $96 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy7 = sp + 24 | 0;
 $$byval_copy6 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 switch ($0 << 24 >> 24 | 0) {
 case 100:
 case 0:
  {
   $6 = HEAP32[$1 + 8 >> 2] | 0;
   $11 = ((32 - (Math_clz32($6 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
   $16 = $11 + ((HEAP32[16 + ($11 << 2) >> 2] | 0) >>> 0 <= $6 >>> 0 & 1) | 0;
   $17 = HEAP32[$1 >> 2] | 0;
   $20 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $20;
   $23 = HEAP32[$1 + 4 >> 2] | 0;
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 4 >> 2] = $16;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($17, $16, $$byval_copy6, $23, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 88:
 case 120:
  {
   $25 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$25 >> 2] | 0) + 16 >> 0] & 8) {
    $31 = $1 + 16 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    HEAP32[$31 >> 2] = $32 + 1;
    HEAP8[$1 + 12 + $32 >> 0] = 48;
    $37 = HEAP8[(HEAP32[$25 >> 2] | 0) + 17 >> 0] | 0;
    $38 = HEAP32[$31 >> 2] | 0;
    HEAP32[$31 >> 2] = $38 + 1;
    HEAP8[$1 + 12 + $38 >> 0] = $37;
   }
   $$0$i$i = 0;
   $$06$i$i = HEAP32[$1 + 8 >> 2] | 0;
   do {
    $$0$i$i = $$0$i$i + 1 | 0;
    $$06$i$i = $$06$i$i >>> 4;
   } while (($$06$i$i | 0) != 0);
   $46 = HEAP32[$1 >> 2] | 0;
   $49 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $49;
   $51 = HEAP32[$25 >> 2] | 0;
   HEAP32[$3 >> 2] = $1;
   HEAP32[$3 + 4 >> 2] = $$0$i$i;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($46, $$0$i$i, $$byval_copy6, $51, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 66:
 case 98:
  {
   $53 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$53 >> 2] | 0) + 16 >> 0] & 8) {
    $59 = $1 + 16 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    HEAP32[$59 >> 2] = $60 + 1;
    HEAP8[$1 + 12 + $60 >> 0] = 48;
    $65 = HEAP8[(HEAP32[$53 >> 2] | 0) + 17 >> 0] | 0;
    $66 = HEAP32[$59 >> 2] | 0;
    HEAP32[$59 >> 2] = $66 + 1;
    HEAP8[$1 + 12 + $66 >> 0] = $65;
   }
   $70 = HEAP32[$1 + 8 >> 2] | 0;
   $$0$i$i7 = 0;
   $$06$i$i6 = $70;
   do {
    $$0$i$i7 = $$0$i$i7 + 1 | 0;
    $$06$i$i6 = $$06$i$i6 >>> 1;
   } while (($$06$i$i6 | 0) != 0);
   $74 = HEAP32[$1 >> 2] | 0;
   $77 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $77;
   $79 = HEAP32[$53 >> 2] | 0;
   HEAP32[$3 >> 2] = $70;
   HEAP32[$3 + 4 >> 2] = $$0$i$i7;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($74, $$0$i$i7, $$byval_copy6, $79, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 111:
  {
   $81 = $1 + 8 | 0;
   $82 = HEAP32[$81 >> 2] | 0;
   $$0$i$i9 = 0;
   $$06$i$i8 = $82;
   do {
    $$0$i$i9 = $$0$i$i9 + 1 | 0;
    $$06$i$i8 = $$06$i$i8 >>> 3;
   } while (($$06$i$i8 | 0) != 0);
   $86 = $1 + 4 | 0;
   $87 = HEAP32[$86 >> 2] | 0;
   if (!(HEAP8[$87 + 16 >> 0] & 8)) {
    $104 = $82;
    $106 = $87;
   } else if ((HEAP32[$87 + 12 >> 2] | 0) > ($$0$i$i9 | 0)) {
    $104 = $82;
    $106 = $87;
   } else {
    $95 = $1 + 16 | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    HEAP32[$95 >> 2] = $96 + 1;
    HEAP8[$1 + 12 + $96 >> 0] = 48;
    $104 = HEAP32[$81 >> 2] | 0;
    $106 = HEAP32[$86 >> 2] | 0;
   }
   $99 = HEAP32[$1 >> 2] | 0;
   $102 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $102;
   HEAP32[$3 >> 2] = $104;
   HEAP32[$3 + 4 >> 2] = $$0$i$i9;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($99, $$0$i$i9, $$byval_copy6, $106, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 110:
  {
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIiNS0_18basic_format_specsIcEEE6on_numEv($1);
   STACKTOP = sp;
   return;
  }
 default:
  {
   $107 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($107, 17534);
   ___cxa_throw($107 | 0, 6792, 18);
  }
 }
}

function __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIcNS0_18basic_format_specsIcEEEEEEvcOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i7 = 0, $$0$i$i9 = 0, $$06$i$i = 0, $$06$i$i6 = 0, $$06$i$i8 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $102 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $46 = 0, $49 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $70 = 0, $74 = 0, $77 = 0, $79 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $95 = 0, $96 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy7 = sp + 24 | 0;
 $$byval_copy6 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 switch ($0 << 24 >> 24 | 0) {
 case 100:
 case 0:
  {
   $6 = HEAP32[$1 + 8 >> 2] | 0;
   $11 = ((32 - (Math_clz32($6 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
   $16 = $11 + ((HEAP32[16 + ($11 << 2) >> 2] | 0) >>> 0 <= $6 >>> 0 & 1) | 0;
   $17 = HEAP32[$1 >> 2] | 0;
   $20 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $20;
   $23 = HEAP32[$1 + 4 >> 2] | 0;
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 4 >> 2] = $16;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($17, $16, $$byval_copy6, $23, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 88:
 case 120:
  {
   $25 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$25 >> 2] | 0) + 16 >> 0] & 8) {
    $31 = $1 + 16 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    HEAP32[$31 >> 2] = $32 + 1;
    HEAP8[$1 + 12 + $32 >> 0] = 48;
    $37 = HEAP8[(HEAP32[$25 >> 2] | 0) + 17 >> 0] | 0;
    $38 = HEAP32[$31 >> 2] | 0;
    HEAP32[$31 >> 2] = $38 + 1;
    HEAP8[$1 + 12 + $38 >> 0] = $37;
   }
   $$0$i$i = 0;
   $$06$i$i = HEAP32[$1 + 8 >> 2] | 0;
   do {
    $$0$i$i = $$0$i$i + 1 | 0;
    $$06$i$i = $$06$i$i >>> 4;
   } while (($$06$i$i | 0) != 0);
   $46 = HEAP32[$1 >> 2] | 0;
   $49 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $49;
   $51 = HEAP32[$25 >> 2] | 0;
   HEAP32[$3 >> 2] = $1;
   HEAP32[$3 + 4 >> 2] = $$0$i$i;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($46, $$0$i$i, $$byval_copy6, $51, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 66:
 case 98:
  {
   $53 = $1 + 4 | 0;
   if (HEAP8[(HEAP32[$53 >> 2] | 0) + 16 >> 0] & 8) {
    $59 = $1 + 16 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    HEAP32[$59 >> 2] = $60 + 1;
    HEAP8[$1 + 12 + $60 >> 0] = 48;
    $65 = HEAP8[(HEAP32[$53 >> 2] | 0) + 17 >> 0] | 0;
    $66 = HEAP32[$59 >> 2] | 0;
    HEAP32[$59 >> 2] = $66 + 1;
    HEAP8[$1 + 12 + $66 >> 0] = $65;
   }
   $70 = HEAP32[$1 + 8 >> 2] | 0;
   $$0$i$i7 = 0;
   $$06$i$i6 = $70;
   do {
    $$0$i$i7 = $$0$i$i7 + 1 | 0;
    $$06$i$i6 = $$06$i$i6 >>> 1;
   } while (($$06$i$i6 | 0) != 0);
   $74 = HEAP32[$1 >> 2] | 0;
   $77 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $77;
   $79 = HEAP32[$53 >> 2] | 0;
   HEAP32[$3 >> 2] = $70;
   HEAP32[$3 + 4 >> 2] = $$0$i$i7;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($74, $$0$i$i7, $$byval_copy6, $79, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 111:
  {
   $81 = $1 + 8 | 0;
   $82 = HEAP32[$81 >> 2] | 0;
   $$0$i$i9 = 0;
   $$06$i$i8 = $82;
   do {
    $$0$i$i9 = $$0$i$i9 + 1 | 0;
    $$06$i$i8 = $$06$i$i8 >>> 3;
   } while (($$06$i$i8 | 0) != 0);
   $86 = $1 + 4 | 0;
   $87 = HEAP32[$86 >> 2] | 0;
   if (!(HEAP8[$87 + 16 >> 0] & 8)) {
    $104 = $82;
    $106 = $87;
   } else if ((HEAP32[$87 + 12 >> 2] | 0) > ($$0$i$i9 | 0)) {
    $104 = $82;
    $106 = $87;
   } else {
    $95 = $1 + 16 | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    HEAP32[$95 >> 2] = $96 + 1;
    HEAP8[$1 + 12 + $96 >> 0] = 48;
    $104 = HEAP32[$81 >> 2] | 0;
    $106 = HEAP32[$86 >> 2] | 0;
   }
   $99 = HEAP32[$1 >> 2] | 0;
   $102 = HEAP32[$1 + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 12;
   HEAP32[$2 + 4 >> 2] = $102;
   HEAP32[$3 >> 2] = $104;
   HEAP32[$3 + 4 >> 2] = $$0$i$i9;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($99, $$0$i$i9, $$byval_copy6, $106, $$byval_copy7);
   STACKTOP = sp;
   return;
  }
 case 110:
  {
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIcNS0_18basic_format_specsIcEEE6on_numEv($1);
   STACKTOP = sp;
   return;
  }
 default:
  {
   $107 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($107, 17534);
   ___cxa_throw($107 | 0, 6792, 18);
  }
 }
}

function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $98 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $4 = HEAP32[tempDoublePtr >> 2] | 0;
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 getTempRet0() | 0;
 $8 = $6 & 2047;
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0;
 getTempRet0() | 0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0;
 $14 = getTempRet0() | 0;
 L1 : do if (($13 | 0) == 0 & ($14 | 0) == 0) label = 3; else {
  $18 = ___DOUBLE_BITS_273($1) | 0;
  $20 = (getTempRet0() | 0) & 2147483647;
  if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) label = 3; else {
   $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
   $30 = getTempRet0() | 0;
   if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
   if (!$8) {
    $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $42 = getTempRet0() | 0;
    if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
     $$073100 = 0;
     $49 = $41;
     $50 = $42;
     while (1) {
      $48 = $$073100 + -1 | 0;
      $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0;
      $50 = getTempRet0() | 0;
      if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
       $$073$lcssa = $48;
       break;
      } else $$073100 = $48;
     }
    } else $$073$lcssa = 0;
    $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0;
    $$174 = $$073$lcssa;
    $87 = $59;
    $88 = getTempRet0() | 0;
   } else {
    $$174 = $8;
    $87 = $2;
    $88 = $3 & 1048575 | 1048576;
   }
   if (!$11) {
    $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0;
    $65 = getTempRet0() | 0;
    if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
     $$07194 = 0;
     $72 = $64;
     $73 = $65;
     while (1) {
      $71 = $$07194 + -1 | 0;
      $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0;
      $73 = getTempRet0() | 0;
      if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
       $$071$lcssa = $71;
       break;
      } else $$07194 = $71;
     }
    } else $$071$lcssa = 0;
    $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0;
    $$172 = $$071$lcssa;
    $89 = $82;
    $90 = getTempRet0() | 0;
   } else {
    $$172 = $11;
    $89 = $4;
    $90 = $5 & 1048575 | 1048576;
   }
   $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0;
   $92 = getTempRet0() | 0;
   $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295;
   L25 : do if (($$174 | 0) > ($$172 | 0)) {
    $$27585 = $$174;
    $100 = $92;
    $158 = $97;
    $159 = $87;
    $160 = $88;
    $98 = $91;
    while (1) {
     if ($158) if (($98 | 0) == 0 & ($100 | 0) == 0) break; else {
      $104 = $98;
      $105 = $100;
     } else {
      $104 = $159;
      $105 = $160;
     }
     $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0;
     $107 = getTempRet0() | 0;
     $108 = $$27585 + -1 | 0;
     $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0;
     $111 = getTempRet0() | 0;
     $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295;
     if (($108 | 0) > ($$172 | 0)) {
      $$27585 = $108;
      $100 = $111;
      $158 = $116;
      $159 = $106;
      $160 = $107;
      $98 = $110;
     } else {
      $$275$lcssa = $108;
      $$lcssa = $116;
      $117 = $110;
      $119 = $111;
      $156 = $106;
      $157 = $107;
      break L25;
     }
    }
    $$070 = $0 * 0.0;
    break L1;
   } else {
    $$275$lcssa = $$174;
    $$lcssa = $97;
    $117 = $91;
    $119 = $92;
    $156 = $87;
    $157 = $88;
   } while (0);
   if ($$lcssa) if (($117 | 0) == 0 & ($119 | 0) == 0) {
    $$070 = $0 * 0.0;
    break;
   } else {
    $123 = $119;
    $125 = $117;
   } else {
    $123 = $157;
    $125 = $156;
   }
   if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
    $$37682 = $$275$lcssa;
    $130 = $125;
    $131 = $123;
    while (1) {
     $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0;
     $133 = getTempRet0() | 0;
     $134 = $$37682 + -1 | 0;
     if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
      $$37682 = $134;
      $130 = $132;
      $131 = $133;
     } else {
      $$376$lcssa = $134;
      $141 = $132;
      $142 = $133;
      break;
     }
    }
   } else {
    $$376$lcssa = $$275$lcssa;
    $141 = $125;
    $142 = $123;
   }
   if (($$376$lcssa | 0) > 0) {
    $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0;
    $144 = getTempRet0() | 0;
    $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0;
    $153 = $144 | (getTempRet0() | 0);
    $155 = $143 | $145;
   } else {
    $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0;
    $153 = getTempRet0() | 0;
    $155 = $150;
   }
   HEAP32[tempDoublePtr >> 2] = $155;
   HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12;
   $$070 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1;
  $$070 = $27 / $27;
 }
 return +$$070;
}

function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $103 = 0, $119 = 0, $12 = 0, $127 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $64 = 0, $73 = 0, $80 = 0, $86 = 0, $94 = 0, $trunc = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0102 = -149;
   $$0103 = 24;
   label = 4;
   break;
  }
 case 1:
  {
   $$0102 = -1074;
   $$0103 = 53;
   label = 4;
   break;
  }
 case 2:
  {
   $$0102 = -1074;
   $$0103 = 53;
   label = 4;
   break;
  }
 default:
  $$0111 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $3 = $0 + 4 | 0;
  $4 = $0 + 100 | 0;
  do {
   $5 = HEAP32[$3 >> 2] | 0;
   if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $5 + 1;
    $12 = HEAPU8[$5 >> 0] | 0;
   } else $12 = ___shgetc($0) | 0;
  } while ((_isspace($12) | 0) != 0);
  L13 : do switch ($12 | 0) {
  case 43:
  case 45:
   {
    $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0;
    $19 = HEAP32[$3 >> 2] | 0;
    if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $19 + 1;
     $$0 = HEAPU8[$19 >> 0] | 0;
     $$0110 = $18;
     break L13;
    } else {
     $$0 = ___shgetc($0) | 0;
     $$0110 = $18;
     break L13;
    }
    break;
   }
  default:
   {
    $$0 = $12;
    $$0110 = 1;
   }
  } while (0);
  $$0104122 = 0;
  $$1123 = $$0;
  while (1) {
   if (($$1123 | 32 | 0) != (HEAP8[22649 + $$0104122 >> 0] | 0)) {
    $$1$lcssa = $$1123;
    $trunc = $$0104122;
    break;
   }
   do if ($$0104122 >>> 0 < 7) {
    $32 = HEAP32[$3 >> 2] | 0;
    if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $32 + 1;
     $$2 = HEAPU8[$32 >> 0] | 0;
     break;
    } else {
     $$2 = ___shgetc($0) | 0;
     break;
    }
   } else $$2 = $$1123; while (0);
   $$0104122 = $$0104122 + 1 | 0;
   if ($$0104122 >>> 0 >= 8) {
    $$1$lcssa = $$2;
    $trunc = 8;
    break;
   } else $$1123 = $$2;
  }
  L29 : do switch ($trunc & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $42 = ($2 | 0) != 0;
    if ($42 & $trunc >>> 0 > 3) if (($trunc | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$trunc) {
     $$2106120 = 0;
     $$3121 = $$1$lcssa;
     while (1) {
      if (($$3121 | 32 | 0) != (HEAP8[22658 + $$2106120 >> 0] | 0)) {
       $$3107 = $$2106120;
       $$5 = $$3121;
       break L34;
      }
      do if ($$2106120 >>> 0 < 2) {
       $64 = HEAP32[$3 >> 2] | 0;
       if ($64 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $64 + 1;
        $$4 = HEAPU8[$64 >> 0] | 0;
        break;
       } else {
        $$4 = ___shgetc($0) | 0;
        break;
       }
      } else $$4 = $$3121; while (0);
      $$2106120 = $$2106120 + 1 | 0;
      if ($$2106120 >>> 0 >= 3) {
       $$3107 = 3;
       $$5 = $$4;
       break;
      } else $$3121 = $$4;
     }
    } else {
     $$3107 = $trunc;
     $$5 = $$1$lcssa;
    } while (0);
    switch ($$3107 | 0) {
    case 3:
     {
      $73 = HEAP32[$3 >> 2] | 0;
      if ($73 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $73 + 1;
       $80 = HEAPU8[$73 >> 0] | 0;
      } else $80 = ___shgetc($0) | 0;
      if (($80 | 0) != 40) {
       if (!(HEAP32[$4 >> 2] | 0)) {
        $$0111 = nan;
        break L4;
       }
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while (1) {
       $86 = HEAP32[$3 >> 2] | 0;
       if ($86 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $86 + 1;
        $94 = HEAPU8[$86 >> 0] | 0;
       } else $94 = ___shgetc($0) | 0;
       if (!(($94 + -48 | 0) >>> 0 < 10 | ($94 + -65 | 0) >>> 0 < 26)) if (!(($94 | 0) == 95 | ($94 + -97 | 0) >>> 0 < 26)) break;
       $$4108 = $$4108 + 1 | 0;
      }
      if (($94 | 0) == 41) {
       $$0111 = nan;
       break L4;
      }
      $103 = (HEAP32[$4 >> 2] | 0) == 0;
      if (!$103) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      if (!$42) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim($0, 0);
       $$0111 = 0.0;
       break L4;
      }
      if (!$$4108) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while (1) {
       $$in = $$in + -1 | 0;
       if (!$103) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
       if (!$$in) {
        $$0111 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if (($$5 | 0) == 48) {
       $119 = HEAP32[$3 >> 2] | 0;
       if ($119 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $119 + 1;
        $127 = HEAPU8[$119 >> 0] | 0;
       } else $127 = ___shgetc($0) | 0;
       if (($127 | 32 | 0) == 120) {
        $$0111 = +_hexfloat($0, $$0103, $$0102, $$0110, $2);
        break L4;
       }
       if (!(HEAP32[$4 >> 2] | 0)) $$6 = 48; else {
        HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
        $$6 = 48;
       }
      } else $$6 = $$5;
      $$0111 = +_decfloat($0, $$6, $$0103, $$0102, $$0110, $2);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim($0, 0);
      $$0111 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $45 = (HEAP32[$4 >> 2] | 0) == 0;
   if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   if (($2 | 0) != 0 & $trunc >>> 0 > 3) {
    $$1105118 = $trunc;
    do {
     if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
     $$1105118 = $$1105118 + -1 | 0;
    } while ($$1105118 >>> 0 > 3);
   }
  }
  $$0111 = +($$0110 | 0) * inf;
 } while (0);
 return +$$0111;
}

function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0100 = 0, $$0102 = 0, $$0104 = 0, $$07$i$i = 0, $$07$i$i107 = 0, $$099 = 0, $$1 = 0, $$1101 = 0, $$1103 = 0, $$1105 = 0, $$2 = 0, $$2106 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $105 = 0, $107 = 0, $119 = 0, $120 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $137 = 0, $138 = 0, $148 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $32 = 0, $33 = 0, $35 = 0, $40 = 0, $41 = 0, $45 = 0, $52 = 0, $57 = 0, $58 = 0, $60 = 0, $7 = 0, $75 = 0, $77 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $7 = sp;
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32688) | 0;
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32704) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 127]($7, $9);
 HEAP32[$5 >> 2] = $3;
 $13 = HEAP8[$0 >> 0] | 0;
 switch ($13 << 24 >> 24) {
 case 43:
 case 45:
  {
   $18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, $13) | 0;
   $19 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $19 + 1;
   HEAP8[$19 >> 0] = $18;
   $$0102 = $0 + 1 | 0;
   break;
  }
 default:
  $$0102 = $0;
 }
 $21 = $2;
 L4 : do if (($21 - $$0102 | 0) > 1) if ((HEAP8[$$0102 >> 0] | 0) == 48) {
  $27 = $$0102 + 1 | 0;
  switch (HEAP8[$27 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    label = 4;
    break L4;
   }
  }
  $32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, 48) | 0;
  $33 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $33 + 1;
  HEAP8[$33 >> 0] = $32;
  $35 = $$0102 + 2 | 0;
  $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, HEAP8[$27 >> 0] | 0) | 0;
  $41 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $41 + 1;
  HEAP8[$41 >> 0] = $40;
  $$0104 = $35;
  while (1) {
   if ($$0104 >>> 0 >= $2 >>> 0) {
    $$1103 = $35;
    $$2106 = $$0104;
    break L4;
   }
   $45 = HEAP8[$$0104 >> 0] | 0;
   if (!(_isxdigit_l($45, __ZNSt3__26__clocEv() | 0) | 0)) {
    $$1103 = $35;
    $$2106 = $$0104;
    break L4;
   }
   $$0104 = $$0104 + 1 | 0;
  }
 } else label = 4; else label = 4; while (0);
 L12 : do if ((label | 0) == 4) {
  $$1105 = $$0102;
  while (1) {
   if ($$1105 >>> 0 >= $2 >>> 0) {
    $$1103 = $$0102;
    $$2106 = $$1105;
    break L12;
   }
   $52 = HEAP8[$$1105 >> 0] | 0;
   if (!(_isdigit_l($52, __ZNSt3__26__clocEv() | 0) | 0)) {
    $$1103 = $$0102;
    $$2106 = $$1105;
    break L12;
   }
   $$1105 = $$1105 + 1 | 0;
  }
 } while (0);
 $57 = $7 + 11 | 0;
 $58 = HEAP8[$57 >> 0] | 0;
 $60 = $7 + 4 | 0;
 L19 : do if (!(($58 << 24 >> 24 < 0 ? HEAP32[$60 >> 2] | 0 : $58 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] & 7]($8, $$1103, $$2106, HEAP32[$5 >> 2] | 0) | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($$2106 - $$1103);
  $$pre$phiZ2D = $8;
 } else {
  L22 : do if (($$1103 | 0) != ($$2106 | 0)) {
   $$0$i$i = $$2106;
   $$07$i$i = $$1103;
   while (1) {
    $75 = $$0$i$i + -1 | 0;
    if ($$07$i$i >>> 0 >= $75 >>> 0) break L22;
    $77 = HEAP8[$$07$i$i >> 0] | 0;
    HEAP8[$$07$i$i >> 0] = HEAP8[$75 >> 0] | 0;
    HEAP8[$75 >> 0] = $77;
    $$0$i$i = $75;
    $$07$i$i = $$07$i$i + 1 | 0;
   }
  } while (0);
  $83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] & 127]($9) | 0;
  $$0 = $$1103;
  $$0100 = 0;
  $$099 = 0;
  while (1) {
   if ($$0 >>> 0 >= $$2106 >>> 0) break;
   $101 = HEAP8[((HEAP8[$57 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$099 >> 0] | 0;
   if ($101 << 24 >> 24 > 0 & ($$0100 | 0) == ($101 << 24 >> 24 | 0)) {
    $105 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $105 + 1;
    HEAP8[$105 >> 0] = $83;
    $107 = HEAP8[$57 >> 0] | 0;
    $$1 = $$099 + ($$099 >>> 0 < (($107 << 24 >> 24 < 0 ? HEAP32[$60 >> 2] | 0 : $107 & 255) + -1 | 0) >>> 0 & 1) | 0;
    $$1101 = 0;
   } else {
    $$1 = $$099;
    $$1101 = $$0100;
   }
   $119 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, HEAP8[$$0 >> 0] | 0) | 0;
   $120 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $120 + 1;
   HEAP8[$120 >> 0] = $119;
   $$0 = $$0 + 1 | 0;
   $$0100 = $$1101 + 1 | 0;
   $$099 = $$1;
  }
  $88 = $3 + ($$1103 - $0) | 0;
  $89 = HEAP32[$5 >> 2] | 0;
  if (($88 | 0) == ($89 | 0)) $$pre$phiZ2D = $8; else {
   $$0$i$i108 = $89;
   $$07$i$i107 = $88;
   while (1) {
    $91 = $$0$i$i108 + -1 | 0;
    if ($$07$i$i107 >>> 0 >= $91 >>> 0) {
     $$pre$phiZ2D = $8;
     break L19;
    }
    $93 = HEAP8[$$07$i$i107 >> 0] | 0;
    HEAP8[$$07$i$i107 >> 0] = HEAP8[$91 >> 0] | 0;
    HEAP8[$91 >> 0] = $93;
    $$0$i$i108 = $91;
    $$07$i$i107 = $$07$i$i107 + 1 | 0;
   }
  }
 } while (0);
 $$2 = $$2106;
 while (1) {
  if ($$2 >>> 0 >= $2 >>> 0) {
   $$3 = $$2;
   break;
  }
  $125 = HEAP8[$$2 >> 0] | 0;
  if ($125 << 24 >> 24 == 46) {
   label = 32;
   break;
  }
  $137 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] & 31]($8, $125) | 0;
  $138 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $138 + 1;
  HEAP8[$138 >> 0] = $137;
  $$2 = $$2 + 1 | 0;
 }
 if ((label | 0) == 32) {
  $130 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 127]($9) | 0;
  $131 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $131 + 1;
  HEAP8[$131 >> 0] = $130;
  $$3 = $$2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] & 7]($8, $$3, $2, HEAP32[$5 >> 2] | 0) | 0;
 $148 = (HEAP32[$5 >> 2] | 0) + ($21 - $$3) | 0;
 HEAP32[$5 >> 2] = $148;
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $148 : $3 + ($1 - $0) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_doubleIeEEvT_RKNS0_18basic_format_specsIcEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$0 = 0.0, $$041 = 0, $$045 = 0, $$2 = 0, $$byval_copy = 0, $$sroa$0 = 0, $$sroa$0$12$sroa_idx = 0, $$sroa$054$0 = 0, $$sroa$11$0$in = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0.0, $22 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $4 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $66 = 0, $7 = 0, $75 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 $$byval_copy = sp + 572 | 0;
 $3 = sp + 544 | 0;
 $4 = sp + 20 | 0;
 $$sroa$0 = sp;
 $5 = sp + 536 | 0;
 $7 = HEAP8[$2 + 17 >> 0] | 0;
 switch ($7 << 24 >> 24 | 0) {
 case 71:
 case 103:
 case 0:
  {
   $9 = $7 << 24 >> 24 == 71;
   $$sroa$054$0 = $9 ? 71 : 103;
   $$sroa$11$0$in = $9;
   break;
  }
 case 69:
 case 101:
  {
   $$sroa$054$0 = $7;
   $$sroa$11$0$in = $7 << 24 >> 24 == 69;
   break;
  }
 case 70:
 case 102:
  {
   $$sroa$054$0 = $7;
   $$sroa$11$0$in = $7 << 24 >> 24 == 70;
   break;
  }
 case 65:
 case 97:
  {
   $$sroa$054$0 = $7;
   $$sroa$11$0$in = $7 << 24 >> 24 == 65;
   break;
  }
 default:
  {
   $13 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($13, 17534);
   ___cxa_throw($13 | 0, 6792, 18);
  }
 }
 HEAPF64[tempDoublePtr >> 3] = $1;
 $14 = HEAP32[tempDoublePtr >> 2] | 0;
 $15 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 if (($15 | 0) < 0) {
  $17 = -$1;
  HEAPF64[tempDoublePtr >> 3] = $17;
  $$0 = $17;
  $$045 = 45;
  $31 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $33 = HEAP32[tempDoublePtr >> 2] | 0;
 } else {
  $22 = HEAPU8[$2 + 16 >> 0] | 0;
  $$0 = $1;
  $$045 = ($22 & 1 | 0) == 0 ? 0 : ($22 & 2 | 0) == 0 ? 32 : 43;
  $31 = $15;
  $33 = $14;
 }
 HEAP32[$3 >> 2] = $0;
 $28 = $3 + 4 | 0;
 HEAP32[$28 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$28 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$28 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$28 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$28 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP8[$3 + 24 >> 0] = $$045;
 $30 = $31 & 2147483647;
 if ($30 >>> 0 > 2146435072 | ($30 | 0) == 2146435072 & $33 >>> 0 > 0) {
  HEAP8[$$byval_copy >> 0] = $$045;
  HEAP32[$$byval_copy + 4 >> 2] = $$sroa$11$0$in ? 22643 : 22658;
  __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17inf_or_nan_writerEEEvRKNS0_10align_specEOT_($0, $3 + 4 | 0, $$byval_copy);
  STACKTOP = sp;
  return;
 }
 if (($33 | 0) == 0 & ($30 | 0) == 2146435072) {
  HEAP8[$$byval_copy >> 0] = $$045;
  HEAP32[$$byval_copy + 4 >> 2] = $$sroa$11$0$in ? 22639 : 22635;
  __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17inf_or_nan_writerEEEvRKNS0_10align_specEOT_($0, $3 + 4 | 0, $$byval_copy);
  STACKTOP = sp;
  return;
 }
 $45 = $4 + 4 | 0;
 $46 = $4 + 8 | 0;
 HEAP32[$46 >> 2] = 0;
 HEAP32[$4 >> 2] = 9804;
 $48 = $4 + 16 | 0;
 HEAP32[$45 >> 2] = $48;
 HEAP32[$4 + 12 >> 2] = 500;
 HEAP32[$$sroa$0 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP8[$$sroa$0 + 16 >> 0] = HEAP8[$2 + 16 >> 0] | 0;
 $49 = HEAP16[$2 + 18 >> 1] | 0;
 $$sroa$0$12$sroa_idx = $$sroa$0 + 12 | 0;
 HEAP32[$5 >> 2] = HEAP32[$$sroa$0$12$sroa_idx >> 2];
 HEAP8[$5 + 4 >> 0] = HEAP8[$$sroa$0$12$sroa_idx + 4 >> 0] | 0;
 HEAP8[$5 + 5 >> 0] = $$sroa$054$0;
 HEAP16[$5 + 6 >> 1] = $49;
 HEAP8[$$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
 HEAP8[$$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
 HEAP8[$$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
 HEAP8[$$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
 HEAP8[$$byval_copy + 4 >> 0] = HEAP8[$5 + 4 >> 0] | 0;
 HEAP8[$$byval_copy + 5 >> 0] = HEAP8[$5 + 5 >> 0] | 0;
 HEAP8[$$byval_copy + 6 >> 0] = HEAP8[$5 + 6 >> 0] | 0;
 HEAP8[$$byval_copy + 7 >> 0] = HEAP8[$5 + 7 >> 0] | 0;
 __ZN3fmt2v58internal14sprintf_formatIeEEvT_RNS1_12basic_bufferIcEENS0_17core_format_specsE($$0, $4, $$byval_copy);
 $50 = HEAP32[$46 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 switch (HEAP32[$2 + 8 >> 2] | 0) {
 case 4:
  {
   if ($$045 << 24 >> 24) {
    $54 = HEAP32[$0 >> 2] | 0;
    $55 = $54 + 8 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 + 1 | 0;
    if ((HEAP32[$54 + 12 >> 2] | 0) >>> 0 < $57 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$54 >> 2] >> 2] & 127]($54, $57);
    HEAP32[$55 >> 2] = $57;
    HEAP8[(HEAP32[$54 + 4 >> 2] | 0) + $56 >> 0] = $$045;
    $66 = HEAP32[$$byval_copy >> 2] | 0;
    if ($66 | 0) HEAP32[$$byval_copy >> 2] = $66 + -1;
   }
   HEAP32[$$byval_copy + 8 >> 2] = 2;
   $$041 = $50;
   $$2 = 0;
   break;
  }
 case 0:
  {
   HEAP32[$$byval_copy + 8 >> 2] = 2;
   label = 22;
   break;
  }
 default:
  label = 22;
 }
 if ((label | 0) == 22) {
  $$041 = $50 + ($$045 << 24 >> 24 != 0 & 1) | 0;
  $$2 = $$045;
 }
 HEAP32[$$sroa$0 >> 2] = $$041;
 HEAP8[$$sroa$0 + 4 >> 0] = $$2;
 HEAP32[$$sroa$0 + 8 >> 2] = $4;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_13double_writerEEEvRKNS0_10align_specEOT_($0, $$byval_copy, $$sroa$0);
 HEAP32[$4 >> 2] = 9804;
 $75 = HEAP32[$45 >> 2] | 0;
 if (($75 | 0) != ($48 | 0)) __ZdlPv($75);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_doubleIdEEvT_RKNS0_18basic_format_specsIcEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$0 = 0.0, $$041 = 0, $$045 = 0, $$2 = 0, $$byval_copy = 0, $$sroa$0 = 0, $$sroa$0$12$sroa_idx = 0, $$sroa$054$0 = 0, $$sroa$11$0$in = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0.0, $22 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $4 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $66 = 0, $7 = 0, $75 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 $$byval_copy = sp + 572 | 0;
 $3 = sp + 544 | 0;
 $4 = sp + 20 | 0;
 $$sroa$0 = sp;
 $5 = sp + 536 | 0;
 $7 = HEAP8[$2 + 17 >> 0] | 0;
 switch ($7 << 24 >> 24 | 0) {
 case 71:
 case 103:
 case 0:
  {
   $9 = $7 << 24 >> 24 == 71;
   $$sroa$054$0 = $9 ? 71 : 103;
   $$sroa$11$0$in = $9;
   break;
  }
 case 69:
 case 101:
  {
   $$sroa$054$0 = $7;
   $$sroa$11$0$in = $7 << 24 >> 24 == 69;
   break;
  }
 case 70:
 case 102:
  {
   $$sroa$054$0 = $7;
   $$sroa$11$0$in = $7 << 24 >> 24 == 70;
   break;
  }
 case 65:
 case 97:
  {
   $$sroa$054$0 = $7;
   $$sroa$11$0$in = $7 << 24 >> 24 == 65;
   break;
  }
 default:
  {
   $13 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($13, 17534);
   ___cxa_throw($13 | 0, 6792, 18);
  }
 }
 HEAPF64[tempDoublePtr >> 3] = $1;
 $14 = HEAP32[tempDoublePtr >> 2] | 0;
 $15 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 if (($15 | 0) < 0) {
  $17 = -$1;
  HEAPF64[tempDoublePtr >> 3] = $17;
  $$0 = $17;
  $$045 = 45;
  $31 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $33 = HEAP32[tempDoublePtr >> 2] | 0;
 } else {
  $22 = HEAPU8[$2 + 16 >> 0] | 0;
  $$0 = $1;
  $$045 = ($22 & 1 | 0) == 0 ? 0 : ($22 & 2 | 0) == 0 ? 32 : 43;
  $31 = $15;
  $33 = $14;
 }
 HEAP32[$3 >> 2] = $0;
 $28 = $3 + 4 | 0;
 HEAP32[$28 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$28 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$28 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$28 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$28 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP8[$3 + 24 >> 0] = $$045;
 $30 = $31 & 2147483647;
 if ($30 >>> 0 > 2146435072 | ($30 | 0) == 2146435072 & $33 >>> 0 > 0) {
  HEAP8[$$byval_copy >> 0] = $$045;
  HEAP32[$$byval_copy + 4 >> 2] = $$sroa$11$0$in ? 22643 : 22658;
  __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17inf_or_nan_writerEEEvRKNS0_10align_specEOT_($0, $3 + 4 | 0, $$byval_copy);
  STACKTOP = sp;
  return;
 }
 if (($33 | 0) == 0 & ($30 | 0) == 2146435072) {
  HEAP8[$$byval_copy >> 0] = $$045;
  HEAP32[$$byval_copy + 4 >> 2] = $$sroa$11$0$in ? 22639 : 22635;
  __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17inf_or_nan_writerEEEvRKNS0_10align_specEOT_($0, $3 + 4 | 0, $$byval_copy);
  STACKTOP = sp;
  return;
 }
 $45 = $4 + 4 | 0;
 $46 = $4 + 8 | 0;
 HEAP32[$46 >> 2] = 0;
 HEAP32[$4 >> 2] = 9804;
 $48 = $4 + 16 | 0;
 HEAP32[$45 >> 2] = $48;
 HEAP32[$4 + 12 >> 2] = 500;
 HEAP32[$$sroa$0 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP8[$$sroa$0 + 16 >> 0] = HEAP8[$2 + 16 >> 0] | 0;
 $49 = HEAP16[$2 + 18 >> 1] | 0;
 $$sroa$0$12$sroa_idx = $$sroa$0 + 12 | 0;
 HEAP32[$5 >> 2] = HEAP32[$$sroa$0$12$sroa_idx >> 2];
 HEAP8[$5 + 4 >> 0] = HEAP8[$$sroa$0$12$sroa_idx + 4 >> 0] | 0;
 HEAP8[$5 + 5 >> 0] = $$sroa$054$0;
 HEAP16[$5 + 6 >> 1] = $49;
 HEAP8[$$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
 HEAP8[$$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
 HEAP8[$$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
 HEAP8[$$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
 HEAP8[$$byval_copy + 4 >> 0] = HEAP8[$5 + 4 >> 0] | 0;
 HEAP8[$$byval_copy + 5 >> 0] = HEAP8[$5 + 5 >> 0] | 0;
 HEAP8[$$byval_copy + 6 >> 0] = HEAP8[$5 + 6 >> 0] | 0;
 HEAP8[$$byval_copy + 7 >> 0] = HEAP8[$5 + 7 >> 0] | 0;
 __ZN3fmt2v58internal14sprintf_formatIdEEvT_RNS1_12basic_bufferIcEENS0_17core_format_specsE($$0, $4, $$byval_copy);
 $50 = HEAP32[$46 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 switch (HEAP32[$2 + 8 >> 2] | 0) {
 case 4:
  {
   if ($$045 << 24 >> 24) {
    $54 = HEAP32[$0 >> 2] | 0;
    $55 = $54 + 8 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 + 1 | 0;
    if ((HEAP32[$54 + 12 >> 2] | 0) >>> 0 < $57 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$54 >> 2] >> 2] & 127]($54, $57);
    HEAP32[$55 >> 2] = $57;
    HEAP8[(HEAP32[$54 + 4 >> 2] | 0) + $56 >> 0] = $$045;
    $66 = HEAP32[$$byval_copy >> 2] | 0;
    if ($66 | 0) HEAP32[$$byval_copy >> 2] = $66 + -1;
   }
   HEAP32[$$byval_copy + 8 >> 2] = 2;
   $$041 = $50;
   $$2 = 0;
   break;
  }
 case 0:
  {
   HEAP32[$$byval_copy + 8 >> 2] = 2;
   label = 22;
   break;
  }
 default:
  label = 22;
 }
 if ((label | 0) == 22) {
  $$041 = $50 + ($$045 << 24 >> 24 != 0 & 1) | 0;
  $$2 = $$045;
 }
 HEAP32[$$sroa$0 >> 2] = $$041;
 HEAP8[$$sroa$0 + 4 >> 0] = $$2;
 HEAP32[$$sroa$0 + 8 >> 2] = $4;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_13double_writerEEEvRKNS0_10align_specEOT_($0, $$byval_copy, $$sroa$0);
 HEAP32[$4 >> 2] = 9804;
 $75 = HEAP32[$45 >> 2] | 0;
 if (($75 | 0) != ($48 | 0)) __ZdlPv($75);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details25source_location_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i = 0, $$010$i$i$i23 = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i = 0, $$089$i$i$i24 = 0, $$phi$trans$insert = 0, $$phi$trans$insert56 = 0, $$pre$i = 0, $$pre$i28 = 0, $$pre$phi$i30Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59Z2D = 0, $$pre$phi60Z2D = 0, $$pre$phi62Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $107 = 0, $108 = 0, $11 = 0, $114 = 0, $116 = 0, $12 = 0, $13 = 0, $18 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $4 = 0, $47 = 0, $48 = 0, $5 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $88 = 0, $89 = 0, $92 = 0, $93 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = $1 + 36 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$6) {
  STACKTOP = sp;
  return;
 }
 $8 = $0 + 4 | 0;
 $10 = (HEAP32[$8 >> 2] | 0) == 0;
 $11 = $1 + 32 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = _strlen($12) | 0;
 if ($10) {
  if (!$12) {
   $$phi$trans$insert56 = $3 + 8 | 0;
   $$pre$phi59Z2D = $3 + 12 | 0;
   $$pre$phiZ2D = $$phi$trans$insert56;
   $108 = HEAP32[$$phi$trans$insert56 >> 2] | 0;
  } else {
   $88 = $12 + $13 | 0;
   $89 = $3 + 8 | 0;
   if (($13 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $92 = (HEAP32[$89 >> 2] | 0) + $13 | 0;
   $93 = $3 + 12 | 0;
   if ((HEAP32[$93 >> 2] | 0) >>> 0 < $92 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $92);
   if ($13 | 0) {
    $$010$i$i$i = $12;
    $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$89 >> 2] | 0) | 0;
    while (1) {
     HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
     $$010$i$i$i = $$010$i$i$i + 1 | 0;
     if (($$010$i$i$i | 0) == ($88 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
    }
   }
   HEAP32[$89 >> 2] = $92;
   $$pre$phi59Z2D = $93;
   $$pre$phiZ2D = $89;
   $108 = $92;
  }
  $107 = $108 + 1 | 0;
  if ((HEAP32[$$pre$phi59Z2D >> 2] | 0) >>> 0 < $107 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $107);
   $$pre$i = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $$pre$phi$iZ2D = $$pre$i + 1 | 0;
   $116 = $$pre$i;
  } else {
   $$pre$phi$iZ2D = $107;
   $116 = $108;
  }
  $114 = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $$pre$phi$iZ2D;
  HEAP8[$114 + $116 >> 0] = 58;
  __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE(HEAP32[$5 >> 2] | 0, $3);
  STACKTOP = sp;
  return;
 }
 $18 = ((32 - (Math_clz32($6 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $13 + 2 + (((HEAP32[16 + ($18 << 2) >> 2] | 0) >>> 0 > $6 >>> 0) << 31 >> 31) + $18 | 0, $8, $3);
 $25 = HEAP32[$11 >> 2] | 0;
 $26 = _strlen($25) | 0;
 if (!$25) {
  $$phi$trans$insert = $3 + 8 | 0;
  $$pre$phi60Z2D = $$phi$trans$insert;
  $$pre$phi62Z2D = $3 + 12 | 0;
  $48 = HEAP32[$$phi$trans$insert >> 2] | 0;
 } else {
  $28 = $25 + $26 | 0;
  $29 = $3 + 8 | 0;
  if (($26 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $32 = (HEAP32[$29 >> 2] | 0) + $26 | 0;
  $33 = $3 + 12 | 0;
  if ((HEAP32[$33 >> 2] | 0) >>> 0 < $32 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $32);
  if ($26 | 0) {
   $$010$i$i$i23 = $25;
   $$089$i$i$i24 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$29 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i24 >> 0] = HEAP8[$$010$i$i$i23 >> 0] | 0;
    $$010$i$i$i23 = $$010$i$i$i23 + 1 | 0;
    if (($$010$i$i$i23 | 0) == ($28 | 0)) break; else $$089$i$i$i24 = $$089$i$i$i24 + 1 | 0;
   }
  }
  HEAP32[$29 >> 2] = $32;
  $$pre$phi60Z2D = $29;
  $$pre$phi62Z2D = $33;
  $48 = $32;
 }
 $47 = $48 + 1 | 0;
 if ((HEAP32[$$pre$phi62Z2D >> 2] | 0) >>> 0 < $47 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $47);
  $$pre$i28 = HEAP32[$$pre$phi60Z2D >> 2] | 0;
  $$pre$phi$i30Z2D = $$pre$i28 + 1 | 0;
  $56 = $$pre$i28;
 } else {
  $$pre$phi$i30Z2D = $47;
  $56 = $48;
 }
 $54 = HEAP32[$3 + 4 >> 2] | 0;
 HEAP32[$$pre$phi60Z2D >> 2] = $$pre$phi$i30Z2D;
 HEAP8[$54 + $56 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE(HEAP32[$5 >> 2] | 0, $3);
 $59 = HEAP32[$4 + 8 >> 2] | 0;
 if ($59 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $59 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $65 = HEAP32[$4 + 12 >> 2] | 0;
  $67 = HEAP32[$4 + 4 >> 2] | 0;
  if ($65 | 0) {
   $69 = $65 + $59 | 0;
   $70 = $67 + 8 | 0;
   if (($59 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $72 = HEAP32[$70 >> 2] | 0;
   $73 = $72 + $59 | 0;
   if ((HEAP32[$67 + 12 >> 2] | 0) >>> 0 < $73 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$67 >> 2] >> 2] & 127]($67, $73);
    $82 = HEAP32[$70 >> 2] | 0;
   } else $82 = $72;
   $$010$i$i$i$i$i = $65;
   $$089$i$i$i$i$i = (HEAP32[$67 + 4 >> 2] | 0) + $82 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
    $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
    if (($$010$i$i$i$i$i | 0) == ($69 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
   }
   HEAP32[$70 >> 2] = $73;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26locale5__impC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1;
 HEAP32[$0 >> 2] = 15168;
 $4 = $0 + 8 | 0;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($4, 28);
 $5 = $0 + 144 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($5, 23426, __ZNSt3__211char_traitsIcE6lengthEPKc(23426) | 0);
 HEAP32[$0 + 12 >> 2] = HEAP32[$4 >> 2];
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0, 30456);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0, 30464);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0, 30472);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0, 30488);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0, 30496);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0, 30504);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0, 30520);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0, 30528);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0, 30536);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0, 30560);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, 30592);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, 30600);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, 30608);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, 30616);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0, 30624);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0, 30632);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0, 30640);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0, 30648);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, 30656);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, 30664);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, 30672);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, 30680);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, 30688);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, 30704);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, 30720);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, 30736);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0, 30752);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0, 30760);
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$0$i$i$i64 = 0, $$0$i$i$i73 = 0, $$str$33$$str$34$i$i$i = 0, $$str$33$$str$34$i$i$i52 = 0, $$str$33$$str$34$i$i$i61 = 0, $$str$33$$str$34$i$i$i70 = 0, $107 = 0, $111 = 0, $117 = 0, $119 = 0, $121 = 0, $127 = 0, $131 = 0, $134 = 0, $136 = 0, $149 = 0, $151 = 0, $155 = 0, $161 = 0, $164 = 0, $17 = 0, $170 = 0, $174 = 0, $177 = 0, $179 = 0, $19 = 0, $192 = 0, $194 = 0, $198 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $34 = 0, $4 = 0, $49 = 0, $53 = 0, $59 = 0, $6 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $75 = 0, $77 = 0, $8 = 0, $83 = 0, $87 = 0, $9 = 0, $90 = 0, $92 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = HEAP32[$2 + 20 >> 2] | 0;
  $34 = $32 + 8 | 0;
  $$str$33$$str$34$i$i$i70 = (HEAP8[(HEAP32[$32 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
  $$0$i$i$i73 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $49 = HEAP32[$34 >> 2] | 0;
  $53 = HEAP32[$34 + 4 >> 2] | 0;
  do {
   $$0$i$i$i73 = $$0$i$i$i73 + -1 | 0;
   HEAP8[$$0$i$i$i73 >> 0] = HEAP8[$$str$33$$str$34$i$i$i70 + ($49 & 15) >> 0] | 0;
   $49 = _bitshift64Lshr($49 | 0, $53 | 0, 4) | 0;
   $53 = getTempRet0() | 0;
  } while (!(($49 | 0) == 0 & ($53 | 0) == 0));
  return;
 }
 $59 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $59 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $59);
 HEAP32[$7 >> 2] = $59;
 $67 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $70 = HEAP32[$1 + 4 >> 2] & 255;
 $71 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($71 | 0) _memset($67 | 0, $70 | 0, $71 | 0) | 0;
   $75 = $67 + $71 | 0;
   $77 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$77) $87 = $75; else {
    _memmove($75 | 0, HEAP32[$2 + 4 >> 2] | 0, $77 | 0) | 0;
    $87 = $75 + $77 | 0;
   }
   $83 = HEAP32[$2 + 16 >> 2] | 0;
   if ($83 | 0) _memset($87 | 0, HEAP8[$2 + 12 >> 0] | 0, $83 | 0) | 0;
   $90 = HEAP32[$2 + 20 >> 2] | 0;
   $92 = $90 + 8 | 0;
   $$str$33$$str$34$i$i$i61 = (HEAP8[(HEAP32[$90 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i64 = $87 + $83 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $107 = HEAP32[$92 >> 2] | 0;
   $111 = HEAP32[$92 + 4 >> 2] | 0;
   do {
    $$0$i$i$i64 = $$0$i$i$i64 + -1 | 0;
    HEAP8[$$0$i$i$i64 >> 0] = HEAP8[$$str$33$$str$34$i$i$i61 + ($107 & 15) >> 0] | 0;
    $107 = _bitshift64Lshr($107 | 0, $111 | 0, 4) | 0;
    $111 = getTempRet0() | 0;
   } while (!(($107 | 0) == 0 & ($111 | 0) == 0));
   return;
  }
 case 3:
  {
   $117 = $71 >>> 1;
   if ($117 | 0) _memset($67 | 0, $70 | 0, $117 | 0) | 0;
   $119 = $67 + $117 | 0;
   $121 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$121) $131 = $119; else {
    _memmove($119 | 0, HEAP32[$2 + 4 >> 2] | 0, $121 | 0) | 0;
    $131 = $119 + $121 | 0;
   }
   $127 = HEAP32[$2 + 16 >> 2] | 0;
   if ($127 | 0) _memset($131 | 0, HEAP8[$2 + 12 >> 0] | 0, $127 | 0) | 0;
   $134 = HEAP32[$2 + 20 >> 2] | 0;
   $136 = $134 + 8 | 0;
   $149 = $131 + $127 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i52 = (HEAP8[(HEAP32[$134 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i55 = $149;
   $151 = HEAP32[$136 >> 2] | 0;
   $155 = HEAP32[$136 + 4 >> 2] | 0;
   do {
    $$0$i$i$i55 = $$0$i$i$i55 + -1 | 0;
    HEAP8[$$0$i$i$i55 >> 0] = HEAP8[$$str$33$$str$34$i$i$i52 + ($151 & 15) >> 0] | 0;
    $151 = _bitshift64Lshr($151 | 0, $155 | 0, 4) | 0;
    $155 = getTempRet0() | 0;
   } while (!(($151 | 0) == 0 & ($155 | 0) == 0));
   $161 = $71 - $117 | 0;
   if (!$161) return;
   _memset($149 | 0, $70 | 0, $161 | 0) | 0;
   return;
  }
 default:
  {
   $164 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$164) $174 = $67; else {
    _memmove($67 | 0, HEAP32[$2 + 4 >> 2] | 0, $164 | 0) | 0;
    $174 = $67 + $164 | 0;
   }
   $170 = HEAP32[$2 + 16 >> 2] | 0;
   if ($170 | 0) _memset($174 | 0, HEAP8[$2 + 12 >> 0] | 0, $170 | 0) | 0;
   $177 = HEAP32[$2 + 20 >> 2] | 0;
   $179 = $177 + 8 | 0;
   $192 = $174 + $170 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i = (HEAP8[(HEAP32[$177 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i = $192;
   $194 = HEAP32[$179 >> 2] | 0;
   $198 = HEAP32[$179 + 4 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = HEAP8[$$str$33$$str$34$i$i$i + ($194 & 15) >> 0] | 0;
    $194 = _bitshift64Lshr($194 | 0, $198 | 0, 4) | 0;
    $198 = getTempRet0() | 0;
   } while (!(($194 | 0) == 0 & ($198 | 0) == 0));
   if (!$71) return;
   _memset($192 | 0, $70 | 0, $71 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$0$i$i$i64 = 0, $$0$i$i$i73 = 0, $$str$33$$str$34$i$i$i = 0, $$str$33$$str$34$i$i$i52 = 0, $$str$33$$str$34$i$i$i61 = 0, $$str$33$$str$34$i$i$i70 = 0, $107 = 0, $111 = 0, $117 = 0, $119 = 0, $121 = 0, $127 = 0, $131 = 0, $134 = 0, $136 = 0, $149 = 0, $151 = 0, $155 = 0, $161 = 0, $164 = 0, $17 = 0, $170 = 0, $174 = 0, $177 = 0, $179 = 0, $19 = 0, $192 = 0, $194 = 0, $198 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $34 = 0, $4 = 0, $49 = 0, $53 = 0, $59 = 0, $6 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $75 = 0, $77 = 0, $8 = 0, $83 = 0, $87 = 0, $9 = 0, $90 = 0, $92 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = HEAP32[$2 + 20 >> 2] | 0;
  $34 = $32 + 8 | 0;
  $$str$33$$str$34$i$i$i70 = (HEAP8[(HEAP32[$32 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
  $$0$i$i$i73 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $49 = HEAP32[$34 >> 2] | 0;
  $53 = HEAP32[$34 + 4 >> 2] | 0;
  do {
   $$0$i$i$i73 = $$0$i$i$i73 + -1 | 0;
   HEAP8[$$0$i$i$i73 >> 0] = HEAP8[$$str$33$$str$34$i$i$i70 + ($49 & 15) >> 0] | 0;
   $49 = _bitshift64Lshr($49 | 0, $53 | 0, 4) | 0;
   $53 = getTempRet0() | 0;
  } while (!(($49 | 0) == 0 & ($53 | 0) == 0));
  return;
 }
 $59 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $59 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $59);
 HEAP32[$7 >> 2] = $59;
 $67 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $70 = HEAP32[$1 + 4 >> 2] & 255;
 $71 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($71 | 0) _memset($67 | 0, $70 | 0, $71 | 0) | 0;
   $75 = $67 + $71 | 0;
   $77 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$77) $87 = $75; else {
    _memmove($75 | 0, HEAP32[$2 + 4 >> 2] | 0, $77 | 0) | 0;
    $87 = $75 + $77 | 0;
   }
   $83 = HEAP32[$2 + 16 >> 2] | 0;
   if ($83 | 0) _memset($87 | 0, HEAP8[$2 + 12 >> 0] | 0, $83 | 0) | 0;
   $90 = HEAP32[$2 + 20 >> 2] | 0;
   $92 = $90 + 8 | 0;
   $$str$33$$str$34$i$i$i61 = (HEAP8[(HEAP32[$90 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i64 = $87 + $83 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $107 = HEAP32[$92 >> 2] | 0;
   $111 = HEAP32[$92 + 4 >> 2] | 0;
   do {
    $$0$i$i$i64 = $$0$i$i$i64 + -1 | 0;
    HEAP8[$$0$i$i$i64 >> 0] = HEAP8[$$str$33$$str$34$i$i$i61 + ($107 & 15) >> 0] | 0;
    $107 = _bitshift64Lshr($107 | 0, $111 | 0, 4) | 0;
    $111 = getTempRet0() | 0;
   } while (!(($107 | 0) == 0 & ($111 | 0) == 0));
   return;
  }
 case 3:
  {
   $117 = $71 >>> 1;
   if ($117 | 0) _memset($67 | 0, $70 | 0, $117 | 0) | 0;
   $119 = $67 + $117 | 0;
   $121 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$121) $131 = $119; else {
    _memmove($119 | 0, HEAP32[$2 + 4 >> 2] | 0, $121 | 0) | 0;
    $131 = $119 + $121 | 0;
   }
   $127 = HEAP32[$2 + 16 >> 2] | 0;
   if ($127 | 0) _memset($131 | 0, HEAP8[$2 + 12 >> 0] | 0, $127 | 0) | 0;
   $134 = HEAP32[$2 + 20 >> 2] | 0;
   $136 = $134 + 8 | 0;
   $149 = $131 + $127 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i52 = (HEAP8[(HEAP32[$134 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i55 = $149;
   $151 = HEAP32[$136 >> 2] | 0;
   $155 = HEAP32[$136 + 4 >> 2] | 0;
   do {
    $$0$i$i$i55 = $$0$i$i$i55 + -1 | 0;
    HEAP8[$$0$i$i$i55 >> 0] = HEAP8[$$str$33$$str$34$i$i$i52 + ($151 & 15) >> 0] | 0;
    $151 = _bitshift64Lshr($151 | 0, $155 | 0, 4) | 0;
    $155 = getTempRet0() | 0;
   } while (!(($151 | 0) == 0 & ($155 | 0) == 0));
   $161 = $71 - $117 | 0;
   if (!$161) return;
   _memset($149 | 0, $70 | 0, $161 | 0) | 0;
   return;
  }
 default:
  {
   $164 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$164) $174 = $67; else {
    _memmove($67 | 0, HEAP32[$2 + 4 >> 2] | 0, $164 | 0) | 0;
    $174 = $67 + $164 | 0;
   }
   $170 = HEAP32[$2 + 16 >> 2] | 0;
   if ($170 | 0) _memset($174 | 0, HEAP8[$2 + 12 >> 0] | 0, $170 | 0) | 0;
   $177 = HEAP32[$2 + 20 >> 2] | 0;
   $179 = $177 + 8 | 0;
   $192 = $174 + $170 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i = (HEAP8[(HEAP32[$177 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i = $192;
   $194 = HEAP32[$179 >> 2] | 0;
   $198 = HEAP32[$179 + 4 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = HEAP8[$$str$33$$str$34$i$i$i + ($194 & 15) >> 0] | 0;
    $194 = _bitshift64Lshr($194 | 0, $198 | 0, 4) | 0;
    $198 = getTempRet0() | 0;
   } while (!(($194 | 0) == 0 & ($198 | 0) == 0));
   if (!$71) return;
   _memset($192 | 0, $70 | 0, $71 | 0) | 0;
   return;
  }
 }
}

function __ZN3sgl14Renderer2D_ES28DrawQuadERKN3glm3vecILi3EfLNS1_9qualifierE0EEES6_S6_S6_RKNS2_ILi4EfLS3_0EEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$sroa_idx37 = 0, $$sroa_idx45 = 0, $$sroa_idx53 = 0, $11 = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $36 = 0, $37 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $55 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $6 = sp;
 $7 = __Znwm(32) | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 $$sroa_idx37 = $7 + 8 | 0;
 HEAP32[$$sroa_idx37 >> 2] = 1065353216;
 HEAP32[$7 + 12 >> 2] = 0;
 $$sroa_idx45 = $7 + 16 | 0;
 HEAP32[$$sroa_idx45 >> 2] = 1065353216;
 HEAP32[$7 + 20 >> 2] = 1065353216;
 $$sroa_idx53 = $7 + 24 | 0;
 HEAP32[$$sroa_idx53 >> 2] = 0;
 HEAP32[$7 + 28 >> 2] = 1065353216;
 $8 = $0 + 168 | 0;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $9 = $6 + 12 | 0;
 HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$9 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$9 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$9 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
 $11 = $7;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $6 + 28 | 0;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 HEAPF32[$6 + 36 >> 2] = 0.0;
 $22 = $0 + 172 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $0 + 176 | 0;
 if ($23 >>> 0 < (HEAP32[$24 >> 2] | 0) >>> 0) {
  dest = $23;
  src = $6;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $28 = (HEAP32[$22 >> 2] | 0) + 40 | 0;
  HEAP32[$22 >> 2] = $28;
  $43 = $28;
 } else {
  __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($8, $6);
  $43 = HEAP32[$22 >> 2] | 0;
 };
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 $29 = $6 + 12 | 0;
 HEAP32[$29 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$29 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$29 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$29 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
 $31 = $$sroa_idx37;
 $36 = HEAP32[$31 + 4 >> 2] | 0;
 $37 = $6 + 28 | 0;
 HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$37 + 4 >> 2] = $36;
 HEAPF32[$6 + 36 >> 2] = 0.0;
 if ($43 >>> 0 < (HEAP32[$24 >> 2] | 0) >>> 0) {
  dest = $43;
  src = $6;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $46 = (HEAP32[$22 >> 2] | 0) + 40 | 0;
  HEAP32[$22 >> 2] = $46;
  $61 = $46;
 } else {
  __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($8, $6);
  $61 = HEAP32[$22 >> 2] | 0;
 };
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 $47 = $6 + 12 | 0;
 HEAP32[$47 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$47 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$47 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$47 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
 $49 = $$sroa_idx45;
 $54 = HEAP32[$49 + 4 >> 2] | 0;
 $55 = $6 + 28 | 0;
 HEAP32[$55 >> 2] = HEAP32[$49 >> 2];
 HEAP32[$55 + 4 >> 2] = $54;
 HEAPF32[$6 + 36 >> 2] = 0.0;
 if ($61 >>> 0 < (HEAP32[$24 >> 2] | 0) >>> 0) {
  dest = $61;
  src = $6;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $64 = (HEAP32[$22 >> 2] | 0) + 40 | 0;
  HEAP32[$22 >> 2] = $64;
  $79 = $64;
 } else {
  __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($8, $6);
  $79 = HEAP32[$22 >> 2] | 0;
 };
 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 $65 = $6 + 12 | 0;
 HEAP32[$65 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$65 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$65 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$65 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
 $67 = $$sroa_idx53;
 $72 = HEAP32[$67 + 4 >> 2] | 0;
 $73 = $6 + 28 | 0;
 HEAP32[$73 >> 2] = HEAP32[$67 >> 2];
 HEAP32[$73 + 4 >> 2] = $72;
 HEAPF32[$6 + 36 >> 2] = 0.0;
 if ($79 >>> 0 < (HEAP32[$24 >> 2] | 0) >>> 0) {
  dest = $79;
  src = $6;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 40;
  $83 = $0 + 152 | 0;
  $84 = HEAP32[$83 >> 2] | 0;
  $85 = $84 + 6 | 0;
  HEAP32[$83 >> 2] = $85;
  __ZdlPv($7);
  STACKTOP = sp;
  return;
 } else {
  __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($8, $6);
  $83 = $0 + 152 | 0;
  $84 = HEAP32[$83 >> 2] | 0;
  $85 = $84 + 6 | 0;
  HEAP32[$83 >> 2] = $85;
  __ZdlPv($7);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE8__rehashEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02026$i$i4$i = 0, $$02125$i$i5$i = 0, $$027$i$i3$i = 0, $$05488 = 0, $$05586 = 0, $$05589 = 0, $$05687 = 0, $$05891 = 0, $$066 = 0, $$067 = 0, $$067$phi = 0, $$067$us = 0, $$067$us$phi = 0, $$067$us72 = 0, $$067$us72$phi = 0, $$1 = 0, $$157 = 0, $10 = 0, $100 = 0, $11 = 0, $111 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $33 = 0, $36 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $90 = 0;
 $2 = $0 + 4 | 0;
 if (!$1) {
  $111 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  if ($111 | 0) __ZdlPv($111);
  HEAP32[$2 >> 2] = 0;
  return;
 }
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($5, 22468);
  HEAP32[$5 >> 2] = 15792;
  ___cxa_throw($5 | 0, 9584, 225);
 }
 $7 = __Znwm($1 << 2) | 0;
 $8 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $7;
 if ($8 | 0) __ZdlPv($8);
 HEAP32[$2 >> 2] = $1;
 $$05891 = 0;
 do {
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($$05891 << 2) >> 2] = 0;
  $$05891 = $$05891 + 1 | 0;
 } while (($$05891 | 0) != ($1 | 0));
 $10 = $0 + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (!$11) return;
 $17 = HEAP32[$11 + 4 >> 2] | 0;
 $18 = $1 + -1 | 0;
 $20 = ($18 & $1 | 0) == 0;
 if ($20) $26 = $17 & $18; else if ($17 >>> 0 < $1 >>> 0) $26 = $17; else $26 = ($17 >>> 0) % ($1 >>> 0) | 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + ($26 << 2) >> 2] = $10;
 $$05586 = HEAP32[$11 >> 2] | 0;
 if (!$$05586) return;
 $$05488 = $26;
 $$05589 = $$05586;
 $$05687 = $11;
 while (1) {
  $29 = HEAP32[$$05589 + 4 >> 2] | 0;
  if ($20) $33 = $29 & $18; else if ($29 >>> 0 < $1 >>> 0) $33 = $29; else $33 = ($29 >>> 0) % ($1 >>> 0) | 0;
  do if (($33 | 0) == ($$05488 | 0)) {
   $$1 = $$05488;
   $$157 = $$05589;
  } else {
   $36 = (HEAP32[$0 >> 2] | 0) + ($33 << 2) | 0;
   if (!(HEAP32[$36 >> 2] | 0)) {
    HEAP32[$36 >> 2] = $$05687;
    $$1 = $33;
    $$157 = $$05589;
    break;
   }
   $39 = HEAP32[$$05589 >> 2] | 0;
   L40 : do if (!$39) $$066 = $$05589; else {
    $41 = $$05589 + 8 | 0;
    $43 = HEAP8[$41 + 11 >> 0] | 0;
    $44 = $43 << 24 >> 24 < 0;
    $47 = $43 & 255;
    $48 = $44 ? HEAP32[$$05589 + 12 >> 2] | 0 : $47;
    $49 = ($48 | 0) == 0;
    if ($44) {
     $$067$us = $$05589;
     $51 = $39;
     while (1) {
      $50 = $51 + 8 | 0;
      $53 = HEAP8[$50 + 11 >> 0] | 0;
      $54 = $53 << 24 >> 24 < 0;
      if (($48 | 0) != (($54 ? HEAP32[$51 + 12 >> 2] | 0 : $53 & 255) | 0)) {
       $$066 = $$067$us;
       break L40;
      }
      if (!$49) if (_memcmp(HEAP32[$41 >> 2] | 0, $54 ? HEAP32[$50 >> 2] | 0 : $50, $48) | 0) {
       $$066 = $$067$us;
       break L40;
      }
      $64 = HEAP32[$51 >> 2] | 0;
      if (!$64) {
       $$066 = $51;
       break L40;
      } else {
       $$067$us$phi = $51;
       $51 = $64;
       $$067$us = $$067$us$phi;
      }
     }
    }
    if ($49) {
     $$067$us72 = $$05589;
     $67 = $39;
     while (1) {
      $69 = HEAP8[$67 + 8 + 11 >> 0] | 0;
      if (($69 << 24 >> 24 < 0 ? HEAP32[$67 + 12 >> 2] | 0 : $69 & 255) | 0) {
       $$066 = $$067$us72;
       break L40;
      }
      $76 = HEAP32[$67 >> 2] | 0;
      if (!$76) {
       $$066 = $67;
       break L40;
      } else {
       $$067$us72$phi = $67;
       $67 = $76;
       $$067$us72 = $$067$us72$phi;
      }
     }
    }
    $$067 = $$05589;
    $79 = $39;
    while (1) {
     $78 = $79 + 8 | 0;
     $81 = HEAP8[$78 + 11 >> 0] | 0;
     $82 = $81 << 24 >> 24 < 0;
     if (($48 | 0) != (($82 ? HEAP32[$79 + 12 >> 2] | 0 : $81 & 255) | 0)) {
      $$066 = $$067;
      break L40;
     }
     $90 = $82 ? HEAP32[$78 >> 2] | 0 : $78;
     if ((HEAP8[$90 >> 0] | 0) != (HEAP32[$41 >> 2] & 255) << 24 >> 24) {
      $$066 = $$067;
      break L40;
     }
     $$02026$i$i4$i = $41;
     $$02125$i$i5$i = $47;
     $$027$i$i3$i = $90;
     while (1) {
      $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0;
      $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0;
      if (!$$02125$i$i5$i) break;
      $$027$i$i3$i = $$027$i$i3$i + 1 | 0;
      if ((HEAP8[$$02026$i$i4$i >> 0] | 0) != (HEAP8[$$027$i$i3$i >> 0] | 0)) {
       $$066 = $$067;
       break L40;
      }
     }
     $100 = HEAP32[$79 >> 2] | 0;
     if (!$100) {
      $$066 = $79;
      break;
     } else {
      $$067$phi = $79;
      $79 = $100;
      $$067 = $$067$phi;
     }
    }
   } while (0);
   HEAP32[$$05687 >> 2] = HEAP32[$$066 >> 2];
   HEAP32[$$066 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($33 << 2) >> 2] >> 2];
   HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($33 << 2) >> 2] >> 2] = $$05589;
   $$1 = $$05488;
   $$157 = $$05687;
  } while (0);
  $$05589 = HEAP32[$$157 >> 2] | 0;
  if (!$$05589) break; else {
   $$05488 = $$1;
   $$05687 = $$157;
  }
 }
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02026$i$i4$i = 0, $$02125$i$i5$i = 0, $$027$i$i3$i = 0, $$05488 = 0, $$05586 = 0, $$05589 = 0, $$05687 = 0, $$05891 = 0, $$066 = 0, $$067 = 0, $$067$phi = 0, $$067$us = 0, $$067$us$phi = 0, $$067$us72 = 0, $$067$us72$phi = 0, $$1 = 0, $$157 = 0, $10 = 0, $100 = 0, $11 = 0, $111 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $33 = 0, $36 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $90 = 0;
 $2 = $0 + 4 | 0;
 if (!$1) {
  $111 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  if ($111 | 0) __ZdlPv($111);
  HEAP32[$2 >> 2] = 0;
  return;
 }
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($5, 22468);
  HEAP32[$5 >> 2] = 15792;
  ___cxa_throw($5 | 0, 9584, 225);
 }
 $7 = __Znwm($1 << 2) | 0;
 $8 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $7;
 if ($8 | 0) __ZdlPv($8);
 HEAP32[$2 >> 2] = $1;
 $$05891 = 0;
 do {
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($$05891 << 2) >> 2] = 0;
  $$05891 = $$05891 + 1 | 0;
 } while (($$05891 | 0) != ($1 | 0));
 $10 = $0 + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (!$11) return;
 $17 = HEAP32[$11 + 4 >> 2] | 0;
 $18 = $1 + -1 | 0;
 $20 = ($18 & $1 | 0) == 0;
 if ($20) $26 = $17 & $18; else if ($17 >>> 0 < $1 >>> 0) $26 = $17; else $26 = ($17 >>> 0) % ($1 >>> 0) | 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + ($26 << 2) >> 2] = $10;
 $$05586 = HEAP32[$11 >> 2] | 0;
 if (!$$05586) return;
 $$05488 = $26;
 $$05589 = $$05586;
 $$05687 = $11;
 while (1) {
  $29 = HEAP32[$$05589 + 4 >> 2] | 0;
  if ($20) $33 = $29 & $18; else if ($29 >>> 0 < $1 >>> 0) $33 = $29; else $33 = ($29 >>> 0) % ($1 >>> 0) | 0;
  do if (($33 | 0) == ($$05488 | 0)) {
   $$1 = $$05488;
   $$157 = $$05589;
  } else {
   $36 = (HEAP32[$0 >> 2] | 0) + ($33 << 2) | 0;
   if (!(HEAP32[$36 >> 2] | 0)) {
    HEAP32[$36 >> 2] = $$05687;
    $$1 = $33;
    $$157 = $$05589;
    break;
   }
   $39 = HEAP32[$$05589 >> 2] | 0;
   L40 : do if (!$39) $$066 = $$05589; else {
    $41 = $$05589 + 8 | 0;
    $43 = HEAP8[$41 + 11 >> 0] | 0;
    $44 = $43 << 24 >> 24 < 0;
    $47 = $43 & 255;
    $48 = $44 ? HEAP32[$$05589 + 12 >> 2] | 0 : $47;
    $49 = ($48 | 0) == 0;
    if ($44) {
     $$067$us = $$05589;
     $51 = $39;
     while (1) {
      $50 = $51 + 8 | 0;
      $53 = HEAP8[$50 + 11 >> 0] | 0;
      $54 = $53 << 24 >> 24 < 0;
      if (($48 | 0) != (($54 ? HEAP32[$51 + 12 >> 2] | 0 : $53 & 255) | 0)) {
       $$066 = $$067$us;
       break L40;
      }
      if (!$49) if (_memcmp(HEAP32[$41 >> 2] | 0, $54 ? HEAP32[$50 >> 2] | 0 : $50, $48) | 0) {
       $$066 = $$067$us;
       break L40;
      }
      $64 = HEAP32[$51 >> 2] | 0;
      if (!$64) {
       $$066 = $51;
       break L40;
      } else {
       $$067$us$phi = $51;
       $51 = $64;
       $$067$us = $$067$us$phi;
      }
     }
    }
    if ($49) {
     $$067$us72 = $$05589;
     $67 = $39;
     while (1) {
      $69 = HEAP8[$67 + 8 + 11 >> 0] | 0;
      if (($69 << 24 >> 24 < 0 ? HEAP32[$67 + 12 >> 2] | 0 : $69 & 255) | 0) {
       $$066 = $$067$us72;
       break L40;
      }
      $76 = HEAP32[$67 >> 2] | 0;
      if (!$76) {
       $$066 = $67;
       break L40;
      } else {
       $$067$us72$phi = $67;
       $67 = $76;
       $$067$us72 = $$067$us72$phi;
      }
     }
    }
    $$067 = $$05589;
    $79 = $39;
    while (1) {
     $78 = $79 + 8 | 0;
     $81 = HEAP8[$78 + 11 >> 0] | 0;
     $82 = $81 << 24 >> 24 < 0;
     if (($48 | 0) != (($82 ? HEAP32[$79 + 12 >> 2] | 0 : $81 & 255) | 0)) {
      $$066 = $$067;
      break L40;
     }
     $90 = $82 ? HEAP32[$78 >> 2] | 0 : $78;
     if ((HEAP8[$90 >> 0] | 0) != (HEAP32[$41 >> 2] & 255) << 24 >> 24) {
      $$066 = $$067;
      break L40;
     }
     $$02026$i$i4$i = $41;
     $$02125$i$i5$i = $47;
     $$027$i$i3$i = $90;
     while (1) {
      $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0;
      $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0;
      if (!$$02125$i$i5$i) break;
      $$027$i$i3$i = $$027$i$i3$i + 1 | 0;
      if ((HEAP8[$$02026$i$i4$i >> 0] | 0) != (HEAP8[$$027$i$i3$i >> 0] | 0)) {
       $$066 = $$067;
       break L40;
      }
     }
     $100 = HEAP32[$79 >> 2] | 0;
     if (!$100) {
      $$066 = $79;
      break;
     } else {
      $$067$phi = $79;
      $79 = $100;
      $$067 = $$067$phi;
     }
    }
   } while (0);
   HEAP32[$$05687 >> 2] = HEAP32[$$066 >> 2];
   HEAP32[$$066 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($33 << 2) >> 2] >> 2];
   HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($33 << 2) >> 2] >> 2] = $$05589;
   $$1 = $$05488;
   $$157 = $$05687;
  } while (0);
  $$05589 = HEAP32[$$157 >> 2] | 0;
  if (!$$05589) break; else {
   $$05488 = $$1;
   $$05687 = $$157;
  }
 }
 return;
}

function __ZN3sgl14Renderer2D_ES26SubmitERNS_12Renderable2DE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $105 = 0, $109 = 0, $110 = 0, $111 = 0, $12 = 0.0, $16 = 0.0, $17 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $50 = 0, $55 = 0, $56 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $71 = 0, $76 = 0, $77 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $92 = 0, $97 = 0, $98 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $2 = sp;
 $4 = $1 + 8 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $12 = +HEAPF32[$1 >> 2] + (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $16 = +HEAPF32[$1 + 4 >> 2];
 $17 = +HEAPF32[$1 + 12 >> 2] + $16;
 $19 = $16 + (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $20 = $0 + 168 | 0;
 HEAP32[$2 >> 2] = $6;
 HEAP32[$2 + 4 >> 2] = $9;
 HEAPF32[$2 + 8 >> 2] = 1.0;
 $21 = $2 + 12 | 0;
 $22 = $1 + 16 | 0;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$21 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
 HEAP32[$21 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
 HEAP32[$21 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
 $24 = $1 + 32 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $31 = HEAP32[$26 + 4 >> 2] | 0;
 $32 = $2 + 28 | 0;
 HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$32 + 4 >> 2] = $31;
 $37 = $1 + 44 | 0;
 HEAP32[$2 + 36 >> 2] = HEAP32[$37 >> 2];
 $39 = $0 + 172 | 0;
 $40 = HEAP32[$39 >> 2] | 0;
 $41 = $0 + 176 | 0;
 if ($40 >>> 0 < (HEAP32[$41 >> 2] | 0) >>> 0) {
  dest = $40;
  src = $2;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $45 = (HEAP32[$39 >> 2] | 0) + 40 | 0;
  HEAP32[$39 >> 2] = $45;
  $63 = $45;
 } else {
  __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($20, $2);
  $63 = HEAP32[$39 >> 2] | 0;
 }
 HEAPF32[$2 >> 2] = $12;
 HEAP32[$2 + 4 >> 2] = $9;
 HEAPF32[$2 + 8 >> 2] = 1.0;
 $46 = $2 + 12 | 0;
 HEAP32[$46 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$46 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
 HEAP32[$46 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
 HEAP32[$46 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
 $50 = (HEAP32[$24 >> 2] | 0) + 8 | 0;
 $55 = HEAP32[$50 + 4 >> 2] | 0;
 $56 = $2 + 28 | 0;
 HEAP32[$56 >> 2] = HEAP32[$50 >> 2];
 HEAP32[$56 + 4 >> 2] = $55;
 HEAP32[$2 + 36 >> 2] = HEAP32[$37 >> 2];
 if ($63 >>> 0 < (HEAP32[$41 >> 2] | 0) >>> 0) {
  dest = $63;
  src = $2;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $66 = (HEAP32[$39 >> 2] | 0) + 40 | 0;
  HEAP32[$39 >> 2] = $66;
  $84 = $66;
 } else {
  __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($20, $2);
  $84 = HEAP32[$39 >> 2] | 0;
 }
 HEAPF32[$2 >> 2] = $12;
 HEAPF32[$2 + 4 >> 2] = $17;
 HEAPF32[$2 + 8 >> 2] = 1.0;
 $67 = $2 + 12 | 0;
 HEAP32[$67 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$67 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
 HEAP32[$67 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
 HEAP32[$67 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
 $71 = (HEAP32[$24 >> 2] | 0) + 16 | 0;
 $76 = HEAP32[$71 + 4 >> 2] | 0;
 $77 = $2 + 28 | 0;
 HEAP32[$77 >> 2] = HEAP32[$71 >> 2];
 HEAP32[$77 + 4 >> 2] = $76;
 HEAP32[$2 + 36 >> 2] = HEAP32[$37 >> 2];
 if ($84 >>> 0 < (HEAP32[$41 >> 2] | 0) >>> 0) {
  dest = $84;
  src = $2;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $87 = (HEAP32[$39 >> 2] | 0) + 40 | 0;
  HEAP32[$39 >> 2] = $87;
  $105 = $87;
 } else {
  __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($20, $2);
  $105 = HEAP32[$39 >> 2] | 0;
 }
 HEAP32[$2 >> 2] = $6;
 HEAPF32[$2 + 4 >> 2] = $19;
 HEAPF32[$2 + 8 >> 2] = 1.0;
 $88 = $2 + 12 | 0;
 HEAP32[$88 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$88 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
 HEAP32[$88 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
 HEAP32[$88 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
 $92 = (HEAP32[$24 >> 2] | 0) + 24 | 0;
 $97 = HEAP32[$92 + 4 >> 2] | 0;
 $98 = $2 + 28 | 0;
 HEAP32[$98 >> 2] = HEAP32[$92 >> 2];
 HEAP32[$98 + 4 >> 2] = $97;
 HEAP32[$2 + 36 >> 2] = HEAP32[$37 >> 2];
 if ($105 >>> 0 < (HEAP32[$41 >> 2] | 0) >>> 0) {
  dest = $105;
  src = $2;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 40;
  $109 = $0 + 152 | 0;
  $110 = HEAP32[$109 >> 2] | 0;
  $111 = $110 + 6 | 0;
  HEAP32[$109 >> 2] = $111;
  STACKTOP = sp;
  return;
 } else {
  __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($20, $2);
  $109 = $0 + 152 | 0;
  $110 = HEAP32[$109 >> 2] | 0;
  $111 = $110 + 6 | 0;
  HEAP32[$109 >> 2] = $111;
  STACKTOP = sp;
  return;
 }
}

function __ZN6spdlog7details8registryC2Ev($0) {
 $0 = $0 | 0;
 var $$016$i$i13 = 0, $$017$i$i14 = 0, $1 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $54 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $84 = 0, $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer = sp;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 8 | 0;
 $4 = $0 + 56 | 0;
 dest = $0;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__215recursive_mutexC2Ev($4);
 $5 = $0 + 84 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$0 + 100 >> 2] = 1065353216;
 $8 = __Znwm(104) | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $9 = $1 + 11 | 0;
 HEAP8[$9 >> 0] = 1;
 HEAP8[$1 >> 0] = 10;
 HEAP8[$1 + 1 >> 0] = 0;
 __ZN6spdlog17pattern_formatterC2ENS_17pattern_time_typeENSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($8, 0, $1);
 HEAP32[$0 + 104 >> 2] = $8;
 if ((HEAP8[$9 >> 0] | 0) < 0) __ZdlPv(HEAP32[$1 >> 2] | 0);
 HEAP32[$0 + 108 >> 2] = 2;
 HEAP32[$0 + 112 >> 2] = 6;
 HEAP32[$0 + 136 >> 2] = 0;
 $18 = $0 + 144 | 0;
 $19 = $0 + 156 | 0;
 $20 = $0 + 160 | 0;
 HEAP32[$18 >> 2] = 0;
 HEAP32[$18 + 4 >> 2] = 0;
 HEAP32[$18 + 8 >> 2] = 0;
 HEAP32[$18 + 12 >> 2] = 0;
 HEAP32[$18 + 16 >> 2] = 0;
 HEAP8[$0 + 164 >> 0] = 1;
 $22 = __Znwm(344) | 0;
 HEAP32[$22 + 4 >> 2] = 0;
 HEAP32[$22 + 8 >> 2] = 0;
 HEAP32[$22 >> 2] = 9844;
 $25 = $22 + 12 | 0;
 __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEEC2Ev($25);
 $26 = $2 + 4 | 0;
 HEAP32[$2 >> 2] = $25;
 HEAP32[$26 >> 2] = $22;
 HEAP32[$vararg_buffer >> 2] = $25;
 HEAP32[$vararg_buffer + 4 >> 2] = $25;
 __ZNSt3__210shared_ptrIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEEE18__enable_weak_thisEz($2, $vararg_buffer);
 HEAP32[$vararg_buffer >> 2] = 33137;
 __ZNSt3__210shared_ptrIN6spdlog6loggerEE11make_sharedIJRPKcNS0_INS1_5sinks14ansicolor_sinkINS1_7details14console_stdoutENSA_13console_mutexEEEEEEEES3_DpOT_($3, $vararg_buffer, $2);
 $27 = HEAP32[$3 >> 2] | 0;
 $28 = $3 + 4 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$28 >> 2] = 0;
 HEAP32[$19 >> 2] = $27;
 $30 = HEAP32[$20 >> 2] | 0;
 HEAP32[$20 >> 2] = $29;
 if ($30 | 0) {
  $32 = $30 + 4 | 0;
  $33 = HEAP32[$32 >> 2] | 0;
  HEAP32[$32 >> 2] = $33 + -1;
  if (!$33) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 255]($30);
   __ZNSt3__219__shared_weak_count14__release_weakEv($30);
  }
 }
 $39 = HEAP32[$28 >> 2] | 0;
 if ($39 | 0) {
  $41 = $39 + 4 | 0;
  $42 = HEAP32[$41 >> 2] | 0;
  HEAP32[$41 >> 2] = $42 + -1;
  if (!$42) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$39 >> 2] | 0) + 8 >> 2] & 255]($39);
   __ZNSt3__219__shared_weak_count14__release_weakEv($39);
  }
 }
 $48 = HEAP32[$vararg_buffer >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $49 = _strlen($48) | 0;
 if ($49 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($3);
 if ($49 >>> 0 < 11) {
  HEAP8[$3 + 11 >> 0] = $49;
  if (!$49) $$017$i$i14 = $3; else {
   $$016$i$i13 = $3;
   label = 14;
  }
 } else {
  $53 = $49 + 16 & -16;
  $54 = __Znwm($53) | 0;
  HEAP32[$3 >> 2] = $54;
  HEAP32[$3 + 8 >> 2] = $53 | -2147483648;
  HEAP32[$3 + 4 >> 2] = $49;
  $$016$i$i13 = $54;
  label = 14;
 }
 if ((label | 0) == 14) {
  _memcpy($$016$i$i13 | 0, $48 | 0, $49 | 0) | 0;
  $$017$i$i14 = $$016$i$i13;
 }
 HEAP8[$$017$i$i14 + $49 >> 0] = 0;
 $62 = __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEEixEOS6_($5, $3) | 0;
 $63 = HEAP32[$19 >> 2] | 0;
 $64 = HEAP32[$20 >> 2] | 0;
 if ($64 | 0) {
  $67 = $64 + 4 | 0;
  HEAP32[$67 >> 2] = (HEAP32[$67 >> 2] | 0) + 1;
 }
 HEAP32[$62 >> 2] = $63;
 $70 = $62 + 4 | 0;
 $71 = HEAP32[$70 >> 2] | 0;
 HEAP32[$70 >> 2] = $64;
 if ($71 | 0) {
  $73 = $71 + 4 | 0;
  $74 = HEAP32[$73 >> 2] | 0;
  HEAP32[$73 >> 2] = $74 + -1;
  if (!$74) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$71 >> 2] | 0) + 8 >> 2] & 255]($71);
   __ZNSt3__219__shared_weak_count14__release_weakEv($71);
  }
 }
 if ((HEAP8[$3 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$3 >> 2] | 0);
 $84 = HEAP32[$26 >> 2] | 0;
 if (!$84) {
  STACKTOP = sp;
  return;
 }
 $86 = $84 + 4 | 0;
 $87 = HEAP32[$86 >> 2] | 0;
 HEAP32[$86 >> 2] = $87 + -1;
 if ($87 | 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$84 >> 2] | 0) + 8 >> 2] & 255]($84);
 __ZNSt3__219__shared_weak_count14__release_weakEv($84);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy3 = 0, $10 = 0, $103 = 0, $105 = 0, $106 = 0, $111 = 0, $112 = 0, $115 = 0, $121 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $138 = 0, $18 = 0, $20 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $54 = 0, $55 = 0, $59 = 0, $61 = 0, $67 = 0, $7 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $94 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy3 = sp + 12 | 0;
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $30 = $18 + $20 | 0;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  $35 = HEAP32[$2 + 20 >> 2] | 0;
  $37 = HEAP32[$2 + 24 >> 2] | 0;
  $38 = $3;
  HEAP32[$38 >> 2] = $2 + 28;
  HEAP32[$38 + 4 >> 2] = 1;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($30 + $26 | 0, $35, $37, $$byval_copy3) | 0;
  STACKTOP = sp;
  return;
 }
 $43 = $9 + $4 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $43 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $43);
 HEAP32[$8 >> 2] = $43;
 $51 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $54 = HEAP32[$1 + 4 >> 2] & 255;
 $55 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($55 | 0) _memset($51 | 0, $54 | 0, $55 | 0) | 0;
   $59 = $51 + $55 | 0;
   $61 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$61) $71 = $59; else {
    _memmove($59 | 0, HEAP32[$2 + 4 >> 2] | 0, $61 | 0) | 0;
    $71 = $59 + $61 | 0;
   }
   $67 = HEAP32[$2 + 16 >> 2] | 0;
   if ($67 | 0) _memset($71 | 0, HEAP8[$2 + 12 >> 0] | 0, $67 | 0) | 0;
   $76 = HEAP32[$2 + 20 >> 2] | 0;
   $78 = HEAP32[$2 + 24 >> 2] | 0;
   $79 = $3;
   HEAP32[$79 >> 2] = $2 + 28;
   HEAP32[$79 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($71 + $67 | 0, $76, $78, $$byval_copy3) | 0;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $84 = $55 >>> 1;
   if ($84 | 0) _memset($51 | 0, $54 | 0, $84 | 0) | 0;
   $86 = $51 + $84 | 0;
   $88 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$88) $98 = $86; else {
    _memmove($86 | 0, HEAP32[$2 + 4 >> 2] | 0, $88 | 0) | 0;
    $98 = $86 + $88 | 0;
   }
   $94 = HEAP32[$2 + 16 >> 2] | 0;
   if ($94 | 0) _memset($98 | 0, HEAP8[$2 + 12 >> 0] | 0, $94 | 0) | 0;
   $103 = HEAP32[$2 + 20 >> 2] | 0;
   $105 = HEAP32[$2 + 24 >> 2] | 0;
   $106 = $3;
   HEAP32[$106 >> 2] = $2 + 28;
   HEAP32[$106 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $111 = __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($98 + $94 | 0, $103, $105, $$byval_copy3) | 0;
   $112 = $55 - $84 | 0;
   if (!$112) {
    STACKTOP = sp;
    return;
   }
   _memset($111 | 0, $54 | 0, $112 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $115 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$115) $125 = $51; else {
    _memmove($51 | 0, HEAP32[$2 + 4 >> 2] | 0, $115 | 0) | 0;
    $125 = $51 + $115 | 0;
   }
   $121 = HEAP32[$2 + 16 >> 2] | 0;
   if ($121 | 0) _memset($125 | 0, HEAP8[$2 + 12 >> 0] | 0, $121 | 0) | 0;
   $130 = HEAP32[$2 + 20 >> 2] | 0;
   $132 = HEAP32[$2 + 24 >> 2] | 0;
   $133 = $3;
   HEAP32[$133 >> 2] = $2 + 28;
   HEAP32[$133 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $138 = __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($125 + $121 | 0, $130, $132, $$byval_copy3) | 0;
   if (!$55) {
    STACKTOP = sp;
    return;
   }
   _memset($138 | 0, $54 | 0, $55 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy3 = 0, $10 = 0, $103 = 0, $105 = 0, $106 = 0, $111 = 0, $112 = 0, $115 = 0, $121 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $138 = 0, $18 = 0, $20 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $54 = 0, $55 = 0, $59 = 0, $61 = 0, $67 = 0, $7 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $94 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy3 = sp + 12 | 0;
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $30 = $18 + $20 | 0;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  $35 = HEAP32[$2 + 20 >> 2] | 0;
  $37 = HEAP32[$2 + 24 >> 2] | 0;
  $38 = $3;
  HEAP32[$38 >> 2] = $2 + 28;
  HEAP32[$38 + 4 >> 2] = 1;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($30 + $26 | 0, $35, $37, $$byval_copy3) | 0;
  STACKTOP = sp;
  return;
 }
 $43 = $9 + $4 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $43 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $43);
 HEAP32[$8 >> 2] = $43;
 $51 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $54 = HEAP32[$1 + 4 >> 2] & 255;
 $55 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($55 | 0) _memset($51 | 0, $54 | 0, $55 | 0) | 0;
   $59 = $51 + $55 | 0;
   $61 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$61) $71 = $59; else {
    _memmove($59 | 0, HEAP32[$2 + 4 >> 2] | 0, $61 | 0) | 0;
    $71 = $59 + $61 | 0;
   }
   $67 = HEAP32[$2 + 16 >> 2] | 0;
   if ($67 | 0) _memset($71 | 0, HEAP8[$2 + 12 >> 0] | 0, $67 | 0) | 0;
   $76 = HEAP32[$2 + 20 >> 2] | 0;
   $78 = HEAP32[$2 + 24 >> 2] | 0;
   $79 = $3;
   HEAP32[$79 >> 2] = $2 + 28;
   HEAP32[$79 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($71 + $67 | 0, $76, $78, $$byval_copy3) | 0;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $84 = $55 >>> 1;
   if ($84 | 0) _memset($51 | 0, $54 | 0, $84 | 0) | 0;
   $86 = $51 + $84 | 0;
   $88 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$88) $98 = $86; else {
    _memmove($86 | 0, HEAP32[$2 + 4 >> 2] | 0, $88 | 0) | 0;
    $98 = $86 + $88 | 0;
   }
   $94 = HEAP32[$2 + 16 >> 2] | 0;
   if ($94 | 0) _memset($98 | 0, HEAP8[$2 + 12 >> 0] | 0, $94 | 0) | 0;
   $103 = HEAP32[$2 + 20 >> 2] | 0;
   $105 = HEAP32[$2 + 24 >> 2] | 0;
   $106 = $3;
   HEAP32[$106 >> 2] = $2 + 28;
   HEAP32[$106 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $111 = __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($98 + $94 | 0, $103, $105, $$byval_copy3) | 0;
   $112 = $55 - $84 | 0;
   if (!$112) {
    STACKTOP = sp;
    return;
   }
   _memset($111 | 0, $54 | 0, $112 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $115 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$115) $125 = $51; else {
    _memmove($51 | 0, HEAP32[$2 + 4 >> 2] | 0, $115 | 0) | 0;
    $125 = $51 + $115 | 0;
   }
   $121 = HEAP32[$2 + 16 >> 2] | 0;
   if ($121 | 0) _memset($125 | 0, HEAP8[$2 + 12 >> 0] | 0, $121 | 0) | 0;
   $130 = HEAP32[$2 + 20 >> 2] | 0;
   $132 = HEAP32[$2 + 24 >> 2] | 0;
   $133 = $3;
   HEAP32[$133 >> 2] = $2 + 28;
   HEAP32[$133 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $138 = __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($125 + $121 | 0, $130, $132, $$byval_copy3) | 0;
   if (!$55) {
    STACKTOP = sp;
    return;
   }
   _memset($138 | 0, $54 | 0, $55 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy3 = 0, $10 = 0, $103 = 0, $105 = 0, $106 = 0, $111 = 0, $112 = 0, $115 = 0, $121 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $138 = 0, $18 = 0, $20 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $54 = 0, $55 = 0, $59 = 0, $61 = 0, $67 = 0, $7 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $94 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy3 = sp + 12 | 0;
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $30 = $18 + $20 | 0;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  $35 = HEAP32[$2 + 20 >> 2] | 0;
  $37 = HEAP32[$2 + 24 >> 2] | 0;
  $38 = $3;
  HEAP32[$38 >> 2] = $2 + 28;
  HEAP32[$38 + 4 >> 2] = 1;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($30 + $26 | 0, $35, $37, $$byval_copy3) | 0;
  STACKTOP = sp;
  return;
 }
 $43 = $9 + $4 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $43 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $43);
 HEAP32[$8 >> 2] = $43;
 $51 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $54 = HEAP32[$1 + 4 >> 2] & 255;
 $55 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($55 | 0) _memset($51 | 0, $54 | 0, $55 | 0) | 0;
   $59 = $51 + $55 | 0;
   $61 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$61) $71 = $59; else {
    _memmove($59 | 0, HEAP32[$2 + 4 >> 2] | 0, $61 | 0) | 0;
    $71 = $59 + $61 | 0;
   }
   $67 = HEAP32[$2 + 16 >> 2] | 0;
   if ($67 | 0) _memset($71 | 0, HEAP8[$2 + 12 >> 0] | 0, $67 | 0) | 0;
   $76 = HEAP32[$2 + 20 >> 2] | 0;
   $78 = HEAP32[$2 + 24 >> 2] | 0;
   $79 = $3;
   HEAP32[$79 >> 2] = $2 + 28;
   HEAP32[$79 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($71 + $67 | 0, $76, $78, $$byval_copy3) | 0;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $84 = $55 >>> 1;
   if ($84 | 0) _memset($51 | 0, $54 | 0, $84 | 0) | 0;
   $86 = $51 + $84 | 0;
   $88 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$88) $98 = $86; else {
    _memmove($86 | 0, HEAP32[$2 + 4 >> 2] | 0, $88 | 0) | 0;
    $98 = $86 + $88 | 0;
   }
   $94 = HEAP32[$2 + 16 >> 2] | 0;
   if ($94 | 0) _memset($98 | 0, HEAP8[$2 + 12 >> 0] | 0, $94 | 0) | 0;
   $103 = HEAP32[$2 + 20 >> 2] | 0;
   $105 = HEAP32[$2 + 24 >> 2] | 0;
   $106 = $3;
   HEAP32[$106 >> 2] = $2 + 28;
   HEAP32[$106 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $111 = __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($98 + $94 | 0, $103, $105, $$byval_copy3) | 0;
   $112 = $55 - $84 | 0;
   if (!$112) {
    STACKTOP = sp;
    return;
   }
   _memset($111 | 0, $54 | 0, $112 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $115 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$115) $125 = $51; else {
    _memmove($51 | 0, HEAP32[$2 + 4 >> 2] | 0, $115 | 0) | 0;
    $125 = $51 + $115 | 0;
   }
   $121 = HEAP32[$2 + 16 >> 2] | 0;
   if ($121 | 0) _memset($125 | 0, HEAP8[$2 + 12 >> 0] | 0, $121 | 0) | 0;
   $130 = HEAP32[$2 + 20 >> 2] | 0;
   $132 = HEAP32[$2 + 24 >> 2] | 0;
   $133 = $3;
   HEAP32[$133 >> 2] = $2 + 28;
   HEAP32[$133 + 4 >> 2] = 1;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $138 = __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($125 + $121 | 0, $130, $132, $$byval_copy3) | 0;
   if (!$55) {
    STACKTOP = sp;
    return;
   }
   _memset($138 | 0, $54 | 0, $55 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN3fmt2v58internal12parse_arg_idIcNS1_10id_adapterIRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS8_EEcEEEEcEEEEPKT_SL_SL_OT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$027$i = 0, $$045 = 0, $$1 = 0, $$lcssa = 0, $$lcssa49 = 0, $11 = 0, $14 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$i$i$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $tmpcast$i$i$byval_copy = sp + 24 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 if (($0 | 0) == ($1 | 0)) ___assert_fail(17732, 17437, 1788, 17745);
 $6 = HEAP8[$0 >> 0] | 0;
 switch ($6 << 24 >> 24) {
 case 58:
 case 125:
  {
   $7 = HEAP32[$2 >> 2] | 0;
   $8 = $7 + 16 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   if (($9 | 0) <= -1) {
    $11 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($11, 17285);
    ___cxa_throw($11 | 0, 6792, 18);
   }
   HEAP32[$8 >> 2] = $9 + 1;
   __ZN3fmt2v58internal12context_baseINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEENS0_20basic_format_contextIS7_cEEcE10do_get_argEj($tmpcast$i$i$byval_copy, $7 + 8 | 0, $9);
   $14 = $7 + 56 | 0;
   HEAP32[$14 >> 2] = HEAP32[$tmpcast$i$i$byval_copy >> 2];
   HEAP32[$14 + 4 >> 2] = HEAP32[$tmpcast$i$i$byval_copy + 4 >> 2];
   HEAP32[$14 + 8 >> 2] = HEAP32[$tmpcast$i$i$byval_copy + 8 >> 2];
   $$1 = $0;
   STACKTOP = sp;
   return $$1 | 0;
  }
 default:
  {}
 }
 if (($6 + -48 & 255) >= 10) {
  if (!($6 << 24 >> 24 == 95 | (($6 & -33) + -65 & 255) < 26)) {
   $46 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($46, 17126);
   ___cxa_throw($46 | 0, 6792, 18);
  }
  $47 = $0 + 1 | 0;
  L16 : do if (($47 | 0) == ($1 | 0)) $$lcssa49 = $1; else {
   $50 = $47;
   while (1) {
    $49 = HEAP8[$50 >> 0] | 0;
    if (!($49 << 24 >> 24 == 95 | (($49 & -33) + -65 & 255) < 26 | ($49 + -48 & 255) < 10)) {
     $$lcssa49 = $50;
     break L16;
    }
    $50 = $50 + 1 | 0;
    if (($50 | 0) == ($1 | 0)) {
     $$lcssa49 = $1;
     break;
    }
   }
  } while (0);
  $60 = $0;
  $61 = $$lcssa49 - $60 | 0;
  if (($61 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $63 = HEAP32[$2 >> 2] | 0;
  HEAP32[$4 >> 2] = $60;
  HEAP32[$4 + 4 >> 2] = $61;
  HEAP32[$tmpcast$i$i$byval_copy >> 2] = HEAP32[$4 >> 2];
  HEAP32[$tmpcast$i$i$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  __ZN3fmt2v520basic_format_contextINSt3__220back_insert_iteratorINS0_8internal12basic_bufferIcEEEEcE7get_argENS0_17basic_string_viewIcEE($3, $63 + 8 | 0, $tmpcast$i$i$byval_copy);
  $65 = $63 + 56 | 0;
  HEAP32[$65 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$65 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$65 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$1 = $$lcssa49;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if ($6 << 24 >> 24 == 48) {
  $$0$i = 0;
  $$045 = $0 + 1 | 0;
 } else {
  $$027$i = 0;
  $21 = $6;
  $25 = $0;
  while (1) {
   if ($$027$i >>> 0 > 214748364) {
    label = 15;
    break;
   }
   $$027$i = ($21 << 24 >> 24) + -48 + ($$027$i * 10 | 0) | 0;
   $24 = $25 + 1 | 0;
   if (($24 | 0) == ($1 | 0)) {
    $$lcssa = $1;
    break;
   }
   $21 = HEAP8[$24 >> 0] | 0;
   if (($21 + -48 & 255) >= 10) {
    $$lcssa = $24;
    break;
   } else $25 = $24;
  }
  if ((label | 0) == 15) {
   $30 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($30, 17827);
   ___cxa_throw($30 | 0, 6792, 18);
  }
  if (($$027$i | 0) < 0) {
   $30 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($30, 17827);
   ___cxa_throw($30 | 0, 6792, 18);
  } else {
   $$0$i = $$027$i;
   $$045 = $$lcssa;
  }
 }
 if (($$045 | 0) == ($1 | 0)) {
  $33 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($33, 17126);
  ___cxa_throw($33 | 0, 6792, 18);
 }
 switch (HEAP8[$$045 >> 0] | 0) {
 case 58:
 case 125:
  break;
 default:
  {
   $33 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($33, 17126);
   ___cxa_throw($33 | 0, 6792, 18);
  }
 }
 $34 = HEAP32[$2 >> 2] | 0;
 $35 = $34 + 16 | 0;
 if ((HEAP32[$35 >> 2] | 0) > 0) {
  $38 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($38, 17845);
  ___cxa_throw($38 | 0, 6792, 18);
 }
 HEAP32[$35 >> 2] = -1;
 __ZN3fmt2v58internal12context_baseINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEENS0_20basic_format_contextIS7_cEEcE10do_get_argEj($tmpcast$i$i$byval_copy, $34 + 8 | 0, $$0$i);
 $40 = $34 + 56 | 0;
 HEAP32[$40 >> 2] = HEAP32[$tmpcast$i$i$byval_copy >> 2];
 HEAP32[$40 + 4 >> 2] = HEAP32[$tmpcast$i$i$byval_copy + 4 >> 2];
 HEAP32[$40 + 8 >> 2] = HEAP32[$tmpcast$i$i$byval_copy + 8 >> 2];
 $$1 = $$045;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i39 = 0, $$0$i$i41 = 0, $$037 = 0, $$038 = 0, $$byval_copy = 0, $$sink72 = 0, $$sink73 = 0, $$sink74 = 0, $$sroa$050$0 = 0, $$sroa$058$0 = 0, $$sroa$067$0 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $32 = 0, $33 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $63 = 0, $7 = 0, $73 = 0, $8 = 0, $81 = 0, $89 = 0, $9 = 0, $92 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(992);
 $$byval_copy = sp + 912 | 0;
 $vararg_buffer1 = sp + 904 | 0;
 $6 = sp + 800 | 0;
 $7 = sp + 984 | 0;
 $8 = sp + 400 | 0;
 $9 = sp + 980 | 0;
 $10 = sp + 988 | 0;
 $11 = sp + 976 | 0;
 $12 = sp + 972 | 0;
 $13 = sp + 960 | 0;
 $14 = sp + 948 | 0;
 $15 = sp + 936 | 0;
 $16 = sp + 932 | 0;
 $17 = sp;
 $18 = sp + 928 | 0;
 $19 = sp + 920 | 0;
 $20 = sp + 924 | 0;
 HEAP32[$7 >> 2] = $6;
 HEAPF64[$$byval_copy >> 3] = $5;
 $21 = _snprintf($6, 100, 24910, $$byval_copy) | 0;
 if ($21 >>> 0 > 99) {
  $23 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $5;
  $24 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $23, 24910, $vararg_buffer1) | 0;
  $25 = HEAP32[$7 >> 2] | 0;
  if (!$25) __ZSt17__throw_bad_allocv();
  $29 = _malloc($24 << 2) | 0;
  if (!$29) __ZSt17__throw_bad_allocv(); else {
   $$0 = $29;
   $$038 = $24;
   $$sroa$058$0 = $29;
   $$sroa$067$0 = $25;
  }
 } else {
  $$0 = $8;
  $$038 = $21;
  $$sroa$058$0 = 0;
  $$sroa$067$0 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv($9, $3);
 $32 = __ZNKSt3__26locale9use_facetERNS0_2idE($9, 32720) | 0;
 $33 = HEAP32[$7 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$32 >> 2] | 0) + 48 >> 2] & 7]($32, $33, $33 + $$038 | 0, $$0) | 0;
 if (!$$038) $48 = 0; else $48 = (HEAP8[HEAP32[$7 >> 2] >> 0] | 0) == 45;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$13 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$14 + 8 >> 2] = 0;
 $$0$i$i39 = 0;
 while (1) {
  if (($$0$i$i39 | 0) == 3) break;
  HEAP32[$14 + ($$0$i$i39 << 2) >> 2] = 0;
  $$0$i$i39 = $$0$i$i39 + 1 | 0;
 }
 HEAP32[$15 >> 2] = 0;
 HEAP32[$15 + 4 >> 2] = 0;
 HEAP32[$15 + 8 >> 2] = 0;
 $$0$i$i41 = 0;
 while (1) {
  if (($$0$i$i41 | 0) == 3) break;
  HEAP32[$15 + ($$0$i$i41 << 2) >> 2] = 0;
  $$0$i$i41 = $$0$i$i41 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($2, $48, $9, $10, $11, $12, $13, $14, $15, $16);
 $49 = HEAP32[$16 >> 2] | 0;
 if (($$038 | 0) > ($49 | 0)) {
  $55 = HEAP8[$15 + 8 + 3 >> 0] | 0;
  $63 = HEAP8[$14 + 8 + 3 >> 0] | 0;
  $$sink72 = $63 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $63 & 255;
  $$sink73 = $49 + 1 + ($$038 - $49 << 1) | 0;
  $$sink74 = $55 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $55 & 255;
 } else {
  $73 = HEAP8[$15 + 8 + 3 >> 0] | 0;
  $81 = HEAP8[$14 + 8 + 3 >> 0] | 0;
  $$sink72 = $81 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $81 & 255;
  $$sink73 = $49 + 2 | 0;
  $$sink74 = $73 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $73 & 255;
 }
 $89 = $$sink73 + $$sink74 + $$sink72 | 0;
 if ($89 >>> 0 > 100) {
  $92 = _malloc($89 << 2) | 0;
  if (!$92) __ZSt17__throw_bad_allocv(); else {
   $$037 = $92;
   $$sroa$050$0 = $92;
  }
 } else {
  $$037 = $17;
  $$sroa$050$0 = 0;
 }
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($$037, $18, $19, HEAP32[$3 + 4 >> 2] | 0, $$0, $$0 + ($$038 << 2) | 0, $32, $48, $10, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, $13, $14, $15, $49);
 HEAP32[$20 >> 2] = HEAP32[$1 >> 2];
 $101 = HEAP32[$18 >> 2] | 0;
 $102 = HEAP32[$19 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2];
 $103 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $$037, $101, $102, $3, $4) | 0;
 if ($$sroa$050$0 | 0) _free($$sroa$050$0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 __ZNSt3__26localeD2Ev($9);
 if ($$sroa$058$0 | 0) _free($$sroa$058$0);
 if ($$sroa$067$0 | 0) _free($$sroa$067$0);
 STACKTOP = sp;
 return $103 | 0;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerImNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$0$i$i$i64 = 0, $$0$i$i$i73 = 0, $$014$i$i$i = 0, $$014$i$i$i54 = 0, $$014$i$i$i63 = 0, $$014$i$i$i72 = 0, $$str$33$$str$34$i$i$i = 0, $$str$33$$str$34$i$i$i52 = 0, $$str$33$$str$34$i$i$i61 = 0, $$str$33$$str$34$i$i$i70 = 0, $101 = 0, $107 = 0, $111 = 0, $114 = 0, $124 = 0, $131 = 0, $134 = 0, $140 = 0, $144 = 0, $147 = 0, $157 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $80 = 0, $9 = 0, $97 = 0, $99 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = HEAP32[$2 + 20 >> 2] | 0;
  $$str$33$$str$34$i$i$i70 = (HEAP8[(HEAP32[$32 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
  $$0$i$i$i73 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$014$i$i$i72 = HEAP32[$32 + 8 >> 2] | 0;
  do {
   $$0$i$i$i73 = $$0$i$i$i73 + -1 | 0;
   HEAP8[$$0$i$i$i73 >> 0] = HEAP8[$$str$33$$str$34$i$i$i70 + ($$014$i$i$i72 & 15) >> 0] | 0;
   $$014$i$i$i72 = $$014$i$i$i72 >>> 4;
  } while (($$014$i$i$i72 | 0) != 0);
  return;
 }
 $49 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $49 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $49);
 HEAP32[$7 >> 2] = $49;
 $57 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $60 = HEAP32[$1 + 4 >> 2] & 255;
 $61 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($61 | 0) _memset($57 | 0, $60 | 0, $61 | 0) | 0;
   $65 = $57 + $61 | 0;
   $67 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$67) $77 = $65; else {
    _memmove($65 | 0, HEAP32[$2 + 4 >> 2] | 0, $67 | 0) | 0;
    $77 = $65 + $67 | 0;
   }
   $73 = HEAP32[$2 + 16 >> 2] | 0;
   if ($73 | 0) _memset($77 | 0, HEAP8[$2 + 12 >> 0] | 0, $73 | 0) | 0;
   $80 = HEAP32[$2 + 20 >> 2] | 0;
   $$str$33$$str$34$i$i$i61 = (HEAP8[(HEAP32[$80 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i64 = $77 + $73 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$014$i$i$i63 = HEAP32[$80 + 8 >> 2] | 0;
   do {
    $$0$i$i$i64 = $$0$i$i$i64 + -1 | 0;
    HEAP8[$$0$i$i$i64 >> 0] = HEAP8[$$str$33$$str$34$i$i$i61 + ($$014$i$i$i63 & 15) >> 0] | 0;
    $$014$i$i$i63 = $$014$i$i$i63 >>> 4;
   } while (($$014$i$i$i63 | 0) != 0);
   return;
  }
 case 3:
  {
   $97 = $61 >>> 1;
   if ($97 | 0) _memset($57 | 0, $60 | 0, $97 | 0) | 0;
   $99 = $57 + $97 | 0;
   $101 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$101) $111 = $99; else {
    _memmove($99 | 0, HEAP32[$2 + 4 >> 2] | 0, $101 | 0) | 0;
    $111 = $99 + $101 | 0;
   }
   $107 = HEAP32[$2 + 16 >> 2] | 0;
   if ($107 | 0) _memset($111 | 0, HEAP8[$2 + 12 >> 0] | 0, $107 | 0) | 0;
   $114 = HEAP32[$2 + 20 >> 2] | 0;
   $124 = $111 + $107 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i52 = (HEAP8[(HEAP32[$114 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i55 = $124;
   $$014$i$i$i54 = HEAP32[$114 + 8 >> 2] | 0;
   do {
    $$0$i$i$i55 = $$0$i$i$i55 + -1 | 0;
    HEAP8[$$0$i$i$i55 >> 0] = HEAP8[$$str$33$$str$34$i$i$i52 + ($$014$i$i$i54 & 15) >> 0] | 0;
    $$014$i$i$i54 = $$014$i$i$i54 >>> 4;
   } while (($$014$i$i$i54 | 0) != 0);
   $131 = $61 - $97 | 0;
   if (!$131) return;
   _memset($124 | 0, $60 | 0, $131 | 0) | 0;
   return;
  }
 default:
  {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$134) $144 = $57; else {
    _memmove($57 | 0, HEAP32[$2 + 4 >> 2] | 0, $134 | 0) | 0;
    $144 = $57 + $134 | 0;
   }
   $140 = HEAP32[$2 + 16 >> 2] | 0;
   if ($140 | 0) _memset($144 | 0, HEAP8[$2 + 12 >> 0] | 0, $140 | 0) | 0;
   $147 = HEAP32[$2 + 20 >> 2] | 0;
   $157 = $144 + $140 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i = (HEAP8[(HEAP32[$147 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i = $157;
   $$014$i$i$i = HEAP32[$147 + 8 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = HEAP8[$$str$33$$str$34$i$i$i + ($$014$i$i$i & 15) >> 0] | 0;
    $$014$i$i$i = $$014$i$i$i >>> 4;
   } while (($$014$i$i$i | 0) != 0);
   if (!$61) return;
   _memset($157 | 0, $60 | 0, $61 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$0$i$i$i64 = 0, $$0$i$i$i73 = 0, $$014$i$i$i = 0, $$014$i$i$i54 = 0, $$014$i$i$i63 = 0, $$014$i$i$i72 = 0, $$str$33$$str$34$i$i$i = 0, $$str$33$$str$34$i$i$i52 = 0, $$str$33$$str$34$i$i$i61 = 0, $$str$33$$str$34$i$i$i70 = 0, $101 = 0, $107 = 0, $111 = 0, $114 = 0, $124 = 0, $131 = 0, $134 = 0, $140 = 0, $144 = 0, $147 = 0, $157 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $80 = 0, $9 = 0, $97 = 0, $99 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = HEAP32[$2 + 20 >> 2] | 0;
  $$str$33$$str$34$i$i$i70 = (HEAP8[(HEAP32[$32 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
  $$0$i$i$i73 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$014$i$i$i72 = HEAP32[$32 + 8 >> 2] | 0;
  do {
   $$0$i$i$i73 = $$0$i$i$i73 + -1 | 0;
   HEAP8[$$0$i$i$i73 >> 0] = HEAP8[$$str$33$$str$34$i$i$i70 + ($$014$i$i$i72 & 15) >> 0] | 0;
   $$014$i$i$i72 = $$014$i$i$i72 >>> 4;
  } while (($$014$i$i$i72 | 0) != 0);
  return;
 }
 $49 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $49 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $49);
 HEAP32[$7 >> 2] = $49;
 $57 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $60 = HEAP32[$1 + 4 >> 2] & 255;
 $61 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($61 | 0) _memset($57 | 0, $60 | 0, $61 | 0) | 0;
   $65 = $57 + $61 | 0;
   $67 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$67) $77 = $65; else {
    _memmove($65 | 0, HEAP32[$2 + 4 >> 2] | 0, $67 | 0) | 0;
    $77 = $65 + $67 | 0;
   }
   $73 = HEAP32[$2 + 16 >> 2] | 0;
   if ($73 | 0) _memset($77 | 0, HEAP8[$2 + 12 >> 0] | 0, $73 | 0) | 0;
   $80 = HEAP32[$2 + 20 >> 2] | 0;
   $$str$33$$str$34$i$i$i61 = (HEAP8[(HEAP32[$80 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i64 = $77 + $73 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$014$i$i$i63 = HEAP32[$80 + 8 >> 2] | 0;
   do {
    $$0$i$i$i64 = $$0$i$i$i64 + -1 | 0;
    HEAP8[$$0$i$i$i64 >> 0] = HEAP8[$$str$33$$str$34$i$i$i61 + ($$014$i$i$i63 & 15) >> 0] | 0;
    $$014$i$i$i63 = $$014$i$i$i63 >>> 4;
   } while (($$014$i$i$i63 | 0) != 0);
   return;
  }
 case 3:
  {
   $97 = $61 >>> 1;
   if ($97 | 0) _memset($57 | 0, $60 | 0, $97 | 0) | 0;
   $99 = $57 + $97 | 0;
   $101 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$101) $111 = $99; else {
    _memmove($99 | 0, HEAP32[$2 + 4 >> 2] | 0, $101 | 0) | 0;
    $111 = $99 + $101 | 0;
   }
   $107 = HEAP32[$2 + 16 >> 2] | 0;
   if ($107 | 0) _memset($111 | 0, HEAP8[$2 + 12 >> 0] | 0, $107 | 0) | 0;
   $114 = HEAP32[$2 + 20 >> 2] | 0;
   $124 = $111 + $107 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i52 = (HEAP8[(HEAP32[$114 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i55 = $124;
   $$014$i$i$i54 = HEAP32[$114 + 8 >> 2] | 0;
   do {
    $$0$i$i$i55 = $$0$i$i$i55 + -1 | 0;
    HEAP8[$$0$i$i$i55 >> 0] = HEAP8[$$str$33$$str$34$i$i$i52 + ($$014$i$i$i54 & 15) >> 0] | 0;
    $$014$i$i$i54 = $$014$i$i$i54 >>> 4;
   } while (($$014$i$i$i54 | 0) != 0);
   $131 = $61 - $97 | 0;
   if (!$131) return;
   _memset($124 | 0, $60 | 0, $131 | 0) | 0;
   return;
  }
 default:
  {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$134) $144 = $57; else {
    _memmove($57 | 0, HEAP32[$2 + 4 >> 2] | 0, $134 | 0) | 0;
    $144 = $57 + $134 | 0;
   }
   $140 = HEAP32[$2 + 16 >> 2] | 0;
   if ($140 | 0) _memset($144 | 0, HEAP8[$2 + 12 >> 0] | 0, $140 | 0) | 0;
   $147 = HEAP32[$2 + 20 >> 2] | 0;
   $157 = $144 + $140 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i = (HEAP8[(HEAP32[$147 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i = $157;
   $$014$i$i$i = HEAP32[$147 + 8 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = HEAP8[$$str$33$$str$34$i$i$i + ($$014$i$i$i & 15) >> 0] | 0;
    $$014$i$i$i = $$014$i$i$i >>> 4;
   } while (($$014$i$i$i | 0) != 0);
   if (!$61) return;
   _memset($157 | 0, $60 | 0, $61 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$0$i$i$i64 = 0, $$0$i$i$i73 = 0, $$014$i$i$i = 0, $$014$i$i$i54 = 0, $$014$i$i$i63 = 0, $$014$i$i$i72 = 0, $$str$33$$str$34$i$i$i = 0, $$str$33$$str$34$i$i$i52 = 0, $$str$33$$str$34$i$i$i61 = 0, $$str$33$$str$34$i$i$i70 = 0, $101 = 0, $107 = 0, $111 = 0, $114 = 0, $124 = 0, $131 = 0, $134 = 0, $140 = 0, $144 = 0, $147 = 0, $157 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $80 = 0, $9 = 0, $97 = 0, $99 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = HEAP32[$2 + 20 >> 2] | 0;
  $$str$33$$str$34$i$i$i70 = (HEAP8[(HEAP32[$32 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
  $$0$i$i$i73 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$014$i$i$i72 = HEAP32[$32 + 8 >> 2] | 0;
  do {
   $$0$i$i$i73 = $$0$i$i$i73 + -1 | 0;
   HEAP8[$$0$i$i$i73 >> 0] = HEAP8[$$str$33$$str$34$i$i$i70 + ($$014$i$i$i72 & 15) >> 0] | 0;
   $$014$i$i$i72 = $$014$i$i$i72 >>> 4;
  } while (($$014$i$i$i72 | 0) != 0);
  return;
 }
 $49 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $49 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $49);
 HEAP32[$7 >> 2] = $49;
 $57 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $60 = HEAP32[$1 + 4 >> 2] & 255;
 $61 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($61 | 0) _memset($57 | 0, $60 | 0, $61 | 0) | 0;
   $65 = $57 + $61 | 0;
   $67 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$67) $77 = $65; else {
    _memmove($65 | 0, HEAP32[$2 + 4 >> 2] | 0, $67 | 0) | 0;
    $77 = $65 + $67 | 0;
   }
   $73 = HEAP32[$2 + 16 >> 2] | 0;
   if ($73 | 0) _memset($77 | 0, HEAP8[$2 + 12 >> 0] | 0, $73 | 0) | 0;
   $80 = HEAP32[$2 + 20 >> 2] | 0;
   $$str$33$$str$34$i$i$i61 = (HEAP8[(HEAP32[$80 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i64 = $77 + $73 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$014$i$i$i63 = HEAP32[$80 + 8 >> 2] | 0;
   do {
    $$0$i$i$i64 = $$0$i$i$i64 + -1 | 0;
    HEAP8[$$0$i$i$i64 >> 0] = HEAP8[$$str$33$$str$34$i$i$i61 + ($$014$i$i$i63 & 15) >> 0] | 0;
    $$014$i$i$i63 = $$014$i$i$i63 >>> 4;
   } while (($$014$i$i$i63 | 0) != 0);
   return;
  }
 case 3:
  {
   $97 = $61 >>> 1;
   if ($97 | 0) _memset($57 | 0, $60 | 0, $97 | 0) | 0;
   $99 = $57 + $97 | 0;
   $101 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$101) $111 = $99; else {
    _memmove($99 | 0, HEAP32[$2 + 4 >> 2] | 0, $101 | 0) | 0;
    $111 = $99 + $101 | 0;
   }
   $107 = HEAP32[$2 + 16 >> 2] | 0;
   if ($107 | 0) _memset($111 | 0, HEAP8[$2 + 12 >> 0] | 0, $107 | 0) | 0;
   $114 = HEAP32[$2 + 20 >> 2] | 0;
   $124 = $111 + $107 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i52 = (HEAP8[(HEAP32[$114 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i55 = $124;
   $$014$i$i$i54 = HEAP32[$114 + 8 >> 2] | 0;
   do {
    $$0$i$i$i55 = $$0$i$i$i55 + -1 | 0;
    HEAP8[$$0$i$i$i55 >> 0] = HEAP8[$$str$33$$str$34$i$i$i52 + ($$014$i$i$i54 & 15) >> 0] | 0;
    $$014$i$i$i54 = $$014$i$i$i54 >>> 4;
   } while (($$014$i$i$i54 | 0) != 0);
   $131 = $61 - $97 | 0;
   if (!$131) return;
   _memset($124 | 0, $60 | 0, $131 | 0) | 0;
   return;
  }
 default:
  {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$134) $144 = $57; else {
    _memmove($57 | 0, HEAP32[$2 + 4 >> 2] | 0, $134 | 0) | 0;
    $144 = $57 + $134 | 0;
   }
   $140 = HEAP32[$2 + 16 >> 2] | 0;
   if ($140 | 0) _memset($144 | 0, HEAP8[$2 + 12 >> 0] | 0, $140 | 0) | 0;
   $147 = HEAP32[$2 + 20 >> 2] | 0;
   $157 = $144 + $140 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i = (HEAP8[(HEAP32[$147 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i = $157;
   $$014$i$i$i = HEAP32[$147 + 8 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = HEAP8[$$str$33$$str$34$i$i$i + ($$014$i$i$i & 15) >> 0] | 0;
    $$014$i$i$i = $$014$i$i$i >>> 4;
   } while (($$014$i$i$i | 0) != 0);
   if (!$61) return;
   _memset($157 | 0, $60 | 0, $61 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$0$i$i$i64 = 0, $$0$i$i$i73 = 0, $$014$i$i$i = 0, $$014$i$i$i54 = 0, $$014$i$i$i63 = 0, $$014$i$i$i72 = 0, $$str$33$$str$34$i$i$i = 0, $$str$33$$str$34$i$i$i52 = 0, $$str$33$$str$34$i$i$i61 = 0, $$str$33$$str$34$i$i$i70 = 0, $101 = 0, $107 = 0, $111 = 0, $114 = 0, $124 = 0, $131 = 0, $134 = 0, $140 = 0, $144 = 0, $147 = 0, $157 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $80 = 0, $9 = 0, $97 = 0, $99 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = HEAP32[$2 + 20 >> 2] | 0;
  $$str$33$$str$34$i$i$i70 = (HEAP8[(HEAP32[$32 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
  $$0$i$i$i73 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$014$i$i$i72 = HEAP32[$32 + 8 >> 2] | 0;
  do {
   $$0$i$i$i73 = $$0$i$i$i73 + -1 | 0;
   HEAP8[$$0$i$i$i73 >> 0] = HEAP8[$$str$33$$str$34$i$i$i70 + ($$014$i$i$i72 & 15) >> 0] | 0;
   $$014$i$i$i72 = $$014$i$i$i72 >>> 4;
  } while (($$014$i$i$i72 | 0) != 0);
  return;
 }
 $49 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $49 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $49);
 HEAP32[$7 >> 2] = $49;
 $57 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $60 = HEAP32[$1 + 4 >> 2] & 255;
 $61 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($61 | 0) _memset($57 | 0, $60 | 0, $61 | 0) | 0;
   $65 = $57 + $61 | 0;
   $67 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$67) $77 = $65; else {
    _memmove($65 | 0, HEAP32[$2 + 4 >> 2] | 0, $67 | 0) | 0;
    $77 = $65 + $67 | 0;
   }
   $73 = HEAP32[$2 + 16 >> 2] | 0;
   if ($73 | 0) _memset($77 | 0, HEAP8[$2 + 12 >> 0] | 0, $73 | 0) | 0;
   $80 = HEAP32[$2 + 20 >> 2] | 0;
   $$str$33$$str$34$i$i$i61 = (HEAP8[(HEAP32[$80 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i64 = $77 + $73 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$014$i$i$i63 = HEAP32[$80 + 8 >> 2] | 0;
   do {
    $$0$i$i$i64 = $$0$i$i$i64 + -1 | 0;
    HEAP8[$$0$i$i$i64 >> 0] = HEAP8[$$str$33$$str$34$i$i$i61 + ($$014$i$i$i63 & 15) >> 0] | 0;
    $$014$i$i$i63 = $$014$i$i$i63 >>> 4;
   } while (($$014$i$i$i63 | 0) != 0);
   return;
  }
 case 3:
  {
   $97 = $61 >>> 1;
   if ($97 | 0) _memset($57 | 0, $60 | 0, $97 | 0) | 0;
   $99 = $57 + $97 | 0;
   $101 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$101) $111 = $99; else {
    _memmove($99 | 0, HEAP32[$2 + 4 >> 2] | 0, $101 | 0) | 0;
    $111 = $99 + $101 | 0;
   }
   $107 = HEAP32[$2 + 16 >> 2] | 0;
   if ($107 | 0) _memset($111 | 0, HEAP8[$2 + 12 >> 0] | 0, $107 | 0) | 0;
   $114 = HEAP32[$2 + 20 >> 2] | 0;
   $124 = $111 + $107 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i52 = (HEAP8[(HEAP32[$114 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i55 = $124;
   $$014$i$i$i54 = HEAP32[$114 + 8 >> 2] | 0;
   do {
    $$0$i$i$i55 = $$0$i$i$i55 + -1 | 0;
    HEAP8[$$0$i$i$i55 >> 0] = HEAP8[$$str$33$$str$34$i$i$i52 + ($$014$i$i$i54 & 15) >> 0] | 0;
    $$014$i$i$i54 = $$014$i$i$i54 >>> 4;
   } while (($$014$i$i$i54 | 0) != 0);
   $131 = $61 - $97 | 0;
   if (!$131) return;
   _memset($124 | 0, $60 | 0, $131 | 0) | 0;
   return;
  }
 default:
  {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$134) $144 = $57; else {
    _memmove($57 | 0, HEAP32[$2 + 4 >> 2] | 0, $134 | 0) | 0;
    $144 = $57 + $134 | 0;
   }
   $140 = HEAP32[$2 + 16 >> 2] | 0;
   if ($140 | 0) _memset($144 | 0, HEAP8[$2 + 12 >> 0] | 0, $140 | 0) | 0;
   $147 = HEAP32[$2 + 20 >> 2] | 0;
   $157 = $144 + $140 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$str$33$$str$34$i$i$i = (HEAP8[(HEAP32[$147 + 4 >> 2] | 0) + 17 >> 0] | 0) == 120 ? 17517 : 17500;
   $$0$i$i$i = $157;
   $$014$i$i$i = HEAP32[$147 + 8 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = HEAP8[$$str$33$$str$34$i$i$i + ($$014$i$i$i & 15) >> 0] | 0;
    $$014$i$i$i = $$014$i$i$i >>> 4;
   } while (($$014$i$i$i | 0) != 0);
   if (!$61) return;
   _memset($157 | 0, $60 | 0, $61 | 0) | 0;
   return;
  }
 }
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i41 = 0, $$0$i$i44 = 0, $$037 = 0, $$038 = 0, $$byval_copy = 0, $$sink75 = 0, $$sink76 = 0, $$sink77 = 0, $$sroa$053$0 = 0, $$sroa$061$0 = 0, $$sroa$070$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $31 = 0, $32 = 0, $47 = 0, $48 = 0, $53 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $76 = 0, $8 = 0, $84 = 0, $86 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $$byval_copy = sp + 336 | 0;
 $vararg_buffer1 = sp + 328 | 0;
 $6 = sp + 224 | 0;
 $7 = sp + 400 | 0;
 $8 = sp + 112 | 0;
 $9 = sp + 396 | 0;
 $10 = sp + 408 | 0;
 $11 = sp + 405 | 0;
 $12 = sp + 404 | 0;
 $13 = sp + 384 | 0;
 $14 = sp + 372 | 0;
 $15 = sp + 360 | 0;
 $16 = sp + 356 | 0;
 $17 = sp;
 $18 = sp + 352 | 0;
 $19 = sp + 344 | 0;
 $20 = sp + 348 | 0;
 HEAP32[$7 >> 2] = $6;
 HEAPF64[$$byval_copy >> 3] = $5;
 $21 = _snprintf($6, 100, 24910, $$byval_copy) | 0;
 if ($21 >>> 0 > 99) {
  $23 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $5;
  $24 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $23, 24910, $vararg_buffer1) | 0;
  $25 = HEAP32[$7 >> 2] | 0;
  if (!$25) __ZSt17__throw_bad_allocv();
  $28 = _malloc($24) | 0;
  if (!$28) __ZSt17__throw_bad_allocv(); else {
   $$0 = $28;
   $$038 = $24;
   $$sroa$061$0 = $28;
   $$sroa$070$0 = $25;
  }
 } else {
  $$0 = $8;
  $$038 = $21;
  $$sroa$061$0 = 0;
  $$sroa$070$0 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv($9, $3);
 $31 = __ZNKSt3__26locale9use_facetERNS0_2idE($9, 32688) | 0;
 $32 = HEAP32[$7 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$31 >> 2] | 0) + 32 >> 2] & 7]($31, $32, $32 + $$038 | 0, $$0) | 0;
 if (!$$038) $47 = 0; else $47 = (HEAP8[HEAP32[$7 >> 2] >> 0] | 0) == 45;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$13 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$14 + 8 >> 2] = 0;
 $$0$i$i41 = 0;
 while (1) {
  if (($$0$i$i41 | 0) == 3) break;
  HEAP32[$14 + ($$0$i$i41 << 2) >> 2] = 0;
  $$0$i$i41 = $$0$i$i41 + 1 | 0;
 }
 HEAP32[$15 >> 2] = 0;
 HEAP32[$15 + 4 >> 2] = 0;
 HEAP32[$15 + 8 >> 2] = 0;
 $$0$i$i44 = 0;
 while (1) {
  if (($$0$i$i44 | 0) == 3) break;
  HEAP32[$15 + ($$0$i$i44 << 2) >> 2] = 0;
  $$0$i$i44 = $$0$i$i44 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($2, $47, $9, $10, $11, $12, $13, $14, $15, $16);
 $48 = HEAP32[$16 >> 2] | 0;
 if (($$038 | 0) > ($48 | 0)) {
  $53 = HEAP8[$15 + 11 >> 0] | 0;
  $60 = HEAP8[$14 + 11 >> 0] | 0;
  $$sink75 = $60 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $60 & 255;
  $$sink76 = $48 + 1 + ($$038 - $48 << 1) | 0;
  $$sink77 = $53 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $53 & 255;
 } else {
  $69 = HEAP8[$15 + 11 >> 0] | 0;
  $76 = HEAP8[$14 + 11 >> 0] | 0;
  $$sink75 = $76 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $76 & 255;
  $$sink76 = $48 + 2 | 0;
  $$sink77 = $69 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $69 & 255;
 }
 $84 = $$sink76 + $$sink77 + $$sink75 | 0;
 if ($84 >>> 0 > 100) {
  $86 = _malloc($84) | 0;
  if (!$86) __ZSt17__throw_bad_allocv(); else {
   $$037 = $86;
   $$sroa$053$0 = $86;
  }
 } else {
  $$037 = $17;
  $$sroa$053$0 = 0;
 }
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($$037, $18, $19, HEAP32[$3 + 4 >> 2] | 0, $$0, $$0 + $$038 | 0, $31, $47, $10, HEAP8[$11 >> 0] | 0, HEAP8[$12 >> 0] | 0, $13, $14, $15, $48);
 HEAP32[$20 >> 2] = HEAP32[$1 >> 2];
 $95 = HEAP32[$18 >> 2] | 0;
 $96 = HEAP32[$19 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2];
 $97 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $$037, $95, $96, $3, $4) | 0;
 if ($$sroa$053$0 | 0) _free($$sroa$053$0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 __ZNSt3__26localeD2Ev($9);
 if ($$sroa$061$0 | 0) _free($$sroa$061$0);
 if ($$sroa$070$0 | 0) _free($$sroa$070$0);
 STACKTOP = sp;
 return $97 | 0;
}

function __ZN3sgl3Log4InitEv() {
 var $$pr = 0, $$pr28 = 0, $0 = 0, $1 = 0, $14 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $4 = 0, $49 = 0, $5 = 0, $57 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $76 = 0, $77 = 0, $86 = 0, $87 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $0 = sp + 44 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = __Znwm(16) | 0;
 HEAP32[$1 >> 2] = $5;
 HEAP32[$1 + 8 >> 2] = -2147483632;
 HEAP32[$1 + 4 >> 2] = 15;
 dest = $5;
 src = 18316;
 stop = dest + 15 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$5 + 15 >> 0] = 0;
 __ZN6spdlog11set_patternENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_17pattern_time_typeE($1, 0);
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$1 >> 2] | 0);
 $14 = $3 + 4 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 $18 = $3 + 11 | 0;
 HEAP8[$18 >> 0] = 3;
 HEAP8[$3 >> 0] = HEAP8[18332] | 0;
 HEAP8[$3 + 1 >> 0] = HEAP8[18333] | 0;
 HEAP8[$3 + 2 >> 0] = HEAP8[18334] | 0;
 HEAP8[$3 + 3 >> 0] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $3);
 __ZN6spdlog19synchronous_factory6createINS_5sinks14ansicolor_sinkINS_7details14console_stdoutENS4_13console_mutexEEEJEEENSt3__210shared_ptrINS_6loggerEEENS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEDpOT0_($2, $0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 $24 = HEAP32[$2 >> 2] | 0;
 $25 = $2 + 4 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$25 >> 2] = 0;
 HEAP32[7738] = $24;
 $27 = HEAP32[7739] | 0;
 HEAP32[7739] = $26;
 if ($27 | 0) {
  $29 = $27 + 4 | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  HEAP32[$29 >> 2] = $30 + -1;
  if (!$30) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$27 >> 2] | 0) + 8 >> 2] & 255]($27);
   __ZNSt3__219__shared_weak_count14__release_weakEv($27);
  }
  $$pr = HEAP32[$25 >> 2] | 0;
  if ($$pr | 0) {
   $37 = $$pr + 4 | 0;
   $38 = HEAP32[$37 >> 2] | 0;
   HEAP32[$37 >> 2] = $38 + -1;
   if (!$38) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$$pr >> 2] | 0) + 8 >> 2] & 255]($$pr);
    __ZNSt3__219__shared_weak_count14__release_weakEv($$pr);
   }
  }
 }
 if ((HEAP8[$18 >> 0] | 0) < 0) __ZdlPv(HEAP32[$3 >> 2] | 0);
 HEAP32[(HEAP32[7738] | 0) + 28 >> 2] = 0;
 $49 = __Znwm(16) | 0;
 HEAP32[$4 >> 2] = $49;
 HEAP32[$4 + 8 >> 2] = -2147483632;
 HEAP32[$4 + 4 >> 2] = 15;
 dest = $49;
 src = 18316;
 stop = dest + 15 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$49 + 15 >> 0] = 0;
 __ZN6spdlog11set_patternENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_17pattern_time_typeE($4, 0);
 if ((HEAP8[$4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$4 >> 2] | 0);
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $57 = $3 + 11 | 0;
 HEAP8[$57 >> 0] = 6;
 HEAP8[$3 >> 0] = HEAP8[18336] | 0;
 HEAP8[$3 + 1 >> 0] = HEAP8[18337] | 0;
 HEAP8[$3 + 2 >> 0] = HEAP8[18338] | 0;
 HEAP8[$3 + 3 >> 0] = HEAP8[18339] | 0;
 HEAP8[$3 + 4 >> 0] = HEAP8[18340] | 0;
 HEAP8[$3 + 5 >> 0] = HEAP8[18341] | 0;
 HEAP8[$3 + 6 >> 0] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $3);
 __ZN6spdlog19synchronous_factory6createINS_5sinks14ansicolor_sinkINS_7details14console_stdoutENS4_13console_mutexEEEJEEENSt3__210shared_ptrINS_6loggerEEENS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEDpOT0_($2, $0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 $63 = HEAP32[$2 >> 2] | 0;
 $64 = $2 + 4 | 0;
 $65 = HEAP32[$64 >> 2] | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$64 >> 2] = 0;
 HEAP32[7740] = $63;
 $66 = HEAP32[7741] | 0;
 HEAP32[7741] = $65;
 if ($66 | 0) {
  $68 = $66 + 4 | 0;
  $69 = HEAP32[$68 >> 2] | 0;
  HEAP32[$68 >> 2] = $69 + -1;
  if (!$69) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$66 >> 2] | 0) + 8 >> 2] & 255]($66);
   __ZNSt3__219__shared_weak_count14__release_weakEv($66);
  }
  $$pr28 = HEAP32[$64 >> 2] | 0;
  if ($$pr28 | 0) {
   $76 = $$pr28 + 4 | 0;
   $77 = HEAP32[$76 >> 2] | 0;
   HEAP32[$76 >> 2] = $77 + -1;
   if (!$77) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$$pr28 >> 2] | 0) + 8 >> 2] & 255]($$pr28);
    __ZNSt3__219__shared_weak_count14__release_weakEv($$pr28);
   }
  }
 }
 if ((HEAP8[$57 >> 0] | 0) >= 0) {
  $86 = HEAP32[7740] | 0;
  $87 = $86 + 28 | 0;
  HEAP32[$87 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$3 >> 2] | 0);
 $86 = HEAP32[7740] | 0;
 $87 = $86 + 28 | 0;
 HEAP32[$87 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal12parse_arg_idIcNS1_17precision_adapterIRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEcEEEEPKT_SJ_SJ_OT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$027$i = 0, $$045 = 0, $$1 = 0, $$lcssa = 0, $$lcssa49 = 0, $15 = 0, $18 = 0, $19 = 0, $24 = 0, $27 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $62 = 0, $7 = 0, $8 = 0, $tmpcast1$i$i$i$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $tmpcast1$i$i$i$byval_copy = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 $5 = sp + 40 | 0;
 if (($0 | 0) == ($1 | 0)) ___assert_fail(17732, 17437, 1788, 17745);
 $7 = HEAP8[$0 >> 0] | 0;
 switch ($7 << 24 >> 24) {
 case 58:
 case 125:
  {
   $8 = HEAP32[$2 >> 2] | 0;
   HEAP8[$tmpcast1$i$i$i$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
   __ZN3fmt2v58internal13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE20on_dynamic_precisionINS1_7auto_idEEEvT_($8, $tmpcast1$i$i$i$byval_copy);
   $$1 = $0;
   STACKTOP = sp;
   return $$1 | 0;
  }
 default:
  {}
 }
 if (($7 + -48 & 255) >= 10) {
  if (!($7 << 24 >> 24 == 95 | (($7 & -33) + -65 & 255) < 26)) {
   $34 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($34, 17126);
   ___cxa_throw($34 | 0, 6792, 18);
  }
  $35 = $0 + 1 | 0;
  L13 : do if (($35 | 0) == ($1 | 0)) $$lcssa49 = $1; else {
   $38 = $35;
   while (1) {
    $37 = HEAP8[$38 >> 0] | 0;
    if (!($37 << 24 >> 24 == 95 | (($37 & -33) + -65 & 255) < 26 | ($37 + -48 & 255) < 10)) {
     $$lcssa49 = $38;
     break L13;
    }
    $38 = $38 + 1 | 0;
    if (($38 | 0) == ($1 | 0)) {
     $$lcssa49 = $1;
     break;
    }
   }
  } while (0);
  $48 = $0;
  $49 = $$lcssa49 - $48 | 0;
  if (($49 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $51 = HEAP32[$2 >> 2] | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  $54 = HEAP32[$51 + 4 >> 2] | 0;
  HEAP32[$3 >> 2] = $48;
  HEAP32[$3 + 4 >> 2] = $49;
  HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$3 >> 2];
  HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  __ZN3fmt2v520basic_format_contextINSt3__220back_insert_iteratorINS0_8internal12basic_bufferIcEEEEcE7get_argENS0_17basic_string_viewIcEE($4, $54, $tmpcast1$i$i$i$byval_copy);
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = $5;
  $55 = __ZN3fmt2v516visit_format_argINS0_8internal17precision_checkerINS2_13error_handlerEEENS0_20basic_format_contextINSt3__220back_insert_iteratorINS2_12basic_bufferIcEEEEcEEEENS2_9result_ofIFT_iEE4typeEOSE_RKNS0_16basic_format_argIT0_EE($tmpcast1$i$i$i$byval_copy, $3) | 0;
  $56 = getTempRet0() | 0;
  if ($56 >>> 0 > 0 | ($56 | 0) == 0 & $55 >>> 0 > 2147483647) {
   $62 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($62, 17827);
   ___cxa_throw($62 | 0, 6792, 18);
  }
  HEAP32[$52 + 12 >> 2] = $55;
  $$1 = $$lcssa49;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if ($7 << 24 >> 24 == 48) {
  $$0$i = 0;
  $$045 = $0 + 1 | 0;
 } else {
  $$027$i = 0;
  $15 = $7;
  $19 = $0;
  while (1) {
   if ($$027$i >>> 0 > 214748364) {
    label = 13;
    break;
   }
   $$027$i = ($15 << 24 >> 24) + -48 + ($$027$i * 10 | 0) | 0;
   $18 = $19 + 1 | 0;
   if (($18 | 0) == ($1 | 0)) {
    $$lcssa = $1;
    break;
   }
   $15 = HEAP8[$18 >> 0] | 0;
   if (($15 + -48 & 255) >= 10) {
    $$lcssa = $18;
    break;
   } else $19 = $18;
  }
  if ((label | 0) == 13) {
   $24 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($24, 17827);
   ___cxa_throw($24 | 0, 6792, 18);
  }
  if (($$027$i | 0) < 0) {
   $24 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($24, 17827);
   ___cxa_throw($24 | 0, 6792, 18);
  } else {
   $$0$i = $$027$i;
   $$045 = $$lcssa;
  }
 }
 if (($$045 | 0) == ($1 | 0)) {
  $27 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($27, 17126);
  ___cxa_throw($27 | 0, 6792, 18);
 }
 switch (HEAP8[$$045 >> 0] | 0) {
 case 58:
 case 125:
  break;
 default:
  {
   $27 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($27, 17126);
   ___cxa_throw($27 | 0, 6792, 18);
  }
 }
 __ZN3fmt2v58internal13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE20on_dynamic_precisionIjEEvT_(HEAP32[$2 >> 2] | 0, $$0$i);
 $$1 = $$045;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN3fmt2v58internal12parse_arg_idIcNS1_13width_adapterIRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEcEEEEPKT_SJ_SJ_OT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$027$i = 0, $$045 = 0, $$1 = 0, $$lcssa = 0, $$lcssa49 = 0, $15 = 0, $18 = 0, $19 = 0, $24 = 0, $27 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $62 = 0, $7 = 0, $8 = 0, $tmpcast1$i$i$i$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $tmpcast1$i$i$i$byval_copy = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 $5 = sp + 40 | 0;
 if (($0 | 0) == ($1 | 0)) ___assert_fail(17732, 17437, 1788, 17745);
 $7 = HEAP8[$0 >> 0] | 0;
 switch ($7 << 24 >> 24) {
 case 58:
 case 125:
  {
   $8 = HEAP32[$2 >> 2] | 0;
   HEAP8[$tmpcast1$i$i$i$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
   __ZN3fmt2v58internal13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE16on_dynamic_widthINS1_7auto_idEEEvT_($8, $tmpcast1$i$i$i$byval_copy);
   $$1 = $0;
   STACKTOP = sp;
   return $$1 | 0;
  }
 default:
  {}
 }
 if (($7 + -48 & 255) >= 10) {
  if (!($7 << 24 >> 24 == 95 | (($7 & -33) + -65 & 255) < 26)) {
   $34 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($34, 17126);
   ___cxa_throw($34 | 0, 6792, 18);
  }
  $35 = $0 + 1 | 0;
  L13 : do if (($35 | 0) == ($1 | 0)) $$lcssa49 = $1; else {
   $38 = $35;
   while (1) {
    $37 = HEAP8[$38 >> 0] | 0;
    if (!($37 << 24 >> 24 == 95 | (($37 & -33) + -65 & 255) < 26 | ($37 + -48 & 255) < 10)) {
     $$lcssa49 = $38;
     break L13;
    }
    $38 = $38 + 1 | 0;
    if (($38 | 0) == ($1 | 0)) {
     $$lcssa49 = $1;
     break;
    }
   }
  } while (0);
  $48 = $0;
  $49 = $$lcssa49 - $48 | 0;
  if (($49 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $51 = HEAP32[$2 >> 2] | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  $54 = HEAP32[$51 + 4 >> 2] | 0;
  HEAP32[$3 >> 2] = $48;
  HEAP32[$3 + 4 >> 2] = $49;
  HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$3 >> 2];
  HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  __ZN3fmt2v520basic_format_contextINSt3__220back_insert_iteratorINS0_8internal12basic_bufferIcEEEEcE7get_argENS0_17basic_string_viewIcEE($4, $54, $tmpcast1$i$i$i$byval_copy);
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = $5;
  $55 = __ZN3fmt2v516visit_format_argINS0_8internal13width_checkerINS2_13error_handlerEEENS0_20basic_format_contextINSt3__220back_insert_iteratorINS2_12basic_bufferIcEEEEcEEEENS2_9result_ofIFT_iEE4typeEOSE_RKNS0_16basic_format_argIT0_EE($tmpcast1$i$i$i$byval_copy, $3) | 0;
  $56 = getTempRet0() | 0;
  if ($56 >>> 0 > 0 | ($56 | 0) == 0 & $55 >>> 0 > 2147483647) {
   $62 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($62, 17827);
   ___cxa_throw($62 | 0, 6792, 18);
  }
  HEAP32[$52 >> 2] = $55;
  $$1 = $$lcssa49;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if ($7 << 24 >> 24 == 48) {
  $$0$i = 0;
  $$045 = $0 + 1 | 0;
 } else {
  $$027$i = 0;
  $15 = $7;
  $19 = $0;
  while (1) {
   if ($$027$i >>> 0 > 214748364) {
    label = 13;
    break;
   }
   $$027$i = ($15 << 24 >> 24) + -48 + ($$027$i * 10 | 0) | 0;
   $18 = $19 + 1 | 0;
   if (($18 | 0) == ($1 | 0)) {
    $$lcssa = $1;
    break;
   }
   $15 = HEAP8[$18 >> 0] | 0;
   if (($15 + -48 & 255) >= 10) {
    $$lcssa = $18;
    break;
   } else $19 = $18;
  }
  if ((label | 0) == 13) {
   $24 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($24, 17827);
   ___cxa_throw($24 | 0, 6792, 18);
  }
  if (($$027$i | 0) < 0) {
   $24 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($24, 17827);
   ___cxa_throw($24 | 0, 6792, 18);
  } else {
   $$0$i = $$027$i;
   $$045 = $$lcssa;
  }
 }
 if (($$045 | 0) == ($1 | 0)) {
  $27 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($27, 17126);
  ___cxa_throw($27 | 0, 6792, 18);
 }
 switch (HEAP8[$$045 >> 0] | 0) {
 case 58:
 case 125:
  break;
 default:
  {
   $27 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($27, 17126);
   ___cxa_throw($27 | 0, 6792, 18);
  }
 }
 __ZN3fmt2v58internal13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE16on_dynamic_widthIjEEvT_(HEAP32[$2 >> 2] | 0, $$0$i);
 $$1 = $$045;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN3fmt2v58internal7arg_mapINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE4initERKNS0_17basic_format_argsIS9_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$022 = 0, $$sroa$4$0$$sroa_idx$i = 0, $$sroa$4$0$$sroa_idx$i27 = 0, $$sroa$4$8$$sroa_idx$i = 0, $$sroa$4$8$$sroa_idx$i25 = 0, $$sroa$49$i = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $111 = 0, $112 = 0, $16 = 0, $18 = 0, $19 = 0, $25 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $47 = 0, $53 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $74 = 0, $81 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $spec$select$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$sroa$49$i = sp;
 if (HEAP32[$0 >> 2] | 0) {
  STACKTOP = sp;
  return;
 }
 $4 = $1;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $spec$select$i = ($9 | 0) > -1 | ($9 | 0) == -1 & $6 >>> 0 > 4294967295 ? 15 : $6;
 $16 = __Znam($spec$select$i >>> 0 > 178956970 ? -1 : $spec$select$i * 24 | 0) | 0;
 if (!$spec$select$i) {
  $31 = $9;
  $33 = $6;
 } else {
  $18 = $16 + ($spec$select$i * 24 | 0) | 0;
  $19 = $16;
  do {
   HEAP32[$19 >> 2] = 0;
   HEAP32[$19 + 4 >> 2] = 0;
   HEAP32[$19 + 8 >> 2] = 0;
   HEAP32[$19 + 16 >> 2] = 0;
   $19 = $19 + 24 | 0;
  } while (($19 | 0) != ($18 | 0));
  $25 = $1;
  $31 = HEAP32[$25 + 4 >> 2] | 0;
  $33 = HEAP32[$25 >> 2] | 0;
 }
 HEAP32[$0 >> 2] = $16;
 if (($31 | 0) > -1 | ($31 | 0) == -1 & $33 >>> 0 > 4294967295) {
  $38 = $1 + 8 | 0;
  $39 = $0 + 4 | 0;
  $$022 = 0;
  $44 = $33;
  $46 = $31;
  L12 : while (1) {
   $40 = $$022 << 2;
   $41 = _bitshift64Shl(15, 0, $40 | 0) | 0;
   $47 = _bitshift64Lshr($41 & $44 | 0, (getTempRet0() | 0) & $46 | 0, $40 | 0) | 0;
   getTempRet0() | 0;
   switch ($47 | 0) {
   case 0:
    {
     break L12;
     break;
    }
   case 1:
    {
     $53 = HEAP32[(HEAP32[$38 >> 2] | 0) + ($$022 << 3) >> 2] | 0;
     $59 = $53;
     $61 = HEAP32[$59 >> 2] | 0;
     $64 = HEAP32[$59 + 4 >> 2] | 0;
     $$sroa$4$8$$sroa_idx$i25 = $53 + 8 | 0;
     HEAP32[$$sroa$49$i >> 2] = HEAP32[$$sroa$4$8$$sroa_idx$i25 >> 2];
     HEAP32[$$sroa$49$i + 4 >> 2] = HEAP32[$$sroa$4$8$$sroa_idx$i25 + 4 >> 2];
     HEAP32[$$sroa$49$i + 8 >> 2] = HEAP32[$$sroa$4$8$$sroa_idx$i25 + 8 >> 2];
     HEAP32[$$sroa$49$i + 12 >> 2] = HEAP32[$$sroa$4$8$$sroa_idx$i25 + 12 >> 2];
     $65 = HEAP32[$0 >> 2] | 0;
     $66 = HEAP32[$39 >> 2] | 0;
     $68 = $65 + ($66 * 24 | 0) | 0;
     HEAP32[$68 >> 2] = $61;
     HEAP32[$68 + 4 >> 2] = $64;
     $$sroa$4$0$$sroa_idx$i27 = $65 + ($66 * 24 | 0) + 8 | 0;
     HEAP32[$$sroa$4$0$$sroa_idx$i27 >> 2] = HEAP32[$$sroa$49$i >> 2];
     HEAP32[$$sroa$4$0$$sroa_idx$i27 + 4 >> 2] = HEAP32[$$sroa$49$i + 4 >> 2];
     HEAP32[$$sroa$4$0$$sroa_idx$i27 + 8 >> 2] = HEAP32[$$sroa$49$i + 8 >> 2];
     HEAP32[$$sroa$4$0$$sroa_idx$i27 + 12 >> 2] = HEAP32[$$sroa$49$i + 12 >> 2];
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $74 = $1;
     $111 = HEAP32[$74 >> 2] | 0;
     $112 = HEAP32[$74 + 4 >> 2] | 0;
     break;
    }
   default:
    {
     $111 = $44;
     $112 = $46;
    }
   }
   $$022 = $$022 + 1 | 0;
   $44 = $111;
   $46 = $112;
  }
  STACKTOP = sp;
  return;
 } else {
  $81 = $1 + 8 | 0;
  $82 = $0 + 4 | 0;
  $$0 = 0;
  L19 : while (1) {
   $83 = HEAP32[$81 >> 2] | 0;
   switch (HEAP32[$83 + ($$0 << 4) + 8 >> 2] | 0) {
   case 0:
    {
     break L19;
     break;
    }
   case 1:
    {
     $89 = HEAP32[$83 + ($$0 << 4) >> 2] | 0;
     $95 = $89;
     $97 = HEAP32[$95 >> 2] | 0;
     $100 = HEAP32[$95 + 4 >> 2] | 0;
     $$sroa$4$8$$sroa_idx$i = $89 + 8 | 0;
     HEAP32[$$sroa$49$i >> 2] = HEAP32[$$sroa$4$8$$sroa_idx$i >> 2];
     HEAP32[$$sroa$49$i + 4 >> 2] = HEAP32[$$sroa$4$8$$sroa_idx$i + 4 >> 2];
     HEAP32[$$sroa$49$i + 8 >> 2] = HEAP32[$$sroa$4$8$$sroa_idx$i + 8 >> 2];
     HEAP32[$$sroa$49$i + 12 >> 2] = HEAP32[$$sroa$4$8$$sroa_idx$i + 12 >> 2];
     $101 = HEAP32[$0 >> 2] | 0;
     $102 = HEAP32[$82 >> 2] | 0;
     $104 = $101 + ($102 * 24 | 0) | 0;
     HEAP32[$104 >> 2] = $97;
     HEAP32[$104 + 4 >> 2] = $100;
     $$sroa$4$0$$sroa_idx$i = $101 + ($102 * 24 | 0) + 8 | 0;
     HEAP32[$$sroa$4$0$$sroa_idx$i >> 2] = HEAP32[$$sroa$49$i >> 2];
     HEAP32[$$sroa$4$0$$sroa_idx$i + 4 >> 2] = HEAP32[$$sroa$49$i + 4 >> 2];
     HEAP32[$$sroa$4$0$$sroa_idx$i + 8 >> 2] = HEAP32[$$sroa$49$i + 8 >> 2];
     HEAP32[$$sroa$4$0$$sroa_idx$i + 12 >> 2] = HEAP32[$$sroa$49$i + 12 >> 2];
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 1;
     break;
    }
   default:
    {}
   }
   $$0 = $$0 + 1 | 0;
  }
  STACKTOP = sp;
  return;
 }
}

function __ZN3fmt2v58internal14format_decimalIcjPcNS1_17add_thousands_sepIcEEEET1_S6_T0_iT2_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$lcssa$i = 0, $$0$lcssa$i$sink = 0, $$010$i$i$i = 0, $$010$i$i21$i = 0, $$010$i$i25$i = 0, $$019$lcssa$i = 0, $$01936$i = 0, $$01936$i$us = 0, $$035$i = 0, $$035$i$us = 0, $$089$i$i$i = 0, $$089$i$i22$i = 0, $$089$i$i26$i = 0, $$1$i = 0, $$2$i = 0, $$3$i = 0, $$sink = 0, $$sroa$016$0$copyload = 0, $$sroa$2$0$copyload = 0, $$sroa$3$0$copyload = 0, $$sroa$9$0 = 0, $$sroa$9$0$us = 0, $$sroa$9$1 = 0, $11 = 0, $14 = 0, $18 = 0, $25 = 0, $26 = 0, $31 = 0, $34 = 0, $38 = 0, $4 = 0, $42 = 0, $49 = 0, $50 = 0, $53 = 0, $6 = 0, $62 = 0, $66 = 0, $71 = 0, $72 = 0, $8 = 0, $82 = 0, $9 = 0, $spec$select44 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 if (($2 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
 $$sroa$016$0$copyload = HEAP32[$3 >> 2] | 0;
 $$sroa$2$0$copyload = HEAP32[$3 + 4 >> 2] | 0;
 $$sroa$3$0$copyload = HEAP32[$3 + 8 >> 2] | 0;
 $6 = $4 + $2 | 0;
 L4 : do if ($1 >>> 0 > 99) {
  $8 = 0 - $$sroa$2$0$copyload | 0;
  $9 = $$sroa$016$0$copyload + $$sroa$2$0$copyload | 0;
  if (!$$sroa$2$0$copyload) {
   $$01936$i$us = $1;
   $$035$i$us = $6;
   $$sroa$9$0$us = $$sroa$3$0$copyload;
   while (1) {
    $11 = ($$01936$i$us >>> 0) / 100 | 0;
    $14 = $$01936$i$us - ($11 * 100 | 0) << 1;
    $18 = $$035$i$us + -1 | 0;
    HEAP8[$18 >> 0] = HEAP8[64 + ($14 | 1) >> 0] | 0;
    $25 = (((($$sroa$9$0$us + 1 | 0) >>> 0) % 3 | 0 | 0) == 0 ? $18 + $8 | 0 : $18) + -1 | 0;
    HEAP8[$25 >> 0] = HEAP8[64 + $14 >> 0] | 0;
    $26 = $$sroa$9$0$us + 2 | 0;
    $spec$select44 = (($26 >>> 0) % 3 | 0 | 0) == 0 ? $25 + $8 | 0 : $25;
    if ($$01936$i$us >>> 0 > 9999) {
     $$01936$i$us = $11;
     $$035$i$us = $spec$select44;
     $$sroa$9$0$us = $26;
    } else {
     $$0$lcssa$i = $spec$select44;
     $$019$lcssa$i = $11;
     $$sroa$9$1 = $26;
     break L4;
    }
   }
  }
  $$01936$i = $1;
  $$035$i = $6;
  $$sroa$9$0 = $$sroa$3$0$copyload;
  while (1) {
   $31 = ($$01936$i >>> 0) / 100 | 0;
   $34 = $$01936$i - ($31 * 100 | 0) << 1;
   $38 = $$035$i + -1 | 0;
   HEAP8[$38 >> 0] = HEAP8[64 + ($34 | 1) >> 0] | 0;
   if (!((($$sroa$9$0 + 1 | 0) >>> 0) % 3 | 0)) {
    $42 = $38 + $8 | 0;
    $$010$i$i$i = $$sroa$016$0$copyload;
    $$089$i$i$i = $42;
    while (1) {
     HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
     $$010$i$i$i = $$010$i$i$i + 1 | 0;
     if (($$010$i$i$i | 0) == ($9 | 0)) {
      $$1$i = $42;
      break;
     } else $$089$i$i$i = $$089$i$i$i + 1 | 0;
    }
   } else $$1$i = $38;
   $49 = $$1$i + -1 | 0;
   HEAP8[$49 >> 0] = HEAP8[64 + $34 >> 0] | 0;
   $50 = $$sroa$9$0 + 2 | 0;
   if (!(($50 >>> 0) % 3 | 0)) {
    $53 = $49 + $8 | 0;
    $$010$i$i25$i = $$sroa$016$0$copyload;
    $$089$i$i26$i = $53;
    while (1) {
     HEAP8[$$089$i$i26$i >> 0] = HEAP8[$$010$i$i25$i >> 0] | 0;
     $$010$i$i25$i = $$010$i$i25$i + 1 | 0;
     if (($$010$i$i25$i | 0) == ($9 | 0)) {
      $$2$i = $53;
      break;
     } else $$089$i$i26$i = $$089$i$i26$i + 1 | 0;
    }
   } else $$2$i = $49;
   if ($$01936$i >>> 0 > 9999) {
    $$01936$i = $31;
    $$035$i = $$2$i;
    $$sroa$9$0 = $50;
   } else {
    $$0$lcssa$i = $$2$i;
    $$019$lcssa$i = $31;
    $$sroa$9$1 = $50;
    break;
   }
  }
 } else {
  $$0$lcssa$i = $6;
  $$019$lcssa$i = $1;
  $$sroa$9$1 = $$sroa$3$0$copyload;
 } while (0);
 if ($$019$lcssa$i >>> 0 < 10) {
  $$0$lcssa$i$sink = $$0$lcssa$i;
  $$sink = $$019$lcssa$i + 48 & 255;
 } else {
  $62 = $$019$lcssa$i << 1;
  $66 = $$0$lcssa$i + -1 | 0;
  HEAP8[$66 >> 0] = HEAP8[64 + ($62 | 1) >> 0] | 0;
  if (!((($$sroa$9$1 + 1 | 0) >>> 0) % 3 | 0)) {
   $71 = $66 + (0 - $$sroa$2$0$copyload) | 0;
   $72 = $$sroa$016$0$copyload + $$sroa$2$0$copyload | 0;
   if (!$$sroa$2$0$copyload) $$3$i = $71; else {
    $$010$i$i21$i = $$sroa$016$0$copyload;
    $$089$i$i22$i = $71;
    while (1) {
     HEAP8[$$089$i$i22$i >> 0] = HEAP8[$$010$i$i21$i >> 0] | 0;
     $$010$i$i21$i = $$010$i$i21$i + 1 | 0;
     if (($$010$i$i21$i | 0) == ($72 | 0)) {
      $$3$i = $71;
      break;
     } else $$089$i$i22$i = $$089$i$i22$i + 1 | 0;
    }
   }
  } else $$3$i = $66;
  $$0$lcssa$i$sink = $$3$i;
  $$sink = HEAP8[64 + $62 >> 0] | 0;
 }
 HEAP8[$$0$lcssa$i$sink + -1 >> 0] = $$sink;
 if (!$2) {
  $82 = $0 + $2 | 0;
  STACKTOP = sp;
  return $82 | 0;
 }
 _memcpy($0 | 0, $4 | 0, $2 | 0) | 0;
 $82 = $0 + $2 | 0;
 STACKTOP = sp;
 return $82 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS4_SB_NS_4hashIiEELb1EEENS_21__unordered_map_equalIS4_SB_NS_8equal_toIS4_EELb1EEENS8_ISB_EEE8__rehashEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$0$lcssa$us = 0, $$05468 = 0, $$05468$us = 0, $$05566 = 0, $$05569 = 0, $$05569$us = 0, $$05667 = 0, $$05667$us = 0, $$05871 = 0, $$062 = 0, $$062$phi = 0, $$062$us = 0, $$062$us$phi = 0, $$1 = 0, $$1$us = 0, $$157 = 0, $$157$us = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $30 = 0, $33 = 0, $36 = 0, $38 = 0, $39 = 0, $43 = 0, $5 = 0, $56 = 0, $59 = 0, $62 = 0, $65 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $84 = 0;
 $2 = $0 + 4 | 0;
 if (!$1) {
  $84 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  if ($84 | 0) __ZdlPv($84);
  HEAP32[$2 >> 2] = 0;
  return;
 }
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($5, 22468);
  HEAP32[$5 >> 2] = 15792;
  ___cxa_throw($5 | 0, 9584, 225);
 }
 $7 = __Znwm($1 << 2) | 0;
 $8 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $7;
 if ($8 | 0) __ZdlPv($8);
 HEAP32[$2 >> 2] = $1;
 $$05871 = 0;
 do {
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($$05871 << 2) >> 2] = 0;
  $$05871 = $$05871 + 1 | 0;
 } while (($$05871 | 0) != ($1 | 0));
 $10 = $0 + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (!$11) return;
 $17 = HEAP32[$11 + 4 >> 2] | 0;
 $18 = $1 + -1 | 0;
 $20 = ($18 & $1 | 0) == 0;
 if ($20) $26 = $17 & $18; else if ($17 >>> 0 < $1 >>> 0) $26 = $17; else $26 = ($17 >>> 0) % ($1 >>> 0) | 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + ($26 << 2) >> 2] = $10;
 $$05566 = HEAP32[$11 >> 2] | 0;
 if (!$$05566) return;
 if ($20) {
  $$05468$us = $26;
  $$05569$us = $$05566;
  $$05667$us = $11;
  while (1) {
   $30 = HEAP32[$$05569$us + 4 >> 2] & $18;
   do if (($30 | 0) == ($$05468$us | 0)) {
    $$1$us = $$05468$us;
    $$157$us = $$05569$us;
   } else {
    $33 = (HEAP32[$0 >> 2] | 0) + ($30 << 2) | 0;
    if (!(HEAP32[$33 >> 2] | 0)) {
     HEAP32[$33 >> 2] = $$05667$us;
     $$1$us = $30;
     $$157$us = $$05569$us;
     break;
    }
    $36 = HEAP32[$$05569$us >> 2] | 0;
    L37 : do if (!$36) $$0$lcssa$us = $$05569$us; else {
     $43 = HEAP32[$$05569$us + 8 >> 2] | 0;
     $$062$us = $$05569$us;
     $39 = $36;
     while (1) {
      if (($43 | 0) != (HEAP32[$39 + 8 >> 2] | 0)) {
       $$0$lcssa$us = $$062$us;
       break L37;
      }
      $38 = HEAP32[$39 >> 2] | 0;
      if (!$38) {
       $$0$lcssa$us = $39;
       break;
      } else {
       $$062$us$phi = $39;
       $39 = $38;
       $$062$us = $$062$us$phi;
      }
     }
    } while (0);
    HEAP32[$$05667$us >> 2] = HEAP32[$$0$lcssa$us >> 2];
    HEAP32[$$0$lcssa$us >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($30 << 2) >> 2] >> 2];
    HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($30 << 2) >> 2] >> 2] = $$05569$us;
    $$1$us = $$05468$us;
    $$157$us = $$05667$us;
   } while (0);
   $$05569$us = HEAP32[$$157$us >> 2] | 0;
   if (!$$05569$us) break; else {
    $$05468$us = $$1$us;
    $$05667$us = $$157$us;
   }
  }
  return;
 }
 $$05468 = $26;
 $$05569 = $$05566;
 $$05667 = $11;
 while (1) {
  $56 = HEAP32[$$05569 + 4 >> 2] | 0;
  if ($56 >>> 0 < $1 >>> 0) $59 = $56; else $59 = ($56 >>> 0) % ($1 >>> 0) | 0;
  do if (($59 | 0) == ($$05468 | 0)) {
   $$1 = $$05468;
   $$157 = $$05569;
  } else {
   $62 = (HEAP32[$0 >> 2] | 0) + ($59 << 2) | 0;
   if (!(HEAP32[$62 >> 2] | 0)) {
    HEAP32[$62 >> 2] = $$05667;
    $$1 = $59;
    $$157 = $$05569;
    break;
   }
   $65 = HEAP32[$$05569 >> 2] | 0;
   L56 : do if (!$65) $$0$lcssa = $$05569; else {
    $68 = HEAP32[$$05569 + 8 >> 2] | 0;
    $$062 = $$05569;
    $70 = $65;
    while (1) {
     if (($68 | 0) != (HEAP32[$70 + 8 >> 2] | 0)) {
      $$0$lcssa = $$062;
      break L56;
     }
     $69 = HEAP32[$70 >> 2] | 0;
     if (!$69) {
      $$0$lcssa = $70;
      break;
     } else {
      $$062$phi = $70;
      $70 = $69;
      $$062 = $$062$phi;
     }
    }
   } while (0);
   HEAP32[$$05667 >> 2] = HEAP32[$$0$lcssa >> 2];
   HEAP32[$$0$lcssa >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($59 << 2) >> 2] >> 2];
   HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($59 << 2) >> 2] >> 2] = $$05569;
   $$1 = $$05468;
   $$157 = $$05667;
  } while (0);
  $$05569 = HEAP32[$$157 >> 2] | 0;
  if (!$$05569) break; else {
   $$05468 = $$1;
   $$05667 = $$157;
  }
 }
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $103 = 0, $105 = 0, $107 = 0, $113 = 0, $117 = 0, $120 = 0, $128 = 0, $130 = 0, $134 = 0, $140 = 0, $143 = 0, $149 = 0, $153 = 0, $156 = 0, $164 = 0, $166 = 0, $17 = 0, $170 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $42 = 0, $46 = 0, $52 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $80 = 0, $83 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = $2 + 24 | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
  $42 = HEAP32[$32 >> 2] | 0;
  $46 = HEAP32[$32 + 4 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $42 & 7 | 48;
   $42 = _bitshift64Lshr($42 | 0, $46 | 0, 3) | 0;
   $46 = getTempRet0() | 0;
  } while (!(($42 | 0) == 0 & ($46 | 0) == 0));
  return;
 }
 $52 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $52 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $52);
 HEAP32[$7 >> 2] = $52;
 $60 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $63 = HEAP32[$1 + 4 >> 2] & 255;
 $64 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($64 | 0) _memset($60 | 0, $63 | 0, $64 | 0) | 0;
   $68 = $60 + $64 | 0;
   $70 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$70) $80 = $68; else {
    _memmove($68 | 0, HEAP32[$2 + 4 >> 2] | 0, $70 | 0) | 0;
    $80 = $68 + $70 | 0;
   }
   $76 = HEAP32[$2 + 16 >> 2] | 0;
   if ($76 | 0) _memset($80 | 0, HEAP8[$2 + 12 >> 0] | 0, $76 | 0) | 0;
   $83 = $2 + 24 | 0;
   $$0$i$i$i62 = $80 + $76 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $93 = HEAP32[$83 >> 2] | 0;
   $97 = HEAP32[$83 + 4 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $93 & 7 | 48;
    $93 = _bitshift64Lshr($93 | 0, $97 | 0, 3) | 0;
    $97 = getTempRet0() | 0;
   } while (!(($93 | 0) == 0 & ($97 | 0) == 0));
   return;
  }
 case 3:
  {
   $103 = $64 >>> 1;
   if ($103 | 0) _memset($60 | 0, $63 | 0, $103 | 0) | 0;
   $105 = $60 + $103 | 0;
   $107 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$107) $117 = $105; else {
    _memmove($105 | 0, HEAP32[$2 + 4 >> 2] | 0, $107 | 0) | 0;
    $117 = $105 + $107 | 0;
   }
   $113 = HEAP32[$2 + 16 >> 2] | 0;
   if ($113 | 0) _memset($117 | 0, HEAP8[$2 + 12 >> 0] | 0, $113 | 0) | 0;
   $120 = $2 + 24 | 0;
   $128 = $117 + $113 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $$0$i$i$i54 = $128;
   $130 = HEAP32[$120 >> 2] | 0;
   $134 = HEAP32[$120 + 4 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $130 & 7 | 48;
    $130 = _bitshift64Lshr($130 | 0, $134 | 0, 3) | 0;
    $134 = getTempRet0() | 0;
   } while (!(($130 | 0) == 0 & ($134 | 0) == 0));
   $140 = $64 - $103 | 0;
   if (!$140) return;
   _memset($128 | 0, $63 | 0, $140 | 0) | 0;
   return;
  }
 default:
  {
   $143 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$143) $153 = $60; else {
    _memmove($60 | 0, HEAP32[$2 + 4 >> 2] | 0, $143 | 0) | 0;
    $153 = $60 + $143 | 0;
   }
   $149 = HEAP32[$2 + 16 >> 2] | 0;
   if ($149 | 0) _memset($153 | 0, HEAP8[$2 + 12 >> 0] | 0, $149 | 0) | 0;
   $156 = $2 + 24 | 0;
   $164 = $153 + $149 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $$0$i$i$i = $164;
   $166 = HEAP32[$156 >> 2] | 0;
   $170 = HEAP32[$156 + 4 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $166 & 7 | 48;
    $166 = _bitshift64Lshr($166 | 0, $170 | 0, 3) | 0;
    $170 = getTempRet0() | 0;
   } while (!(($166 | 0) == 0 & ($170 | 0) == 0));
   if (!$64) return;
   _memset($164 | 0, $63 | 0, $64 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $103 = 0, $105 = 0, $107 = 0, $113 = 0, $117 = 0, $120 = 0, $128 = 0, $130 = 0, $134 = 0, $140 = 0, $143 = 0, $149 = 0, $153 = 0, $156 = 0, $164 = 0, $166 = 0, $17 = 0, $170 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $42 = 0, $46 = 0, $52 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $80 = 0, $83 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = $2 + 24 | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
  $42 = HEAP32[$32 >> 2] | 0;
  $46 = HEAP32[$32 + 4 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $42 & 1 | 48;
   $42 = _bitshift64Lshr($42 | 0, $46 | 0, 1) | 0;
   $46 = getTempRet0() | 0;
  } while (!(($42 | 0) == 0 & ($46 | 0) == 0));
  return;
 }
 $52 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $52 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $52);
 HEAP32[$7 >> 2] = $52;
 $60 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $63 = HEAP32[$1 + 4 >> 2] & 255;
 $64 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($64 | 0) _memset($60 | 0, $63 | 0, $64 | 0) | 0;
   $68 = $60 + $64 | 0;
   $70 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$70) $80 = $68; else {
    _memmove($68 | 0, HEAP32[$2 + 4 >> 2] | 0, $70 | 0) | 0;
    $80 = $68 + $70 | 0;
   }
   $76 = HEAP32[$2 + 16 >> 2] | 0;
   if ($76 | 0) _memset($80 | 0, HEAP8[$2 + 12 >> 0] | 0, $76 | 0) | 0;
   $83 = $2 + 24 | 0;
   $$0$i$i$i62 = $80 + $76 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $93 = HEAP32[$83 >> 2] | 0;
   $97 = HEAP32[$83 + 4 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $93 & 1 | 48;
    $93 = _bitshift64Lshr($93 | 0, $97 | 0, 1) | 0;
    $97 = getTempRet0() | 0;
   } while (!(($93 | 0) == 0 & ($97 | 0) == 0));
   return;
  }
 case 3:
  {
   $103 = $64 >>> 1;
   if ($103 | 0) _memset($60 | 0, $63 | 0, $103 | 0) | 0;
   $105 = $60 + $103 | 0;
   $107 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$107) $117 = $105; else {
    _memmove($105 | 0, HEAP32[$2 + 4 >> 2] | 0, $107 | 0) | 0;
    $117 = $105 + $107 | 0;
   }
   $113 = HEAP32[$2 + 16 >> 2] | 0;
   if ($113 | 0) _memset($117 | 0, HEAP8[$2 + 12 >> 0] | 0, $113 | 0) | 0;
   $120 = $2 + 24 | 0;
   $128 = $117 + $113 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $$0$i$i$i54 = $128;
   $130 = HEAP32[$120 >> 2] | 0;
   $134 = HEAP32[$120 + 4 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $130 & 1 | 48;
    $130 = _bitshift64Lshr($130 | 0, $134 | 0, 1) | 0;
    $134 = getTempRet0() | 0;
   } while (!(($130 | 0) == 0 & ($134 | 0) == 0));
   $140 = $64 - $103 | 0;
   if (!$140) return;
   _memset($128 | 0, $63 | 0, $140 | 0) | 0;
   return;
  }
 default:
  {
   $143 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$143) $153 = $60; else {
    _memmove($60 | 0, HEAP32[$2 + 4 >> 2] | 0, $143 | 0) | 0;
    $153 = $60 + $143 | 0;
   }
   $149 = HEAP32[$2 + 16 >> 2] | 0;
   if ($149 | 0) _memset($153 | 0, HEAP8[$2 + 12 >> 0] | 0, $149 | 0) | 0;
   $156 = $2 + 24 | 0;
   $164 = $153 + $149 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $$0$i$i$i = $164;
   $166 = HEAP32[$156 >> 2] | 0;
   $170 = HEAP32[$156 + 4 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $166 & 1 | 48;
    $166 = _bitshift64Lshr($166 | 0, $170 | 0, 1) | 0;
    $170 = getTempRet0() | 0;
   } while (!(($166 | 0) == 0 & ($170 | 0) == 0));
   if (!$64) return;
   _memset($164 | 0, $63 | 0, $64 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $103 = 0, $105 = 0, $107 = 0, $113 = 0, $117 = 0, $120 = 0, $128 = 0, $130 = 0, $134 = 0, $140 = 0, $143 = 0, $149 = 0, $153 = 0, $156 = 0, $164 = 0, $166 = 0, $17 = 0, $170 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $42 = 0, $46 = 0, $52 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $80 = 0, $83 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = $2 + 24 | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
  $42 = HEAP32[$32 >> 2] | 0;
  $46 = HEAP32[$32 + 4 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $42 & 7 | 48;
   $42 = _bitshift64Lshr($42 | 0, $46 | 0, 3) | 0;
   $46 = getTempRet0() | 0;
  } while (!(($42 | 0) == 0 & ($46 | 0) == 0));
  return;
 }
 $52 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $52 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $52);
 HEAP32[$7 >> 2] = $52;
 $60 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $63 = HEAP32[$1 + 4 >> 2] & 255;
 $64 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($64 | 0) _memset($60 | 0, $63 | 0, $64 | 0) | 0;
   $68 = $60 + $64 | 0;
   $70 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$70) $80 = $68; else {
    _memmove($68 | 0, HEAP32[$2 + 4 >> 2] | 0, $70 | 0) | 0;
    $80 = $68 + $70 | 0;
   }
   $76 = HEAP32[$2 + 16 >> 2] | 0;
   if ($76 | 0) _memset($80 | 0, HEAP8[$2 + 12 >> 0] | 0, $76 | 0) | 0;
   $83 = $2 + 24 | 0;
   $$0$i$i$i62 = $80 + $76 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $93 = HEAP32[$83 >> 2] | 0;
   $97 = HEAP32[$83 + 4 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $93 & 7 | 48;
    $93 = _bitshift64Lshr($93 | 0, $97 | 0, 3) | 0;
    $97 = getTempRet0() | 0;
   } while (!(($93 | 0) == 0 & ($97 | 0) == 0));
   return;
  }
 case 3:
  {
   $103 = $64 >>> 1;
   if ($103 | 0) _memset($60 | 0, $63 | 0, $103 | 0) | 0;
   $105 = $60 + $103 | 0;
   $107 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$107) $117 = $105; else {
    _memmove($105 | 0, HEAP32[$2 + 4 >> 2] | 0, $107 | 0) | 0;
    $117 = $105 + $107 | 0;
   }
   $113 = HEAP32[$2 + 16 >> 2] | 0;
   if ($113 | 0) _memset($117 | 0, HEAP8[$2 + 12 >> 0] | 0, $113 | 0) | 0;
   $120 = $2 + 24 | 0;
   $128 = $117 + $113 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $$0$i$i$i54 = $128;
   $130 = HEAP32[$120 >> 2] | 0;
   $134 = HEAP32[$120 + 4 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $130 & 7 | 48;
    $130 = _bitshift64Lshr($130 | 0, $134 | 0, 3) | 0;
    $134 = getTempRet0() | 0;
   } while (!(($130 | 0) == 0 & ($134 | 0) == 0));
   $140 = $64 - $103 | 0;
   if (!$140) return;
   _memset($128 | 0, $63 | 0, $140 | 0) | 0;
   return;
  }
 default:
  {
   $143 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$143) $153 = $60; else {
    _memmove($60 | 0, HEAP32[$2 + 4 >> 2] | 0, $143 | 0) | 0;
    $153 = $60 + $143 | 0;
   }
   $149 = HEAP32[$2 + 16 >> 2] | 0;
   if ($149 | 0) _memset($153 | 0, HEAP8[$2 + 12 >> 0] | 0, $149 | 0) | 0;
   $156 = $2 + 24 | 0;
   $164 = $153 + $149 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $$0$i$i$i = $164;
   $166 = HEAP32[$156 >> 2] | 0;
   $170 = HEAP32[$156 + 4 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $166 & 7 | 48;
    $166 = _bitshift64Lshr($166 | 0, $170 | 0, 3) | 0;
    $170 = getTempRet0() | 0;
   } while (!(($166 | 0) == 0 & ($170 | 0) == 0));
   if (!$64) return;
   _memset($164 | 0, $63 | 0, $64 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $103 = 0, $105 = 0, $107 = 0, $113 = 0, $117 = 0, $120 = 0, $128 = 0, $130 = 0, $134 = 0, $140 = 0, $143 = 0, $149 = 0, $153 = 0, $156 = 0, $164 = 0, $166 = 0, $17 = 0, $170 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $42 = 0, $46 = 0, $52 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $80 = 0, $83 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $32 = $2 + 24 | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
  $42 = HEAP32[$32 >> 2] | 0;
  $46 = HEAP32[$32 + 4 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $42 & 1 | 48;
   $42 = _bitshift64Lshr($42 | 0, $46 | 0, 1) | 0;
   $46 = getTempRet0() | 0;
  } while (!(($42 | 0) == 0 & ($46 | 0) == 0));
  return;
 }
 $52 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $52 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $52);
 HEAP32[$7 >> 2] = $52;
 $60 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $63 = HEAP32[$1 + 4 >> 2] & 255;
 $64 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($64 | 0) _memset($60 | 0, $63 | 0, $64 | 0) | 0;
   $68 = $60 + $64 | 0;
   $70 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$70) $80 = $68; else {
    _memmove($68 | 0, HEAP32[$2 + 4 >> 2] | 0, $70 | 0) | 0;
    $80 = $68 + $70 | 0;
   }
   $76 = HEAP32[$2 + 16 >> 2] | 0;
   if ($76 | 0) _memset($80 | 0, HEAP8[$2 + 12 >> 0] | 0, $76 | 0) | 0;
   $83 = $2 + 24 | 0;
   $$0$i$i$i62 = $80 + $76 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $93 = HEAP32[$83 >> 2] | 0;
   $97 = HEAP32[$83 + 4 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $93 & 1 | 48;
    $93 = _bitshift64Lshr($93 | 0, $97 | 0, 1) | 0;
    $97 = getTempRet0() | 0;
   } while (!(($93 | 0) == 0 & ($97 | 0) == 0));
   return;
  }
 case 3:
  {
   $103 = $64 >>> 1;
   if ($103 | 0) _memset($60 | 0, $63 | 0, $103 | 0) | 0;
   $105 = $60 + $103 | 0;
   $107 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$107) $117 = $105; else {
    _memmove($105 | 0, HEAP32[$2 + 4 >> 2] | 0, $107 | 0) | 0;
    $117 = $105 + $107 | 0;
   }
   $113 = HEAP32[$2 + 16 >> 2] | 0;
   if ($113 | 0) _memset($117 | 0, HEAP8[$2 + 12 >> 0] | 0, $113 | 0) | 0;
   $120 = $2 + 24 | 0;
   $128 = $117 + $113 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $$0$i$i$i54 = $128;
   $130 = HEAP32[$120 >> 2] | 0;
   $134 = HEAP32[$120 + 4 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $130 & 1 | 48;
    $130 = _bitshift64Lshr($130 | 0, $134 | 0, 1) | 0;
    $134 = getTempRet0() | 0;
   } while (!(($130 | 0) == 0 & ($134 | 0) == 0));
   $140 = $64 - $103 | 0;
   if (!$140) return;
   _memset($128 | 0, $63 | 0, $140 | 0) | 0;
   return;
  }
 default:
  {
   $143 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$143) $153 = $60; else {
    _memmove($60 | 0, HEAP32[$2 + 4 >> 2] | 0, $143 | 0) | 0;
    $153 = $60 + $143 | 0;
   }
   $149 = HEAP32[$2 + 16 >> 2] | 0;
   if ($149 | 0) _memset($153 | 0, HEAP8[$2 + 12 >> 0] | 0, $149 | 0) | 0;
   $156 = $2 + 24 | 0;
   $164 = $153 + $149 + (HEAP32[$2 + 32 >> 2] | 0) | 0;
   $$0$i$i$i = $164;
   $166 = HEAP32[$156 >> 2] | 0;
   $170 = HEAP32[$156 + 4 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $166 & 1 | 48;
    $166 = _bitshift64Lshr($166 | 0, $170 | 0, 1) | 0;
    $170 = getTempRet0() | 0;
   } while (!(($166 | 0) == 0 & ($170 | 0) == 0));
   if (!$64) return;
   _memset($164 | 0, $63 | 0, $64 | 0) | 0;
   return;
  }
 }
}

function ___get_locale($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $11 = 0, $15 = 0, $2 = 0, $23 = 0, $3 = 0, $40 = 0, $48 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $70 = 0, $72 = 0, $76 = 0, $78 = 0, $82 = 0, $86 = 0, $93 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $2 = sp;
 $3 = sp + 256 | 0;
 do if (!(HEAP8[$1 >> 0] | 0)) {
  $6 = _getenv(22662) | 0;
  if ($6 | 0) if (HEAP8[$6 >> 0] | 0) {
   $$1 = $6;
   break;
  }
  $11 = _getenv(5808 + ($0 * 12 | 0) | 0) | 0;
  if ($11 | 0) if (HEAP8[$11 >> 0] | 0) {
   $$1 = $11;
   break;
  }
  $15 = _getenv(22669) | 0;
  if ($15 | 0) if (HEAP8[$15 >> 0] | 0) {
   $$1 = $15;
   break;
  }
  $$1 = 22674;
 } else $$1 = $1; while (0);
 $$093118 = 0;
 L13 : while (1) {
  switch (HEAP8[$$1 + $$093118 >> 0] | 0) {
  case 47:
  case 0:
   {
    $$093$lcssa = $$093118;
    break L13;
    break;
   }
  default:
   {}
  }
  $$093118 = $$093118 + 1 | 0;
  if ($$093118 >>> 0 >= 15) {
   $$093$lcssa = 15;
   break;
  }
 }
 $23 = HEAP8[$$1 >> 0] | 0;
 if ($23 << 24 >> 24 == 46) {
  $$2122 = 22674;
  label = 15;
 } else if (!(HEAP8[$$1 + $$093$lcssa >> 0] | 0)) if ($23 << 24 >> 24 == 67) {
  $$2122 = $$1;
  label = 15;
 } else {
  $$2123 = $$1;
  label = 16;
 } else {
  $$2122 = 22674;
  label = 15;
 }
 if ((label | 0) == 15) if (!(HEAP8[$$2122 + 1 >> 0] | 0)) {
  $$2124 = $$2122;
  label = 18;
 } else {
  $$2123 = $$2122;
  label = 16;
 }
 L22 : do if ((label | 0) == 16) if (!(_strcmp($$2123, 22674) | 0)) {
  $$2124 = $$2123;
  label = 18;
 } else if (!(_strcmp($$2123, 22682) | 0)) {
  $$2124 = $$2123;
  label = 18;
 } else {
  $40 = HEAP32[7774] | 0;
  if ($40 | 0) {
   $$094114 = $40;
   do {
    if (!(_strcmp($$2123, $$094114 + 8 | 0) | 0)) {
     $$0 = $$094114;
     break L22;
    }
    $$094114 = HEAP32[$$094114 + 24 >> 2] | 0;
   } while (($$094114 | 0) != 0);
  }
  ___lock(31100);
  $48 = HEAP32[7774] | 0;
  L32 : do if ($48 | 0) {
   $$195112 = $48;
   while (1) {
    if (!(_strcmp($$2123, $$195112 + 8 | 0) | 0)) break;
    $54 = HEAP32[$$195112 + 24 >> 2] | 0;
    if (!$54) break L32; else $$195112 = $54;
   }
   ___unlock(31100);
   $$0 = $$195112;
   break L22;
  } while (0);
  L39 : do if (!(HEAP32[7752] | 0)) {
   $58 = _getenv(22688) | 0;
   if (!$58) label = 41; else if (!(HEAP8[$58 >> 0] | 0)) label = 41; else {
    $62 = 254 - $$093$lcssa | 0;
    $63 = $$093$lcssa + 1 | 0;
    $$1100111 = $58;
    while (1) {
     $64 = ___strchrnul($$1100111, 58) | 0;
     $68 = HEAP8[$64 >> 0] | 0;
     $70 = $64 - $$1100111 + (($68 << 24 >> 24 != 0) << 31 >> 31) | 0;
     if ($70 >>> 0 < $62 >>> 0) {
      _memcpy($2 | 0, $$1100111 | 0, $70 | 0) | 0;
      $72 = $2 + $70 | 0;
      HEAP8[$72 >> 0] = 47;
      _memcpy($72 + 1 | 0, $$2123 | 0, $$093$lcssa | 0) | 0;
      HEAP8[$2 + ($63 + $70) >> 0] = 0;
      $76 = ___map_file($2 | 0, $3 | 0) | 0;
      if ($76 | 0) break;
      $86 = HEAP8[$64 >> 0] | 0;
     } else $86 = $68;
     $$1100111 = $64 + ($86 << 24 >> 24 != 0 & 1) | 0;
     if (!(HEAP8[$$1100111 >> 0] | 0)) {
      label = 41;
      break L39;
     }
    }
    $78 = _malloc(28) | 0;
    if (!$78) {
     ___munmap($76, HEAP32[$3 >> 2] | 0) | 0;
     label = 41;
     break;
    } else {
     HEAP32[$78 >> 2] = $76;
     HEAP32[$78 + 4 >> 2] = HEAP32[$3 >> 2];
     $82 = $78 + 8 | 0;
     _memcpy($82 | 0, $$2123 | 0, $$093$lcssa | 0) | 0;
     HEAP8[$82 + $$093$lcssa >> 0] = 0;
     HEAP32[$78 + 24 >> 2] = HEAP32[7774];
     HEAP32[7774] = $78;
     $$4 = $78;
     break;
    }
   }
  } else label = 41; while (0);
  if ((label | 0) == 41) {
   $93 = _malloc(28) | 0;
   if (!$93) $$4 = $93; else {
    HEAP32[$93 >> 2] = HEAP32[2882];
    HEAP32[$93 + 4 >> 2] = HEAP32[2883];
    $98 = $93 + 8 | 0;
    _memcpy($98 | 0, $$2123 | 0, $$093$lcssa | 0) | 0;
    HEAP8[$98 + $$093$lcssa >> 0] = 0;
    HEAP32[$93 + 24 >> 2] = HEAP32[7774];
    HEAP32[7774] = $93;
    $$4 = $93;
   }
  }
  ___unlock(31100);
  $$0 = ($0 | 0) == 0 & ($$4 | 0) == 0 ? 11528 : $$4;
 } while (0);
 do if ((label | 0) == 18) {
  if (!$0) if ((HEAP8[$$2124 + 1 >> 0] | 0) == 46) {
   $$0 = 11528;
   break;
  }
  $$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $13 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $47 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $77 = 0, $86 = 0, label = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $58 = HEAP32[$0 + 12 >> 2] | 0;
   $59 = $0 + 16 + ($58 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4);
   $60 = $0 + 24 | 0;
   if (($58 | 0) <= 1) break;
   $63 = HEAP32[$0 + 8 >> 2] | 0;
   if (!($63 & 2)) {
    $66 = $1 + 36 | 0;
    if ((HEAP32[$66 >> 2] | 0) != 1) {
     if (!($63 & 1)) {
      $86 = $1 + 54 | 0;
      $$2 = $60;
      while (1) {
       if (HEAP8[$86 >> 0] | 0) break L1;
       if ((HEAP32[$66 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4);
       $$2 = $$2 + 8 | 0;
       if ($$2 >>> 0 >= $59 >>> 0) break L1;
      }
     }
     $76 = $1 + 24 | 0;
     $77 = $1 + 54 | 0;
     $$1 = $60;
     while (1) {
      if (HEAP8[$77 >> 0] | 0) break L1;
      if ((HEAP32[$66 >> 2] | 0) == 1) if ((HEAP32[$76 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4);
      $$1 = $$1 + 8 | 0;
      if ($$1 >>> 0 >= $59 >>> 0) break L1;
     }
    }
   }
   $69 = $1 + 54 | 0;
   $$0 = $60;
   while (1) {
    if (HEAP8[$69 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4);
    $$0 = $$0 + 8 | 0;
    if ($$0 >>> 0 >= $59 >>> 0) break L1;
   }
  }
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $26 = $1 + 52 | 0;
    $27 = $1 + 53 | 0;
    $28 = $1 + 54 | 0;
    $29 = $0 + 8 | 0;
    $30 = $1 + 24 | 0;
    $$081$off0 = 0;
    $$084 = $0 + 16 | 0;
    $$085$off0 = 0;
    L32 : while (1) {
     if ($$084 >>> 0 >= $25 >>> 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     HEAP8[$26 >> 0] = 0;
     HEAP8[$27 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4);
     if (HEAP8[$28 >> 0] | 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     do if (!(HEAP8[$27 >> 0] | 0)) {
      $$182$off0 = $$081$off0;
      $$186$off0 = $$085$off0;
     } else {
      if (!(HEAP8[$26 >> 0] | 0)) if (!(HEAP32[$29 >> 2] & 1)) {
       $$283$off0 = 1;
       label = 18;
       break L32;
      } else {
       $$182$off0 = 1;
       $$186$off0 = $$085$off0;
       break;
      }
      if ((HEAP32[$30 >> 2] | 0) == 1) {
       label = 23;
       break L32;
      }
      if (!(HEAP32[$29 >> 2] & 2)) {
       label = 23;
       break L32;
      } else {
       $$182$off0 = 1;
       $$186$off0 = 1;
      }
     } while (0);
     $$081$off0 = $$182$off0;
     $$084 = $$084 + 8 | 0;
     $$085$off0 = $$186$off0;
    }
    do if ((label | 0) == 18) {
     if (!$$085$off0) {
      HEAP32[$13 >> 2] = $2;
      $47 = $1 + 40 | 0;
      HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$30 >> 2] | 0) == 2) {
       HEAP8[$28 >> 0] = 1;
       if ($$283$off0) {
        label = 23;
        break;
       } else {
        $55 = 4;
        break;
       }
      }
     }
     if ($$283$off0) label = 23; else $55 = 4;
    } while (0);
    if ((label | 0) == 23) $55 = 3;
    HEAP32[$19 >> 2] = $55;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i26 = 0, $$0$i$i28 = 0, $$byval_copy = 0, $$sink46 = 0, $$sink47 = 0, $$sink48 = 0, $$sroa$040$0 = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $30 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $54 = 0, $6 = 0, $62 = 0, $7 = 0, $72 = 0, $8 = 0, $80 = 0, $88 = 0, $9 = 0, $91 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 $$byval_copy = sp + 464 | 0;
 $6 = sp + 460 | 0;
 $7 = sp + 468 | 0;
 $8 = sp + 456 | 0;
 $9 = sp + 452 | 0;
 $10 = sp + 440 | 0;
 $11 = sp + 428 | 0;
 $12 = sp + 416 | 0;
 $13 = sp + 412 | 0;
 $14 = sp;
 $15 = sp + 408 | 0;
 $16 = sp + 404 | 0;
 $17 = sp + 400 | 0;
 __ZNKSt3__28ios_base6getlocEv($6, $3);
 $18 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32720) | 0;
 $20 = $5 + 8 + 3 | 0;
 $21 = HEAP8[$20 >> 0] | 0;
 $22 = $21 << 24 >> 24 < 0;
 $23 = $5 + 4 | 0;
 if (!(($22 ? HEAP32[$23 >> 2] | 0 : $21 & 255) | 0)) $42 = 0; else {
  $30 = HEAP32[($22 ? HEAP32[$5 >> 2] | 0 : $5) >> 2] | 0;
  $42 = ($30 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] & 31]($18, 45) | 0);
 };
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$11 >> 2] = 0;
 HEAP32[$11 + 4 >> 2] = 0;
 HEAP32[$11 + 8 >> 2] = 0;
 $$0$i$i26 = 0;
 while (1) {
  if (($$0$i$i26 | 0) == 3) break;
  HEAP32[$11 + ($$0$i$i26 << 2) >> 2] = 0;
  $$0$i$i26 = $$0$i$i26 + 1 | 0;
 }
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 HEAP32[$12 + 8 >> 2] = 0;
 $$0$i$i28 = 0;
 while (1) {
  if (($$0$i$i28 | 0) == 3) break;
  HEAP32[$12 + ($$0$i$i28 << 2) >> 2] = 0;
  $$0$i$i28 = $$0$i$i28 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($2, $42, $6, $7, $8, $9, $10, $11, $12, $13);
 $43 = HEAP8[$20 >> 0] | 0;
 $44 = $43 << 24 >> 24 < 0;
 $47 = $44 ? HEAP32[$23 >> 2] | 0 : $43 & 255;
 $48 = HEAP32[$13 >> 2] | 0;
 if (($47 | 0) > ($48 | 0)) {
  $54 = HEAP8[$12 + 8 + 3 >> 0] | 0;
  $62 = HEAP8[$11 + 8 + 3 >> 0] | 0;
  $$sink46 = $62 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $62 & 255;
  $$sink47 = $48 + 1 + ($47 - $48 << 1) | 0;
  $$sink48 = $54 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $54 & 255;
 } else {
  $72 = HEAP8[$12 + 8 + 3 >> 0] | 0;
  $80 = HEAP8[$11 + 8 + 3 >> 0] | 0;
  $$sink46 = $80 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $80 & 255;
  $$sink47 = $48 + 2 | 0;
  $$sink48 = $72 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $72 & 255;
 }
 $88 = $$sink47 + $$sink48 + $$sink46 | 0;
 if ($88 >>> 0 > 100) {
  $91 = _malloc($88 << 2) | 0;
  if (!$91) __ZSt17__throw_bad_allocv(); else {
   $$0 = $91;
   $$sroa$040$0 = $91;
  }
 } else {
  $$0 = $14;
  $$sroa$040$0 = 0;
 }
 $97 = $44 ? HEAP32[$5 >> 2] | 0 : $5;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($$0, $15, $16, HEAP32[$3 + 4 >> 2] | 0, $97, $97 + ($47 << 2) | 0, $18, $42, $7, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, $10, $11, $12, $48);
 HEAP32[$17 >> 2] = HEAP32[$1 >> 2];
 $102 = HEAP32[$15 >> 2] | 0;
 $103 = HEAP32[$16 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$17 >> 2];
 $104 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $$0, $102, $103, $3, $4) | 0;
 if ($$sroa$040$0 | 0) _free($$sroa$040$0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__26localeD2Ev($6);
 STACKTOP = sp;
 return $104 | 0;
}

function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i78 = 0, $$07$i$i = 0, $$07$i$i77 = 0, $$072 = 0, $$073 = 0, $$075 = 0, $$1 = 0, $$174 = 0, $$176 = 0, $$pre$phiZ2D = 0, $103 = 0, $104 = 0, $112 = 0, $13 = 0, $14 = 0, $16 = 0, $25 = 0, $27 = 0, $28 = 0, $33 = 0, $34 = 0, $42 = 0, $47 = 0, $48 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $8 = 0, $85 = 0, $89 = 0, $9 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $7 = sp;
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32720) | 0;
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32728) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 127]($7, $9);
 $13 = $7 + 11 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $16 = $7 + 4 | 0;
 if (!(($14 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $14 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] & 7]($8, $0, $2, $3) | 0;
  $25 = $0;
  $27 = $3 + ($2 - $25 << 2) | 0;
  HEAP32[$5 >> 2] = $27;
  $$pre$phiZ2D = $25;
  $112 = $27;
 } else {
  HEAP32[$5 >> 2] = $3;
  $28 = HEAP8[$0 >> 0] | 0;
  switch ($28 << 24 >> 24) {
  case 43:
  case 45:
   {
    $33 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] & 31]($8, $28) | 0;
    $34 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $34 + 4;
    HEAP32[$34 >> 2] = $33;
    $$075 = $0 + 1 | 0;
    break;
   }
  default:
   $$075 = $0;
  }
  L7 : do if (($2 - $$075 | 0) > 1) if ((HEAP8[$$075 >> 0] | 0) == 48) {
   $42 = $$075 + 1 | 0;
   switch (HEAP8[$42 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $$176 = $$075;
     break L7;
    }
   }
   $47 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] & 31]($8, 48) | 0;
   $48 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $48 + 4;
   HEAP32[$48 >> 2] = $47;
   $55 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] & 31]($8, HEAP8[$42 >> 0] | 0) | 0;
   $56 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $56 + 4;
   HEAP32[$56 >> 2] = $55;
   $$176 = $$075 + 2 | 0;
  } else $$176 = $$075; else $$176 = $$075; while (0);
  L12 : do if (($$176 | 0) != ($2 | 0)) {
   $$0$i$i = $2;
   $$07$i$i = $$176;
   while (1) {
    $59 = $$0$i$i + -1 | 0;
    if ($$07$i$i >>> 0 >= $59 >>> 0) break L12;
    $61 = HEAP8[$$07$i$i >> 0] | 0;
    HEAP8[$$07$i$i >> 0] = HEAP8[$59 >> 0] | 0;
    HEAP8[$59 >> 0] = $61;
    $$0$i$i = $59;
    $$07$i$i = $$07$i$i + 1 | 0;
   }
  } while (0);
  $67 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] & 127]($9) | 0;
  $$0 = $$176;
  $$072 = 0;
  $$073 = 0;
  while (1) {
   if ($$0 >>> 0 >= $2 >>> 0) break;
   $85 = HEAP8[((HEAP8[$13 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$072 >> 0] | 0;
   if ($85 << 24 >> 24 != 0 & ($$073 | 0) == ($85 << 24 >> 24 | 0)) {
    $89 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $89 + 4;
    HEAP32[$89 >> 2] = $67;
    $91 = HEAP8[$13 >> 0] | 0;
    $$1 = $$072 + ($$072 >>> 0 < (($91 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $91 & 255) + -1 | 0) >>> 0 & 1) | 0;
    $$174 = 0;
   } else {
    $$1 = $$072;
    $$174 = $$073;
   }
   $103 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] & 31]($8, HEAP8[$$0 >> 0] | 0) | 0;
   $104 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $104 + 4;
   HEAP32[$104 >> 2] = $103;
   $$0 = $$0 + 1 | 0;
   $$072 = $$1;
   $$073 = $$174 + 1 | 0;
  }
  $70 = $0;
  $72 = $3 + ($$176 - $70 << 2) | 0;
  $73 = HEAP32[$5 >> 2] | 0;
  if (($72 | 0) == ($73 | 0)) {
   $$pre$phiZ2D = $70;
   $112 = $72;
  } else {
   $$0$i$i78 = $73;
   $$07$i$i77 = $72;
   while (1) {
    $75 = $$0$i$i78 + -4 | 0;
    if ($$07$i$i77 >>> 0 >= $75 >>> 0) break;
    $77 = HEAP32[$$07$i$i77 >> 2] | 0;
    HEAP32[$$07$i$i77 >> 2] = HEAP32[$75 >> 2];
    HEAP32[$75 >> 2] = $77;
    $$0$i$i78 = $75;
    $$07$i$i77 = $$07$i$i77 + 4 | 0;
   }
   $$pre$phiZ2D = $70;
   $112 = HEAP32[$5 >> 2] | 0;
  }
 }
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $112 : $3 + ($1 - $$pre$phiZ2D << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i76 = 0, $$07$i$i = 0, $$07$i$i75 = 0, $$070 = 0, $$071 = 0, $$073 = 0, $$1 = 0, $$172 = 0, $$174 = 0, $$pre$phiZ2D = 0, $103 = 0, $104 = 0, $112 = 0, $13 = 0, $14 = 0, $16 = 0, $25 = 0, $27 = 0, $28 = 0, $33 = 0, $34 = 0, $42 = 0, $47 = 0, $48 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $8 = 0, $85 = 0, $89 = 0, $9 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $7 = sp;
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32688) | 0;
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32704) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 127]($7, $9);
 $13 = $7 + 11 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $16 = $7 + 4 | 0;
 if (!(($14 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $14 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] & 7]($8, $0, $2, $3) | 0;
  $25 = $0;
  $27 = $3 + ($2 - $25) | 0;
  HEAP32[$5 >> 2] = $27;
  $$pre$phiZ2D = $25;
  $112 = $27;
 } else {
  HEAP32[$5 >> 2] = $3;
  $28 = HEAP8[$0 >> 0] | 0;
  switch ($28 << 24 >> 24) {
  case 43:
  case 45:
   {
    $33 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, $28) | 0;
    $34 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $34 + 1;
    HEAP8[$34 >> 0] = $33;
    $$073 = $0 + 1 | 0;
    break;
   }
  default:
   $$073 = $0;
  }
  L7 : do if (($2 - $$073 | 0) > 1) if ((HEAP8[$$073 >> 0] | 0) == 48) {
   $42 = $$073 + 1 | 0;
   switch (HEAP8[$42 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $$174 = $$073;
     break L7;
    }
   }
   $47 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, 48) | 0;
   $48 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $48 + 1;
   HEAP8[$48 >> 0] = $47;
   $55 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, HEAP8[$42 >> 0] | 0) | 0;
   $56 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $56 + 1;
   HEAP8[$56 >> 0] = $55;
   $$174 = $$073 + 2 | 0;
  } else $$174 = $$073; else $$174 = $$073; while (0);
  L12 : do if (($$174 | 0) != ($2 | 0)) {
   $$0$i$i = $2;
   $$07$i$i = $$174;
   while (1) {
    $59 = $$0$i$i + -1 | 0;
    if ($$07$i$i >>> 0 >= $59 >>> 0) break L12;
    $61 = HEAP8[$$07$i$i >> 0] | 0;
    HEAP8[$$07$i$i >> 0] = HEAP8[$59 >> 0] | 0;
    HEAP8[$59 >> 0] = $61;
    $$0$i$i = $59;
    $$07$i$i = $$07$i$i + 1 | 0;
   }
  } while (0);
  $67 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] & 127]($9) | 0;
  $$0 = $$174;
  $$070 = 0;
  $$071 = 0;
  while (1) {
   if ($$0 >>> 0 >= $2 >>> 0) break;
   $85 = HEAP8[((HEAP8[$13 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$070 >> 0] | 0;
   if ($85 << 24 >> 24 != 0 & ($$071 | 0) == ($85 << 24 >> 24 | 0)) {
    $89 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $89 + 1;
    HEAP8[$89 >> 0] = $67;
    $91 = HEAP8[$13 >> 0] | 0;
    $$1 = $$070 + ($$070 >>> 0 < (($91 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $91 & 255) + -1 | 0) >>> 0 & 1) | 0;
    $$172 = 0;
   } else {
    $$1 = $$070;
    $$172 = $$071;
   }
   $103 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, HEAP8[$$0 >> 0] | 0) | 0;
   $104 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $104 + 1;
   HEAP8[$104 >> 0] = $103;
   $$0 = $$0 + 1 | 0;
   $$070 = $$1;
   $$071 = $$172 + 1 | 0;
  }
  $70 = $0;
  $72 = $3 + ($$174 - $70) | 0;
  $73 = HEAP32[$5 >> 2] | 0;
  if (($72 | 0) == ($73 | 0)) {
   $$pre$phiZ2D = $70;
   $112 = $72;
  } else {
   $$0$i$i76 = $73;
   $$07$i$i75 = $72;
   while (1) {
    $75 = $$0$i$i76 + -1 | 0;
    if ($$07$i$i75 >>> 0 >= $75 >>> 0) break;
    $77 = HEAP8[$$07$i$i75 >> 0] | 0;
    HEAP8[$$07$i$i75 >> 0] = HEAP8[$75 >> 0] | 0;
    HEAP8[$75 >> 0] = $77;
    $$0$i$i76 = $75;
    $$07$i$i75 = $$07$i$i75 + 1 | 0;
   }
   $$pre$phiZ2D = $70;
   $112 = HEAP32[$5 >> 2] | 0;
  }
 }
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $112 : $3 + ($1 - $$pre$phiZ2D) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11e_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i = 0, $$010$i$i$i$i$i = 0, $$010$i$i$i$i12 = 0, $$089$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $$089$i$i$i$i13 = 0, $10 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $5 = 0, $56 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $88 = 0, $93 = 0, $96 = 0, $97 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = $1 + 8 | 0;
 $7 = HEAP32[$5 >> 2] | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = ___divdi3($7 | 0, $10 | 0, 1e6, 0) | 0;
 $12 = getTempRet0() | 0;
 $13 = ___divdi3($7 | 0, $10 | 0, 1e3, 0) | 0;
 $14 = getTempRet0() | 0;
 $15 = ___muldi3($11 | 0, $12 | 0, -1e3, -1) | 0;
 $17 = _i64Add($15 | 0, getTempRet0() | 0, $13 | 0, $14 | 0) | 0;
 getTempRet0() | 0;
 $19 = $0 + 4 | 0;
 if (!(HEAP32[$19 >> 2] | 0)) {
  $88 = ((32 - (Math_clz32($17 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
  $93 = $88 + 1 + (((HEAP32[16 + ($88 << 2) >> 2] | 0) >>> 0 > $17 >>> 0) << 31 >> 31) | 0;
  if ($93 >>> 0 < 3) {
   $96 = 19027 + (0 - $93) | 0;
   $97 = $3 + 8 | 0;
   $99 = $96 - 19024 | 0;
   if (($99 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $102 = (HEAP32[$97 >> 2] | 0) + $99 | 0;
   if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $102 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $102);
   if (($96 | 0) != 19024) {
    $$010$i$i$i$i = 19024;
    $$089$i$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$97 >> 2] | 0) | 0;
    while (1) {
     HEAP8[$$089$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i >> 0] | 0;
     $$010$i$i$i$i = $$010$i$i$i$i + 1 | 0;
     if (($$010$i$i$i$i | 0) == ($96 | 0)) break; else $$089$i$i$i$i = $$089$i$i$i$i + 1 | 0;
    }
   }
   HEAP32[$97 >> 2] = $102;
  }
  __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($17, $3);
  STACKTOP = sp;
  return;
 }
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 3, $19, $3);
 $26 = ((32 - (Math_clz32($17 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $31 = $26 + 1 + (((HEAP32[16 + ($26 << 2) >> 2] | 0) >>> 0 > $17 >>> 0) << 31 >> 31) | 0;
 if ($31 >>> 0 < 3) {
  $34 = 19027 + (0 - $31) | 0;
  $35 = $3 + 8 | 0;
  $37 = $34 - 19024 | 0;
  if (($37 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $40 = (HEAP32[$35 >> 2] | 0) + $37 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $40 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $40);
  if (($34 | 0) != 19024) {
   $$010$i$i$i$i12 = 19024;
   $$089$i$i$i$i13 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$35 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i13 >> 0] = HEAP8[$$010$i$i$i$i12 >> 0] | 0;
    $$010$i$i$i$i12 = $$010$i$i$i$i12 + 1 | 0;
    if (($$010$i$i$i$i12 | 0) == ($34 | 0)) break; else $$089$i$i$i$i13 = $$089$i$i$i$i13 + 1 | 0;
   }
  }
  HEAP32[$35 >> 2] = $40;
 }
 __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($17, $3);
 $56 = HEAP32[$4 + 8 >> 2] | 0;
 if ($56 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $56 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $62 = HEAP32[$4 + 12 >> 2] | 0;
  $64 = HEAP32[$4 + 4 >> 2] | 0;
  if ($62 | 0) {
   $66 = $62 + $56 | 0;
   $67 = $64 + 8 | 0;
   if (($56 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $69 = HEAP32[$67 >> 2] | 0;
   $70 = $69 + $56 | 0;
   if ((HEAP32[$64 + 12 >> 2] | 0) >>> 0 < $70 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$64 >> 2] >> 2] & 127]($64, $70);
    $79 = HEAP32[$67 >> 2] | 0;
   } else $79 = $69;
   $$010$i$i$i$i$i = $62;
   $$089$i$i$i$i$i = (HEAP32[$64 + 4 >> 2] | 0) + $79 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
    $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
    if (($$010$i$i$i$i$i | 0) == ($66 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
   }
   HEAP32[$67 >> 2] = $70;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11F_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i = 0, $$010$i$i$i$i$i = 0, $$010$i$i$i$i12 = 0, $$089$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $$089$i$i$i$i13 = 0, $10 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $5 = 0, $56 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $88 = 0, $93 = 0, $96 = 0, $97 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = $1 + 8 | 0;
 $7 = HEAP32[$5 >> 2] | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = ___divdi3($7 | 0, $10 | 0, 1e6, 0) | 0;
 $12 = getTempRet0() | 0;
 $13 = ___muldi3($7 | 0, $10 | 0, 1e3, 0) | 0;
 $14 = getTempRet0() | 0;
 $15 = ___muldi3($11 | 0, $12 | 0, -1e9, -1) | 0;
 $17 = _i64Add($15 | 0, getTempRet0() | 0, $13 | 0, $14 | 0) | 0;
 getTempRet0() | 0;
 $19 = $0 + 4 | 0;
 if (!(HEAP32[$19 >> 2] | 0)) {
  $88 = ((32 - (Math_clz32($17 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
  $93 = $88 + 1 + (((HEAP32[16 + ($88 << 2) >> 2] | 0) >>> 0 > $17 >>> 0) << 31 >> 31) | 0;
  if ($93 >>> 0 < 9) {
   $96 = 19033 + (0 - $93) | 0;
   $97 = $3 + 8 | 0;
   $99 = $96 - 19024 | 0;
   if (($99 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $102 = (HEAP32[$97 >> 2] | 0) + $99 | 0;
   if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $102 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $102);
   if (($96 | 0) != 19024) {
    $$010$i$i$i$i = 19024;
    $$089$i$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$97 >> 2] | 0) | 0;
    while (1) {
     HEAP8[$$089$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i >> 0] | 0;
     $$010$i$i$i$i = $$010$i$i$i$i + 1 | 0;
     if (($$010$i$i$i$i | 0) == ($96 | 0)) break; else $$089$i$i$i$i = $$089$i$i$i$i + 1 | 0;
    }
   }
   HEAP32[$97 >> 2] = $102;
  }
  __ZN6spdlog7details10fmt_helper10append_intImLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($17, $3);
  STACKTOP = sp;
  return;
 }
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 9, $19, $3);
 $26 = ((32 - (Math_clz32($17 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $31 = $26 + 1 + (((HEAP32[16 + ($26 << 2) >> 2] | 0) >>> 0 > $17 >>> 0) << 31 >> 31) | 0;
 if ($31 >>> 0 < 9) {
  $34 = 19033 + (0 - $31) | 0;
  $35 = $3 + 8 | 0;
  $37 = $34 - 19024 | 0;
  if (($37 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $40 = (HEAP32[$35 >> 2] | 0) + $37 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $40 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $40);
  if (($34 | 0) != 19024) {
   $$010$i$i$i$i12 = 19024;
   $$089$i$i$i$i13 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$35 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i13 >> 0] = HEAP8[$$010$i$i$i$i12 >> 0] | 0;
    $$010$i$i$i$i12 = $$010$i$i$i$i12 + 1 | 0;
    if (($$010$i$i$i$i12 | 0) == ($34 | 0)) break; else $$089$i$i$i$i13 = $$089$i$i$i$i13 + 1 | 0;
   }
  }
  HEAP32[$35 >> 2] = $40;
 }
 __ZN6spdlog7details10fmt_helper10append_intImLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($17, $3);
 $56 = HEAP32[$4 + 8 >> 2] | 0;
 if ($56 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $56 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $62 = HEAP32[$4 + 12 >> 2] | 0;
  $64 = HEAP32[$4 + 4 >> 2] | 0;
  if ($62 | 0) {
   $66 = $62 + $56 | 0;
   $67 = $64 + 8 | 0;
   if (($56 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $69 = HEAP32[$67 >> 2] | 0;
   $70 = $69 + $56 | 0;
   if ((HEAP32[$64 + 12 >> 2] | 0) >>> 0 < $70 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$64 >> 2] >> 2] & 127]($64, $70);
    $79 = HEAP32[$67 >> 2] | 0;
   } else $79 = $69;
   $$010$i$i$i$i$i = $62;
   $$089$i$i$i$i$i = (HEAP32[$64 + 4 >> 2] | 0) + $79 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
    $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
    if (($$010$i$i$i$i$i | 0) == ($66 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
   }
   HEAP32[$67 >> 2] = $70;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIxEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$020$i$i = 0, $$029$lcssa$i$i$i = 0, $$02932$i$i$i = 0, $$sink = 0, $$sink6 = 0, $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = 0, $$sroa$0$0$copyload$i$i = 0, $10 = 0, $102 = 0, $104 = 0, $11 = 0, $111 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $26 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $43 = 0, $45 = 0, $5 = 0, $50 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $72 = 0, $75 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $89 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 if ($5 | 0) {
  $8 = HEAP8[$5 + 17 >> 0] | 0;
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $5;
  $10 = $3 + 8 | 0;
  $11 = $10;
  HEAP32[$11 >> 2] = $1;
  HEAP32[$11 + 4 >> 2] = $2;
  $15 = $3 + 20 | 0;
  HEAP32[$15 >> 2] = 0;
  if (($2 | 0) < 0) {
   HEAP8[$3 + 16 >> 0] = 45;
   HEAP32[$15 >> 2] = 1;
   $18 = _i64Subtract(0, 0, $1 | 0, $2 | 0) | 0;
   $19 = getTempRet0() | 0;
   $20 = $10;
   HEAP32[$20 >> 2] = $18;
   HEAP32[$20 + 4 >> 2] = $19;
  } else {
   $26 = HEAPU8[$5 + 16 >> 0] | 0;
   if ($26 & 1 | 0) {
    HEAP8[$3 + 16 >> 0] = ($26 & 2 | 0) == 0 ? 32 : 43;
    HEAP32[$15 >> 2] = 1;
   }
  }
  __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEEEEEvcOT_($8, $3);
  $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
  $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
  STACKTOP = sp;
  return $$sroa$0$0$copyload$i$i | 0;
 }
 $33 = ($2 | 0) < 0;
 $34 = _i64Subtract(0, 0, $1 | 0, $2 | 0) | 0;
 $35 = getTempRet0() | 0;
 $36 = $33 ? $34 : $1;
 $37 = $33 ? $35 : $2;
 $39 = _llvm_ctlz_i64($36 | 1 | 0, $37 | 0, 1) | 0;
 getTempRet0() | 0;
 $43 = ((64 - $39 | 0) * 1233 | 0) >>> 12;
 $45 = 272 + ($43 << 3) | 0;
 $50 = HEAP32[$45 + 4 >> 2] | 0;
 $57 = $43 + 1 + (($50 >>> 0 > $37 >>> 0 | (($50 | 0) == ($37 | 0) ? (HEAP32[$45 >> 2] | 0) >>> 0 > $36 >>> 0 : 0)) << 31 >> 31) | 0;
 $58 = _bitshift64Lshr($1 | 0, $2 | 0, 63) | 0;
 getTempRet0() | 0;
 $60 = HEAP32[$0 >> 2] | 0;
 $61 = $60 + 8 | 0;
 $62 = HEAP32[$61 >> 2] | 0;
 $64 = $62 + $58 + $57 | 0;
 if ((HEAP32[$60 + 12 >> 2] | 0) >>> 0 < $64 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$60 >> 2] >> 2] & 127]($60, $64);
 HEAP32[$61 >> 2] = $64;
 $72 = (HEAP32[$60 + 4 >> 2] | 0) + $62 | 0;
 if ($33) {
  HEAP8[$72 >> 0] = 45;
  $$020$i$i = $72 + 1 | 0;
 } else $$020$i$i = $72;
 if (($57 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
 $75 = $3 + $57 | 0;
 if ($37 >>> 0 > 0 | ($37 | 0) == 0 & $36 >>> 0 > 99) {
  $$02932$i$i$i = $75;
  $81 = $36;
  $82 = $37;
  while (1) {
   $83 = ___udivdi3($81 | 0, $82 | 0, 100, 0) | 0;
   $84 = getTempRet0() | 0;
   $85 = ___muldi3($83 | 0, $84 | 0, 100, 0) | 0;
   $87 = _i64Subtract($81 | 0, $82 | 0, $85 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $89 = $87 << 1;
   HEAP8[$$02932$i$i$i + -1 >> 0] = HEAP8[64 + ($89 | 1) >> 0] | 0;
   $96 = $$02932$i$i$i + -2 | 0;
   HEAP8[$96 >> 0] = HEAP8[64 + $89 >> 0] | 0;
   if ($82 >>> 0 > 0 | ($82 | 0) == 0 & $81 >>> 0 > 9999) {
    $$02932$i$i$i = $96;
    $81 = $83;
    $82 = $84;
   } else {
    $$029$lcssa$i$i$i = $96;
    $102 = $84;
    $104 = $83;
    break;
   }
  }
 } else {
  $$029$lcssa$i$i$i = $75;
  $102 = $37;
  $104 = $36;
 }
 if ($102 >>> 0 < 0 | ($102 | 0) == 0 & $104 >>> 0 < 10) {
  $$sink = ($104 & 255) + 48 << 24 >> 24;
  $$sink6 = -1;
 } else {
  $111 = $104 << 1;
  HEAP8[$$029$lcssa$i$i$i + -1 >> 0] = HEAP8[64 + ($111 | 1) >> 0] | 0;
  $$sink = HEAP8[64 + $111 >> 0] | 0;
  $$sink6 = -2;
 }
 HEAP8[$$029$lcssa$i$i$i + $$sink6 >> 0] = $$sink;
 if ($57 | 0) _memcpy($$020$i$i | 0, $3 | 0, $57 | 0) | 0;
 $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
 $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$0$0$copyload$i$i | 0;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$025 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$sroa$0$0$copyload = 0, $$sroa$027$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $39 = 0, $40 = 0, $42 = 0, $45 = 0, $59 = 0, $62 = 0, $7 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $91 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 $$byval_copy = sp + 512 | 0;
 $vararg_buffer = sp + 552 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 568 | 0;
 $9 = sp + 564 | 0;
 $10 = sp + 560 | 0;
 $11 = sp + 576 | 0;
 $12 = sp + 556 | 0;
 $13 = sp;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$8 + 4 >> 2] = 234;
 __ZNKSt3__28ios_base6getlocEv($10, $4);
 $17 = __ZNKSt3__26locale9use_facetERNS0_2idE($10, 32720) | 0;
 HEAP8[$11 >> 0] = 0;
 HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
 $20 = HEAP32[$4 + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($1, $$byval_copy, $3, $10, $20, $5, $11, $17, $8, $9, $7 + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 48 >> 2] & 7]($17, 24804, 24814, $$byval_copy) | 0;
  $25 = HEAP32[$9 >> 2] | 0;
  $26 = HEAP32[$8 >> 2] | 0;
  $27 = $25 - $26 | 0;
  $29 = $26;
  $30 = $25;
  if (($27 | 0) > 392) {
   $33 = _malloc(($27 >>> 2) + 2 | 0) | 0;
   if (!$33) __ZSt17__throw_bad_allocv(); else {
    $$025 = $33;
    $$sroa$027$0 = $33;
   }
  } else {
   $$025 = $13;
   $$sroa$027$0 = 0;
  }
  if (!(HEAP8[$11 >> 0] | 0)) $$1 = $$025; else {
   HEAP8[$$025 >> 0] = 45;
   $$1 = $$025 + 1 | 0;
  }
  $39 = $$byval_copy + 40 | 0;
  $40 = $$byval_copy;
  $$0 = $29;
  $$2 = $$1;
  $42 = $30;
  while (1) {
   if ($$0 >>> 0 >= $42 >>> 0) break;
   $45 = HEAP32[$$0 >> 2] | 0;
   $$0$i = $$byval_copy;
   while (1) {
    if (($$0$i | 0) == ($39 | 0)) {
     $$0$lcssa$i = $39;
     break;
    }
    if ((HEAP32[$$0$i >> 2] | 0) == ($45 | 0)) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $$0$i = $$0$i + 4 | 0;
   }
   HEAP8[$$2 >> 0] = HEAP8[24804 + ($$0$lcssa$i - $40 >> 2) >> 0] | 0;
   $$0 = $$0 + 4 | 0;
   $$2 = $$2 + 1 | 0;
   $42 = HEAP32[$9 >> 2] | 0;
  }
  HEAP8[$$2 >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $6;
  if ((_sscanf($13, 24705, $vararg_buffer) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if ($$sroa$027$0 | 0) _free($$sroa$027$0);
 }
 $59 = HEAP32[$1 >> 2] | 0;
 do if (!$59) $95 = 1; else {
  $62 = HEAP32[$59 + 12 >> 2] | 0;
  if (($62 | 0) == (HEAP32[$59 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$62 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $95 = 1;
   break;
  } else {
   $95 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $74 = HEAP32[$2 >> 2] | 0;
 do if (!$74) label = 32; else {
  $77 = HEAP32[$74 + 12 >> 2] | 0;
  if (($77 | 0) == (HEAP32[$74 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$74 >> 2] | 0) + 36 >> 2] & 127]($74) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$77 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 32;
   break;
  } else if ($95) break; else {
   label = 34;
   break;
  }
 } while (0);
 if ((label | 0) == 32) if ($95) label = 34;
 if ((label | 0) == 34) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__26localeD2Ev($10);
 $91 = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = 0;
 if ($91 | 0) FUNCTION_TABLE_vi[HEAP32[$8 + 4 >> 2] & 255]($91);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i26 = 0, $$0$i$i29 = 0, $$byval_copy = 0, $$sink47 = 0, $$sink48 = 0, $$sink49 = 0, $$sroa$041$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $52 = 0, $59 = 0, $6 = 0, $68 = 0, $7 = 0, $75 = 0, $8 = 0, $83 = 0, $85 = 0, $9 = 0, $91 = 0, $96 = 0, $97 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $$byval_copy = sp + 156 | 0;
 $6 = sp + 152 | 0;
 $7 = sp + 164 | 0;
 $8 = sp + 161 | 0;
 $9 = sp + 160 | 0;
 $10 = sp + 140 | 0;
 $11 = sp + 128 | 0;
 $12 = sp + 116 | 0;
 $13 = sp + 112 | 0;
 $14 = sp;
 $15 = sp + 108 | 0;
 $16 = sp + 104 | 0;
 $17 = sp + 100 | 0;
 __ZNKSt3__28ios_base6getlocEv($6, $3);
 $18 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 32688) | 0;
 $19 = $5 + 11 | 0;
 $20 = HEAP8[$19 >> 0] | 0;
 $21 = $20 << 24 >> 24 < 0;
 $22 = $5 + 4 | 0;
 if (!(($21 ? HEAP32[$22 >> 2] | 0 : $20 & 255) | 0)) $41 = 0; else {
  $29 = HEAP8[($21 ? HEAP32[$5 >> 2] | 0 : $5) >> 0] | 0;
  $41 = $29 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] & 31]($18, 45) | 0) << 24 >> 24;
 };
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$11 >> 2] = 0;
 HEAP32[$11 + 4 >> 2] = 0;
 HEAP32[$11 + 8 >> 2] = 0;
 $$0$i$i26 = 0;
 while (1) {
  if (($$0$i$i26 | 0) == 3) break;
  HEAP32[$11 + ($$0$i$i26 << 2) >> 2] = 0;
  $$0$i$i26 = $$0$i$i26 + 1 | 0;
 }
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 HEAP32[$12 + 8 >> 2] = 0;
 $$0$i$i29 = 0;
 while (1) {
  if (($$0$i$i29 | 0) == 3) break;
  HEAP32[$12 + ($$0$i$i29 << 2) >> 2] = 0;
  $$0$i$i29 = $$0$i$i29 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($2, $41, $6, $7, $8, $9, $10, $11, $12, $13);
 $42 = HEAP8[$19 >> 0] | 0;
 $43 = $42 << 24 >> 24 < 0;
 $46 = $43 ? HEAP32[$22 >> 2] | 0 : $42 & 255;
 $47 = HEAP32[$13 >> 2] | 0;
 if (($46 | 0) > ($47 | 0)) {
  $52 = HEAP8[$12 + 11 >> 0] | 0;
  $59 = HEAP8[$11 + 11 >> 0] | 0;
  $$sink47 = $59 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $59 & 255;
  $$sink48 = $47 + 1 + ($46 - $47 << 1) | 0;
  $$sink49 = $52 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $52 & 255;
 } else {
  $68 = HEAP8[$12 + 11 >> 0] | 0;
  $75 = HEAP8[$11 + 11 >> 0] | 0;
  $$sink47 = $75 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $75 & 255;
  $$sink48 = $47 + 2 | 0;
  $$sink49 = $68 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $68 & 255;
 }
 $83 = $$sink48 + $$sink49 + $$sink47 | 0;
 if ($83 >>> 0 > 100) {
  $85 = _malloc($83) | 0;
  if (!$85) __ZSt17__throw_bad_allocv(); else {
   $$0 = $85;
   $$sroa$041$0 = $85;
  }
 } else {
  $$0 = $14;
  $$sroa$041$0 = 0;
 }
 $91 = $43 ? HEAP32[$5 >> 2] | 0 : $5;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($$0, $15, $16, HEAP32[$3 + 4 >> 2] | 0, $91, $91 + $46 | 0, $18, $41, $7, HEAP8[$8 >> 0] | 0, HEAP8[$9 >> 0] | 0, $10, $11, $12, $47);
 HEAP32[$17 >> 2] = HEAP32[$1 >> 2];
 $96 = HEAP32[$15 >> 2] | 0;
 $97 = HEAP32[$16 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$17 >> 2];
 $98 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $$0, $96, $97, $3, $4) | 0;
 if ($$sroa$041$0 | 0) _free($$sroa$041$0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__26localeD2Ev($6);
 STACKTOP = sp;
 return $98 | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$025 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$sroa$0$0$copyload = 0, $$sroa$028$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $38 = 0, $39 = 0, $41 = 0, $44 = 0, $57 = 0, $60 = 0, $7 = 0, $72 = 0, $75 = 0, $8 = 0, $89 = 0, $9 = 0, $93 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $$byval_copy = sp + 240 | 0;
 $vararg_buffer = sp + 216 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 232 | 0;
 $9 = sp + 228 | 0;
 $10 = sp + 224 | 0;
 $11 = sp + 250 | 0;
 $12 = sp + 220 | 0;
 $13 = sp;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$8 + 4 >> 2] = 234;
 __ZNKSt3__28ios_base6getlocEv($10, $4);
 $17 = __ZNKSt3__26locale9use_facetERNS0_2idE($10, 32688) | 0;
 HEAP8[$11 >> 0] = 0;
 HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
 $20 = HEAP32[$4 + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($1, $$byval_copy, $3, $10, $20, $5, $11, $17, $8, $9, $7 + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] & 7]($17, 24694, 24704, $$byval_copy) | 0;
  $25 = HEAP32[$9 >> 2] | 0;
  $26 = HEAP32[$8 >> 2] | 0;
  $27 = $25 - $26 | 0;
  $29 = $26;
  $30 = $25;
  if (($27 | 0) > 98) {
   $32 = _malloc($27 + 2 | 0) | 0;
   if (!$32) __ZSt17__throw_bad_allocv(); else {
    $$025 = $32;
    $$sroa$028$0 = $32;
   }
  } else {
   $$025 = $13;
   $$sroa$028$0 = 0;
  }
  if (!(HEAP8[$11 >> 0] | 0)) $$1 = $$025; else {
   HEAP8[$$025 >> 0] = 45;
   $$1 = $$025 + 1 | 0;
  }
  $38 = $$byval_copy + 10 | 0;
  $39 = $$byval_copy;
  $$0 = $29;
  $$2 = $$1;
  $41 = $30;
  while (1) {
   if ($$0 >>> 0 >= $41 >>> 0) break;
   $44 = HEAP8[$$0 >> 0] | 0;
   $$0$i = $$byval_copy;
   while (1) {
    if (($$0$i | 0) == ($38 | 0)) {
     $$0$lcssa$i = $38;
     break;
    }
    if ((HEAP8[$$0$i >> 0] | 0) == $44 << 24 >> 24) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $$0$i = $$0$i + 1 | 0;
   }
   HEAP8[$$2 >> 0] = HEAP8[24694 + ($$0$lcssa$i - $39) >> 0] | 0;
   $$0 = $$0 + 1 | 0;
   $$2 = $$2 + 1 | 0;
   $41 = HEAP32[$9 >> 2] | 0;
  }
  HEAP8[$$2 >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $6;
  if ((_sscanf($13, 24705, $vararg_buffer) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if ($$sroa$028$0 | 0) _free($$sroa$028$0);
 }
 $57 = HEAP32[$1 >> 2] | 0;
 do if (!$57) $93 = 1; else {
  $60 = HEAP32[$57 + 12 >> 2] | 0;
  if (($60 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 127]($57) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$60 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $93 = 1;
   break;
  } else {
   $93 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $72 = HEAP32[$2 >> 2] | 0;
 do if (!$72) label = 32; else {
  $75 = HEAP32[$72 + 12 >> 2] | 0;
  if (($75 | 0) == (HEAP32[$72 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] & 127]($72) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$75 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 32;
   break;
  } else if ($93) break; else {
   label = 34;
   break;
  }
 } while (0);
 if ((label | 0) == 32) if ($93) label = 34;
 if ((label | 0) == 34) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__26localeD2Ev($10);
 $89 = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = 0;
 if ($89 | 0) FUNCTION_TABLE_vi[HEAP32[$8 + 4 >> 2] & 255]($89);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $102 = 0, $18 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $44 = 0, $47 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $60 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $71 = 0, $75 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $89 = 0, $9 = 0, $93 = 0, $95 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $7 = HEAP32[$0 >> 2] | 0;
  $8 = $7 + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  HEAP32[$3 >> 2] = $18;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $24 = $18 + $20 | 0;
   HEAP32[$3 >> 2] = $24;
   $30 = $24;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  HEAP32[$3 >> 2] = $30 + $26;
  __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($2 + 24 | 0, $3);
  STACKTOP = sp;
  return;
 }
 $33 = HEAP32[$0 >> 2] | 0;
 $34 = $33 + 8 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $35 + $4 | 0;
 if ((HEAP32[$33 + 12 >> 2] | 0) >>> 0 < $36 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$33 >> 2] >> 2] & 127]($33, $36);
 HEAP32[$34 >> 2] = $36;
 $44 = (HEAP32[$33 + 4 >> 2] | 0) + $35 | 0;
 HEAP32[$3 >> 2] = $44;
 $47 = HEAP32[$1 + 4 >> 2] & 255;
 $48 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($48 | 0) _memset($44 | 0, $47 | 0, $48 | 0) | 0;
   $52 = $44 + $48 | 0;
   HEAP32[$3 >> 2] = $52;
   $54 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$54) $64 = $52; else {
    _memmove($52 | 0, HEAP32[$2 + 4 >> 2] | 0, $54 | 0) | 0;
    $58 = $52 + $54 | 0;
    HEAP32[$3 >> 2] = $58;
    $64 = $58;
   }
   $60 = HEAP32[$2 + 16 >> 2] | 0;
   if ($60 | 0) _memset($64 | 0, HEAP8[$2 + 12 >> 0] | 0, $60 | 0) | 0;
   HEAP32[$3 >> 2] = $64 + $60;
   __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($2 + 24 | 0, $3);
   break;
  }
 case 3:
  {
   $67 = $48 >>> 1;
   if ($67 | 0) _memset($44 | 0, $47 | 0, $67 | 0) | 0;
   $69 = $44 + $67 | 0;
   HEAP32[$3 >> 2] = $69;
   $71 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$71) $81 = $69; else {
    _memmove($69 | 0, HEAP32[$2 + 4 >> 2] | 0, $71 | 0) | 0;
    $75 = $69 + $71 | 0;
    HEAP32[$3 >> 2] = $75;
    $81 = $75;
   }
   $77 = HEAP32[$2 + 16 >> 2] | 0;
   if ($77 | 0) _memset($81 | 0, HEAP8[$2 + 12 >> 0] | 0, $77 | 0) | 0;
   HEAP32[$3 >> 2] = $81 + $77;
   __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($2 + 24 | 0, $3);
   $84 = HEAP32[$3 >> 2] | 0;
   $85 = $48 - $67 | 0;
   if ($85 | 0) _memset($84 | 0, $47 | 0, $85 | 0) | 0;
   HEAP32[$3 >> 2] = $84 + $85;
   break;
  }
 default:
  {
   $89 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$89) $99 = $44; else {
    _memmove($44 | 0, HEAP32[$2 + 4 >> 2] | 0, $89 | 0) | 0;
    $93 = $44 + $89 | 0;
    HEAP32[$3 >> 2] = $93;
    $99 = $93;
   }
   $95 = HEAP32[$2 + 16 >> 2] | 0;
   if ($95 | 0) _memset($99 | 0, HEAP8[$2 + 12 >> 0] | 0, $95 | 0) | 0;
   HEAP32[$3 >> 2] = $99 + $95;
   __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($2 + 24 | 0, $3);
   $102 = HEAP32[$3 >> 2] | 0;
   if ($48 | 0) _memset($102 | 0, $47 | 0, $48 | 0) | 0;
   HEAP32[$3 >> 2] = $102 + $48;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $102 = 0, $18 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $44 = 0, $47 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $60 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $71 = 0, $75 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $89 = 0, $9 = 0, $93 = 0, $95 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 if ($4 >>> 0 <= $5 >>> 0) {
  $7 = HEAP32[$0 >> 2] | 0;
  $8 = $7 + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
  HEAP32[$8 >> 2] = $10;
  $18 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
  HEAP32[$3 >> 2] = $18;
  $20 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$20) $30 = $18; else {
   _memmove($18 | 0, HEAP32[$2 + 4 >> 2] | 0, $20 | 0) | 0;
   $24 = $18 + $20 | 0;
   HEAP32[$3 >> 2] = $24;
   $30 = $24;
  }
  $26 = HEAP32[$2 + 16 >> 2] | 0;
  if ($26 | 0) _memset($30 | 0, HEAP8[$2 + 12 >> 0] | 0, $26 | 0) | 0;
  HEAP32[$3 >> 2] = $30 + $26;
  __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($2 + 24 | 0, $3);
  STACKTOP = sp;
  return;
 }
 $33 = HEAP32[$0 >> 2] | 0;
 $34 = $33 + 8 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $35 + $4 | 0;
 if ((HEAP32[$33 + 12 >> 2] | 0) >>> 0 < $36 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$33 >> 2] >> 2] & 127]($33, $36);
 HEAP32[$34 >> 2] = $36;
 $44 = (HEAP32[$33 + 4 >> 2] | 0) + $35 | 0;
 HEAP32[$3 >> 2] = $44;
 $47 = HEAP32[$1 + 4 >> 2] & 255;
 $48 = $4 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($48 | 0) _memset($44 | 0, $47 | 0, $48 | 0) | 0;
   $52 = $44 + $48 | 0;
   HEAP32[$3 >> 2] = $52;
   $54 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$54) $64 = $52; else {
    _memmove($52 | 0, HEAP32[$2 + 4 >> 2] | 0, $54 | 0) | 0;
    $58 = $52 + $54 | 0;
    HEAP32[$3 >> 2] = $58;
    $64 = $58;
   }
   $60 = HEAP32[$2 + 16 >> 2] | 0;
   if ($60 | 0) _memset($64 | 0, HEAP8[$2 + 12 >> 0] | 0, $60 | 0) | 0;
   HEAP32[$3 >> 2] = $64 + $60;
   __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($2 + 24 | 0, $3);
   break;
  }
 case 3:
  {
   $67 = $48 >>> 1;
   if ($67 | 0) _memset($44 | 0, $47 | 0, $67 | 0) | 0;
   $69 = $44 + $67 | 0;
   HEAP32[$3 >> 2] = $69;
   $71 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$71) $81 = $69; else {
    _memmove($69 | 0, HEAP32[$2 + 4 >> 2] | 0, $71 | 0) | 0;
    $75 = $69 + $71 | 0;
    HEAP32[$3 >> 2] = $75;
    $81 = $75;
   }
   $77 = HEAP32[$2 + 16 >> 2] | 0;
   if ($77 | 0) _memset($81 | 0, HEAP8[$2 + 12 >> 0] | 0, $77 | 0) | 0;
   HEAP32[$3 >> 2] = $81 + $77;
   __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($2 + 24 | 0, $3);
   $84 = HEAP32[$3 >> 2] | 0;
   $85 = $48 - $67 | 0;
   if ($85 | 0) _memset($84 | 0, $47 | 0, $85 | 0) | 0;
   HEAP32[$3 >> 2] = $84 + $85;
   break;
  }
 default:
  {
   $89 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$89) $99 = $44; else {
    _memmove($44 | 0, HEAP32[$2 + 4 >> 2] | 0, $89 | 0) | 0;
    $93 = $44 + $89 | 0;
    HEAP32[$3 >> 2] = $93;
    $99 = $93;
   }
   $95 = HEAP32[$2 + 16 >> 2] | 0;
   if ($95 | 0) _memset($99 | 0, HEAP8[$2 + 12 >> 0] | 0, $95 | 0) | 0;
   HEAP32[$3 >> 2] = $99 + $95;
   __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($2 + 24 | 0, $3);
   $102 = HEAP32[$3 >> 2] | 0;
   if ($48 | 0) _memset($102 | 0, $47 | 0, $48 | 0) | 0;
   HEAP32[$3 >> 2] = $102 + $48;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11r_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i37 = 0, $$089$i$i$i$i$i38 = 0, $$idx = 0, $$idx$val = 0, $$pre$i18 = 0, $$pre$i19 = 0, $$pre$i24 = 0, $$pre$phi$i21Z2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$str$151$$str$152$i = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $24 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $50 = 0, $51 = 0, $57 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $80 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 11, $0 + 4 | 0, $3);
 $$idx = $2 + 8 | 0;
 $$idx$val = HEAP32[$$idx >> 2] | 0;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(($$idx$val | 0) > 12 ? $$idx$val + -12 | 0 : $$idx$val, $3);
 $9 = $3 + 8 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $10 + 1 | 0;
 $12 = $3 + 12 | 0;
 if ((HEAP32[$12 >> 2] | 0) >>> 0 < $11 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $11);
  $$pre$i18 = HEAP32[$9 >> 2] | 0;
  $$pre$phi$iZ2D = $$pre$i18 + 1 | 0;
  $20 = $$pre$i18;
 } else {
  $$pre$phi$iZ2D = $11;
  $20 = $10;
 }
 $17 = $3 + 4 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 HEAP32[$9 >> 2] = $$pre$phi$iZ2D;
 HEAP8[$18 + $20 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 4 >> 2] | 0, $3);
 $23 = HEAP32[$9 >> 2] | 0;
 $24 = $23 + 1 | 0;
 if ((HEAP32[$12 >> 2] | 0) >>> 0 < $24 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $24);
  $$pre$i19 = HEAP32[$9 >> 2] | 0;
  $$pre$phi$i21Z2D = $$pre$i19 + 1 | 0;
  $31 = $$pre$i19;
 } else {
  $$pre$phi$i21Z2D = $24;
  $31 = $23;
 }
 $29 = HEAP32[$17 >> 2] | 0;
 HEAP32[$9 >> 2] = $$pre$phi$i21Z2D;
 HEAP8[$29 + $31 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 >> 2] | 0, $3);
 $33 = HEAP32[$9 >> 2] | 0;
 $34 = $33 + 1 | 0;
 if ((HEAP32[$12 >> 2] | 0) >>> 0 < $34 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $34);
  $$pre$i24 = HEAP32[$9 >> 2] | 0;
  $$pre$phi$i26Z2D = $$pre$i24 + 1 | 0;
  $41 = $$pre$i24;
 } else {
  $$pre$phi$i26Z2D = $34;
  $41 = $33;
 }
 $39 = HEAP32[$17 >> 2] | 0;
 HEAP32[$9 >> 2] = $$pre$phi$i26Z2D;
 HEAP8[$39 + $41 >> 0] = 32;
 $$str$151$$str$152$i = (HEAP32[$$idx >> 2] | 0) > 11 ? 23911 : 23908;
 $43 = HEAP32[$9 >> 2] | 0;
 $44 = $43 + 2 | 0;
 if ((HEAP32[$12 >> 2] | 0) >>> 0 < $44 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $44);
  $51 = HEAP32[$9 >> 2] | 0;
 } else $51 = $43;
 $50 = (HEAP32[$17 >> 2] | 0) + $51 | 0;
 HEAP8[$50 >> 0] = HEAP8[$$str$151$$str$152$i >> 0] | 0;
 HEAP8[$50 + 1 >> 0] = HEAP8[$$str$151$$str$152$i + 1 >> 0] | 0;
 HEAP32[$9 >> 2] = $44;
 $57 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$57) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $57 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $63 = HEAP32[$4 + 12 >> 2] | 0;
 $65 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$63) {
  STACKTOP = sp;
  return;
 }
 $67 = $63 + $57 | 0;
 $68 = $65 + 8 | 0;
 if (($57 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $70 = HEAP32[$68 >> 2] | 0;
 $71 = $70 + $57 | 0;
 if ((HEAP32[$65 + 12 >> 2] | 0) >>> 0 < $71 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$65 >> 2] >> 2] & 127]($65, $71);
  $80 = HEAP32[$68 >> 2] | 0;
 } else $80 = $70;
 $$010$i$i$i$i$i37 = $63;
 $$089$i$i$i$i$i38 = (HEAP32[$65 + 4 >> 2] | 0) + $80 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i38 >> 0] = HEAP8[$$010$i$i$i$i$i37 >> 0] | 0;
  $$010$i$i$i$i$i37 = $$010$i$i$i$i$i37 + 1 | 0;
  if (($$010$i$i$i$i$i37 | 0) == ($67 | 0)) break; else $$089$i$i$i$i$i38 = $$089$i$i$i$i$i38 + 1 | 0;
 }
 HEAP32[$68 >> 2] = $71;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $$013$i$i$i = 0, $$013$i$i$i53 = 0, $$013$i$i$i61 = 0, $$013$i$i$i69 = 0, $103 = 0, $110 = 0, $113 = 0, $119 = 0, $123 = 0, $129 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $4 = 0, $42 = 0, $50 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $70 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$013$i$i$i69 = HEAP32[$2 + 20 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $$013$i$i$i69 & 7 | 48;
   $$013$i$i$i69 = $$013$i$i$i69 >>> 3;
  } while (($$013$i$i$i69 | 0) != 0);
  return;
 }
 $42 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $42 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $42);
 HEAP32[$7 >> 2] = $42;
 $50 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $53 = HEAP32[$1 + 4 >> 2] & 255;
 $54 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($54 | 0) _memset($50 | 0, $53 | 0, $54 | 0) | 0;
   $58 = $50 + $54 | 0;
   $60 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$60) $70 = $58; else {
    _memmove($58 | 0, HEAP32[$2 + 4 >> 2] | 0, $60 | 0) | 0;
    $70 = $58 + $60 | 0;
   }
   $66 = HEAP32[$2 + 16 >> 2] | 0;
   if ($66 | 0) _memset($70 | 0, HEAP8[$2 + 12 >> 0] | 0, $66 | 0) | 0;
   $$0$i$i$i62 = $70 + $66 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$013$i$i$i61 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $$013$i$i$i61 & 7 | 48;
    $$013$i$i$i61 = $$013$i$i$i61 >>> 3;
   } while (($$013$i$i$i61 | 0) != 0);
   return;
  }
 case 3:
  {
   $83 = $54 >>> 1;
   if ($83 | 0) _memset($50 | 0, $53 | 0, $83 | 0) | 0;
   $85 = $50 + $83 | 0;
   $87 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$87) $97 = $85; else {
    _memmove($85 | 0, HEAP32[$2 + 4 >> 2] | 0, $87 | 0) | 0;
    $97 = $85 + $87 | 0;
   }
   $93 = HEAP32[$2 + 16 >> 2] | 0;
   if ($93 | 0) _memset($97 | 0, HEAP8[$2 + 12 >> 0] | 0, $93 | 0) | 0;
   $103 = $97 + $93 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i54 = $103;
   $$013$i$i$i53 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $$013$i$i$i53 & 7 | 48;
    $$013$i$i$i53 = $$013$i$i$i53 >>> 3;
   } while (($$013$i$i$i53 | 0) != 0);
   $110 = $54 - $83 | 0;
   if (!$110) return;
   _memset($103 | 0, $53 | 0, $110 | 0) | 0;
   return;
  }
 default:
  {
   $113 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$113) $123 = $50; else {
    _memmove($50 | 0, HEAP32[$2 + 4 >> 2] | 0, $113 | 0) | 0;
    $123 = $50 + $113 | 0;
   }
   $119 = HEAP32[$2 + 16 >> 2] | 0;
   if ($119 | 0) _memset($123 | 0, HEAP8[$2 + 12 >> 0] | 0, $119 | 0) | 0;
   $129 = $123 + $119 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i = $129;
   $$013$i$i$i = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $$013$i$i$i & 7 | 48;
    $$013$i$i$i = $$013$i$i$i >>> 3;
   } while (($$013$i$i$i | 0) != 0);
   if (!$54) return;
   _memset($129 | 0, $53 | 0, $54 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $$013$i$i$i = 0, $$013$i$i$i53 = 0, $$013$i$i$i61 = 0, $$013$i$i$i69 = 0, $103 = 0, $110 = 0, $113 = 0, $119 = 0, $123 = 0, $129 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $4 = 0, $42 = 0, $50 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $70 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$013$i$i$i69 = HEAP32[$2 + 20 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $$013$i$i$i69 & 1 | 48;
   $$013$i$i$i69 = $$013$i$i$i69 >>> 1;
  } while (($$013$i$i$i69 | 0) != 0);
  return;
 }
 $42 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $42 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $42);
 HEAP32[$7 >> 2] = $42;
 $50 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $53 = HEAP32[$1 + 4 >> 2] & 255;
 $54 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($54 | 0) _memset($50 | 0, $53 | 0, $54 | 0) | 0;
   $58 = $50 + $54 | 0;
   $60 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$60) $70 = $58; else {
    _memmove($58 | 0, HEAP32[$2 + 4 >> 2] | 0, $60 | 0) | 0;
    $70 = $58 + $60 | 0;
   }
   $66 = HEAP32[$2 + 16 >> 2] | 0;
   if ($66 | 0) _memset($70 | 0, HEAP8[$2 + 12 >> 0] | 0, $66 | 0) | 0;
   $$0$i$i$i62 = $70 + $66 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$013$i$i$i61 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $$013$i$i$i61 & 1 | 48;
    $$013$i$i$i61 = $$013$i$i$i61 >>> 1;
   } while (($$013$i$i$i61 | 0) != 0);
   return;
  }
 case 3:
  {
   $83 = $54 >>> 1;
   if ($83 | 0) _memset($50 | 0, $53 | 0, $83 | 0) | 0;
   $85 = $50 + $83 | 0;
   $87 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$87) $97 = $85; else {
    _memmove($85 | 0, HEAP32[$2 + 4 >> 2] | 0, $87 | 0) | 0;
    $97 = $85 + $87 | 0;
   }
   $93 = HEAP32[$2 + 16 >> 2] | 0;
   if ($93 | 0) _memset($97 | 0, HEAP8[$2 + 12 >> 0] | 0, $93 | 0) | 0;
   $103 = $97 + $93 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i54 = $103;
   $$013$i$i$i53 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $$013$i$i$i53 & 1 | 48;
    $$013$i$i$i53 = $$013$i$i$i53 >>> 1;
   } while (($$013$i$i$i53 | 0) != 0);
   $110 = $54 - $83 | 0;
   if (!$110) return;
   _memset($103 | 0, $53 | 0, $110 | 0) | 0;
   return;
  }
 default:
  {
   $113 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$113) $123 = $50; else {
    _memmove($50 | 0, HEAP32[$2 + 4 >> 2] | 0, $113 | 0) | 0;
    $123 = $50 + $113 | 0;
   }
   $119 = HEAP32[$2 + 16 >> 2] | 0;
   if ($119 | 0) _memset($123 | 0, HEAP8[$2 + 12 >> 0] | 0, $119 | 0) | 0;
   $129 = $123 + $119 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i = $129;
   $$013$i$i$i = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $$013$i$i$i & 1 | 48;
    $$013$i$i$i = $$013$i$i$i >>> 1;
   } while (($$013$i$i$i | 0) != 0);
   if (!$54) return;
   _memset($129 | 0, $53 | 0, $54 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $$013$i$i$i = 0, $$013$i$i$i53 = 0, $$013$i$i$i61 = 0, $$013$i$i$i69 = 0, $103 = 0, $110 = 0, $113 = 0, $119 = 0, $123 = 0, $129 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $4 = 0, $42 = 0, $50 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $70 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$013$i$i$i69 = HEAP32[$2 + 20 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $$013$i$i$i69 & 7 | 48;
   $$013$i$i$i69 = $$013$i$i$i69 >>> 3;
  } while (($$013$i$i$i69 | 0) != 0);
  return;
 }
 $42 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $42 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $42);
 HEAP32[$7 >> 2] = $42;
 $50 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $53 = HEAP32[$1 + 4 >> 2] & 255;
 $54 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($54 | 0) _memset($50 | 0, $53 | 0, $54 | 0) | 0;
   $58 = $50 + $54 | 0;
   $60 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$60) $70 = $58; else {
    _memmove($58 | 0, HEAP32[$2 + 4 >> 2] | 0, $60 | 0) | 0;
    $70 = $58 + $60 | 0;
   }
   $66 = HEAP32[$2 + 16 >> 2] | 0;
   if ($66 | 0) _memset($70 | 0, HEAP8[$2 + 12 >> 0] | 0, $66 | 0) | 0;
   $$0$i$i$i62 = $70 + $66 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$013$i$i$i61 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $$013$i$i$i61 & 7 | 48;
    $$013$i$i$i61 = $$013$i$i$i61 >>> 3;
   } while (($$013$i$i$i61 | 0) != 0);
   return;
  }
 case 3:
  {
   $83 = $54 >>> 1;
   if ($83 | 0) _memset($50 | 0, $53 | 0, $83 | 0) | 0;
   $85 = $50 + $83 | 0;
   $87 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$87) $97 = $85; else {
    _memmove($85 | 0, HEAP32[$2 + 4 >> 2] | 0, $87 | 0) | 0;
    $97 = $85 + $87 | 0;
   }
   $93 = HEAP32[$2 + 16 >> 2] | 0;
   if ($93 | 0) _memset($97 | 0, HEAP8[$2 + 12 >> 0] | 0, $93 | 0) | 0;
   $103 = $97 + $93 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i54 = $103;
   $$013$i$i$i53 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $$013$i$i$i53 & 7 | 48;
    $$013$i$i$i53 = $$013$i$i$i53 >>> 3;
   } while (($$013$i$i$i53 | 0) != 0);
   $110 = $54 - $83 | 0;
   if (!$110) return;
   _memset($103 | 0, $53 | 0, $110 | 0) | 0;
   return;
  }
 default:
  {
   $113 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$113) $123 = $50; else {
    _memmove($50 | 0, HEAP32[$2 + 4 >> 2] | 0, $113 | 0) | 0;
    $123 = $50 + $113 | 0;
   }
   $119 = HEAP32[$2 + 16 >> 2] | 0;
   if ($119 | 0) _memset($123 | 0, HEAP8[$2 + 12 >> 0] | 0, $119 | 0) | 0;
   $129 = $123 + $119 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i = $129;
   $$013$i$i$i = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $$013$i$i$i & 7 | 48;
    $$013$i$i$i = $$013$i$i$i >>> 3;
   } while (($$013$i$i$i | 0) != 0);
   if (!$54) return;
   _memset($129 | 0, $53 | 0, $54 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $$013$i$i$i = 0, $$013$i$i$i53 = 0, $$013$i$i$i61 = 0, $$013$i$i$i69 = 0, $103 = 0, $110 = 0, $113 = 0, $119 = 0, $123 = 0, $129 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $4 = 0, $42 = 0, $50 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $70 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$013$i$i$i69 = HEAP32[$2 + 20 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $$013$i$i$i69 & 1 | 48;
   $$013$i$i$i69 = $$013$i$i$i69 >>> 1;
  } while (($$013$i$i$i69 | 0) != 0);
  return;
 }
 $42 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $42 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $42);
 HEAP32[$7 >> 2] = $42;
 $50 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $53 = HEAP32[$1 + 4 >> 2] & 255;
 $54 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($54 | 0) _memset($50 | 0, $53 | 0, $54 | 0) | 0;
   $58 = $50 + $54 | 0;
   $60 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$60) $70 = $58; else {
    _memmove($58 | 0, HEAP32[$2 + 4 >> 2] | 0, $60 | 0) | 0;
    $70 = $58 + $60 | 0;
   }
   $66 = HEAP32[$2 + 16 >> 2] | 0;
   if ($66 | 0) _memset($70 | 0, HEAP8[$2 + 12 >> 0] | 0, $66 | 0) | 0;
   $$0$i$i$i62 = $70 + $66 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$013$i$i$i61 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $$013$i$i$i61 & 1 | 48;
    $$013$i$i$i61 = $$013$i$i$i61 >>> 1;
   } while (($$013$i$i$i61 | 0) != 0);
   return;
  }
 case 3:
  {
   $83 = $54 >>> 1;
   if ($83 | 0) _memset($50 | 0, $53 | 0, $83 | 0) | 0;
   $85 = $50 + $83 | 0;
   $87 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$87) $97 = $85; else {
    _memmove($85 | 0, HEAP32[$2 + 4 >> 2] | 0, $87 | 0) | 0;
    $97 = $85 + $87 | 0;
   }
   $93 = HEAP32[$2 + 16 >> 2] | 0;
   if ($93 | 0) _memset($97 | 0, HEAP8[$2 + 12 >> 0] | 0, $93 | 0) | 0;
   $103 = $97 + $93 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i54 = $103;
   $$013$i$i$i53 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $$013$i$i$i53 & 1 | 48;
    $$013$i$i$i53 = $$013$i$i$i53 >>> 1;
   } while (($$013$i$i$i53 | 0) != 0);
   $110 = $54 - $83 | 0;
   if (!$110) return;
   _memset($103 | 0, $53 | 0, $110 | 0) | 0;
   return;
  }
 default:
  {
   $113 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$113) $123 = $50; else {
    _memmove($50 | 0, HEAP32[$2 + 4 >> 2] | 0, $113 | 0) | 0;
    $123 = $50 + $113 | 0;
   }
   $119 = HEAP32[$2 + 16 >> 2] | 0;
   if ($119 | 0) _memset($123 | 0, HEAP8[$2 + 12 >> 0] | 0, $119 | 0) | 0;
   $129 = $123 + $119 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i = $129;
   $$013$i$i$i = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $$013$i$i$i & 1 | 48;
    $$013$i$i$i = $$013$i$i$i >>> 1;
   } while (($$013$i$i$i | 0) != 0);
   if (!$54) return;
   _memset($129 | 0, $53 | 0, $54 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $$013$i$i$i = 0, $$013$i$i$i53 = 0, $$013$i$i$i61 = 0, $$013$i$i$i69 = 0, $103 = 0, $110 = 0, $113 = 0, $119 = 0, $123 = 0, $129 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $4 = 0, $42 = 0, $50 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $70 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$013$i$i$i69 = HEAP32[$2 + 20 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $$013$i$i$i69 & 7 | 48;
   $$013$i$i$i69 = $$013$i$i$i69 >>> 3;
  } while (($$013$i$i$i69 | 0) != 0);
  return;
 }
 $42 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $42 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $42);
 HEAP32[$7 >> 2] = $42;
 $50 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $53 = HEAP32[$1 + 4 >> 2] & 255;
 $54 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($54 | 0) _memset($50 | 0, $53 | 0, $54 | 0) | 0;
   $58 = $50 + $54 | 0;
   $60 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$60) $70 = $58; else {
    _memmove($58 | 0, HEAP32[$2 + 4 >> 2] | 0, $60 | 0) | 0;
    $70 = $58 + $60 | 0;
   }
   $66 = HEAP32[$2 + 16 >> 2] | 0;
   if ($66 | 0) _memset($70 | 0, HEAP8[$2 + 12 >> 0] | 0, $66 | 0) | 0;
   $$0$i$i$i62 = $70 + $66 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$013$i$i$i61 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $$013$i$i$i61 & 7 | 48;
    $$013$i$i$i61 = $$013$i$i$i61 >>> 3;
   } while (($$013$i$i$i61 | 0) != 0);
   return;
  }
 case 3:
  {
   $83 = $54 >>> 1;
   if ($83 | 0) _memset($50 | 0, $53 | 0, $83 | 0) | 0;
   $85 = $50 + $83 | 0;
   $87 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$87) $97 = $85; else {
    _memmove($85 | 0, HEAP32[$2 + 4 >> 2] | 0, $87 | 0) | 0;
    $97 = $85 + $87 | 0;
   }
   $93 = HEAP32[$2 + 16 >> 2] | 0;
   if ($93 | 0) _memset($97 | 0, HEAP8[$2 + 12 >> 0] | 0, $93 | 0) | 0;
   $103 = $97 + $93 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i54 = $103;
   $$013$i$i$i53 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $$013$i$i$i53 & 7 | 48;
    $$013$i$i$i53 = $$013$i$i$i53 >>> 3;
   } while (($$013$i$i$i53 | 0) != 0);
   $110 = $54 - $83 | 0;
   if (!$110) return;
   _memset($103 | 0, $53 | 0, $110 | 0) | 0;
   return;
  }
 default:
  {
   $113 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$113) $123 = $50; else {
    _memmove($50 | 0, HEAP32[$2 + 4 >> 2] | 0, $113 | 0) | 0;
    $123 = $50 + $113 | 0;
   }
   $119 = HEAP32[$2 + 16 >> 2] | 0;
   if ($119 | 0) _memset($123 | 0, HEAP8[$2 + 12 >> 0] | 0, $119 | 0) | 0;
   $129 = $123 + $119 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i = $129;
   $$013$i$i$i = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $$013$i$i$i & 7 | 48;
    $$013$i$i$i = $$013$i$i$i >>> 3;
   } while (($$013$i$i$i | 0) != 0);
   if (!$54) return;
   _memset($129 | 0, $53 | 0, $54 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i54 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $$013$i$i$i = 0, $$013$i$i$i53 = 0, $$013$i$i$i61 = 0, $$013$i$i$i69 = 0, $103 = 0, $110 = 0, $113 = 0, $119 = 0, $123 = 0, $129 = 0, $17 = 0, $19 = 0, $25 = 0, $29 = 0, $3 = 0, $4 = 0, $42 = 0, $50 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $70 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $93 = 0, $97 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($3 >>> 0 <= $4 >>> 0) {
  $9 = $8 + $4 | 0;
  if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $9);
  HEAP32[$7 >> 2] = $9;
  $17 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
  $19 = HEAP32[$2 + 8 >> 2] | 0;
  if (!$19) $29 = $17; else {
   _memmove($17 | 0, HEAP32[$2 + 4 >> 2] | 0, $19 | 0) | 0;
   $29 = $17 + $19 | 0;
  }
  $25 = HEAP32[$2 + 16 >> 2] | 0;
  if ($25 | 0) _memset($29 | 0, HEAP8[$2 + 12 >> 0] | 0, $25 | 0) | 0;
  $$0$i$i$i70 = $29 + $25 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
  $$013$i$i$i69 = HEAP32[$2 + 20 >> 2] | 0;
  do {
   $$0$i$i$i70 = $$0$i$i$i70 + -1 | 0;
   HEAP8[$$0$i$i$i70 >> 0] = $$013$i$i$i69 & 1 | 48;
   $$013$i$i$i69 = $$013$i$i$i69 >>> 1;
  } while (($$013$i$i$i69 | 0) != 0);
  return;
 }
 $42 = $8 + $3 | 0;
 if ((HEAP32[$6 + 12 >> 2] | 0) >>> 0 < $42 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6, $42);
 HEAP32[$7 >> 2] = $42;
 $50 = (HEAP32[$6 + 4 >> 2] | 0) + $8 | 0;
 $53 = HEAP32[$1 + 4 >> 2] & 255;
 $54 = $3 - $4 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($54 | 0) _memset($50 | 0, $53 | 0, $54 | 0) | 0;
   $58 = $50 + $54 | 0;
   $60 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$60) $70 = $58; else {
    _memmove($58 | 0, HEAP32[$2 + 4 >> 2] | 0, $60 | 0) | 0;
    $70 = $58 + $60 | 0;
   }
   $66 = HEAP32[$2 + 16 >> 2] | 0;
   if ($66 | 0) _memset($70 | 0, HEAP8[$2 + 12 >> 0] | 0, $66 | 0) | 0;
   $$0$i$i$i62 = $70 + $66 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$013$i$i$i61 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i62 = $$0$i$i$i62 + -1 | 0;
    HEAP8[$$0$i$i$i62 >> 0] = $$013$i$i$i61 & 1 | 48;
    $$013$i$i$i61 = $$013$i$i$i61 >>> 1;
   } while (($$013$i$i$i61 | 0) != 0);
   return;
  }
 case 3:
  {
   $83 = $54 >>> 1;
   if ($83 | 0) _memset($50 | 0, $53 | 0, $83 | 0) | 0;
   $85 = $50 + $83 | 0;
   $87 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$87) $97 = $85; else {
    _memmove($85 | 0, HEAP32[$2 + 4 >> 2] | 0, $87 | 0) | 0;
    $97 = $85 + $87 | 0;
   }
   $93 = HEAP32[$2 + 16 >> 2] | 0;
   if ($93 | 0) _memset($97 | 0, HEAP8[$2 + 12 >> 0] | 0, $93 | 0) | 0;
   $103 = $97 + $93 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i54 = $103;
   $$013$i$i$i53 = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i54 = $$0$i$i$i54 + -1 | 0;
    HEAP8[$$0$i$i$i54 >> 0] = $$013$i$i$i53 & 1 | 48;
    $$013$i$i$i53 = $$013$i$i$i53 >>> 1;
   } while (($$013$i$i$i53 | 0) != 0);
   $110 = $54 - $83 | 0;
   if (!$110) return;
   _memset($103 | 0, $53 | 0, $110 | 0) | 0;
   return;
  }
 default:
  {
   $113 = HEAP32[$2 + 8 >> 2] | 0;
   if (!$113) $123 = $50; else {
    _memmove($50 | 0, HEAP32[$2 + 4 >> 2] | 0, $113 | 0) | 0;
    $123 = $50 + $113 | 0;
   }
   $119 = HEAP32[$2 + 16 >> 2] | 0;
   if ($119 | 0) _memset($123 | 0, HEAP8[$2 + 12 >> 0] | 0, $119 | 0) | 0;
   $129 = $123 + $119 + (HEAP32[$2 + 24 >> 2] | 0) | 0;
   $$0$i$i$i = $129;
   $$013$i$i$i = HEAP32[$2 + 20 >> 2] | 0;
   do {
    $$0$i$i$i = $$0$i$i$i + -1 | 0;
    HEAP8[$$0$i$i$i >> 0] = $$013$i$i$i & 1 | 48;
    $$013$i$i$i = $$013$i$i$i >>> 1;
   } while (($$013$i$i$i | 0) != 0);
   if (!$54) return;
   _memset($129 | 0, $53 | 0, $54 | 0) | 0;
   return;
  }
 }
}

function __ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixERSF_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$05393$i = 0, $$05394$i = 0, $$05394$us$i = 0, $$054$i = 0, $$1$i = 0, $$155$i = 0, $$sink = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0.0, $48 = 0.0, $5 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $88 = 0, $92 = 0, label = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = ($4 | 0) == 0;
 L1 : do if ($5) $$054$i = 0; else {
  $6 = $4 + -1 | 0;
  $8 = ($6 & $4 | 0) == 0;
  if ($8) $14 = $6 & $2; else if ($2 >>> 0 < $4 >>> 0) $14 = $2; else $14 = ($2 >>> 0) % ($4 >>> 0) | 0;
  $15 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($14 << 2) >> 2] | 0;
  if (!$15) $$054$i = $14; else {
   $$05393$i = HEAP32[$15 >> 2] | 0;
   if (!$$05393$i) $$054$i = $14; else {
    if ($8) {
     $$05394$us$i = $$05393$i;
     while (1) {
      $19 = HEAP32[$$05394$us$i + 4 >> 2] | 0;
      if (!(($19 | 0) == ($2 | 0) | ($19 & $6 | 0) == ($14 | 0))) {
       $$054$i = $14;
       break L1;
      }
      if ((HEAP32[$$05394$us$i + 8 >> 2] | 0) == ($2 | 0)) {
       $$1$i = $$05394$us$i;
       break;
      }
      $$05394$us$i = HEAP32[$$05394$us$i >> 2] | 0;
      if (!$$05394$us$i) {
       $$054$i = $14;
       break L1;
      }
     }
     $92 = $$1$i + 12 | 0;
     return $92 | 0;
    }
    $$05394$i = $$05393$i;
    while (1) {
     $29 = HEAP32[$$05394$i + 4 >> 2] | 0;
     if (($29 | 0) != ($2 | 0)) {
      if ($29 >>> 0 < $4 >>> 0) $33 = $29; else $33 = ($29 >>> 0) % ($4 >>> 0) | 0;
      if (($33 | 0) != ($14 | 0)) {
       $$054$i = $14;
       break L1;
      }
     }
     if ((HEAP32[$$05394$i + 8 >> 2] | 0) == ($2 | 0)) {
      $$1$i = $$05394$i;
      break;
     }
     $$05394$i = HEAP32[$$05394$i >> 2] | 0;
     if (!$$05394$i) {
      $$054$i = $14;
      break L1;
     }
    }
    $92 = $$1$i + 12 | 0;
    return $92 | 0;
   }
  }
 } while (0);
 $38 = __Znwm(24) | 0;
 HEAP32[$38 + 8 >> 2] = $2;
 $40 = $38 + 12 | 0;
 HEAP32[$40 >> 2] = 0;
 HEAP32[$40 + 4 >> 2] = 0;
 HEAP32[$40 + 8 >> 2] = 0;
 HEAP32[$38 + 4 >> 2] = $2;
 HEAP32[$38 >> 2] = 0;
 $42 = $0 + 12 | 0;
 $45 = +(((HEAP32[$42 >> 2] | 0) + 1 | 0) >>> 0);
 $48 = +HEAPF32[$0 + 16 >> 2];
 do if ($5 | $48 * +($4 >>> 0) < $45) {
  $58 = $4 << 1 | ($4 >>> 0 < 3 | ($4 + -1 & $4 | 0) != 0) & 1;
  $61 = ~~+Math_ceil(+($45 / $48)) >>> 0;
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS4_SB_NS_4hashIiEELb1EEENS_21__unordered_map_equalIS4_SB_NS_8equal_toIS4_EELb1EEENS8_ISB_EEE6rehashEm($0, $58 >>> 0 < $61 >>> 0 ? $61 : $58);
  $63 = HEAP32[$3 >> 2] | 0;
  $64 = $63 + -1 | 0;
  if (!($64 & $63)) {
   $$0$i = $63;
   $$155$i = $64 & $2;
   break;
  }
  if ($2 >>> 0 < $63 >>> 0) {
   $$0$i = $63;
   $$155$i = $2;
  } else {
   $$0$i = $63;
   $$155$i = ($2 >>> 0) % ($63 >>> 0) | 0;
  }
 } else {
  $$0$i = $4;
  $$155$i = $$054$i;
 } while (0);
 $71 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0;
 $72 = HEAP32[$71 >> 2] | 0;
 if (!$72) {
  $74 = $0 + 8 | 0;
  HEAP32[$38 >> 2] = HEAP32[$74 >> 2];
  HEAP32[$74 >> 2] = $38;
  HEAP32[$71 >> 2] = $74;
  $76 = HEAP32[$38 >> 2] | 0;
  if ($76 | 0) {
   $79 = HEAP32[$76 + 4 >> 2] | 0;
   $80 = $$0$i + -1 | 0;
   if (!($80 & $$0$i)) $88 = $79 & $80; else if ($79 >>> 0 < $$0$i >>> 0) $88 = $79; else $88 = ($79 >>> 0) % ($$0$i >>> 0) | 0;
   $$sink = (HEAP32[$0 >> 2] | 0) + ($88 << 2) | 0;
   label = 33;
  }
 } else {
  HEAP32[$38 >> 2] = HEAP32[$72 >> 2];
  $$sink = $72;
  label = 33;
 }
 if ((label | 0) == 33) HEAP32[$$sink >> 2] = $38;
 HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
 $$1$i = $38;
 $92 = $$1$i + 12 | 0;
 return $92 | 0;
}

function __ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixEOS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$05393$i = 0, $$05394$i = 0, $$05394$us$i = 0, $$054$i = 0, $$1$i = 0, $$155$i = 0, $$sink = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0.0, $48 = 0.0, $5 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $88 = 0, $92 = 0, label = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = ($4 | 0) == 0;
 L1 : do if ($5) $$054$i = 0; else {
  $6 = $4 + -1 | 0;
  $8 = ($6 & $4 | 0) == 0;
  if ($8) $14 = $6 & $2; else if ($2 >>> 0 < $4 >>> 0) $14 = $2; else $14 = ($2 >>> 0) % ($4 >>> 0) | 0;
  $15 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($14 << 2) >> 2] | 0;
  if (!$15) $$054$i = $14; else {
   $$05393$i = HEAP32[$15 >> 2] | 0;
   if (!$$05393$i) $$054$i = $14; else {
    if ($8) {
     $$05394$us$i = $$05393$i;
     while (1) {
      $19 = HEAP32[$$05394$us$i + 4 >> 2] | 0;
      if (!(($19 | 0) == ($2 | 0) | ($19 & $6 | 0) == ($14 | 0))) {
       $$054$i = $14;
       break L1;
      }
      if ((HEAP32[$$05394$us$i + 8 >> 2] | 0) == ($2 | 0)) {
       $$1$i = $$05394$us$i;
       break;
      }
      $$05394$us$i = HEAP32[$$05394$us$i >> 2] | 0;
      if (!$$05394$us$i) {
       $$054$i = $14;
       break L1;
      }
     }
     $92 = $$1$i + 12 | 0;
     return $92 | 0;
    }
    $$05394$i = $$05393$i;
    while (1) {
     $29 = HEAP32[$$05394$i + 4 >> 2] | 0;
     if (($29 | 0) != ($2 | 0)) {
      if ($29 >>> 0 < $4 >>> 0) $33 = $29; else $33 = ($29 >>> 0) % ($4 >>> 0) | 0;
      if (($33 | 0) != ($14 | 0)) {
       $$054$i = $14;
       break L1;
      }
     }
     if ((HEAP32[$$05394$i + 8 >> 2] | 0) == ($2 | 0)) {
      $$1$i = $$05394$i;
      break;
     }
     $$05394$i = HEAP32[$$05394$i >> 2] | 0;
     if (!$$05394$i) {
      $$054$i = $14;
      break L1;
     }
    }
    $92 = $$1$i + 12 | 0;
    return $92 | 0;
   }
  }
 } while (0);
 $38 = __Znwm(24) | 0;
 HEAP32[$38 + 8 >> 2] = $2;
 $40 = $38 + 12 | 0;
 HEAP32[$40 >> 2] = 0;
 HEAP32[$40 + 4 >> 2] = 0;
 HEAP32[$40 + 8 >> 2] = 0;
 HEAP32[$38 + 4 >> 2] = $2;
 HEAP32[$38 >> 2] = 0;
 $42 = $0 + 12 | 0;
 $45 = +(((HEAP32[$42 >> 2] | 0) + 1 | 0) >>> 0);
 $48 = +HEAPF32[$0 + 16 >> 2];
 do if ($5 | $48 * +($4 >>> 0) < $45) {
  $58 = $4 << 1 | ($4 >>> 0 < 3 | ($4 + -1 & $4 | 0) != 0) & 1;
  $61 = ~~+Math_ceil(+($45 / $48)) >>> 0;
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS4_SB_NS_4hashIiEELb1EEENS_21__unordered_map_equalIS4_SB_NS_8equal_toIS4_EELb1EEENS8_ISB_EEE6rehashEm($0, $58 >>> 0 < $61 >>> 0 ? $61 : $58);
  $63 = HEAP32[$3 >> 2] | 0;
  $64 = $63 + -1 | 0;
  if (!($64 & $63)) {
   $$0$i = $63;
   $$155$i = $64 & $2;
   break;
  }
  if ($2 >>> 0 < $63 >>> 0) {
   $$0$i = $63;
   $$155$i = $2;
  } else {
   $$0$i = $63;
   $$155$i = ($2 >>> 0) % ($63 >>> 0) | 0;
  }
 } else {
  $$0$i = $4;
  $$155$i = $$054$i;
 } while (0);
 $71 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0;
 $72 = HEAP32[$71 >> 2] | 0;
 if (!$72) {
  $74 = $0 + 8 | 0;
  HEAP32[$38 >> 2] = HEAP32[$74 >> 2];
  HEAP32[$74 >> 2] = $38;
  HEAP32[$71 >> 2] = $74;
  $76 = HEAP32[$38 >> 2] | 0;
  if ($76 | 0) {
   $79 = HEAP32[$76 + 4 >> 2] | 0;
   $80 = $$0$i + -1 | 0;
   if (!($80 & $$0$i)) $88 = $79 & $80; else if ($79 >>> 0 < $$0$i >>> 0) $88 = $79; else $88 = ($79 >>> 0) % ($$0$i >>> 0) | 0;
   $$sink = (HEAP32[$0 >> 2] | 0) + ($88 << 2) | 0;
   label = 33;
  }
 } else {
  HEAP32[$38 >> 2] = HEAP32[$72 >> 2];
  $$sink = $72;
  label = 33;
 }
 if ((label | 0) == 33) HEAP32[$$sink >> 2] = $38;
 HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
 $$1$i = $38;
 $92 = $$1$i + 12 | 0;
 return $92 | 0;
}

function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$8 = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $104 = 0, $106 = 0, $11 = 0, $110 = 0, $113 = 0, $134 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $42 = 0, $48 = 0, $57 = 0, $59 = 0, $66 = 0, $75 = 0, $85 = 0, $87 = 0, $89 = 0, $95 = 0, $98 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 if (!($7 & 4)) $$pre$phiZ2D = $1; else {
  $10 = HEAP32[$2 >> 2] | 0;
  $11 = $1;
  if (($11 - $10 | 0) > 2) if ((HEAP8[$10 >> 0] | 0) == -17) if ((HEAP8[$10 + 1 >> 0] | 0) == -69) if ((HEAP8[$10 + 2 >> 0] | 0) == -65) {
   HEAP32[$2 >> 2] = $10 + 3;
   $$pre$phiZ2D = $11;
  } else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11;
 }
 $24 = $4;
 L9 : while (1) {
  $25 = HEAP32[$2 >> 2] | 0;
  if ($25 >>> 0 >= $1 >>> 0) {
   $$8 = 0;
   break;
  }
  $27 = HEAP32[$5 >> 2] | 0;
  if ($27 >>> 0 >= $4 >>> 0) {
   $$8 = 1;
   break;
  }
  $29 = HEAP8[$25 >> 0] | 0;
  $30 = $29 & 255;
  if ($30 >>> 0 > $6 >>> 0) {
   $$8 = 2;
   break;
  }
  do if ($29 << 24 >> 24 > -1) {
   HEAP16[$27 >> 1] = $29 & 255;
   $$sink = $25 + 1 | 0;
  } else {
   if (($29 & 255) < 194) {
    $$8 = 2;
    break L9;
   }
   if (($29 & 255) < 224) {
    if (($$pre$phiZ2D - $25 | 0) < 2) {
     $$8 = 1;
     break L9;
    }
    $42 = HEAPU8[$25 + 1 >> 0] | 0;
    if (($42 & 192 | 0) != 128) {
     $$8 = 2;
     break L9;
    }
    $48 = $42 & 63 | $30 << 6 & 1984;
    if ($48 >>> 0 > $6 >>> 0) {
     $$8 = 2;
     break L9;
    }
    HEAP16[$27 >> 1] = $48;
    $$sink = $25 + 2 | 0;
    break;
   }
   if (($29 & 255) < 240) {
    if (($$pre$phiZ2D - $25 | 0) < 3) {
     $$8 = 1;
     break L9;
    }
    $57 = HEAP8[$25 + 1 >> 0] | 0;
    $59 = HEAP8[$25 + 2 >> 0] | 0;
    switch ($29 << 24 >> 24) {
    case -32:
     {
      if (($57 & -32) << 24 >> 24 != -96) {
       $$8 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if (($57 & -32) << 24 >> 24 != -128) {
       $$8 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($57 & -64) << 24 >> 24 != -128) {
      $$8 = 2;
      break L9;
     }
    }
    $66 = $59 & 255;
    if (($66 & 192 | 0) != 128) {
     $$8 = 2;
     break L9;
    }
    $75 = ($57 & 63) << 6 | $30 << 12 | $66 & 63;
    if (($75 & 65535) >>> 0 > $6 >>> 0) {
     $$8 = 2;
     break L9;
    }
    HEAP16[$27 >> 1] = $75;
    $$sink = $25 + 3 | 0;
    break;
   }
   if (($29 & 255) >= 245) {
    $$8 = 2;
    break L9;
   }
   if (($$pre$phiZ2D - $25 | 0) < 4) {
    $$8 = 1;
    break L9;
   }
   $85 = HEAP8[$25 + 1 >> 0] | 0;
   $87 = HEAP8[$25 + 2 >> 0] | 0;
   $89 = HEAP8[$25 + 3 >> 0] | 0;
   switch ($29 << 24 >> 24) {
   case -16:
    {
     if (($85 + 112 & 255) >= 48) {
      $$8 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if (($85 & -16) << 24 >> 24 != -128) {
      $$8 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($85 & -64) << 24 >> 24 != -128) {
     $$8 = 2;
     break L9;
    }
   }
   $95 = $87 & 255;
   if (($95 & 192 | 0) != 128) {
    $$8 = 2;
    break L9;
   }
   $98 = $89 & 255;
   if (($98 & 192 | 0) != 128) {
    $$8 = 2;
    break L9;
   }
   if (($24 - $27 | 0) < 4) {
    $$8 = 1;
    break L9;
   }
   $104 = $30 & 7;
   $106 = $85 & 255;
   $110 = $95 << 6;
   $113 = $98 & 63;
   if (($106 << 12 & 258048 | $104 << 18 | $110 & 4032 | $113) >>> 0 > $6 >>> 0) {
    $$8 = 2;
    break L9;
   }
   HEAP16[$27 >> 1] = $106 << 2 & 60 | $95 >>> 4 & 3 | (($106 >>> 4 & 3 | $104 << 2) << 6) + 16320 | 55296;
   $134 = $27 + 2 | 0;
   HEAP32[$5 >> 2] = $134;
   HEAP16[$134 >> 1] = $113 | $110 & 960 | 56320;
   $$sink = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  } while (0);
  HEAP32[$2 >> 2] = $$sink;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 2;
 }
 return $$8 | 0;
}

function __ZN6spdlog7details11f_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i = 0, $$010$i$i$i$i$i = 0, $$010$i$i$i$i12 = 0, $$089$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $$089$i$i$i$i13 = 0, $11 = 0, $13 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $4 = 0, $5 = 0, $50 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $73 = 0, $82 = 0, $87 = 0, $90 = 0, $91 = 0, $93 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = $1 + 8 | 0;
 $11 = ___remdi3(HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0, 1e6, 0) | 0;
 getTempRet0() | 0;
 $13 = $0 + 4 | 0;
 if (!(HEAP32[$13 >> 2] | 0)) {
  $82 = ((32 - (Math_clz32($11 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
  $87 = $82 + 1 + (((HEAP32[16 + ($82 << 2) >> 2] | 0) >>> 0 > $11 >>> 0) << 31 >> 31) | 0;
  if ($87 >>> 0 < 6) {
   $90 = 19030 + (0 - $87) | 0;
   $91 = $3 + 8 | 0;
   $93 = $90 - 19024 | 0;
   if (($93 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $96 = (HEAP32[$91 >> 2] | 0) + $93 | 0;
   if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $96 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $96);
   if (($90 | 0) != 19024) {
    $$010$i$i$i$i = 19024;
    $$089$i$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$91 >> 2] | 0) | 0;
    while (1) {
     HEAP8[$$089$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i >> 0] | 0;
     $$010$i$i$i$i = $$010$i$i$i$i + 1 | 0;
     if (($$010$i$i$i$i | 0) == ($90 | 0)) break; else $$089$i$i$i$i = $$089$i$i$i$i + 1 | 0;
    }
   }
   HEAP32[$91 >> 2] = $96;
  }
  __ZN6spdlog7details10fmt_helper10append_intImLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($11, $3);
  STACKTOP = sp;
  return;
 }
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 6, $13, $3);
 $20 = ((32 - (Math_clz32($11 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $25 = $20 + 1 + (((HEAP32[16 + ($20 << 2) >> 2] | 0) >>> 0 > $11 >>> 0) << 31 >> 31) | 0;
 if ($25 >>> 0 < 6) {
  $28 = 19030 + (0 - $25) | 0;
  $29 = $3 + 8 | 0;
  $31 = $28 - 19024 | 0;
  if (($31 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $34 = (HEAP32[$29 >> 2] | 0) + $31 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $34 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $34);
  if (($28 | 0) != 19024) {
   $$010$i$i$i$i12 = 19024;
   $$089$i$i$i$i13 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$29 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i13 >> 0] = HEAP8[$$010$i$i$i$i12 >> 0] | 0;
    $$010$i$i$i$i12 = $$010$i$i$i$i12 + 1 | 0;
    if (($$010$i$i$i$i12 | 0) == ($28 | 0)) break; else $$089$i$i$i$i13 = $$089$i$i$i$i13 + 1 | 0;
   }
  }
  HEAP32[$29 >> 2] = $34;
 }
 __ZN6spdlog7details10fmt_helper10append_intImLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($11, $3);
 $50 = HEAP32[$4 + 8 >> 2] | 0;
 if ($50 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $50 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $56 = HEAP32[$4 + 12 >> 2] | 0;
  $58 = HEAP32[$4 + 4 >> 2] | 0;
  if ($56 | 0) {
   $60 = $56 + $50 | 0;
   $61 = $58 + 8 | 0;
   if (($50 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $63 = HEAP32[$61 >> 2] | 0;
   $64 = $63 + $50 | 0;
   if ((HEAP32[$58 + 12 >> 2] | 0) >>> 0 < $64 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$58 >> 2] >> 2] & 127]($58, $64);
    $73 = HEAP32[$61 >> 2] | 0;
   } else $73 = $63;
   $$010$i$i$i$i$i = $56;
   $$089$i$i$i$i$i = (HEAP32[$58 + 4 >> 2] | 0) + $73 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
    $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
    if (($$010$i$i$i$i$i | 0) == ($60 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
   }
   HEAP32[$61 >> 2] = $64;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$i = 0, $$pre$i13 = 0, $$pre$i5 = 0, $$pre$i9 = 0, $$pre$phi$i11Z2D = 0, $$pre$phi$i15Z2D = 0, $$pre$phi$i7Z2D = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $45 = 0, $47 = 0, $50 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $61 = 0, $64 = 0, $68 = 0, $7 = 0, $73 = 0, $77 = 0, $tmpcast1$i$i$i$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $tmpcast1$i$i$i$byval_copy = sp + 88 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 if (($0 | 0) > 99) {
  __ZN6spdlog7details10fmt_helper10append_intIiLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($0, $1);
  STACKTOP = sp;
  return;
 }
 if (($0 | 0) > 9) {
  $7 = ($0 >>> 0) / 10 | 0;
  $10 = $1 + 8 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $11 + 1 | 0;
  $13 = $1 + 12 | 0;
  if ((HEAP32[$13 >> 2] | 0) >>> 0 < $12 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $12);
   $$pre$i = HEAP32[$10 >> 2] | 0;
   $$pre$phi$iZ2D = $$pre$i + 1 | 0;
   $21 = $$pre$i;
  } else {
   $$pre$phi$iZ2D = $12;
   $21 = $11;
  }
  $18 = $1 + 4 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  HEAP32[$10 >> 2] = $$pre$phi$iZ2D;
  HEAP8[$19 + $21 >> 0] = $7 + 48;
  $26 = HEAP32[$10 >> 2] | 0;
  $27 = $26 + 1 | 0;
  if ((HEAP32[$13 >> 2] | 0) >>> 0 < $27 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $27);
   $$pre$i5 = HEAP32[$10 >> 2] | 0;
   $$pre$phi$i7Z2D = $$pre$i5 + 1 | 0;
   $34 = $$pre$i5;
  } else {
   $$pre$phi$i7Z2D = $27;
   $34 = $26;
  }
  $32 = HEAP32[$18 >> 2] | 0;
  HEAP32[$10 >> 2] = $$pre$phi$i7Z2D;
  HEAP8[$32 + $34 >> 0] = $0 - ($7 * 10 | 0) | 48;
  STACKTOP = sp;
  return;
 }
 if (($0 | 0) <= -1) {
  HEAP32[$4 >> 2] = $0;
  $59 = 3e4;
  $61 = HEAP32[$59 >> 2] | 0;
  $64 = HEAP32[$59 + 4 >> 2] | 0;
  HEAP32[$2 + 8 >> 2] = 19044;
  HEAP32[$2 + 12 >> 2] = 5;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = $1;
  $68 = $2 + 24 | 0;
  HEAP32[$68 >> 2] = $61;
  HEAP32[$68 + 4 >> 2] = $64;
  HEAP32[$2 + 32 >> 2] = $4;
  HEAP32[$2 + 40 >> 2] = 0;
  $73 = $2 + 44 | 0;
  HEAP32[$73 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$3 >> 2] = 19044;
  HEAP32[$3 + 4 >> 2] = 5;
  HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$3 >> 2];
  HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  __ZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_($tmpcast1$i$i$i$byval_copy, $2);
  $77 = HEAP32[$73 >> 2] | 0;
  if ($77 | 0) __ZdaPv($77);
  STACKTOP = sp;
  return;
 }
 $36 = $1 + 8 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = $37 + 1 | 0;
 $39 = $1 + 12 | 0;
 if ((HEAP32[$39 >> 2] | 0) >>> 0 < $38 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $38);
  $$pre$i9 = HEAP32[$36 >> 2] | 0;
  $$pre$phi$i11Z2D = $$pre$i9 + 1 | 0;
  $47 = $$pre$i9;
 } else {
  $$pre$phi$i11Z2D = $38;
  $47 = $37;
 }
 $44 = $1 + 4 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 HEAP32[$36 >> 2] = $$pre$phi$i11Z2D;
 HEAP8[$45 + $47 >> 0] = 48;
 $50 = HEAP32[$36 >> 2] | 0;
 $51 = $50 + 1 | 0;
 if ((HEAP32[$39 >> 2] | 0) >>> 0 < $51 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $51);
  $$pre$i13 = HEAP32[$36 >> 2] | 0;
  $$pre$phi$i15Z2D = $$pre$i13 + 1 | 0;
  $58 = $$pre$i13;
 } else {
  $$pre$phi$i15Z2D = $51;
  $58 = $50;
 }
 $56 = HEAP32[$44 >> 2] | 0;
 HEAP32[$36 >> 2] = $$pre$phi$i15Z2D;
 HEAP8[$56 + $58 >> 0] = $0 + 48;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details10fmt_helper4pad2ILm128EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$i = 0, $$pre$i13 = 0, $$pre$i5 = 0, $$pre$i9 = 0, $$pre$phi$i11Z2D = 0, $$pre$phi$i15Z2D = 0, $$pre$phi$i7Z2D = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $45 = 0, $47 = 0, $50 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $61 = 0, $64 = 0, $68 = 0, $7 = 0, $73 = 0, $77 = 0, $tmpcast1$i$i$i$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $tmpcast1$i$i$i$byval_copy = sp + 88 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 if (($0 | 0) > 99) {
  __ZN6spdlog7details10fmt_helper10append_intIiLm128EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($0, $1);
  STACKTOP = sp;
  return;
 }
 if (($0 | 0) > 9) {
  $7 = ($0 >>> 0) / 10 | 0;
  $10 = $1 + 8 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $11 + 1 | 0;
  $13 = $1 + 12 | 0;
  if ((HEAP32[$13 >> 2] | 0) >>> 0 < $12 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $12);
   $$pre$i = HEAP32[$10 >> 2] | 0;
   $$pre$phi$iZ2D = $$pre$i + 1 | 0;
   $21 = $$pre$i;
  } else {
   $$pre$phi$iZ2D = $12;
   $21 = $11;
  }
  $18 = $1 + 4 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  HEAP32[$10 >> 2] = $$pre$phi$iZ2D;
  HEAP8[$19 + $21 >> 0] = $7 + 48;
  $26 = HEAP32[$10 >> 2] | 0;
  $27 = $26 + 1 | 0;
  if ((HEAP32[$13 >> 2] | 0) >>> 0 < $27 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $27);
   $$pre$i5 = HEAP32[$10 >> 2] | 0;
   $$pre$phi$i7Z2D = $$pre$i5 + 1 | 0;
   $34 = $$pre$i5;
  } else {
   $$pre$phi$i7Z2D = $27;
   $34 = $26;
  }
  $32 = HEAP32[$18 >> 2] | 0;
  HEAP32[$10 >> 2] = $$pre$phi$i7Z2D;
  HEAP8[$32 + $34 >> 0] = $0 - ($7 * 10 | 0) | 48;
  STACKTOP = sp;
  return;
 }
 if (($0 | 0) <= -1) {
  HEAP32[$4 >> 2] = $0;
  $59 = 3e4;
  $61 = HEAP32[$59 >> 2] | 0;
  $64 = HEAP32[$59 + 4 >> 2] | 0;
  HEAP32[$2 + 8 >> 2] = 19044;
  HEAP32[$2 + 12 >> 2] = 5;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = $1;
  $68 = $2 + 24 | 0;
  HEAP32[$68 >> 2] = $61;
  HEAP32[$68 + 4 >> 2] = $64;
  HEAP32[$2 + 32 >> 2] = $4;
  HEAP32[$2 + 40 >> 2] = 0;
  $73 = $2 + 44 | 0;
  HEAP32[$73 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$3 >> 2] = 19044;
  HEAP32[$3 + 4 >> 2] = 5;
  HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$3 >> 2];
  HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  __ZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_($tmpcast1$i$i$i$byval_copy, $2);
  $77 = HEAP32[$73 >> 2] | 0;
  if ($77 | 0) __ZdaPv($77);
  STACKTOP = sp;
  return;
 }
 $36 = $1 + 8 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = $37 + 1 | 0;
 $39 = $1 + 12 | 0;
 if ((HEAP32[$39 >> 2] | 0) >>> 0 < $38 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $38);
  $$pre$i9 = HEAP32[$36 >> 2] | 0;
  $$pre$phi$i11Z2D = $$pre$i9 + 1 | 0;
  $47 = $$pre$i9;
 } else {
  $$pre$phi$i11Z2D = $38;
  $47 = $37;
 }
 $44 = $1 + 4 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 HEAP32[$36 >> 2] = $$pre$phi$i11Z2D;
 HEAP8[$45 + $47 >> 0] = 48;
 $50 = HEAP32[$36 >> 2] | 0;
 $51 = $50 + 1 | 0;
 if ((HEAP32[$39 >> 2] | 0) >>> 0 < $51 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $51);
  $$pre$i13 = HEAP32[$36 >> 2] | 0;
  $$pre$phi$i15Z2D = $$pre$i13 + 1 | 0;
  $58 = $$pre$i13;
 } else {
  $$pre$phi$i15Z2D = $51;
  $58 = $50;
 }
 $56 = HEAP32[$44 >> 2] | 0;
 HEAP32[$36 >> 2] = $$pre$phi$i15Z2D;
 HEAP8[$56 + $58 >> 0] = $0 + 48;
 STACKTOP = sp;
 return;
}

function __ZN9MainLayer7OnEventERN3sgl5EventE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $$pre$phi11$i$i$iZ2D = 0, $$pre$phi9$i$i$iZ2D = 0, $$sroa$13$0$$sroa_idx$i = 0, $$sroa$4$0$$sroa_idx$i = 0, $$sroa$6$0$$sroa_idx$i = 0, $2 = 0, $29 = 0, $3 = 0, $31 = 0.0, $34 = 0.0, $35 = 0, $40 = 0.0, $41 = 0, $44 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0.0, $61 = 0.0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy = sp + 24 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1) | 0) == 9) {
  $9 = HEAP32[7738] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 127]($3, $1);
  HEAP32[$2 >> 2] = 33137;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 33137;
  HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  __ZN6spdlog6logger3logINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEELPS8_0EEEvNS_10source_locENS_5level10level_enumERKT_($9, $$byval_copy, 0, $3);
  if ((HEAP8[$3 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$3 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1) | 0) == 1) {
  STACKTOP = sp;
  return;
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1) | 0) != 10) {
  STACKTOP = sp;
  return;
 }
 $29 = $1 + 12 | 0;
 $31 = +(HEAP32[$29 >> 2] | 0);
 $34 = +HEAPF32[$0 + 164 >> 2] * $31;
 $35 = $1 + 8 | 0;
 $40 = +((HEAP32[$35 >> 2] | 0) / 2 | 0 | 0) - $34 * .5;
 $41 = __Znwm(32) | 0;
 $44 = $41 + 32 | 0;
 HEAP32[$41 >> 2] = 0;
 HEAP32[$41 + 4 >> 2] = 0;
 HEAP32[$41 + 8 >> 2] = 1065353216;
 HEAP32[$41 + 12 >> 2] = 0;
 HEAP32[$41 + 16 >> 2] = 1065353216;
 HEAP32[$41 + 20 >> 2] = 1065353216;
 HEAP32[$41 + 24 >> 2] = 0;
 HEAP32[$41 + 28 >> 2] = 1065353216;
 HEAPF32[$0 + 68 >> 2] = $34;
 HEAPF32[$0 + 72 >> 2] = $31;
 HEAPF32[$0 + 76 >> 2] = $40;
 HEAP32[$0 + 80 >> 2] = 0;
 HEAPF32[$0 + 84 >> 2] = 1.0;
 HEAPF32[$0 + 88 >> 2] = 1.0;
 HEAPF32[$0 + 92 >> 2] = 1.0;
 HEAPF32[$0 + 96 >> 2] = 1.0;
 $48 = $0 + 100 | 0;
 $49 = HEAP32[$48 >> 2] | 0;
 if (!$49) {
  $$pre$phi11$i$i$iZ2D = $0 + 108 | 0;
  $$pre$phi9$i$i$iZ2D = $0 + 104 | 0;
 } else {
  $52 = $0 + 104 | 0;
  HEAP32[$52 >> 2] = $49;
  __ZdlPv($49);
  $53 = $0 + 108 | 0;
  HEAP32[$53 >> 2] = 0;
  HEAP32[$52 >> 2] = 0;
  HEAP32[$48 >> 2] = 0;
  $$pre$phi11$i$i$iZ2D = $53;
  $$pre$phi9$i$i$iZ2D = $52;
 }
 HEAP32[$48 >> 2] = $41;
 HEAP32[$$pre$phi9$i$i$iZ2D >> 2] = $44;
 HEAP32[$$pre$phi11$i$i$iZ2D >> 2] = $44;
 HEAP32[$0 + 112 >> 2] = 0;
 $56 = HEAP32[$0 + 16 >> 2] | 0;
 $58 = HEAP32[$29 >> 2] | 0;
 $59 = +(HEAP32[$35 >> 2] | 0);
 HEAPF32[$56 + 68 >> 2] = $59;
 $61 = +($58 | 0);
 HEAPF32[$56 + 72 >> 2] = $61;
 HEAPF32[$56 + 76 >> 2] = 2.0 / $59;
 $$sroa$4$0$$sroa_idx$i = $56 + 80 | 0;
 HEAP32[$$sroa$4$0$$sroa_idx$i >> 2] = 0;
 HEAP32[$$sroa$4$0$$sroa_idx$i + 4 >> 2] = 0;
 HEAP32[$$sroa$4$0$$sroa_idx$i + 8 >> 2] = 0;
 HEAP32[$$sroa$4$0$$sroa_idx$i + 12 >> 2] = 0;
 HEAPF32[$56 + 96 >> 2] = 2.0 / $61;
 $$sroa$6$0$$sroa_idx$i = $56 + 100 | 0;
 HEAP32[$$sroa$6$0$$sroa_idx$i >> 2] = 0;
 HEAP32[$$sroa$6$0$$sroa_idx$i + 4 >> 2] = 0;
 HEAP32[$$sroa$6$0$$sroa_idx$i + 8 >> 2] = 0;
 HEAP32[$$sroa$6$0$$sroa_idx$i + 12 >> 2] = 0;
 HEAPF32[$56 + 116 >> 2] = -1.0;
 HEAP32[$56 + 120 >> 2] = 0;
 HEAPF32[$56 + 124 >> 2] = -$59 / $59;
 HEAPF32[$56 + 128 >> 2] = -$61 / $61;
 HEAPF32[$56 + 132 >> 2] = -0.0;
 HEAP32[$56 + 136 >> 2] = 1065353216;
 $$sroa$13$0$$sroa_idx$i = $56 + 140 | 0;
 HEAP32[$$sroa$13$0$$sroa_idx$i >> 2] = 0;
 HEAP32[$$sroa$13$0$$sroa_idx$i + 4 >> 2] = 0;
 HEAP32[$$sroa$13$0$$sroa_idx$i + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $26 = 0, $37 = 0, $39 = 0, $40 = 0, $45 = 0, $48 = 0, $62 = 0, $7 = 0, $77 = 0, $8 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(432);
 $$byval_copy = sp + 424 | 0;
 $7 = sp;
 $8 = sp + 416 | 0;
 $9 = sp + 408 | 0;
 $10 = sp + 400 | 0;
 $11 = sp + 428 | 0;
 $12 = sp + 404 | 0;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$8 + 4 >> 2] = 234;
 __ZNKSt3__28ios_base6getlocEv($10, $4);
 $16 = __ZNKSt3__26locale9use_facetERNS0_2idE($10, 32720) | 0;
 HEAP8[$11 >> 0] = 0;
 $17 = HEAP32[$2 >> 2] | 0;
 HEAP32[$12 >> 2] = $17;
 $19 = HEAP32[$4 + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
 $21 = $17;
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($1, $$byval_copy, $3, $10, $19, $5, $11, $16, $8, $9, $7 + 400 | 0) | 0) {
  $23 = $6 + 8 + 3 | 0;
  if ((HEAP8[$23 >> 0] | 0) < 0) {
   $26 = HEAP32[$6 >> 2] | 0;
   HEAP32[$$byval_copy >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($26, $$byval_copy);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP32[$$byval_copy >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6, $$byval_copy);
   HEAP8[$23 >> 0] = 0;
  }
  if (HEAP8[$11 >> 0] | 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($6, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$16 >> 2] | 0) + 44 >> 2] & 31]($16, 45) | 0);
  $37 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$16 >> 2] | 0) + 44 >> 2] & 31]($16, 48) | 0;
  $39 = HEAP32[$9 >> 2] | 0;
  $40 = $39 + -4 | 0;
  $$0 = HEAP32[$8 >> 2] | 0;
  while (1) {
   if ($$0 >>> 0 >= $40 >>> 0) break;
   if ((HEAP32[$$0 >> 2] | 0) != ($37 | 0)) break;
   $$0 = $$0 + 4 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($6, $$0, $39) | 0;
 }
 $45 = HEAP32[$1 >> 2] | 0;
 do if (!$45) $81 = 1; else {
  $48 = HEAP32[$45 + 12 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($45) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $81 = 1;
   break;
  } else {
   $81 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$17) label = 25; else {
  $62 = HEAP32[$21 + 12 >> 2] | 0;
  if (($62 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$62 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 25;
   break;
  } else if ($81) break; else {
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 25) if ($81) label = 27;
 if ((label | 0) == 27) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__26localeD2Ev($10);
 $77 = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = 0;
 if ($77 | 0) FUNCTION_TABLE_vi[HEAP32[$8 + 4 >> 2] & 255]($77);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $36 = 0, $38 = 0, $39 = 0, $44 = 0, $47 = 0, $61 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $$byval_copy = sp + 120 | 0;
 $7 = sp;
 $8 = sp + 112 | 0;
 $9 = sp + 108 | 0;
 $10 = sp + 100 | 0;
 $11 = sp + 124 | 0;
 $12 = sp + 104 | 0;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$8 + 4 >> 2] = 234;
 __ZNKSt3__28ios_base6getlocEv($10, $4);
 $16 = __ZNKSt3__26locale9use_facetERNS0_2idE($10, 32688) | 0;
 HEAP8[$11 >> 0] = 0;
 $17 = HEAP32[$2 >> 2] | 0;
 HEAP32[$12 >> 2] = $17;
 $19 = HEAP32[$4 + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
 $21 = $17;
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($1, $$byval_copy, $3, $10, $19, $5, $11, $16, $8, $9, $7 + 100 | 0) | 0) {
  $22 = $6 + 11 | 0;
  if ((HEAP8[$22 >> 0] | 0) < 0) {
   $25 = HEAP32[$6 >> 2] | 0;
   HEAP8[$$byval_copy >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($25, $$byval_copy);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP8[$$byval_copy >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $$byval_copy);
   HEAP8[$22 >> 0] = 0;
  }
  if (HEAP8[$11 >> 0] | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($6, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$16 >> 2] | 0) + 28 >> 2] & 31]($16, 45) | 0);
  $36 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$16 >> 2] | 0) + 28 >> 2] & 31]($16, 48) | 0;
  $38 = HEAP32[$9 >> 2] | 0;
  $39 = $38 + -1 | 0;
  $$0 = HEAP32[$8 >> 2] | 0;
  while (1) {
   if ($$0 >>> 0 >= $39 >>> 0) break;
   if ((HEAP8[$$0 >> 0] | 0) != $36 << 24 >> 24) break;
   $$0 = $$0 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($6, $$0, $38) | 0;
 }
 $44 = HEAP32[$1 >> 2] | 0;
 do if (!$44) $80 = 1; else {
  $47 = HEAP32[$44 + 12 >> 2] | 0;
  if (($47 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$47 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $80 = 1;
   break;
  } else {
   $80 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$17) label = 25; else {
  $61 = HEAP32[$21 + 12 >> 2] | 0;
  if (($61 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$61 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 25;
   break;
  } else if ($80) break; else {
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 25) if ($80) label = 27;
 if ((label | 0) == 27) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
 __ZNSt3__26localeD2Ev($10);
 $76 = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = 0;
 if ($76 | 0) FUNCTION_TABLE_vi[HEAP32[$8 + 4 >> 2] & 255]($76);
 STACKTOP = sp;
 return $$sroa$0$0$copyload | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $100 = 0, $101 = 0, $21 = 0, $24 = 0, $36 = 0, $38 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $67 = 0, $70 = 0, $82 = 0, $85 = 0, $9 = 0, $99 = 0, label = 0;
 $5 = $4 + 8 | 0;
 L1 : while (1) {
  $6 = HEAP32[$1 >> 2] | 0;
  do if (!$6) $99 = 1; else {
   $9 = HEAP32[$6 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 127]($6) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $99 = 1;
    break;
   } else {
    $99 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $21 = HEAP32[$2 >> 2] | 0;
  do if (!$21) label = 15; else {
   $24 = HEAP32[$21 + 12 >> 2] | 0;
   if (($24 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 15;
    break;
   } else if ($99) {
    $100 = $21;
    break;
   } else {
    $82 = $21;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($99) {
    $82 = 0;
    break;
   } else $100 = 0;
  }
  $36 = HEAP32[$1 >> 2] | 0;
  $38 = HEAP32[$36 + 12 >> 2] | 0;
  if (($38 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$38 >> 0] | 0) | 0;
  if (($$0$i$i & 255) << 24 >> 24 <= -1) {
   $82 = $100;
   break;
  }
  if (!(HEAP16[(HEAP32[$5 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $82 = $100;
   break;
  }
  $56 = HEAP32[$1 >> 2] | 0;
  $57 = $56 + 12 | 0;
  $58 = HEAP32[$57 >> 2] | 0;
  if (($58 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 40 >> 2] & 127]($56) | 0; else {
   HEAP32[$57 >> 2] = $58 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$58 >> 0] | 0) | 0;
  }
 }
 $67 = HEAP32[$1 >> 2] | 0;
 do if (!$67) $101 = 1; else {
  $70 = HEAP32[$67 + 12 >> 2] | 0;
  if (($70 | 0) == (HEAP32[$67 + 16 >> 2] | 0)) $$0$i$i$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 127]($67) | 0; else $$0$i$i$i$i7 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$70 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i7, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $101 = 1;
   break;
  } else {
   $101 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$82) label = 39; else {
  $85 = HEAP32[$82 + 12 >> 2] | 0;
  if (($85 | 0) == (HEAP32[$82 + 16 >> 2] | 0)) $$0$i$i2$i$i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] & 127]($82) | 0; else $$0$i$i2$i$i13 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$85 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i13, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 39;
   break;
  } else if ($101) break; else {
   label = 41;
   break;
  }
 } while (0);
 if ((label | 0) == 39) if ($101) label = 41;
 if ((label | 0) == 41) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $100 = 0, $101 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $5 = 0, $57 = 0, $58 = 0, $59 = 0, $68 = 0, $71 = 0, $8 = 0, $83 = 0, $86 = 0, label = 0;
 $5 = HEAP32[$1 >> 2] | 0;
 do if (!$5) $100 = 1; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $100 = 1;
   break;
  } else {
   $100 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $20 = HEAP32[$2 >> 2] | 0;
 do if (!$20) label = 14; else {
  $23 = HEAP32[$20 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 14;
   break;
  } else if ($100) {
   $83 = $20;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($100) label = 16; else {
  $83 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 6; else if ((label | 0) == 17) {
  $37 = HEAP32[$1 >> 2] | 0;
  $39 = HEAP32[$37 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, $$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 4;
   break;
  }
  $57 = HEAP32[$1 >> 2] | 0;
  $58 = $57 + 12 | 0;
  $59 = HEAP32[$58 >> 2] | 0;
  if (($59 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 40 >> 2] & 127]($57) | 0; else {
   HEAP32[$58 >> 2] = $59 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$59 >> 0] | 0) | 0;
  }
  $68 = HEAP32[$1 >> 2] | 0;
  do if (!$68) $101 = 1; else {
   $71 = HEAP32[$68 + 12 >> 2] | 0;
   if (($71 | 0) == (HEAP32[$68 + 16 >> 2] | 0)) $$0$i$i$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 127]($68) | 0; else $$0$i$i$i$i8 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$71 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i8, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $101 = 1;
    break;
   } else {
    $101 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$83) label = 38; else {
   $86 = HEAP32[$83 + 12 >> 2] | 0;
   if (($86 | 0) == (HEAP32[$83 + 16 >> 2] | 0)) $$0$i$i2$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 36 >> 2] & 127]($83) | 0; else $$0$i$i2$i$i14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$86 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i14, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 38;
    break;
   } else if ($101) break L22; else break;
  } while (0);
  if ((label | 0) == 38) if (!$101) break;
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $100 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $67 = 0, $70 = 0, $8 = 0, $82 = 0, $85 = 0, $99 = 0, label = 0;
 $5 = HEAP32[$1 >> 2] | 0;
 do if (!$5) $99 = 1; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $99 = 1;
   break;
  } else {
   $99 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $20 = HEAP32[$2 >> 2] | 0;
 do if (!$20) label = 14; else {
  $23 = HEAP32[$20 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 14;
   break;
  } else if ($99) {
   $82 = $20;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($99) label = 16; else {
  $82 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 6; else if ((label | 0) == 17) {
  $37 = HEAP32[$1 >> 2] | 0;
  $39 = HEAP32[$37 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, $$0$i$i, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 4;
   break;
  }
  $56 = HEAP32[$1 >> 2] | 0;
  $57 = $56 + 12 | 0;
  $58 = HEAP32[$57 >> 2] | 0;
  if (($58 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 40 >> 2] & 127]($56) | 0; else {
   HEAP32[$57 >> 2] = $58 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$58 >> 2] | 0) | 0;
  }
  $67 = HEAP32[$1 >> 2] | 0;
  do if (!$67) $100 = 1; else {
   $70 = HEAP32[$67 + 12 >> 2] | 0;
   if (($70 | 0) == (HEAP32[$67 + 16 >> 2] | 0)) $$0$i$i$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 127]($67) | 0; else $$0$i$i$i$i8 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$70 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i8, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $100 = 1;
    break;
   } else {
    $100 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$82) label = 38; else {
   $85 = HEAP32[$82 + 12 >> 2] | 0;
   if (($85 | 0) == (HEAP32[$82 + 16 >> 2] | 0)) $$0$i$i2$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] & 127]($82) | 0; else $$0$i$i2$i$i14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$85 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i14, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 38;
    break;
   } else if ($100) break L22; else break;
  } while (0);
  if ((label | 0) == 38) if (!$100) break;
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 } while (0);
 return;
}

function __ZN3sgl10LayerStackD2Ev($0) {
 $0 = $0 | 0;
 var $$08$i = 0, $$in$i = 0, $$lcssa$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi28Z2D = 0, $$pre24 = 0, $$pre9$i = 0, $$sink = 0, $$sroa$010$017$i = 0, $$sroa$010$1$i = 0, $$sroa$015$022 = 0, $$sroa$015$1 = 0, $$sroa$6$1 = 0, $$sroa$6$1$i = 0, $1 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $46 = 0, $50 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $87 = 0, label = 0;
 $1 = $0 + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = $2 + ($4 >>> 10 << 2) | 0;
 $7 = $0 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($8 | 0) == ($2 | 0)) {
  $$pre$phi28Z2D = $6;
  $23 = $8;
  $25 = $2;
  $29 = $4;
  $33 = $0 + 20 | 0;
 } else {
  $13 = (HEAP32[$6 >> 2] | 0) + (($4 & 1023) << 2) | 0;
  $14 = $0 + 20 | 0;
  $16 = (HEAP32[$14 >> 2] | 0) + $4 | 0;
  $21 = (HEAP32[$2 + ($16 >>> 10 << 2) >> 2] | 0) + (($16 & 1023) << 2) | 0;
  if (($21 | 0) == ($13 | 0)) {
   $$pre$phi28Z2D = $6;
   $23 = $8;
   $25 = $2;
   $29 = $4;
   $33 = $14;
  } else {
   $$sroa$015$022 = $6;
   $77 = $13;
   while (1) {
    $76 = HEAP32[$77 >> 2] | 0;
    if ($76 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$76 >> 2] | 0) + 4 >> 2] & 255]($76);
    $83 = $77 + 4 | 0;
    if (($83 - (HEAP32[$$sroa$015$022 >> 2] | 0) | 0) == 4096) {
     $87 = $$sroa$015$022 + 4 | 0;
     $$sroa$015$1 = $87;
     $$sroa$6$1 = HEAP32[$87 >> 2] | 0;
    } else {
     $$sroa$015$1 = $$sroa$015$022;
     $$sroa$6$1 = $83;
    }
    $77 = $$sroa$6$1;
    if (($21 | 0) == ($77 | 0)) break; else $$sroa$015$022 = $$sroa$015$1;
   }
   $$pre = HEAP32[$1 >> 2] | 0;
   $$pre24 = HEAP32[$3 >> 2] | 0;
   $$pre$phi28Z2D = $$pre + ($$pre24 >>> 10 << 2) | 0;
   $23 = HEAP32[$7 >> 2] | 0;
   $25 = $$pre;
   $29 = $$pre24;
   $33 = $14;
  }
 }
 $26 = $23;
 $27 = $25;
 if (($23 | 0) != ($25 | 0)) {
  $31 = (HEAP32[$$pre$phi28Z2D >> 2] | 0) + (($29 & 1023) << 2) | 0;
  $34 = (HEAP32[$33 >> 2] | 0) + $29 | 0;
  $39 = (HEAP32[$25 + ($34 >>> 10 << 2) >> 2] | 0) + (($34 & 1023) << 2) | 0;
  if (($39 | 0) != ($31 | 0)) {
   $$sroa$010$017$i = $$pre$phi28Z2D;
   $45 = $31;
   while (1) {
    $46 = $45 + 4 | 0;
    if (($46 - (HEAP32[$$sroa$010$017$i >> 2] | 0) | 0) == 4096) {
     $50 = $$sroa$010$017$i + 4 | 0;
     $$sroa$010$1$i = $50;
     $$sroa$6$1$i = HEAP32[$50 >> 2] | 0;
    } else {
     $$sroa$010$1$i = $$sroa$010$017$i;
     $$sroa$6$1$i = $46;
    }
    $45 = $$sroa$6$1$i;
    if (($39 | 0) == ($45 | 0)) break; else $$sroa$010$017$i = $$sroa$010$1$i;
   }
  }
 }
 HEAP32[$33 >> 2] = 0;
 $42 = $26 - $27 >> 2;
 if ($42 >>> 0 > 2) {
  $$in$i = $25;
  do {
   __ZdlPv(HEAP32[$$in$i >> 2] | 0);
   $$in$i = (HEAP32[$1 >> 2] | 0) + 4 | 0;
   HEAP32[$1 >> 2] = $$in$i;
   $57 = HEAP32[$7 >> 2] | 0;
   $59 = $57 - $$in$i >> 2;
  } while ($59 >>> 0 > 2);
  $$lcssa$i = $59;
  $62 = $$in$i;
  $64 = $57;
 } else {
  $$lcssa$i = $42;
  $62 = $25;
  $64 = $23;
 }
 switch ($$lcssa$i | 0) {
 case 1:
  {
   $$sink = 512;
   label = 18;
   break;
  }
 case 2:
  {
   $$sink = 1024;
   label = 18;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 18) HEAP32[$3 >> 2] = $$sink;
 if (($62 | 0) != ($64 | 0)) {
  $$08$i = $62;
  do {
   __ZdlPv(HEAP32[$$08$i >> 2] | 0);
   $$08$i = $$08$i + 4 | 0;
  } while (($$08$i | 0) != ($64 | 0));
  $$pre$i = HEAP32[$1 >> 2] | 0;
  $$pre9$i = HEAP32[$7 >> 2] | 0;
  if (($$pre9$i | 0) != ($$pre$i | 0)) HEAP32[$7 >> 2] = $$pre9$i + (~(($$pre9$i + -4 - $$pre$i | 0) >>> 2) << 2);
 }
 $74 = HEAP32[$0 >> 2] | 0;
 if (!$74) return;
 __ZdlPv($74);
 return;
}

function __ZN3sgl10EventQueueD2Ev($0) {
 $0 = $0 | 0;
 var $$08$i = 0, $$in$i = 0, $$lcssa$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi28Z2D = 0, $$pre24 = 0, $$pre9$i = 0, $$sink = 0, $$sroa$010$017$i = 0, $$sroa$010$1$i = 0, $$sroa$015$022 = 0, $$sroa$015$1 = 0, $$sroa$6$1 = 0, $$sroa$6$1$i = 0, $1 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $46 = 0, $50 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $87 = 0, label = 0;
 $1 = $0 + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = $2 + ($4 >>> 10 << 2) | 0;
 $7 = $0 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($8 | 0) == ($2 | 0)) {
  $$pre$phi28Z2D = $6;
  $23 = $8;
  $25 = $2;
  $29 = $4;
  $33 = $0 + 20 | 0;
 } else {
  $13 = (HEAP32[$6 >> 2] | 0) + (($4 & 1023) << 2) | 0;
  $14 = $0 + 20 | 0;
  $16 = (HEAP32[$14 >> 2] | 0) + $4 | 0;
  $21 = (HEAP32[$2 + ($16 >>> 10 << 2) >> 2] | 0) + (($16 & 1023) << 2) | 0;
  if (($21 | 0) == ($13 | 0)) {
   $$pre$phi28Z2D = $6;
   $23 = $8;
   $25 = $2;
   $29 = $4;
   $33 = $14;
  } else {
   $$sroa$015$022 = $6;
   $77 = $13;
   while (1) {
    $76 = HEAP32[$77 >> 2] | 0;
    if ($76 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$76 >> 2] | 0) + 4 >> 2] & 255]($76);
    $83 = $77 + 4 | 0;
    if (($83 - (HEAP32[$$sroa$015$022 >> 2] | 0) | 0) == 4096) {
     $87 = $$sroa$015$022 + 4 | 0;
     $$sroa$015$1 = $87;
     $$sroa$6$1 = HEAP32[$87 >> 2] | 0;
    } else {
     $$sroa$015$1 = $$sroa$015$022;
     $$sroa$6$1 = $83;
    }
    $77 = $$sroa$6$1;
    if (($21 | 0) == ($77 | 0)) break; else $$sroa$015$022 = $$sroa$015$1;
   }
   $$pre = HEAP32[$1 >> 2] | 0;
   $$pre24 = HEAP32[$3 >> 2] | 0;
   $$pre$phi28Z2D = $$pre + ($$pre24 >>> 10 << 2) | 0;
   $23 = HEAP32[$7 >> 2] | 0;
   $25 = $$pre;
   $29 = $$pre24;
   $33 = $14;
  }
 }
 $26 = $23;
 $27 = $25;
 if (($23 | 0) != ($25 | 0)) {
  $31 = (HEAP32[$$pre$phi28Z2D >> 2] | 0) + (($29 & 1023) << 2) | 0;
  $34 = (HEAP32[$33 >> 2] | 0) + $29 | 0;
  $39 = (HEAP32[$25 + ($34 >>> 10 << 2) >> 2] | 0) + (($34 & 1023) << 2) | 0;
  if (($39 | 0) != ($31 | 0)) {
   $$sroa$010$017$i = $$pre$phi28Z2D;
   $45 = $31;
   while (1) {
    $46 = $45 + 4 | 0;
    if (($46 - (HEAP32[$$sroa$010$017$i >> 2] | 0) | 0) == 4096) {
     $50 = $$sroa$010$017$i + 4 | 0;
     $$sroa$010$1$i = $50;
     $$sroa$6$1$i = HEAP32[$50 >> 2] | 0;
    } else {
     $$sroa$010$1$i = $$sroa$010$017$i;
     $$sroa$6$1$i = $46;
    }
    $45 = $$sroa$6$1$i;
    if (($39 | 0) == ($45 | 0)) break; else $$sroa$010$017$i = $$sroa$010$1$i;
   }
  }
 }
 HEAP32[$33 >> 2] = 0;
 $42 = $26 - $27 >> 2;
 if ($42 >>> 0 > 2) {
  $$in$i = $25;
  do {
   __ZdlPv(HEAP32[$$in$i >> 2] | 0);
   $$in$i = (HEAP32[$1 >> 2] | 0) + 4 | 0;
   HEAP32[$1 >> 2] = $$in$i;
   $57 = HEAP32[$7 >> 2] | 0;
   $59 = $57 - $$in$i >> 2;
  } while ($59 >>> 0 > 2);
  $$lcssa$i = $59;
  $62 = $$in$i;
  $64 = $57;
 } else {
  $$lcssa$i = $42;
  $62 = $25;
  $64 = $23;
 }
 switch ($$lcssa$i | 0) {
 case 1:
  {
   $$sink = 512;
   label = 18;
   break;
  }
 case 2:
  {
   $$sink = 1024;
   label = 18;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 18) HEAP32[$3 >> 2] = $$sink;
 if (($62 | 0) != ($64 | 0)) {
  $$08$i = $62;
  do {
   __ZdlPv(HEAP32[$$08$i >> 2] | 0);
   $$08$i = $$08$i + 4 | 0;
  } while (($$08$i | 0) != ($64 | 0));
  $$pre$i = HEAP32[$1 >> 2] | 0;
  $$pre9$i = HEAP32[$7 >> 2] | 0;
  if (($$pre9$i | 0) != ($$pre$i | 0)) HEAP32[$7 >> 2] = $$pre9$i + (~(($$pre9$i + -4 - $$pre$i | 0) >>> 2) << 2);
 }
 $74 = HEAP32[$0 >> 2] | 0;
 if (!$74) return;
 __ZdlPv($74);
 return;
}

function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$4 = 0, $$pre80 = 0, $100 = 0, $109 = 0, $114 = 0, $117 = 0, $129 = 0, $134 = 0, $137 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $32 = 0, $43 = 0, $46 = 0, $58 = 0, $63 = 0, $69 = 0, $71 = 0, $77 = 0, $87 = 0, $91 = 0, label = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 $$pre80 = $4;
 if (!($7 & 2)) label = 4; else if (($$pre80 - $3 | 0) < 3) $$4 = 1; else {
  HEAP32[$5 >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = -17;
  $14 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $14 + 1;
  HEAP8[$14 >> 0] = -69;
  $16 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $16 + 1;
  HEAP8[$16 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $18 = $1;
  $19 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if ($19 >>> 0 >= $1 >>> 0) {
    $$4 = 0;
    break L4;
   }
   $21 = HEAP16[$19 >> 1] | 0;
   $22 = $21 & 65535;
   if ($22 >>> 0 > $6 >>> 0) {
    $$4 = 2;
    break L4;
   }
   do if (($21 & 65535) < 128) {
    $25 = HEAP32[$5 >> 2] | 0;
    if (($$pre80 - $25 | 0) < 1) {
     $$4 = 1;
     break L4;
    }
    HEAP32[$5 >> 2] = $25 + 1;
    HEAP8[$25 >> 0] = $21;
   } else {
    if (($21 & 65535) < 2048) {
     $32 = HEAP32[$5 >> 2] | 0;
     if (($$pre80 - $32 | 0) < 2) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $32 + 1;
     HEAP8[$32 >> 0] = $22 >>> 6 | 192;
     $43 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $43 + 1;
     HEAP8[$43 >> 0] = $22 & 63 | 128;
     break;
    }
    if (($21 & 65535) < 55296) {
     $46 = HEAP32[$5 >> 2] | 0;
     if (($$pre80 - $46 | 0) < 3) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $46 + 1;
     HEAP8[$46 >> 0] = $22 >>> 12 | 224;
     $58 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $58 + 1;
     HEAP8[$58 >> 0] = $22 >>> 6 & 63 | 128;
     $63 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $63 + 1;
     HEAP8[$63 >> 0] = $22 & 63 | 128;
     break;
    }
    if (($21 & 65535) >= 56320) {
     if (($21 & 65535) < 57344) {
      $$4 = 2;
      break L4;
     }
     $117 = HEAP32[$5 >> 2] | 0;
     if (($$pre80 - $117 | 0) < 3) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $117 + 1;
     HEAP8[$117 >> 0] = $22 >>> 12 | 224;
     $129 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $129 + 1;
     HEAP8[$129 >> 0] = $22 >>> 6 & 63 | 128;
     $134 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $134 + 1;
     HEAP8[$134 >> 0] = $22 & 63 | 128;
     break;
    }
    if (($18 - $19 | 0) < 4) {
     $$4 = 1;
     break L4;
    }
    $69 = $19 + 2 | 0;
    $71 = HEAPU16[$69 >> 1] | 0;
    if (($71 & 64512 | 0) != 56320) {
     $$4 = 2;
     break L4;
    }
    if (($$pre80 - (HEAP32[$5 >> 2] | 0) | 0) < 4) {
     $$4 = 1;
     break L4;
    }
    $77 = $22 & 960;
    if ((($77 << 10) + 65536 | $22 << 10 & 64512 | $71 & 1023) >>> 0 > $6 >>> 0) {
     $$4 = 2;
     break L4;
    }
    HEAP32[$2 >> 2] = $69;
    $87 = ($77 >>> 6) + 1 | 0;
    $91 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $91 + 1;
    HEAP8[$91 >> 0] = $87 >>> 2 | 240;
    $100 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $100 + 1;
    HEAP8[$100 >> 0] = $22 >>> 2 & 15 | $87 << 4 & 48 | 128;
    $109 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $109 + 1;
    HEAP8[$109 >> 0] = $22 << 4 & 48 | $71 >>> 6 & 15 | 128;
    $114 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $114 + 1;
    HEAP8[$114 >> 0] = $71 & 63 | 128;
   } while (0);
   $137 = (HEAP32[$2 >> 2] | 0) + 2 | 0;
   HEAP32[$2 >> 2] = $137;
   $19 = $137;
  }
 } while (0);
 return $$4 | 0;
}

function __ZN6spdlog7details14name_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i22 = 0, $$010$i$i$i11 = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i23 = 0, $$089$i$i$i12 = 0, $10 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $4 = 0, $47 = 0, $5 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $70 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $84 = 0, $86 = 0, $87 = 0, $90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = $0 + 4 | 0;
 if (!(HEAP32[$5 >> 2] | 0)) {
  $75 = HEAP32[$1 >> 2] | 0;
  $77 = HEAP8[$75 + 11 >> 0] | 0;
  $78 = $77 << 24 >> 24 < 0;
  $80 = $78 ? HEAP32[$75 >> 2] | 0 : $75;
  $84 = $78 ? HEAP32[$75 + 4 >> 2] | 0 : $77 & 255;
  if (!$80) {
   STACKTOP = sp;
   return;
  }
  $86 = $80 + $84 | 0;
  $87 = $3 + 8 | 0;
  if (($84 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $90 = (HEAP32[$87 >> 2] | 0) + $84 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $90 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $90);
  if ($84 | 0) {
   $$010$i$i$i = $80;
   $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$87 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
    $$010$i$i$i = $$010$i$i$i + 1 | 0;
    if (($$010$i$i$i | 0) == ($86 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
   }
  }
  HEAP32[$87 >> 2] = $90;
  STACKTOP = sp;
  return;
 }
 $8 = HEAP32[$1 >> 2] | 0;
 $10 = HEAP8[$8 + 11 >> 0] | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $10 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $10 & 255, $5, $3);
 $16 = HEAP32[$1 >> 2] | 0;
 $18 = HEAP8[$16 + 11 >> 0] | 0;
 $19 = $18 << 24 >> 24 < 0;
 $21 = $19 ? HEAP32[$16 >> 2] | 0 : $16;
 $25 = $19 ? HEAP32[$16 + 4 >> 2] | 0 : $18 & 255;
 if ($21 | 0) {
  $27 = $21 + $25 | 0;
  $28 = $3 + 8 | 0;
  if (($25 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $31 = (HEAP32[$28 >> 2] | 0) + $25 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $31 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $31);
  if ($25 | 0) {
   $$010$i$i$i11 = $21;
   $$089$i$i$i12 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$28 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i12 >> 0] = HEAP8[$$010$i$i$i11 >> 0] | 0;
    $$010$i$i$i11 = $$010$i$i$i11 + 1 | 0;
    if (($$010$i$i$i11 | 0) == ($27 | 0)) break; else $$089$i$i$i12 = $$089$i$i$i12 + 1 | 0;
   }
  }
  HEAP32[$28 >> 2] = $31;
 }
 $47 = HEAP32[$4 + 8 >> 2] | 0;
 if ($47 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $47 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $53 = HEAP32[$4 + 12 >> 2] | 0;
  $55 = HEAP32[$4 + 4 >> 2] | 0;
  if ($53 | 0) {
   $57 = $53 + $47 | 0;
   $58 = $55 + 8 | 0;
   if (($47 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $60 = HEAP32[$58 >> 2] | 0;
   $61 = $60 + $47 | 0;
   if ((HEAP32[$55 + 12 >> 2] | 0) >>> 0 < $61 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$55 >> 2] >> 2] & 127]($55, $61);
    $70 = HEAP32[$58 >> 2] | 0;
   } else $70 = $60;
   $$010$i$i$i$i$i22 = $53;
   $$089$i$i$i$i$i23 = (HEAP32[$55 + 4 >> 2] | 0) + $70 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i23 >> 0] = HEAP8[$$010$i$i$i$i$i22 >> 0] | 0;
    $$010$i$i$i$i$i22 = $$010$i$i$i$i$i22 + 1 | 0;
    if (($$010$i$i$i$i$i22 | 0) == ($57 | 0)) break; else $$089$i$i$i$i$i23 = $$089$i$i$i$i$i23 + 1 | 0;
   }
   HEAP32[$58 >> 2] = $61;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $20 = 0, $23 = 0, $35 = 0, $37 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $62 = 0, $65 = 0, $77 = 0, $8 = 0, $80 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0;
 L1 : while (1) {
  $5 = HEAP32[$1 >> 2] | 0;
  do if (!$5) $94 = 1; else {
   $8 = HEAP32[$5 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $94 = 1;
    break;
   } else {
    $94 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $20 = HEAP32[$2 >> 2] | 0;
  do if (!$20) label = 15; else {
   $23 = HEAP32[$20 + 12 >> 2] | 0;
   if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 15;
    break;
   } else if ($94) {
    $95 = $20;
    break;
   } else {
    $77 = $20;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($94) {
    $77 = 0;
    break;
   } else $95 = 0;
  }
  $35 = HEAP32[$1 >> 2] | 0;
  $37 = HEAP32[$35 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, $$0$i$i) | 0)) {
   $77 = $95;
   break;
  }
  $51 = HEAP32[$1 >> 2] | 0;
  $52 = $51 + 12 | 0;
  $53 = HEAP32[$52 >> 2] | 0;
  if (($53 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 40 >> 2] & 127]($51) | 0; else {
   HEAP32[$52 >> 2] = $53 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
  }
 }
 $62 = HEAP32[$1 >> 2] | 0;
 do if (!$62) $96 = 1; else {
  $65 = HEAP32[$62 + 12 >> 2] | 0;
  if (($65 | 0) == (HEAP32[$62 + 16 >> 2] | 0)) $$0$i$i$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$62 >> 2] | 0) + 36 >> 2] & 127]($62) | 0; else $$0$i$i$i$i7 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$65 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i7, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $96 = 1;
   break;
  } else {
   $96 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$77) label = 38; else {
  $80 = HEAP32[$77 + 12 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$77 + 16 >> 2] | 0)) $$0$i$i2$i$i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 127]($77) | 0; else $$0$i$i2$i$i13 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$80 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i13, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 38;
   break;
  } else if ($96) break; else {
   label = 40;
   break;
  }
 } while (0);
 if ((label | 0) == 38) if ($96) label = 40;
 if ((label | 0) == 40) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph85 = 0, $14 = 0, $15 = 0, $18 = 0, $23 = 0, $24 = 0, $35 = 0, $36 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $51 = 0, $55 = 0, $56 = 0, $64 = 0, $66 = 0, $67 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp;
 $9 = sp + 8 | 0;
 $$070 = $2;
 while (1) {
  if (($$070 | 0) == ($3 | 0)) {
   $$070$lcssa = $3;
   break;
  }
  if (!(HEAP32[$$070 >> 2] | 0)) {
   $$070$lcssa = $$070;
   break;
  }
  $$070 = $$070 + 4 | 0;
 }
 HEAP32[$7 >> 2] = $5;
 HEAP32[$4 >> 2] = $2;
 $14 = $6;
 $15 = $0 + 8 | 0;
 $$077 = $2;
 $$079 = $5;
 $$171 = $$070$lcssa;
 L6 : while (1) {
  if (($$079 | 0) == ($6 | 0) | ($$077 | 0) == ($3 | 0)) {
   $74 = $$077;
   label = 36;
   break;
  }
  $18 = $1;
  $23 = HEAP32[$18 + 4 >> 2] | 0;
  $24 = $8;
  HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$24 + 4 >> 2] = $23;
  $35 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0;
  $36 = _wcsnrtombs($$079, $4, $$171 - $$077 >> 2, $14 - $$079 | 0, $1) | 0;
  if ($35 | 0) ___uselocale($35) | 0;
  switch ($36 | 0) {
  case -1:
   {
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $$375$ph = 1;
    label = 33;
    break L6;
    break;
   }
  default:
   {}
  }
  $51 = (HEAP32[$7 >> 2] | 0) + $36 | 0;
  HEAP32[$7 >> 2] = $51;
  if (($51 | 0) == ($6 | 0)) {
   label = 34;
   break;
  }
  if (($$171 | 0) == ($3 | 0)) {
   $$5$ph85 = $3;
   $77 = $51;
   $78 = HEAP32[$4 >> 2] | 0;
  } else {
   $55 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0;
   $56 = _wcrtomb($9, 0, $1) | 0;
   if ($55 | 0) ___uselocale($55) | 0;
   if (($56 | 0) == -1) {
    $$173 = 2;
    label = 32;
    break;
   }
   if ($56 >>> 0 > ($14 - (HEAP32[$7 >> 2] | 0) | 0) >>> 0) {
    $$173 = 1;
    label = 32;
    break;
   }
   $$0 = $9;
   $$069 = $56;
   while (1) {
    if (!$$069) break;
    $66 = HEAP8[$$0 >> 0] | 0;
    $67 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $67 + 1;
    HEAP8[$67 >> 0] = $66;
    $$0 = $$0 + 1 | 0;
    $$069 = $$069 + -1 | 0;
   }
   $64 = (HEAP32[$4 >> 2] | 0) + 4 | 0;
   HEAP32[$4 >> 2] = $64;
   $$2 = $64;
   while (1) {
    if (($$2 | 0) == ($3 | 0)) {
     $$2$lcssa = $3;
     break;
    }
    if (!(HEAP32[$$2 >> 2] | 0)) {
     $$2$lcssa = $$2;
     break;
    }
    $$2 = $$2 + 4 | 0;
   }
   $$5$ph85 = $$2$lcssa;
   $77 = HEAP32[$7 >> 2] | 0;
   $78 = $64;
  }
  $$077 = $78;
  $$079 = $77;
  $$171 = $$5$ph85;
 }
 if ((label | 0) == 10) {
  HEAP32[$7 >> 2] = $$079;
  $$178 = $$077;
  $43 = $$079;
  while (1) {
   if (($$178 | 0) == (HEAP32[$4 >> 2] | 0)) break;
   $40 = HEAP32[$$178 >> 2] | 0;
   $42 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0;
   $44 = _wcrtomb($43, $40, $8) | 0;
   if ($42 | 0) ___uselocale($42) | 0;
   if (($44 | 0) == -1) break;
   $48 = (HEAP32[$7 >> 2] | 0) + $44 | 0;
   HEAP32[$7 >> 2] = $48;
   $$178 = $$178 + 4 | 0;
   $43 = $48;
  }
  HEAP32[$4 >> 2] = $$178;
  $$375$ph = 2;
  label = 33;
 } else if ((label | 0) == 32) {
  $$375$ph = $$173;
  label = 33;
 } else if ((label | 0) == 34) {
  $74 = HEAP32[$4 >> 2] | 0;
  label = 36;
 }
 if ((label | 0) == 33) $$476 = $$375$ph; else if ((label | 0) == 36) $$476 = ($74 | 0) != ($3 | 0) & 1;
 STACKTOP = sp;
 return $$476 | 0;
}

function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$9 = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink107 = 0, $10 = 0, $104 = 0, $11 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $39 = 0, $45 = 0, $52 = 0, $54 = 0, $61 = 0, $71 = 0, $78 = 0, $80 = 0, $82 = 0, $88 = 0, $91 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 if (!($7 & 4)) $$pre$phiZ2D = $1; else {
  $10 = HEAP32[$2 >> 2] | 0;
  $11 = $1;
  if (($11 - $10 | 0) > 2) if ((HEAP8[$10 >> 0] | 0) == -17) if ((HEAP8[$10 + 1 >> 0] | 0) == -69) if ((HEAP8[$10 + 2 >> 0] | 0) == -65) {
   HEAP32[$2 >> 2] = $10 + 3;
   $$pre$phiZ2D = $11;
  } else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11;
 }
 L9 : while (1) {
  $24 = HEAP32[$2 >> 2] | 0;
  if ($24 >>> 0 >= $1 >>> 0) {
   $$9 = 0;
   break;
  }
  $26 = HEAP32[$5 >> 2] | 0;
  if ($26 >>> 0 >= $4 >>> 0) {
   $$9 = 1;
   break;
  }
  $28 = HEAP8[$24 >> 0] | 0;
  $29 = $28 & 255;
  do if ($28 << 24 >> 24 > -1) if ($29 >>> 0 > $6 >>> 0) {
   $$9 = 2;
   break L9;
  } else {
   $$sink = $29;
   $$sink107 = 1;
  } else {
   if (($28 & 255) < 194) {
    $$9 = 2;
    break L9;
   }
   if (($28 & 255) < 224) {
    if (($$pre$phiZ2D - $24 | 0) < 2) {
     $$9 = 1;
     break L9;
    }
    $39 = HEAPU8[$24 + 1 >> 0] | 0;
    if (($39 & 192 | 0) != 128) {
     $$9 = 2;
     break L9;
    }
    $45 = $39 & 63 | $29 << 6 & 1984;
    if ($45 >>> 0 > $6 >>> 0) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $45;
     $$sink107 = 2;
     break;
    }
   }
   if (($28 & 255) < 240) {
    if (($$pre$phiZ2D - $24 | 0) < 3) {
     $$9 = 1;
     break L9;
    }
    $52 = HEAP8[$24 + 1 >> 0] | 0;
    $54 = HEAP8[$24 + 2 >> 0] | 0;
    switch ($28 << 24 >> 24) {
    case -32:
     {
      if (($52 & -32) << 24 >> 24 != -96) {
       $$9 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if (($52 & -32) << 24 >> 24 != -128) {
       $$9 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($52 & -64) << 24 >> 24 != -128) {
      $$9 = 2;
      break L9;
     }
    }
    $61 = $54 & 255;
    if (($61 & 192 | 0) != 128) {
     $$9 = 2;
     break L9;
    }
    $71 = ($52 & 63) << 6 | $29 << 12 & 61440 | $61 & 63;
    if ($71 >>> 0 > $6 >>> 0) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $71;
     $$sink107 = 3;
     break;
    }
   }
   if (($28 & 255) >= 245) {
    $$9 = 2;
    break L9;
   }
   if (($$pre$phiZ2D - $24 | 0) < 4) {
    $$9 = 1;
    break L9;
   }
   $78 = HEAP8[$24 + 1 >> 0] | 0;
   $80 = HEAP8[$24 + 2 >> 0] | 0;
   $82 = HEAP8[$24 + 3 >> 0] | 0;
   switch ($28 << 24 >> 24) {
   case -16:
    {
     if (($78 + 112 & 255) >= 48) {
      $$9 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if (($78 & -16) << 24 >> 24 != -128) {
      $$9 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($78 & -64) << 24 >> 24 != -128) {
     $$9 = 2;
     break L9;
    }
   }
   $88 = $80 & 255;
   if (($88 & 192 | 0) != 128) {
    $$9 = 2;
    break L9;
   }
   $91 = $82 & 255;
   if (($91 & 192 | 0) != 128) {
    $$9 = 2;
    break L9;
   }
   $104 = ($78 & 63) << 12 | $29 << 18 & 1835008 | $88 << 6 & 4032 | $91 & 63;
   if ($104 >>> 0 > $6 >>> 0) {
    $$9 = 2;
    break L9;
   } else {
    $$sink = $104;
    $$sink107 = 4;
   }
  } while (0);
  HEAP32[$26 >> 2] = $$sink;
  HEAP32[$2 >> 2] = $24 + $$sink107;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 }
 return $$9 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$4$ph = 0, $$pre = 0, $$sink = 0, $13 = 0, $14 = 0, $17 = 0, $22 = 0, $23 = 0, $34 = 0, $35 = 0, $38 = 0, $44 = 0, $45 = 0, $53 = 0, $57 = 0, $58 = 0, $64 = 0, $69 = 0, $72 = 0, $73 = 0, $8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp;
 $$070 = $2;
 while (1) {
  if (($$070 | 0) == ($3 | 0)) {
   $$070$lcssa = $3;
   break;
  }
  if (!(HEAP8[$$070 >> 0] | 0)) {
   $$070$lcssa = $$070;
   break;
  }
  $$070 = $$070 + 1 | 0;
 }
 HEAP32[$7 >> 2] = $5;
 HEAP32[$4 >> 2] = $2;
 $13 = $6;
 $14 = $0 + 8 | 0;
 $$074 = $2;
 $$077 = $5;
 $$1 = $$070$lcssa;
 while (1) {
  if (($$077 | 0) == ($6 | 0) | ($$074 | 0) == ($3 | 0)) {
   $69 = $$074;
   label = 33;
   break;
  }
  $17 = $1;
  $22 = HEAP32[$17 + 4 >> 2] | 0;
  $23 = $8;
  HEAP32[$23 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$23 + 4 >> 2] = $22;
  $34 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0;
  $35 = _mbsnrtowcs($$077, $4, $$1 - $$074 | 0, $13 - $$077 >> 2, $1) | 0;
  if ($34 | 0) ___uselocale($34) | 0;
  if (($35 | 0) == -1) {
   label = 10;
   break;
  }
  $53 = (HEAP32[$7 >> 2] | 0) + ($35 << 2) | 0;
  HEAP32[$7 >> 2] = $53;
  if (($53 | 0) == ($6 | 0)) {
   label = 30;
   break;
  }
  $$pre = HEAP32[$4 >> 2] | 0;
  if (($$1 | 0) == ($3 | 0)) {
   $$4$ph = $3;
   $72 = $53;
   $73 = $$pre;
  } else {
   $57 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0;
   $58 = _mbrtowc($53, $$pre, 1, $1) | 0;
   if ($57 | 0) ___uselocale($57) | 0;
   if ($58 | 0) {
    $$172$ph = 2;
    label = 29;
    break;
   }
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 4;
   $64 = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   HEAP32[$4 >> 2] = $64;
   $$2 = $64;
   while (1) {
    if (($$2 | 0) == ($3 | 0)) {
     $$2$lcssa = $3;
     break;
    }
    if (!(HEAP8[$$2 >> 0] | 0)) {
     $$2$lcssa = $$2;
     break;
    }
    $$2 = $$2 + 1 | 0;
   }
   $$4$ph = $$2$lcssa;
   $72 = HEAP32[$7 >> 2] | 0;
   $73 = $64;
  }
  $$074 = $73;
  $$077 = $72;
  $$1 = $$4$ph;
 }
 do if ((label | 0) == 10) {
  $38 = $$1;
  $$175 = $$074;
  $storemerge = $$077;
  L29 : while (1) {
   HEAP32[$7 >> 2] = $storemerge;
   if (($$175 | 0) == (HEAP32[$4 >> 2] | 0)) {
    label = 19;
    break;
   }
   $44 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0;
   $45 = _mbrtowc($storemerge, $$175, $38 - $$175 | 0, $8) | 0;
   if ($44 | 0) ___uselocale($44) | 0;
   switch ($45 | 0) {
   case -1:
    {
     label = 15;
     break L29;
     break;
    }
   case -2:
    {
     label = 16;
     break L29;
     break;
    }
   case 0:
    {
     $$sink = 1;
     break;
    }
   default:
    $$sink = $45;
   }
   $$175 = $$175 + $$sink | 0;
   $storemerge = (HEAP32[$7 >> 2] | 0) + 4 | 0;
  }
  if ((label | 0) == 15) {
   HEAP32[$4 >> 2] = $$175;
   $$172$ph = 2;
   label = 29;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$4 >> 2] = $$175;
   $$172$ph = 1;
   label = 29;
   break;
  } else if ((label | 0) == 19) {
   HEAP32[$4 >> 2] = $$175;
   $$172$ph = ($$175 | 0) != ($3 | 0) & 1;
   label = 29;
   break;
  }
 } else if ((label | 0) == 30) {
  $69 = HEAP32[$4 >> 2] | 0;
  label = 33;
 } while (0);
 if ((label | 0) == 29) $$273 = $$172$ph; else if ((label | 0) == 33) $$273 = ($69 | 0) != ($3 | 0) & 1;
 STACKTOP = sp;
 return $$273 | 0;
}

function __ZN6spdlog7details8registry17initialize_loggerENSt3__210shared_ptrINS_6loggerEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pr = 0, $$sroa$014$019$i = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $3 = 0, $32 = 0, $38 = 0, $4 = 0, $40 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $63 = 0, $64 = 0, $8 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $4 = sp;
 $5 = sp + 24 | 0;
 __ZNSt3__25mutex4lockEv($0);
 $6 = HEAP32[$1 >> 2] | 0;
 $8 = HEAP32[$0 + 104 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] & 127]($3, $8);
 $13 = HEAP32[$6 + 16 >> 2] | 0;
 $15 = HEAP32[$6 + 20 >> 2] | 0;
 if (($13 | 0) != ($15 | 0)) {
  $$sroa$014$019$i = $13;
  do {
   $17 = HEAP32[$$sroa$014$019$i >> 2] | 0;
   $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 20 >> 2] | 0;
   $21 = HEAP32[$3 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 127]($2, $21);
   FUNCTION_TABLE_vii[$20 & 127]($17, $2);
   $25 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = 0;
   if ($25 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] & 255]($25);
   $$sroa$014$019$i = $$sroa$014$019$i + 8 | 0;
  } while (($$sroa$014$019$i | 0) != ($15 | 0));
 }
 $32 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 if ($32 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2] & 255]($32);
 $38 = HEAP32[$0 + 136 >> 2] | 0;
 do if ($38 | 0) {
  $40 = HEAP32[$1 >> 2] | 0;
  if (($0 + 120 | 0) == ($38 | 0)) {
   HEAP32[$4 + 16 >> 2] = $4;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$38 >> 2] | 0) + 12 >> 2] & 127]($38, $4);
  } else HEAP32[$4 + 16 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 8 >> 2] & 127]($38) | 0;
  $52 = $40 + 40 | 0;
  $53 = $40 + 56 | 0;
  $54 = HEAP32[$53 >> 2] | 0;
  if (($52 | 0) == ($54 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$54 >> 2] | 0) + 16 >> 2] & 255]($54); else if ($54 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$54 >> 2] | 0) + 20 >> 2] & 255]($54);
  HEAP32[$53 >> 2] = 0;
  $63 = $4 + 16 | 0;
  $64 = HEAP32[$63 >> 2] | 0;
  if (!$64) {
   HEAP32[$53 >> 2] = 0;
   break;
  }
  if (($4 | 0) != ($64 | 0)) {
   HEAP32[$53 >> 2] = $64;
   HEAP32[$63 >> 2] = 0;
   break;
  }
  HEAP32[$53 >> 2] = $52;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$64 >> 2] | 0) + 12 >> 2] & 127]($64, $52);
  $$pr = HEAP32[$63 >> 2] | 0;
  if (($4 | 0) == ($$pr | 0)) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$$pr >> 2] | 0) + 16 >> 2] & 255]($$pr);
   break;
  }
  if ($$pr | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$$pr >> 2] | 0) + 20 >> 2] & 255]($$pr);
 } while (0);
 HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] = HEAP32[$0 + 108 >> 2];
 HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] = HEAP32[$0 + 112 >> 2];
 if (!(HEAP8[$0 + 164 >> 0] | 0)) {
  __ZNSt3__25mutex6unlockEv($0);
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
 $90 = $5 + 4 | 0;
 $91 = $1 + 4 | 0;
 HEAP32[$90 >> 2] = HEAP32[$91 >> 2];
 HEAP32[$1 >> 2] = 0;
 HEAP32[$91 >> 2] = 0;
 __ZN6spdlog7details8registry16register_logger_ENSt3__210shared_ptrINS_6loggerEEE($0, $5);
 $93 = HEAP32[$90 >> 2] | 0;
 if (!$93) {
  __ZNSt3__25mutex6unlockEv($0);
  STACKTOP = sp;
  return;
 }
 $95 = $93 + 4 | 0;
 $96 = HEAP32[$95 >> 2] | 0;
 HEAP32[$95 >> 2] = $96 + -1;
 if ($96 | 0) {
  __ZNSt3__25mutex6unlockEv($0);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$93 >> 2] | 0) + 8 >> 2] & 255]($93);
 __ZNSt3__219__shared_weak_count14__release_weakEv($93);
 __ZNSt3__25mutex6unlockEv($0);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIyEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$029$lcssa$i$i$i = 0, $$02932$i$i$i = 0, $$sink = 0, $$sink6 = 0, $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = 0, $$sroa$0$0$copyload$i$i = 0, $11 = 0, $15 = 0, $18 = 0, $26 = 0, $3 = 0, $30 = 0, $32 = 0, $37 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $56 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $79 = 0, $8 = 0, $85 = 0, $87 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 if ($5 | 0) {
  $8 = HEAP8[$5 + 17 >> 0] | 0;
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $5;
  $11 = $3 + 8 | 0;
  HEAP32[$11 >> 2] = $1;
  HEAP32[$11 + 4 >> 2] = $2;
  $15 = $3 + 20 | 0;
  HEAP32[$15 >> 2] = 0;
  $18 = HEAPU8[$5 + 16 >> 0] | 0;
  if ($18 & 1 | 0) {
   HEAP8[$3 + 16 >> 0] = ($18 & 2 | 0) == 0 ? 32 : 43;
   HEAP32[$15 >> 2] = 1;
  }
  __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEEEEEvcOT_($8, $3);
  $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
  $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
  STACKTOP = sp;
  return $$sroa$0$0$copyload$i$i | 0;
 }
 $26 = _llvm_ctlz_i64($1 | 1 | 0, $2 | 0, 1) | 0;
 getTempRet0() | 0;
 $30 = ((64 - $26 | 0) * 1233 | 0) >>> 12;
 $32 = 272 + ($30 << 3) | 0;
 $37 = HEAP32[$32 + 4 >> 2] | 0;
 $44 = $30 + 1 + (($37 >>> 0 > $2 >>> 0 | (($37 | 0) == ($2 | 0) ? (HEAP32[$32 >> 2] | 0) >>> 0 > $1 >>> 0 : 0)) << 31 >> 31) | 0;
 $45 = HEAP32[$0 >> 2] | 0;
 $46 = $45 + 8 | 0;
 $47 = HEAP32[$46 >> 2] | 0;
 $48 = $44 + $47 | 0;
 if ((HEAP32[$45 + 12 >> 2] | 0) >>> 0 < $48 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$45 >> 2] >> 2] & 127]($45, $48);
 HEAP32[$46 >> 2] = $48;
 $56 = (HEAP32[$45 + 4 >> 2] | 0) + $47 | 0;
 if (($44 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
 $58 = $3 + $44 | 0;
 if ($2 >>> 0 > 0 | ($2 | 0) == 0 & $1 >>> 0 > 99) {
  $$02932$i$i$i = $58;
  $64 = $1;
  $65 = $2;
  while (1) {
   $66 = ___udivdi3($64 | 0, $65 | 0, 100, 0) | 0;
   $67 = getTempRet0() | 0;
   $68 = ___muldi3($66 | 0, $67 | 0, 100, 0) | 0;
   $70 = _i64Subtract($64 | 0, $65 | 0, $68 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $72 = $70 << 1;
   HEAP8[$$02932$i$i$i + -1 >> 0] = HEAP8[64 + ($72 | 1) >> 0] | 0;
   $79 = $$02932$i$i$i + -2 | 0;
   HEAP8[$79 >> 0] = HEAP8[64 + $72 >> 0] | 0;
   if ($65 >>> 0 > 0 | ($65 | 0) == 0 & $64 >>> 0 > 9999) {
    $$02932$i$i$i = $79;
    $64 = $66;
    $65 = $67;
   } else {
    $$029$lcssa$i$i$i = $79;
    $85 = $67;
    $87 = $66;
    break;
   }
  }
 } else {
  $$029$lcssa$i$i$i = $58;
  $85 = $2;
  $87 = $1;
 }
 if ($85 >>> 0 < 0 | ($85 | 0) == 0 & $87 >>> 0 < 10) {
  $$sink = ($87 & 255) + 48 << 24 >> 24;
  $$sink6 = -1;
 } else {
  $94 = $87 << 1;
  HEAP8[$$029$lcssa$i$i$i + -1 >> 0] = HEAP8[64 + ($94 | 1) >> 0] | 0;
  $$sink = HEAP8[64 + $94 >> 0] | 0;
  $$sink6 = -2;
 }
 HEAP8[$$029$lcssa$i$i$i + $$sink6 >> 0] = $$sink;
 if ($44 | 0) _memcpy($56 | 0, $3 | 0, $44 | 0) | 0;
 $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
 $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$0$0$copyload$i$i | 0;
}

function __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIiEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$020$i$i = 0, $$029$lcssa$i$i$i = 0, $$02932$i$i$i = 0, $$030$lcssa$i$i$i = 0, $$03031$i$i$i = 0, $$sink = 0, $$sink6 = 0, $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = 0, $$sroa$0$0$copyload$i$i = 0, $10 = 0, $16 = 0, $2 = 0, $23 = 0, $29 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0, $50 = 0, $52 = 0, $55 = 0, $62 = 0, $67 = 0, $7 = 0, $9 = 0, $spec$select$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 if ($4 | 0) {
  $7 = HEAP8[$4 + 17 >> 0] | 0;
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $4;
  $9 = $2 + 8 | 0;
  HEAP32[$9 >> 2] = $1;
  $10 = $2 + 16 | 0;
  HEAP32[$10 >> 2] = 0;
  if (($1 | 0) < 0) {
   HEAP8[$2 + 12 >> 0] = 45;
   HEAP32[$10 >> 2] = 1;
   HEAP32[$9 >> 2] = 0 - $1;
  } else {
   $16 = HEAPU8[$4 + 16 >> 0] | 0;
   if ($16 & 1 | 0) {
    HEAP8[$2 + 12 >> 0] = ($16 & 2 | 0) == 0 ? 32 : 43;
    HEAP32[$10 >> 2] = 1;
   }
  }
  __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIiNS0_18basic_format_specsIcEEEEEEvcOT_($7, $2);
  $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
  $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
  STACKTOP = sp;
  return $$sroa$0$0$copyload$i$i | 0;
 }
 $23 = ($1 | 0) < 0;
 $spec$select$i$i = $23 ? 0 - $1 | 0 : $1;
 $29 = ((32 - (Math_clz32($spec$select$i$i | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $34 = $29 + 1 + (((HEAP32[16 + ($29 << 2) >> 2] | 0) >>> 0 > $spec$select$i$i >>> 0) << 31 >> 31) | 0;
 $35 = HEAP32[$0 >> 2] | 0;
 $36 = $35 + 8 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $39 = $37 + ($1 >>> 31) + $34 | 0;
 if ((HEAP32[$35 + 12 >> 2] | 0) >>> 0 < $39 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$35 >> 2] >> 2] & 127]($35, $39);
 HEAP32[$36 >> 2] = $39;
 $47 = (HEAP32[$35 + 4 >> 2] | 0) + $37 | 0;
 if ($23) {
  HEAP8[$47 >> 0] = 45;
  $$020$i$i = $47 + 1 | 0;
 } else $$020$i$i = $47;
 if (($34 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
 $50 = $2 + $34 | 0;
 if ($spec$select$i$i >>> 0 > 99) {
  $$02932$i$i$i = $50;
  $$03031$i$i$i = $spec$select$i$i;
  while (1) {
   $52 = ($$03031$i$i$i >>> 0) / 100 | 0;
   $55 = $$03031$i$i$i - ($52 * 100 | 0) << 1;
   HEAP8[$$02932$i$i$i + -1 >> 0] = HEAP8[64 + ($55 | 1) >> 0] | 0;
   $62 = $$02932$i$i$i + -2 | 0;
   HEAP8[$62 >> 0] = HEAP8[64 + $55 >> 0] | 0;
   if ($$03031$i$i$i >>> 0 > 9999) {
    $$02932$i$i$i = $62;
    $$03031$i$i$i = $52;
   } else {
    $$029$lcssa$i$i$i = $62;
    $$030$lcssa$i$i$i = $52;
    break;
   }
  }
 } else {
  $$029$lcssa$i$i$i = $50;
  $$030$lcssa$i$i$i = $spec$select$i$i;
 }
 if ($$030$lcssa$i$i$i >>> 0 < 10) {
  $$sink = $$030$lcssa$i$i$i + 48 & 255;
  $$sink6 = -1;
 } else {
  $67 = $$030$lcssa$i$i$i << 1;
  HEAP8[$$029$lcssa$i$i$i + -1 >> 0] = HEAP8[64 + ($67 | 1) >> 0] | 0;
  $$sink = HEAP8[64 + $67 >> 0] | 0;
  $$sink6 = -2;
 }
 HEAP8[$$029$lcssa$i$i$i + $$sink6 >> 0] = $$sink;
 if ($34 | 0) _memcpy($$020$i$i | 0, $2 | 0, $34 | 0) | 0;
 $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
 $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$0$0$copyload$i$i | 0;
}

function __ZN6spdlog7details11z_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$010$i$i$i$i$i39 = 0, $$089$i$i$i$i$i40 = 0, $$pre$i22 = 0, $$pre$i23 = 0, $$pre$i28 = 0, $$pre$phi$i25Z2D = 0, $$pre$phi$i30Z2D = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $21 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $43 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $66 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 6, $0 + 4 | 0, $3);
 $7 = HEAP32[$2 + 36 >> 2] | 0;
 $8 = ($7 | 0) / 60 | 0;
 $10 = $3 + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $11 + 1 | 0;
 $13 = $3 + 12 | 0;
 $15 = (HEAP32[$13 >> 2] | 0) >>> 0 < $12 >>> 0;
 if (($7 | 0) < -59) {
  if ($15) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $12);
   $$pre$i22 = HEAP32[$10 >> 2] | 0;
   $$pre$phi$iZ2D = $$pre$i22 + 1 | 0;
   $21 = $$pre$i22;
  } else {
   $$pre$phi$iZ2D = $12;
   $21 = $11;
  }
  $19 = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$10 >> 2] = $$pre$phi$iZ2D;
  HEAP8[$19 + $21 >> 0] = 45;
  $$0 = 0 - $8 | 0;
 } else {
  if ($15) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $12);
   $$pre$i23 = HEAP32[$10 >> 2] | 0;
   $$pre$phi$i25Z2D = $$pre$i23 + 1 | 0;
   $28 = $$pre$i23;
  } else {
   $$pre$phi$i25Z2D = $12;
   $28 = $11;
  }
  $26 = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$10 >> 2] = $$pre$phi$i25Z2D;
  HEAP8[$26 + $28 >> 0] = 43;
  $$0 = $8;
 }
 $29 = ($$0 | 0) / 60 | 0;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE($29, $3);
 $30 = HEAP32[$10 >> 2] | 0;
 $31 = $30 + 1 | 0;
 if ((HEAP32[$13 >> 2] | 0) >>> 0 < $31 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $31);
  $$pre$i28 = HEAP32[$10 >> 2] | 0;
  $$pre$phi$i30Z2D = $$pre$i28 + 1 | 0;
  $39 = $$pre$i28;
 } else {
  $$pre$phi$i30Z2D = $31;
  $39 = $30;
 }
 $37 = HEAP32[$3 + 4 >> 2] | 0;
 HEAP32[$10 >> 2] = $$pre$phi$i30Z2D;
 HEAP8[$37 + $39 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE($$0 - ($29 * 60 | 0) | 0, $3);
 $43 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$43) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $43 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $49 = HEAP32[$4 + 12 >> 2] | 0;
 $51 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$49) {
  STACKTOP = sp;
  return;
 }
 $53 = $49 + $43 | 0;
 $54 = $51 + 8 | 0;
 if (($43 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $56 = HEAP32[$54 >> 2] | 0;
 $57 = $56 + $43 | 0;
 if ((HEAP32[$51 + 12 >> 2] | 0) >>> 0 < $57 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$51 >> 2] >> 2] & 127]($51, $57);
  $66 = HEAP32[$54 >> 2] | 0;
 } else $66 = $56;
 $$010$i$i$i$i$i39 = $49;
 $$089$i$i$i$i$i40 = (HEAP32[$51 + 4 >> 2] | 0) + $66 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i40 >> 0] = HEAP8[$$010$i$i$i$i$i39 >> 0] | 0;
  $$010$i$i$i$i$i39 = $$010$i$i$i$i$i39 + 1 | 0;
  if (($$010$i$i$i$i$i39 | 0) == ($53 | 0)) break; else $$089$i$i$i$i$i40 = $$089$i$i$i$i$i40 + 1 | 0;
 }
 HEAP32[$54 >> 2] = $57;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog6logger3logIJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEvNS_10source_locENS_5level10level_enumEPKcDpRKT_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $38 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $81 = 0, $tmpcast1$i$i$i$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(624);
 $tmpcast1$i$i$i$byval_copy = sp + 88 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = sp + 100 | 0;
 if ((HEAP32[$0 + 28 >> 2] | 0) > ($2 | 0)) {
  STACKTOP = sp;
  return;
 }
 $12 = $8 + 4 | 0;
 $13 = $8 + 8 | 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$8 >> 2] = 9804;
 $15 = $8 + 16 | 0;
 HEAP32[$12 >> 2] = $15;
 HEAP32[$8 + 12 >> 2] = 500;
 $17 = HEAP8[$4 + 11 >> 0] | 0;
 $18 = $17 << 24 >> 24 < 0;
 $25 = $18 ? HEAP32[$4 + 4 >> 2] | 0 : $17 & 255;
 HEAP32[$7 >> 2] = $18 ? HEAP32[$4 >> 2] | 0 : $4;
 HEAP32[$7 + 4 >> 2] = $25;
 $27 = _strlen($3) | 0;
 $28 = 30248;
 $30 = HEAP32[$28 >> 2] | 0;
 $33 = HEAP32[$28 + 4 >> 2] | 0;
 $34 = $3;
 HEAP32[$5 + 8 >> 2] = $34;
 HEAP32[$5 + 12 >> 2] = $27;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = $8;
 $38 = $5 + 24 | 0;
 HEAP32[$38 >> 2] = $30;
 HEAP32[$38 + 4 >> 2] = $33;
 HEAP32[$5 + 32 >> 2] = $7;
 HEAP32[$5 + 40 >> 2] = 0;
 $43 = $5 + 44 | 0;
 HEAP32[$43 >> 2] = 0;
 HEAP32[$5 + 48 >> 2] = 0;
 HEAP32[$5 + 56 >> 2] = 0;
 HEAP32[$5 + 64 >> 2] = 0;
 HEAP32[$6 >> 2] = $34;
 HEAP32[$6 + 4 >> 2] = $27;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 __ZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_($tmpcast1$i$i$i$byval_copy, $5);
 $47 = HEAP32[$43 >> 2] | 0;
 if ($47 | 0) __ZdaPv($47);
 $50 = HEAP32[$12 >> 2] | 0;
 $51 = HEAP32[$13 >> 2] | 0;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$5 >> 2] = $0 + 4;
 HEAP32[$5 + 4 >> 2] = $2;
 $53 = __ZNSt3__26chrono12system_clock3nowEv() | 0;
 $54 = getTempRet0() | 0;
 $56 = $5 + 8 | 0;
 HEAP32[$56 >> 2] = $53;
 HEAP32[$56 + 4 >> 2] = $54;
 if (!(HEAP8[30048] | 0)) {
  $63 = _pthread_self() | 0;
  HEAP32[7737] = $63;
  $64 = 30048;
  HEAP32[$64 >> 2] = 1;
  HEAP32[$64 + 4 >> 2] = 0;
  $68 = $63;
 } else $68 = HEAP32[7737] | 0;
 HEAP32[$5 + 16 >> 2] = $68;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 0;
 $72 = $5 + 32 | 0;
 HEAP32[$72 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy >> 2];
 HEAP32[$72 + 4 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2];
 HEAP32[$72 + 8 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy + 8 >> 2];
 $74 = $5 + 44 | 0;
 HEAP32[$74 >> 2] = $50;
 HEAP32[$74 + 4 >> 2] = $51;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 127]($0, $5);
 HEAP32[$8 >> 2] = 9804;
 $81 = HEAP32[$12 >> 2] | 0;
 if (($81 | 0) != ($15 | 0)) __ZdlPv($81);
 STACKTOP = sp;
 return;
}

function __ZN3sgl11ApplicationC2EiiPKc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $$sroa$029$0$$sroa_idx = 0, $17 = 0, $22 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $5 = 0, $53 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $$byval_copy = sp + 24 | 0;
 $4 = sp + 48 | 0;
 $5 = sp;
 HEAP32[$0 >> 2] = 9656;
 $6 = __Znwm(24) | 0;
 __ZN3sgl10LayerStackC2Ev($6);
 HEAP32[$0 + 8 >> 2] = $6;
 __ZN3sgl10EventQueueC2Ev($0 + 12 | 0);
 $9 = $0 + 36 | 0;
 HEAP8[$9 >> 0] = 1;
 if (HEAP32[7736] | 0) {
  $17 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(31984, 15844, 43) | 0, 15888, 19) | 0, 15908, 6) | 0, 26) | 0, 15915, 2) | 0, 15918, 27) | 0;
  __ZNKSt3__28ios_base6getlocEv($$byval_copy, $17 + (HEAP32[(HEAP32[$17 >> 2] | 0) + -12 >> 2] | 0) | 0);
  $22 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32688) | 0;
  $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$22 >> 2] | 0) + 28 >> 2] & 31]($22, 10) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($17, $26) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($17) | 0;
  __ZSt9terminatev();
 }
 HEAP32[7736] = $0;
 $27 = __ZN3sgl6Window6CreateEjjPKc($1, $2, $3) | 0;
 HEAP32[$0 + 4 >> 2] = $27;
 if (!$27) {
  HEAP8[$9 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 $31 = $5 + 16 | 0;
 HEAP32[$5 >> 2] = 9672;
 $$sroa$029$0$$sroa_idx = $5 + 4 | 0;
 HEAP32[$$sroa$029$0$$sroa_idx >> 2] = 65;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = $0;
 HEAP32[$31 >> 2] = $5;
 $32 = $$byval_copy + 16 | 0;
 HEAP32[$32 >> 2] = $$byval_copy;
 HEAP32[$$byval_copy >> 2] = 9672;
 $33 = $$byval_copy + 4 | 0;
 HEAP32[$33 >> 2] = HEAP32[$$sroa$029$0$$sroa_idx >> 2];
 HEAP32[$33 + 4 >> 2] = HEAP32[$$sroa$029$0$$sroa_idx + 4 >> 2];
 HEAP32[$33 + 8 >> 2] = HEAP32[$$sroa$029$0$$sroa_idx + 8 >> 2];
 __ZNSt3__28functionIFvPN3sgl5EventEEE4swapERS5_($$byval_copy, $27 + 8 | 0);
 $35 = HEAP32[$32 >> 2] | 0;
 if (($$byval_copy | 0) == ($35 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$35 >> 2] | 0) + 16 >> 2] & 255]($35); else if ($35 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$35 >> 2] | 0) + 20 >> 2] & 255]($35);
 $44 = HEAP32[$31 >> 2] | 0;
 if (($5 | 0) == ($44 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$44 >> 2] | 0) + 16 >> 2] & 255]($44); else if ($44 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$44 >> 2] | 0) + 20 >> 2] & 255]($44);
 __ZN3sgl3Log4InitEv();
 $53 = HEAP32[7738] | 0;
 HEAP32[$4 >> 2] = 33137;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 33137;
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 __ZN6spdlog6logger3logENS_10source_locENS_5level10level_enumEPKc($53, $$byval_copy, 2, 15946);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details15level_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i = 0, $$010$i$i$i19 = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i = 0, $$089$i$i$i20 = 0, $17 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $4 = 0, $45 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $68 = 0, $7 = 0, $73 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $85 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $7 = 26288 + (HEAP32[$1 + 4 >> 2] << 3) | 0;
 $8 = $0 + 4 | 0;
 if (!(HEAP32[$8 >> 2] | 0)) {
  $73 = $7;
  $75 = HEAP32[$73 >> 2] | 0;
  $78 = HEAP32[$73 + 4 >> 2] | 0;
  $79 = $75;
  if (!$75) {
   STACKTOP = sp;
   return;
  }
  $81 = $79 + $78 | 0;
  $82 = $3 + 8 | 0;
  if (($78 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $85 = (HEAP32[$82 >> 2] | 0) + $78 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $85 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $85);
  if ($78 | 0) {
   $$010$i$i$i = $79;
   $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$82 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
    $$010$i$i$i = $$010$i$i$i + 1 | 0;
    if (($$010$i$i$i | 0) == ($81 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
   }
  }
  HEAP32[$82 >> 2] = $85;
  STACKTOP = sp;
  return;
 }
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, HEAP32[$7 + 4 >> 2] | 0, $8, $3);
 $17 = $7;
 $19 = HEAP32[$17 >> 2] | 0;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 $23 = $19;
 if ($19 | 0) {
  $25 = $23 + $22 | 0;
  $26 = $3 + 8 | 0;
  if (($22 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $29 = (HEAP32[$26 >> 2] | 0) + $22 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $29 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $29);
  if ($22 | 0) {
   $$010$i$i$i19 = $23;
   $$089$i$i$i20 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$26 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i20 >> 0] = HEAP8[$$010$i$i$i19 >> 0] | 0;
    $$010$i$i$i19 = $$010$i$i$i19 + 1 | 0;
    if (($$010$i$i$i19 | 0) == ($25 | 0)) break; else $$089$i$i$i20 = $$089$i$i$i20 + 1 | 0;
   }
  }
  HEAP32[$26 >> 2] = $29;
 }
 $45 = HEAP32[$4 + 8 >> 2] | 0;
 if ($45 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $45 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $51 = HEAP32[$4 + 12 >> 2] | 0;
  $53 = HEAP32[$4 + 4 >> 2] | 0;
  if ($51 | 0) {
   $55 = $51 + $45 | 0;
   $56 = $53 + 8 | 0;
   if (($45 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $58 = HEAP32[$56 >> 2] | 0;
   $59 = $58 + $45 | 0;
   if ((HEAP32[$53 + 12 >> 2] | 0) >>> 0 < $59 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$53 >> 2] >> 2] & 127]($53, $59);
    $68 = HEAP32[$56 >> 2] | 0;
   } else $68 = $58;
   $$010$i$i$i$i$i = $51;
   $$089$i$i$i$i$i = (HEAP32[$53 + 4 >> 2] | 0) + $68 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
    $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
    if (($$010$i$i$i$i$i | 0) == ($55 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
   }
   HEAP32[$56 >> 2] = $59;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i18 = 0, $$0$i21 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $24 = 0, $26 = 0, $27 = 0, $34 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $6 = sp + 168 | 0;
 $7 = sp;
 $8 = sp + 164 | 0;
 $9 = sp + 160 | 0;
 $10 = sp + 128 | 0;
 $11 = sp + 152 | 0;
 $12 = sp + 144 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$11 + 4 >> 2] = 0;
 HEAP32[$11 >> 2] = 15024;
 $18 = HEAP8[$5 + 8 + 3 >> 0] | 0;
 $19 = $18 << 24 >> 24 < 0;
 $24 = $19 ? HEAP32[$5 >> 2] | 0 : $5;
 $26 = $24 + (($19 ? HEAP32[$5 + 4 >> 2] | 0 : $18 & 255) << 2) | 0;
 $27 = $7 + 32 | 0;
 $$016$i = $24;
 $$017$i = 0;
 while (1) {
  if (!(($$017$i | 0) != 2 & $$016$i >>> 0 < $26 >>> 0)) break;
  HEAP32[$9 >> 2] = $$016$i;
  $34 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] & 15]($11, $6, $$016$i, $26, $9, $7, $27, $8) | 0;
  if (($34 | 0) == 2 ? 1 : (HEAP32[$9 >> 2] | 0) == ($$016$i | 0)) {
   label = 8;
   break;
  }
  $$0$i21 = $7;
  while (1) {
   if ($$0$i21 >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($10, HEAP8[$$0$i21 >> 0] | 0);
   $$0$i21 = $$0$i21 + 1 | 0;
  }
  $$016$i = HEAP32[$9 >> 2] | 0;
  $$017$i = $34;
 }
 if ((label | 0) == 8) __ZNSt3__221__throw_runtime_errorEPKc(0);
 __ZNSt3__26locale5facetD2Ev($11);
 $51 = (HEAP8[$10 + 11 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
 $52 = _catgets(($2 | 0) == -1 ? -1 : $2 << 1, $3, $4, $51) | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i18 = 0;
 while (1) {
  if (($$0$i$i18 | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i18 << 2) >> 2] = 0;
  $$0$i$i18 = $$0$i$i18 + 1 | 0;
 }
 HEAP32[$12 + 4 >> 2] = 0;
 HEAP32[$12 >> 2] = 15072;
 $57 = $51 + (_strlen($52) | 0) | 0;
 $58 = $57;
 $59 = $7 + 128 | 0;
 $$019$i = $51;
 $$020$i = 0;
 while (1) {
  if (!(($$020$i | 0) != 2 & $$019$i >>> 0 < $57 >>> 0)) {
   label = 23;
   break;
  }
  HEAP32[$9 >> 2] = $$019$i;
  $71 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 15]($12, $6, $$019$i, ($58 - $$019$i | 0) > 32 ? $$019$i + 32 | 0 : $57, $9, $7, $59, $8) | 0;
  if (($71 | 0) == 2 ? 1 : (HEAP32[$9 >> 2] | 0) == ($$019$i | 0)) {
   label = 19;
   break;
  }
  $$0$i = $7;
  while (1) {
   if ($$0$i >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0, HEAP32[$$0$i >> 2] | 0);
   $$0$i = $$0$i + 4 | 0;
  }
  $$019$i = HEAP32[$9 >> 2] | 0;
  $$020$i = $71;
 }
 if ((label | 0) == 19) __ZNSt3__221__throw_runtime_errorEPKc(0); else if ((label | 0) == 23) {
  __ZNSt3__26locale5facetD2Ev($12);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  STACKTOP = sp;
  return;
 }
}

function __ZN6spdlog7details11v_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i = 0, $$010$i$i$i16 = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i = 0, $$089$i$i$i17 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $27 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $66 = 0, $72 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = $0 + 4 | 0;
 if (!(HEAP32[$5 >> 2] | 0)) {
  $72 = $1 + 44 | 0;
  $74 = HEAP32[$72 >> 2] | 0;
  $77 = HEAP32[$72 + 4 >> 2] | 0;
  $78 = $74;
  if (!$74) {
   STACKTOP = sp;
   return;
  }
  $80 = $78 + $77 | 0;
  $81 = $3 + 8 | 0;
  if (($77 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $84 = (HEAP32[$81 >> 2] | 0) + $77 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $84 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $84);
  if ($77 | 0) {
   $$010$i$i$i = $78;
   $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$81 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
    $$010$i$i$i = $$010$i$i$i + 1 | 0;
    if (($$010$i$i$i | 0) == ($80 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
   }
  }
  HEAP32[$81 >> 2] = $84;
  STACKTOP = sp;
  return;
 }
 $8 = $1 + 44 | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, HEAP32[$8 + 4 >> 2] | 0, $5, $3);
 $15 = $8;
 $17 = HEAP32[$15 >> 2] | 0;
 $20 = HEAP32[$15 + 4 >> 2] | 0;
 $21 = $17;
 if ($17 | 0) {
  $23 = $21 + $20 | 0;
  $24 = $3 + 8 | 0;
  if (($20 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $27 = (HEAP32[$24 >> 2] | 0) + $20 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $27 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $27);
  if ($20 | 0) {
   $$010$i$i$i16 = $21;
   $$089$i$i$i17 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i17 >> 0] = HEAP8[$$010$i$i$i16 >> 0] | 0;
    $$010$i$i$i16 = $$010$i$i$i16 + 1 | 0;
    if (($$010$i$i$i16 | 0) == ($23 | 0)) break; else $$089$i$i$i17 = $$089$i$i$i17 + 1 | 0;
   }
  }
  HEAP32[$24 >> 2] = $27;
 }
 $43 = HEAP32[$4 + 8 >> 2] | 0;
 if ($43 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $43 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $49 = HEAP32[$4 + 12 >> 2] | 0;
  $51 = HEAP32[$4 + 4 >> 2] | 0;
  if ($49 | 0) {
   $53 = $49 + $43 | 0;
   $54 = $51 + 8 | 0;
   if (($43 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $56 = HEAP32[$54 >> 2] | 0;
   $57 = $56 + $43 | 0;
   if ((HEAP32[$51 + 12 >> 2] | 0) >>> 0 < $57 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$51 >> 2] >> 2] & 127]($51, $57);
    $66 = HEAP32[$54 >> 2] | 0;
   } else $66 = $56;
   $$010$i$i$i$i$i = $49;
   $$089$i$i$i$i$i = (HEAP32[$51 + 4 >> 2] | 0) + $66 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
    $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
    if (($$010$i$i$i$i$i | 0) == ($53 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
   }
   HEAP32[$54 >> 2] = $57;
  }
 }
 STACKTOP = sp;
 return;
}

function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pre$phi69Z2D = 0, $100 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $61 = 0, $68 = 0, $69 = 0, $78 = 0, $86 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, label = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 100 | 0;
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1;
  $11 = HEAPU8[$3 >> 0] | 0;
 } else $11 = ___shgetc($0) | 0;
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1;
   $14 = HEAP32[$2 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1;
    $22 = HEAPU8[$14 >> 0] | 0;
   } else $22 = ___shgetc($0) | 0;
   $21 = $22 + -48 | 0;
   if (($1 | 0) != 0 & $21 >>> 0 > 9) if (!(HEAP32[$4 >> 2] | 0)) {
    $100 = 0;
    $99 = -2147483648;
   } else {
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
    label = 14;
   } else {
    $$0 = $13;
    $$049 = $22;
    $$pre$phi69Z2D = $21;
    label = 12;
   }
   break;
  }
 default:
  {
   $$0 = 0;
   $$049 = $11;
   $$pre$phi69Z2D = $11 + -48 | 0;
   label = 12;
  }
 }
 if ((label | 0) == 12) if ($$pre$phi69Z2D >>> 0 > 9) label = 14; else {
  $$04858 = 0;
  $$157 = $$049;
  while (1) {
   $$04858 = $$157 + -48 + ($$04858 * 10 | 0) | 0;
   $36 = HEAP32[$2 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $36 + 1;
    $44 = HEAPU8[$36 >> 0] | 0;
   } else $44 = ___shgetc($0) | 0;
   $43 = $44 + -48 | 0;
   if (!($43 >>> 0 < 10 & ($$04858 | 0) < 214748364)) break; else $$157 = $44;
  }
  $49 = (($$04858 | 0) < 0) << 31 >> 31;
  if ($43 >>> 0 < 10) {
   $$251 = $44;
   $51 = $$04858;
   $52 = $49;
   while (1) {
    $53 = ___muldi3($51 | 0, $52 | 0, 10, 0) | 0;
    $54 = getTempRet0() | 0;
    $57 = _i64Add($$251 | 0, (($$251 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $51 = _i64Add($57 | 0, getTempRet0() | 0, $53 | 0, $54 | 0) | 0;
    $52 = getTempRet0() | 0;
    $61 = HEAP32[$2 >> 2] | 0;
    if ($61 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $61 + 1;
     $69 = HEAPU8[$61 >> 0] | 0;
    } else $69 = ___shgetc($0) | 0;
    $68 = $69 + -48 | 0;
    if (!($68 >>> 0 < 10 & (($52 | 0) < 21474836 | ($52 | 0) == 21474836 & $51 >>> 0 < 2061584302))) break; else $$251 = $69;
   }
   if ($68 >>> 0 < 10) {
    do {
     $78 = HEAP32[$2 >> 2] | 0;
     if ($78 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$2 >> 2] = $78 + 1;
      $86 = HEAPU8[$78 >> 0] | 0;
     } else $86 = ___shgetc($0) | 0;
    } while (($86 + -48 | 0) >>> 0 < 10);
    $93 = $51;
    $94 = $52;
   } else {
    $93 = $51;
    $94 = $52;
   }
  } else {
   $93 = $$04858;
   $94 = $49;
  }
  if (HEAP32[$4 >> 2] | 0) HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
  $92 = ($$0 | 0) == 0;
  $95 = _i64Subtract(0, 0, $93 | 0, $94 | 0) | 0;
  $96 = getTempRet0() | 0;
  $100 = $92 ? $93 : $95;
  $99 = $92 ? $94 : $96;
 }
 if ((label | 0) == 14) if (!(HEAP32[$4 >> 2] | 0)) {
  $100 = 0;
  $99 = -2147483648;
 } else {
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
  $100 = 0;
  $99 = -2147483648;
 }
 setTempRet0($99 | 0);
 return $100 | 0;
}

function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $15 = 0, $18 = 0, $25 = 0, $30 = 0, $34 = 0, $43 = 0, $48 = 0, $50 = 0, $56 = 0, $59 = 0, $60 = 0, $69 = 0, $72 = 0, $81 = 0, $88 = 0, $93 = 0, $95 = 0;
 L1 : do if ($0 << 24 >> 24 == $5 << 24 >> 24) if (!(HEAP8[$1 >> 0] | 0)) $$2 = -1; else {
  HEAP8[$1 >> 0] = 0;
  $15 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $15 + 1;
  HEAP8[$15 >> 0] = 46;
  $18 = HEAP8[$7 + 11 >> 0] | 0;
  if (!(($18 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $18 & 255) | 0)) $$2 = 0; else {
   $25 = HEAP32[$9 >> 2] | 0;
   if (($25 - $8 | 0) < 160) {
    $30 = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 >> 2] = $25 + 4;
    HEAP32[$25 >> 2] = $30;
    $$2 = 0;
   } else $$2 = 0;
  }
 } else {
  if ($0 << 24 >> 24 == $6 << 24 >> 24) {
   $34 = HEAP8[$7 + 11 >> 0] | 0;
   if (($34 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $34 & 255) | 0) {
    if (!(HEAP8[$1 >> 0] | 0)) {
     $$2 = -1;
     break;
    }
    $43 = HEAP32[$9 >> 2] | 0;
    if (($43 - $8 | 0) >= 160) {
     $$2 = 0;
     break;
    }
    $48 = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 >> 2] = $43 + 4;
    HEAP32[$43 >> 2] = $48;
    HEAP32[$10 >> 2] = 0;
    $$2 = 0;
    break;
   }
  }
  $50 = $11 + 32 | 0;
  $$0$i$idx = 0;
  while (1) {
   $$0$i$ptr = $11 + $$0$i$idx | 0;
   if (($$0$i$idx | 0) == 32) {
    $$0$lcssa$i = $50;
    break;
   }
   if ((HEAP8[$$0$i$ptr >> 0] | 0) == $0 << 24 >> 24) {
    $$0$lcssa$i = $$0$i$ptr;
    break;
   } else $$0$i$idx = $$0$i$idx + 1 | 0;
  }
  $56 = $$0$lcssa$i - $11 | 0;
  if (($56 | 0) > 31) $$2 = -1; else {
   $59 = HEAP8[6320 + $56 >> 0] | 0;
   switch ($56 | 0) {
   case 24:
   case 25:
    {
     $60 = HEAP32[$4 >> 2] | 0;
     if (($60 | 0) != ($3 | 0)) if ((HEAP8[$60 + -1 >> 0] & 95) != (HEAP8[$2 >> 0] & 127)) {
      $$2 = -1;
      break L1;
     }
     HEAP32[$4 >> 2] = $60 + 1;
     HEAP8[$60 >> 0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$2 >> 0] = 80;
     $69 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $69 + 1;
     HEAP8[$69 >> 0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
   default:
    {
     $72 = $59 & 95;
     if (($72 | 0) == (HEAP8[$2 >> 0] | 0)) {
      HEAP8[$2 >> 0] = $72 | 128;
      if (HEAP8[$1 >> 0] | 0) {
       HEAP8[$1 >> 0] = 0;
       $81 = HEAP8[$7 + 11 >> 0] | 0;
       if (($81 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $81 & 255) | 0) {
        $88 = HEAP32[$9 >> 2] | 0;
        if (($88 - $8 | 0) < 160) {
         $93 = HEAP32[$10 >> 2] | 0;
         HEAP32[$9 >> 2] = $88 + 4;
         HEAP32[$88 >> 2] = $93;
        }
       }
      }
     }
     $95 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $95 + 1;
     HEAP8[$95 >> 0] = $59;
     if (($56 | 0) > 21) {
      $$2 = 0;
      break L1;
     }
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
     $$2 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return $$2 | 0;
}

function __ZNSt3__210__stdinbufIcE9__getcharEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $5 = 0, $51 = 0, $6 = 0, $61 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = $0 + 52 | 0;
 if (!(HEAP8[$6 >> 0] | 0)) {
  $13 = HEAP32[$0 + 44 >> 2] | 0;
  $$sroa$speculated = ($13 | 0) > 1 ? $13 : 1;
  $15 = $0 + 32 | 0;
  $$052 = 0;
  while (1) {
   if ($$052 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 9;
    break;
   }
   $18 = _getc(HEAP32[$15 >> 2] | 0) | 0;
   if (($18 | 0) == -1) {
    label = 8;
    break;
   }
   HEAP8[$2 + $$052 >> 0] = $18;
   $$052 = $$052 + 1 | 0;
  }
  if ((label | 0) == 8) $$10 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else if ((label | 0) == 9) {
   do if (!(HEAP8[$0 + 53 >> 0] | 0)) {
    $28 = $0 + 40 | 0;
    $29 = $0 + 36 | 0;
    $30 = $3 + 1 | 0;
    $$048 = $$sroa$speculated;
    L11 : while (1) {
     $31 = HEAP32[$28 >> 2] | 0;
     $32 = $31;
     $34 = HEAP32[$32 >> 2] | 0;
     $37 = HEAP32[$32 + 4 >> 2] | 0;
     $38 = HEAP32[$29 >> 2] | 0;
     $39 = $2 + $$048 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] & 15]($38, $31, $2, $39, $4, $3, $30, $5) | 0) {
     case 3:
      {
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $45 = HEAP32[$28 >> 2] | 0;
     HEAP32[$45 >> 2] = $34;
     HEAP32[$45 + 4 >> 2] = $37;
     if (($$048 | 0) == 8) {
      label = 17;
      break;
     }
     $51 = _getc(HEAP32[$15 >> 2] | 0) | 0;
     if (($51 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$39 >> 0] = $51;
     $$048 = $$048 + 1 | 0;
    }
    if ((label | 0) == 15) HEAP8[$3 >> 0] = HEAP8[$2 >> 0] | 0; else if ((label | 0) == 17) {
     $$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break;
    }
    $$351 = $$048;
    label = 19;
   } else {
    HEAP8[$3 >> 0] = HEAP8[$2 >> 0] | 0;
    $$351 = $$sroa$speculated;
    label = 19;
   } while (0);
   L21 : do if ((label | 0) == 19) {
    L23 : do if ($1) HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0; else {
     $$0 = $$351;
     do {
      if (($$0 | 0) <= 0) break L23;
      $$0 = $$0 + -1 | 0;
      $61 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$2 + $$0 >> 0] | 0) | 0;
     } while ((_ungetc($61, HEAP32[$15 >> 2] | 0) | 0) != -1);
     $$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break L21;
    } while (0);
    $$9 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0;
   } while (0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = $0 + 48 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($1) {
   HEAP32[$9 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   HEAP8[$6 >> 0] = 0;
   $$11 = $10;
  } else $$11 = $10;
 }
 STACKTOP = sp;
 return $$11 | 0;
}

function __ZNSt3__210__stdinbufIwE9__getcharEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $46 = 0, $5 = 0, $52 = 0, $6 = 0, $64 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = $0 + 52 | 0;
 if (!(HEAP8[$6 >> 0] | 0)) {
  $13 = HEAP32[$0 + 44 >> 2] | 0;
  $$sroa$speculated = ($13 | 0) > 1 ? $13 : 1;
  $15 = $0 + 32 | 0;
  $$052 = 0;
  while (1) {
   if ($$052 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 9;
    break;
   }
   $18 = _getc(HEAP32[$15 >> 2] | 0) | 0;
   if (($18 | 0) == -1) {
    label = 8;
    break;
   }
   HEAP8[$2 + $$052 >> 0] = $18;
   $$052 = $$052 + 1 | 0;
  }
  if ((label | 0) == 8) $$10 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else if ((label | 0) == 9) {
   do if (!(HEAP8[$0 + 53 >> 0] | 0)) {
    $29 = $0 + 40 | 0;
    $30 = $0 + 36 | 0;
    $31 = $3 + 4 | 0;
    $$048 = $$sroa$speculated;
    L11 : while (1) {
     $32 = HEAP32[$29 >> 2] | 0;
     $33 = $32;
     $35 = HEAP32[$33 >> 2] | 0;
     $38 = HEAP32[$33 + 4 >> 2] | 0;
     $39 = HEAP32[$30 >> 2] | 0;
     $40 = $2 + $$048 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$39 >> 2] | 0) + 16 >> 2] & 15]($39, $32, $2, $40, $4, $3, $31, $5) | 0) {
     case 3:
      {
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $46 = HEAP32[$29 >> 2] | 0;
     HEAP32[$46 >> 2] = $35;
     HEAP32[$46 + 4 >> 2] = $38;
     if (($$048 | 0) == 8) {
      label = 17;
      break;
     }
     $52 = _getc(HEAP32[$15 >> 2] | 0) | 0;
     if (($52 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$40 >> 0] = $52;
     $$048 = $$048 + 1 | 0;
    }
    if ((label | 0) == 15) HEAP32[$3 >> 2] = HEAP8[$2 >> 0]; else if ((label | 0) == 17) {
     $$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break;
    }
    $$351 = $$048;
    label = 19;
   } else {
    HEAP32[$3 >> 2] = HEAP8[$2 >> 0];
    $$351 = $$sroa$speculated;
    label = 19;
   } while (0);
   L21 : do if ((label | 0) == 19) {
    L23 : do if ($1) HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$3 >> 2] | 0) | 0; else {
     $$0 = $$351;
     do {
      if (($$0 | 0) <= 0) break L23;
      $$0 = $$0 + -1 | 0;
      $64 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[$2 + $$0 >> 0] | 0) | 0;
     } while ((_ungetc($64, HEAP32[$15 >> 2] | 0) | 0) != -1);
     $$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break L21;
    } while (0);
    $$9 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$3 >> 2] | 0) | 0;
   } while (0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = $0 + 48 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($1) {
   HEAP32[$9 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   HEAP8[$6 >> 0] = 0;
   $$11 = $10;
  } else $$11 = $10;
 }
 STACKTOP = sp;
 return $$11 | 0;
}

function __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEED2Ev($0) {
 $0 = $0 | 0;
 var $$018$i$i$i = 0, $104 = 0, $109 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $124 = 0, $129 = 0, $134 = 0, $135 = 0, $14 = 0, $19 = 0, $2 = 0, $24 = 0, $29 = 0, $34 = 0, $39 = 0, $44 = 0, $49 = 0, $5 = 0, $54 = 0, $59 = 0, $64 = 0, $69 = 0, $74 = 0, $79 = 0, $84 = 0, $89 = 0, $94 = 0, $99 = 0, $$018$i$i$i$looptemp = 0;
 HEAP32[$0 >> 2] = 10828;
 $2 = HEAP32[$0 + 320 >> 2] | 0;
 if ($2 | 0) {
  $$018$i$i$i = $2;
  do {
   $$018$i$i$i$looptemp = $$018$i$i$i;
   $$018$i$i$i = HEAP32[$$018$i$i$i >> 2] | 0;
   $5 = $$018$i$i$i$looptemp + 12 | 0;
   if ((HEAP8[$5 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$5 >> 2] | 0);
   __ZdlPv($$018$i$i$i$looptemp);
  } while (($$018$i$i$i | 0) != 0);
 }
 $11 = $0 + 312 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAP32[$11 >> 2] = 0;
 if ($12 | 0) __ZdlPv($12);
 $14 = $0 + 288 | 0;
 if ((HEAP8[$14 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$14 >> 2] | 0);
 $19 = $0 + 276 | 0;
 if ((HEAP8[$19 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$19 >> 2] | 0);
 $24 = $0 + 264 | 0;
 if ((HEAP8[$24 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$24 >> 2] | 0);
 $29 = $0 + 252 | 0;
 if ((HEAP8[$29 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$29 >> 2] | 0);
 $34 = $0 + 240 | 0;
 if ((HEAP8[$34 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$34 >> 2] | 0);
 $39 = $0 + 228 | 0;
 if ((HEAP8[$39 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$39 >> 2] | 0);
 $44 = $0 + 216 | 0;
 if ((HEAP8[$44 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$44 >> 2] | 0);
 $49 = $0 + 204 | 0;
 if ((HEAP8[$49 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$49 >> 2] | 0);
 $54 = $0 + 192 | 0;
 if ((HEAP8[$54 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$54 >> 2] | 0);
 $59 = $0 + 180 | 0;
 if ((HEAP8[$59 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$59 >> 2] | 0);
 $64 = $0 + 168 | 0;
 if ((HEAP8[$64 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$64 >> 2] | 0);
 $69 = $0 + 156 | 0;
 if ((HEAP8[$69 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$69 >> 2] | 0);
 $74 = $0 + 144 | 0;
 if ((HEAP8[$74 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$74 >> 2] | 0);
 $79 = $0 + 132 | 0;
 if ((HEAP8[$79 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$79 >> 2] | 0);
 $84 = $0 + 120 | 0;
 if ((HEAP8[$84 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$84 >> 2] | 0);
 $89 = $0 + 108 | 0;
 if ((HEAP8[$89 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$89 >> 2] | 0);
 $94 = $0 + 96 | 0;
 if ((HEAP8[$94 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$94 >> 2] | 0);
 $99 = $0 + 84 | 0;
 if ((HEAP8[$99 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$99 >> 2] | 0);
 $104 = $0 + 72 | 0;
 if ((HEAP8[$104 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$104 >> 2] | 0);
 $109 = $0 + 60 | 0;
 if ((HEAP8[$109 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$109 >> 2] | 0);
 $114 = $0 + 48 | 0;
 if ((HEAP8[$114 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$114 >> 2] | 0);
 $119 = $0 + 36 | 0;
 if ((HEAP8[$119 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$119 >> 2] | 0);
 $124 = $0 + 24 | 0;
 if ((HEAP8[$124 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$124 >> 2] | 0);
 $129 = $0 + 12 | 0;
 if ((HEAP8[$129 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$129 >> 2] | 0);
 HEAP32[$0 >> 2] = 10796;
 $134 = $0 + 8 | 0;
 $135 = HEAP32[$134 >> 2] | 0;
 HEAP32[$134 >> 2] = 0;
 if (!$135) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$135 >> 2] | 0) + 4 >> 2] & 255]($135);
 return;
}

function __ZN6spdlog6logger3logIJddEEEvNS_10source_locENS_5level10level_enumEPKcDpRKT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $13 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $31 = 0, $36 = 0, $40 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $56 = 0, $57 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $74 = 0, $8 = 0, $9 = 0, $tmpcast1$i$i$i$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(624);
 $tmpcast1$i$i$i$byval_copy = sp + 96 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 16 | 0;
 $8 = sp;
 $9 = sp + 108 | 0;
 if ((HEAP32[$0 + 28 >> 2] | 0) > ($2 | 0)) {
  STACKTOP = sp;
  return;
 }
 $13 = $9 + 4 | 0;
 $14 = $9 + 8 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$9 >> 2] = 9804;
 $16 = $9 + 16 | 0;
 HEAP32[$13 >> 2] = $16;
 HEAP32[$9 + 12 >> 2] = 500;
 HEAPF64[$8 >> 3] = +HEAPF64[$4 >> 3];
 HEAPF64[$8 + 8 >> 3] = +HEAPF64[$5 >> 3];
 $20 = _strlen($3) | 0;
 $21 = 30032;
 $23 = HEAP32[$21 >> 2] | 0;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 $27 = $3;
 HEAP32[$6 + 8 >> 2] = $27;
 HEAP32[$6 + 12 >> 2] = $20;
 HEAP32[$6 + 16 >> 2] = 0;
 HEAP32[$6 + 20 >> 2] = $9;
 $31 = $6 + 24 | 0;
 HEAP32[$31 >> 2] = $23;
 HEAP32[$31 + 4 >> 2] = $26;
 HEAP32[$6 + 32 >> 2] = $8;
 HEAP32[$6 + 40 >> 2] = 0;
 $36 = $6 + 44 | 0;
 HEAP32[$36 >> 2] = 0;
 HEAP32[$6 + 48 >> 2] = 0;
 HEAP32[$6 + 56 >> 2] = 0;
 HEAP32[$6 + 64 >> 2] = 0;
 HEAP32[$7 >> 2] = $27;
 HEAP32[$7 + 4 >> 2] = $20;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$7 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 __ZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_($tmpcast1$i$i$i$byval_copy, $6);
 $40 = HEAP32[$36 >> 2] | 0;
 if ($40 | 0) __ZdaPv($40);
 $43 = HEAP32[$13 >> 2] | 0;
 $44 = HEAP32[$14 >> 2] | 0;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$6 >> 2] = $0 + 4;
 HEAP32[$6 + 4 >> 2] = $2;
 $46 = __ZNSt3__26chrono12system_clock3nowEv() | 0;
 $47 = getTempRet0() | 0;
 $49 = $6 + 8 | 0;
 HEAP32[$49 >> 2] = $46;
 HEAP32[$49 + 4 >> 2] = $47;
 if (!(HEAP8[30048] | 0)) {
  $56 = _pthread_self() | 0;
  HEAP32[7737] = $56;
  $57 = 30048;
  HEAP32[$57 >> 2] = 1;
  HEAP32[$57 + 4 >> 2] = 0;
  $61 = $56;
 } else $61 = HEAP32[7737] | 0;
 HEAP32[$6 + 16 >> 2] = $61;
 HEAP32[$6 + 20 >> 2] = 0;
 HEAP32[$6 + 24 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = 0;
 $65 = $6 + 32 | 0;
 HEAP32[$65 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy >> 2];
 HEAP32[$65 + 4 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2];
 HEAP32[$65 + 8 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy + 8 >> 2];
 $67 = $6 + 44 | 0;
 HEAP32[$67 >> 2] = $43;
 HEAP32[$67 + 4 >> 2] = $44;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 127]($0, $6);
 HEAP32[$9 >> 2] = 9804;
 $74 = HEAP32[$13 >> 2] | 0;
 if (($74 | 0) != ($16 | 0)) __ZdlPv($74);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog6logger3logIJPcjEEEvNS_10source_locENS_5level10level_enumEPKcDpRKT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $13 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $31 = 0, $36 = 0, $40 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $56 = 0, $57 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $74 = 0, $8 = 0, $9 = 0, $tmpcast1$i$i$i$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(624);
 $tmpcast1$i$i$i$byval_copy = sp + 96 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 16 | 0;
 $8 = sp;
 $9 = sp + 108 | 0;
 if ((HEAP32[$0 + 28 >> 2] | 0) > ($2 | 0)) {
  STACKTOP = sp;
  return;
 }
 $13 = $9 + 4 | 0;
 $14 = $9 + 8 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$9 >> 2] = 9804;
 $16 = $9 + 16 | 0;
 HEAP32[$13 >> 2] = $16;
 HEAP32[$9 + 12 >> 2] = 500;
 HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$8 + 8 >> 2] = HEAP32[$5 >> 2];
 $20 = _strlen($3) | 0;
 $21 = 30256;
 $23 = HEAP32[$21 >> 2] | 0;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 $27 = $3;
 HEAP32[$6 + 8 >> 2] = $27;
 HEAP32[$6 + 12 >> 2] = $20;
 HEAP32[$6 + 16 >> 2] = 0;
 HEAP32[$6 + 20 >> 2] = $9;
 $31 = $6 + 24 | 0;
 HEAP32[$31 >> 2] = $23;
 HEAP32[$31 + 4 >> 2] = $26;
 HEAP32[$6 + 32 >> 2] = $8;
 HEAP32[$6 + 40 >> 2] = 0;
 $36 = $6 + 44 | 0;
 HEAP32[$36 >> 2] = 0;
 HEAP32[$6 + 48 >> 2] = 0;
 HEAP32[$6 + 56 >> 2] = 0;
 HEAP32[$6 + 64 >> 2] = 0;
 HEAP32[$7 >> 2] = $27;
 HEAP32[$7 + 4 >> 2] = $20;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$7 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 __ZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_($tmpcast1$i$i$i$byval_copy, $6);
 $40 = HEAP32[$36 >> 2] | 0;
 if ($40 | 0) __ZdaPv($40);
 $43 = HEAP32[$13 >> 2] | 0;
 $44 = HEAP32[$14 >> 2] | 0;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$6 >> 2] = $0 + 4;
 HEAP32[$6 + 4 >> 2] = $2;
 $46 = __ZNSt3__26chrono12system_clock3nowEv() | 0;
 $47 = getTempRet0() | 0;
 $49 = $6 + 8 | 0;
 HEAP32[$49 >> 2] = $46;
 HEAP32[$49 + 4 >> 2] = $47;
 if (!(HEAP8[30048] | 0)) {
  $56 = _pthread_self() | 0;
  HEAP32[7737] = $56;
  $57 = 30048;
  HEAP32[$57 >> 2] = 1;
  HEAP32[$57 + 4 >> 2] = 0;
  $61 = $56;
 } else $61 = HEAP32[7737] | 0;
 HEAP32[$6 + 16 >> 2] = $61;
 HEAP32[$6 + 20 >> 2] = 0;
 HEAP32[$6 + 24 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = 0;
 $65 = $6 + 32 | 0;
 HEAP32[$65 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy >> 2];
 HEAP32[$65 + 4 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2];
 HEAP32[$65 + 8 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy + 8 >> 2];
 $67 = $6 + 44 | 0;
 HEAP32[$67 >> 2] = $43;
 HEAP32[$67 + 4 >> 2] = $44;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 127]($0, $6);
 HEAP32[$9 >> 2] = 9804;
 $74 = HEAP32[$13 >> 2] | 0;
 if (($74 | 0) != ($16 | 0)) __ZdlPv($74);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog6logger3logIJiEEEvNS_10source_locENS_5level10level_enumEPKcDpRKT_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $24 = 0, $28 = 0, $33 = 0, $37 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $5 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $7 = 0, $71 = 0, $8 = 0, $tmpcast1$i$i$i$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(624);
 $tmpcast1$i$i$i$byval_copy = sp + 88 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = sp + 100 | 0;
 if ((HEAP32[$0 + 28 >> 2] | 0) > ($2 | 0)) {
  STACKTOP = sp;
  return;
 }
 $12 = $8 + 4 | 0;
 $13 = $8 + 8 | 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$8 >> 2] = 9804;
 $15 = $8 + 16 | 0;
 HEAP32[$12 >> 2] = $15;
 HEAP32[$8 + 12 >> 2] = 500;
 HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
 $17 = _strlen($3) | 0;
 $18 = 3e4;
 $20 = HEAP32[$18 >> 2] | 0;
 $23 = HEAP32[$18 + 4 >> 2] | 0;
 $24 = $3;
 HEAP32[$5 + 8 >> 2] = $24;
 HEAP32[$5 + 12 >> 2] = $17;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = $8;
 $28 = $5 + 24 | 0;
 HEAP32[$28 >> 2] = $20;
 HEAP32[$28 + 4 >> 2] = $23;
 HEAP32[$5 + 32 >> 2] = $7;
 HEAP32[$5 + 40 >> 2] = 0;
 $33 = $5 + 44 | 0;
 HEAP32[$33 >> 2] = 0;
 HEAP32[$5 + 48 >> 2] = 0;
 HEAP32[$5 + 56 >> 2] = 0;
 HEAP32[$5 + 64 >> 2] = 0;
 HEAP32[$6 >> 2] = $24;
 HEAP32[$6 + 4 >> 2] = $17;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 __ZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_($tmpcast1$i$i$i$byval_copy, $5);
 $37 = HEAP32[$33 >> 2] | 0;
 if ($37 | 0) __ZdaPv($37);
 $40 = HEAP32[$12 >> 2] | 0;
 $41 = HEAP32[$13 >> 2] | 0;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$5 >> 2] = $0 + 4;
 HEAP32[$5 + 4 >> 2] = $2;
 $43 = __ZNSt3__26chrono12system_clock3nowEv() | 0;
 $44 = getTempRet0() | 0;
 $46 = $5 + 8 | 0;
 HEAP32[$46 >> 2] = $43;
 HEAP32[$46 + 4 >> 2] = $44;
 if (!(HEAP8[30048] | 0)) {
  $53 = _pthread_self() | 0;
  HEAP32[7737] = $53;
  $54 = 30048;
  HEAP32[$54 >> 2] = 1;
  HEAP32[$54 + 4 >> 2] = 0;
  $58 = $53;
 } else $58 = HEAP32[7737] | 0;
 HEAP32[$5 + 16 >> 2] = $58;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 0;
 $62 = $5 + 32 | 0;
 HEAP32[$62 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy >> 2];
 HEAP32[$62 + 4 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2];
 HEAP32[$62 + 8 >> 2] = HEAP32[$tmpcast1$i$i$i$byval_copy + 8 >> 2];
 $64 = $5 + 44 | 0;
 HEAP32[$64 >> 2] = $40;
 HEAP32[$64 + 4 >> 2] = $41;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 127]($0, $5);
 HEAP32[$8 >> 2] = 9804;
 $71 = HEAP32[$12 >> 2] | 0;
 if (($71 | 0) != ($15 | 0)) __ZdlPv($71);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$sroa$039$0 = 0, $$sroa$046$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $$byval_copy = sp + 344 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $5 = sp + 272 | 0;
 $6 = sp + 240 | 0;
 $7 = sp + 340 | 0;
 $8 = sp;
 $9 = sp + 336 | 0;
 $10 = sp + 332 | 0;
 $11 = sp + 328 | 0;
 $12 = $5;
 HEAP32[$12 >> 2] = 37;
 HEAP32[$12 + 4 >> 2] = 0;
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 23639, HEAP32[$2 + 4 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = $6;
 $20 = __ZNSt3__26__clocEv() | 0;
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0;
 }
 if (($$0 | 0) > 29) {
  $26 = __ZNSt3__26__clocEv() | 0;
  if ($19) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $4;
   $$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $26, $5, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $4;
   $$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $26, $5, $vararg_buffer9) | 0;
  }
  $31 = HEAP32[$7 >> 2] | 0;
  if (!$31) __ZSt17__throw_bad_allocv(); else {
   $$2 = $$1;
   $$sroa$046$0 = $31;
   $34 = $31;
  }
 } else {
  $$2 = $$0;
  $$sroa$046$0 = 0;
  $34 = HEAP32[$7 >> 2] | 0;
 }
 $33 = $34 + $$2 | 0;
 $35 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($34, $33, $2) | 0;
 do if (($34 | 0) == ($6 | 0)) {
  $$037 = $8;
  $$sroa$039$0 = 1;
  $44 = 0;
 } else {
  $38 = _malloc($$2 << 3) | 0;
  if (!$38) __ZSt17__throw_bad_allocv(); else {
   $$037 = $38;
   $$sroa$039$0 = 0;
   $44 = $38;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($34, $35, $33, $$037, $9, $10, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
 $41 = HEAP32[$9 >> 2] | 0;
 $42 = HEAP32[$10 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2];
 $43 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $$037, $41, $42, $2, $3) | 0;
 HEAP32[$1 >> 2] = $43;
 if (!$$sroa$039$0) _free($44);
 _free($$sroa$046$0);
 STACKTOP = sp;
 return $43 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$sroa$039$0 = 0, $$sroa$046$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $$byval_copy = sp + 344 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $5 = sp + 272 | 0;
 $6 = sp + 240 | 0;
 $7 = sp + 340 | 0;
 $8 = sp;
 $9 = sp + 336 | 0;
 $10 = sp + 332 | 0;
 $11 = sp + 328 | 0;
 $12 = $5;
 HEAP32[$12 >> 2] = 37;
 HEAP32[$12 + 4 >> 2] = 0;
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 33137, HEAP32[$2 + 4 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = $6;
 $20 = __ZNSt3__26__clocEv() | 0;
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0;
 }
 if (($$0 | 0) > 29) {
  $26 = __ZNSt3__26__clocEv() | 0;
  if ($19) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $4;
   $$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $26, $5, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $4;
   $$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $26, $5, $vararg_buffer9) | 0;
  }
  $31 = HEAP32[$7 >> 2] | 0;
  if (!$31) __ZSt17__throw_bad_allocv(); else {
   $$2 = $$1;
   $$sroa$046$0 = $31;
   $34 = $31;
  }
 } else {
  $$2 = $$0;
  $$sroa$046$0 = 0;
  $34 = HEAP32[$7 >> 2] | 0;
 }
 $33 = $34 + $$2 | 0;
 $35 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($34, $33, $2) | 0;
 do if (($34 | 0) == ($6 | 0)) {
  $$037 = $8;
  $$sroa$039$0 = 1;
  $44 = 0;
 } else {
  $38 = _malloc($$2 << 3) | 0;
  if (!$38) __ZSt17__throw_bad_allocv(); else {
   $$037 = $38;
   $$sroa$039$0 = 0;
   $44 = $38;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($34, $35, $33, $$037, $9, $10, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
 $41 = HEAP32[$9 >> 2] | 0;
 $42 = HEAP32[$10 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2];
 $43 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $$037, $41, $42, $2, $3) | 0;
 HEAP32[$1 >> 2] = $43;
 if (!$$sroa$039$0) _free($44);
 _free($$sroa$046$0);
 STACKTOP = sp;
 return $43 | 0;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $15 = 0, $18 = 0, $25 = 0, $30 = 0, $34 = 0, $43 = 0, $48 = 0, $50 = 0, $56 = 0, $60 = 0, $61 = 0, $65 = 0, $75 = 0, $84 = 0, $91 = 0, $96 = 0, $98 = 0;
 L1 : do if (($0 | 0) == ($5 | 0)) if (!(HEAP8[$1 >> 0] | 0)) $$2 = -1; else {
  HEAP8[$1 >> 0] = 0;
  $15 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $15 + 1;
  HEAP8[$15 >> 0] = 46;
  $18 = HEAP8[$7 + 11 >> 0] | 0;
  if (!(($18 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $18 & 255) | 0)) $$2 = 0; else {
   $25 = HEAP32[$9 >> 2] | 0;
   if (($25 - $8 | 0) < 160) {
    $30 = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 >> 2] = $25 + 4;
    HEAP32[$25 >> 2] = $30;
    $$2 = 0;
   } else $$2 = 0;
  }
 } else {
  if (($0 | 0) == ($6 | 0)) {
   $34 = HEAP8[$7 + 11 >> 0] | 0;
   if (($34 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $34 & 255) | 0) {
    if (!(HEAP8[$1 >> 0] | 0)) {
     $$2 = -1;
     break;
    }
    $43 = HEAP32[$9 >> 2] | 0;
    if (($43 - $8 | 0) >= 160) {
     $$2 = 0;
     break;
    }
    $48 = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 >> 2] = $43 + 4;
    HEAP32[$43 >> 2] = $48;
    HEAP32[$10 >> 2] = 0;
    $$2 = 0;
    break;
   }
  }
  $50 = $11 + 128 | 0;
  $$0$i$idx = 0;
  while (1) {
   $$0$i$ptr = $11 + ($$0$i$idx << 2) | 0;
   if (($$0$i$idx | 0) == 32) {
    $$0$lcssa$i = $50;
    break;
   }
   if ((HEAP32[$$0$i$ptr >> 2] | 0) == ($0 | 0)) {
    $$0$lcssa$i = $$0$i$ptr;
    break;
   } else $$0$i$idx = $$0$i$idx + 1 | 0;
  }
  $56 = $$0$lcssa$i - $11 | 0;
  if (($56 | 0) > 124) $$2 = -1; else {
   $60 = HEAP8[6320 + ($56 >> 2) >> 0] | 0;
   $61 = $56 + -88 | 0;
   switch ($61 >>> 2 | $61 << 30 | 0) {
   case 2:
   case 3:
    {
     $65 = HEAP32[$4 >> 2] | 0;
     if (($65 | 0) != ($3 | 0)) if ((HEAP8[$65 + -1 >> 0] & 95) != (HEAP8[$2 >> 0] & 127)) {
      $$2 = -1;
      break L1;
     }
     HEAP32[$4 >> 2] = $65 + 1;
     HEAP8[$65 >> 0] = $60;
     $$2 = 0;
     break L1;
     break;
    }
   case 1:
   case 0:
    {
     HEAP8[$2 >> 0] = 80;
     break;
    }
   default:
    {
     $75 = $60 & 95;
     if (($75 | 0) == (HEAP8[$2 >> 0] | 0)) {
      HEAP8[$2 >> 0] = $75 | 128;
      if (HEAP8[$1 >> 0] | 0) {
       HEAP8[$1 >> 0] = 0;
       $84 = HEAP8[$7 + 11 >> 0] | 0;
       if (($84 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $84 & 255) | 0) {
        $91 = HEAP32[$9 >> 2] | 0;
        if (($91 - $8 | 0) < 160) {
         $96 = HEAP32[$10 >> 2] | 0;
         HEAP32[$9 >> 2] = $91 + 4;
         HEAP32[$91 >> 2] = $96;
        }
       }
      }
     }
    }
   }
   $98 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $98 + 1;
   HEAP8[$98 >> 0] = $60;
   if (($56 | 0) > 84) $$2 = 0; else {
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
    $$2 = 0;
   }
  }
 } while (0);
 return $$2 | 0;
}

function __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclIjEENSt3__29enable_ifIXoosr3std11is_integralIT_EE5valuesr3std7is_sameISB_cEE5valueENS9_20back_insert_iteratorIS5_EEE4typeESB_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$029$lcssa$i$i$i = 0, $$02932$i$i$i = 0, $$030$lcssa$i$i$i = 0, $$03031$i$i$i = 0, $$sink = 0, $$sink6 = 0, $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = 0, $$sroa$0$0$copyload$i$i = 0, $10 = 0, $13 = 0, $2 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $48 = 0, $55 = 0, $60 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 if ($4 | 0) {
  $7 = HEAP8[$4 + 17 >> 0] | 0;
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $4;
  HEAP32[$2 + 8 >> 2] = $1;
  $10 = $2 + 16 | 0;
  HEAP32[$10 >> 2] = 0;
  $13 = HEAPU8[$4 + 16 >> 0] | 0;
  if ($13 & 1 | 0) {
   HEAP8[$2 + 12 >> 0] = ($13 & 2 | 0) == 0 ? 32 : 43;
   HEAP32[$10 >> 2] = 1;
  }
  __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIjNS0_18basic_format_specsIcEEEEEEvcOT_($7, $2);
  $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
  $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
  STACKTOP = sp;
  return $$sroa$0$0$copyload$i$i | 0;
 }
 $24 = ((32 - (Math_clz32($1 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $29 = $24 + 1 + (((HEAP32[16 + ($24 << 2) >> 2] | 0) >>> 0 > $1 >>> 0) << 31 >> 31) | 0;
 $30 = HEAP32[$0 >> 2] | 0;
 $31 = $30 + 8 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = $29 + $32 | 0;
 if ((HEAP32[$30 + 12 >> 2] | 0) >>> 0 < $33 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$30 >> 2] >> 2] & 127]($30, $33);
 HEAP32[$31 >> 2] = $33;
 $41 = (HEAP32[$30 + 4 >> 2] | 0) + $32 | 0;
 if (($29 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
 $43 = $2 + $29 | 0;
 if ($1 >>> 0 > 99) {
  $$02932$i$i$i = $43;
  $$03031$i$i$i = $1;
  while (1) {
   $45 = ($$03031$i$i$i >>> 0) / 100 | 0;
   $48 = $$03031$i$i$i - ($45 * 100 | 0) << 1;
   HEAP8[$$02932$i$i$i + -1 >> 0] = HEAP8[64 + ($48 | 1) >> 0] | 0;
   $55 = $$02932$i$i$i + -2 | 0;
   HEAP8[$55 >> 0] = HEAP8[64 + $48 >> 0] | 0;
   if ($$03031$i$i$i >>> 0 > 9999) {
    $$02932$i$i$i = $55;
    $$03031$i$i$i = $45;
   } else {
    $$029$lcssa$i$i$i = $55;
    $$030$lcssa$i$i$i = $45;
    break;
   }
  }
 } else {
  $$029$lcssa$i$i$i = $43;
  $$030$lcssa$i$i$i = $1;
 }
 if ($$030$lcssa$i$i$i >>> 0 < 10) {
  $$sink = $$030$lcssa$i$i$i + 48 & 255;
  $$sink6 = -1;
 } else {
  $60 = $$030$lcssa$i$i$i << 1;
  HEAP8[$$029$lcssa$i$i$i + -1 >> 0] = HEAP8[64 + ($60 | 1) >> 0] | 0;
  $$sink = HEAP8[64 + $60 >> 0] | 0;
  $$sink6 = -2;
 }
 HEAP8[$$029$lcssa$i$i$i + $$sink6 >> 0] = $$sink;
 if ($29 | 0) _memcpy($41 | 0, $2 | 0, $29 | 0) | 0;
 $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
 $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$0$0$copyload$i$i | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$sroa$041$0 = 0, $$sroa$048$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $$byval_copy = sp + 168 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $5 = sp + 96 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 164 | 0;
 $8 = sp;
 $9 = sp + 160 | 0;
 $10 = sp + 156 | 0;
 $11 = sp + 152 | 0;
 $12 = $5;
 HEAP32[$12 >> 2] = 37;
 HEAP32[$12 + 4 >> 2] = 0;
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 23639, HEAP32[$2 + 4 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = $6;
 $20 = __ZNSt3__26__clocEv() | 0;
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0;
 }
 if (($$0 | 0) > 29) {
  $26 = __ZNSt3__26__clocEv() | 0;
  if ($19) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $4;
   $$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $26, $5, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $4;
   $$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $26, $5, $vararg_buffer9) | 0;
  }
  $31 = HEAP32[$7 >> 2] | 0;
  if (!$31) __ZSt17__throw_bad_allocv(); else {
   $$2 = $$1;
   $$sroa$048$0 = $31;
   $34 = $31;
  }
 } else {
  $$2 = $$0;
  $$sroa$048$0 = 0;
  $34 = HEAP32[$7 >> 2] | 0;
 }
 $33 = $34 + $$2 | 0;
 $35 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($34, $33, $2) | 0;
 if (($34 | 0) == ($6 | 0)) {
  $$037 = $8;
  $$sroa$041$0 = 0;
 } else {
  $38 = _malloc($$2 << 1) | 0;
  if (!$38) __ZSt17__throw_bad_allocv(); else {
   $$037 = $38;
   $$sroa$041$0 = $38;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($34, $35, $33, $$037, $9, $10, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
 $41 = HEAP32[$9 >> 2] | 0;
 $42 = HEAP32[$10 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2];
 $43 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $$037, $41, $42, $2, $3) | 0;
 _free($$sroa$041$0);
 _free($$sroa$048$0);
 STACKTOP = sp;
 return $43 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$sroa$041$0 = 0, $$sroa$048$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $$byval_copy = sp + 168 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $5 = sp + 96 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 164 | 0;
 $8 = sp;
 $9 = sp + 160 | 0;
 $10 = sp + 156 | 0;
 $11 = sp + 152 | 0;
 $12 = $5;
 HEAP32[$12 >> 2] = 37;
 HEAP32[$12 + 4 >> 2] = 0;
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 33137, HEAP32[$2 + 4 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = $6;
 $20 = __ZNSt3__26__clocEv() | 0;
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0;
 }
 if (($$0 | 0) > 29) {
  $26 = __ZNSt3__26__clocEv() | 0;
  if ($19) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $4;
   $$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $26, $5, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $4;
   $$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7, $26, $5, $vararg_buffer9) | 0;
  }
  $31 = HEAP32[$7 >> 2] | 0;
  if (!$31) __ZSt17__throw_bad_allocv(); else {
   $$2 = $$1;
   $$sroa$048$0 = $31;
   $34 = $31;
  }
 } else {
  $$2 = $$0;
  $$sroa$048$0 = 0;
  $34 = HEAP32[$7 >> 2] | 0;
 }
 $33 = $34 + $$2 | 0;
 $35 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($34, $33, $2) | 0;
 if (($34 | 0) == ($6 | 0)) {
  $$037 = $8;
  $$sroa$041$0 = 0;
 } else {
  $38 = _malloc($$2 << 1) | 0;
  if (!$38) __ZSt17__throw_bad_allocv(); else {
   $$037 = $38;
   $$sroa$041$0 = $38;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($34, $35, $33, $$037, $9, $10, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
 $41 = HEAP32[$9 >> 2] | 0;
 $42 = HEAP32[$10 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2];
 $43 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $$037, $41, $42, $2, $3) | 0;
 _free($$sroa$041$0);
 _free($$sroa$048$0);
 STACKTOP = sp;
 return $43 | 0;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_13double_writerEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$071 = 0, $$1 = 0, $$2 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $4 = 0, $45 = 0, $48 = 0, $49 = 0, $53 = 0, $54 = 0, $59 = 0, $61 = 0, $65 = 0, $67 = 0, $68 = 0, $73 = 0, $75 = 0, $79 = 0, $8 = 0, $82 = 0, $87 = 0, $89 = 0, $9 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = $2 + 8 | 0;
 $8 = $2 + 4 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $12 = (HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) + ($9 << 24 >> 24 != 0 & 1) | 0;
 $14 = HEAP32[$0 >> 2] | 0;
 $15 = $14 + 8 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 if ($3 >>> 0 <= $12 >>> 0) {
  $17 = $12 + $16 | 0;
  if ((HEAP32[$14 + 12 >> 2] | 0) >>> 0 < $17 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$14 >> 2] >> 2] & 127]($14, $17);
   $26 = HEAP8[$8 >> 0] | 0;
  } else $26 = $9;
  HEAP32[$15 >> 2] = $17;
  $25 = (HEAP32[$14 + 4 >> 2] | 0) + $16 | 0;
  if (!($26 << 24 >> 24)) $$0 = $25; else {
   HEAP8[$25 >> 0] = $26;
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
   $$0 = $25 + 1 | 0;
  }
  $31 = HEAP32[$4 >> 2] | 0;
  $33 = HEAP32[$31 + 8 >> 2] | 0;
  if (!$33) return;
  _memmove($$0 | 0, HEAP32[$31 + 4 >> 2] | 0, $33 | 0) | 0;
  return;
 }
 $37 = $16 + $3 | 0;
 if ((HEAP32[$14 + 12 >> 2] | 0) >>> 0 < $37 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$14 >> 2] >> 2] & 127]($14, $37);
 HEAP32[$15 >> 2] = $37;
 $45 = (HEAP32[$14 + 4 >> 2] | 0) + $16 | 0;
 $48 = HEAP32[$1 + 4 >> 2] & 255;
 $49 = $3 - $12 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($49 | 0) _memset($45 | 0, $48 | 0, $49 | 0) | 0;
   $53 = $45 + $49 | 0;
   $54 = HEAP8[$8 >> 0] | 0;
   if (!($54 << 24 >> 24)) $$071 = $53; else {
    HEAP8[$53 >> 0] = $54;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
    $$071 = $53 + 1 | 0;
   }
   $59 = HEAP32[$4 >> 2] | 0;
   $61 = HEAP32[$59 + 8 >> 2] | 0;
   if (!$61) return;
   _memmove($$071 | 0, HEAP32[$59 + 4 >> 2] | 0, $61 | 0) | 0;
   return;
  }
 case 3:
  {
   $65 = $49 >>> 1;
   if ($65 | 0) _memset($45 | 0, $48 | 0, $65 | 0) | 0;
   $67 = $45 + $65 | 0;
   $68 = HEAP8[$8 >> 0] | 0;
   if (!($68 << 24 >> 24)) $$1 = $67; else {
    HEAP8[$67 >> 0] = $68;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
    $$1 = $67 + 1 | 0;
   }
   $73 = HEAP32[$4 >> 2] | 0;
   $75 = HEAP32[$73 + 8 >> 2] | 0;
   if ($75 | 0) _memmove($$1 | 0, HEAP32[$73 + 4 >> 2] | 0, $75 | 0) | 0;
   $79 = $49 - $65 | 0;
   if (!$79) return;
   _memset($$1 + $75 | 0, $48 | 0, $79 | 0) | 0;
   return;
  }
 default:
  {
   $82 = HEAP8[$8 >> 0] | 0;
   if (!($82 << 24 >> 24)) $$2 = $45; else {
    HEAP8[$45 >> 0] = $82;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
    $$2 = $45 + 1 | 0;
   }
   $87 = HEAP32[$4 >> 2] | 0;
   $89 = HEAP32[$87 + 8 >> 2] | 0;
   if ($89 | 0) _memmove($$2 | 0, HEAP32[$87 + 4 >> 2] | 0, $89 | 0) | 0;
   if (!$49) return;
   _memset($$2 + $89 | 0, $48 | 0, $49 | 0) | 0;
   return;
  }
 }
}

function _wcsrtombs($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05674 = 0, $$057$lcssa = 0, $$05784 = 0, $$05873 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26083 = 0, $$278 = 0, $$3 = 0, $$361 = 0, $$477 = 0, $$5 = 0, $$pn = 0, $11 = 0, $17 = 0, $18 = 0, $23 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $51 = 0, $6 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 L1 : do if (!$0) {
  $6 = HEAP32[$1 >> 2] | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if (!$7) $$0 = 0; else {
   $$05674 = $6;
   $$05873 = 0;
   $9 = $7;
   while (1) {
    if ($9 >>> 0 > 127) {
     $11 = _wcrtomb($4, $9, 0) | 0;
     if (($11 | 0) == -1) {
      $$0 = -1;
      break L1;
     } else $$pn = $11;
    } else $$pn = 1;
    $$159 = $$pn + $$05873 | 0;
    $$05674 = $$05674 + 4 | 0;
    $9 = HEAP32[$$05674 >> 2] | 0;
    if (!$9) {
     $$0 = $$159;
     break;
    } else $$05873 = $$159;
   }
  }
 } else {
  L10 : do if ($2 >>> 0 > 3) {
   $$05784 = $0;
   $$26083 = $2;
   $18 = HEAP32[$1 >> 2] | 0;
   while (1) {
    $17 = HEAP32[$18 >> 2] | 0;
    if (($17 + -1 | 0) >>> 0 > 126) {
     if (!$17) break;
     $23 = _wcrtomb($$05784, $17, 0) | 0;
     if (($23 | 0) == -1) {
      $$0 = -1;
      break L1;
     }
     $$1 = $$05784 + $23 | 0;
     $$361 = $$26083 - $23 | 0;
     $31 = $18;
    } else {
     HEAP8[$$05784 >> 0] = $17;
     $$1 = $$05784 + 1 | 0;
     $$361 = $$26083 + -1 | 0;
     $31 = HEAP32[$1 >> 2] | 0;
    }
    $18 = $31 + 4 | 0;
    HEAP32[$1 >> 2] = $18;
    if ($$361 >>> 0 <= 3) {
     $$057$lcssa = $$1;
     $$260$lcssa = $$361;
     break L10;
    } else {
     $$05784 = $$1;
     $$26083 = $$361;
    }
   }
   HEAP8[$$05784 >> 0] = 0;
   HEAP32[$1 >> 2] = 0;
   $$0 = $2 - $$26083 | 0;
   break L1;
  } else {
   $$057$lcssa = $0;
   $$260$lcssa = $2;
  } while (0);
  if (!$$260$lcssa) $$0 = $2; else {
   $$278 = $$057$lcssa;
   $$477 = $$260$lcssa;
   $35 = HEAP32[$1 >> 2] | 0;
   while (1) {
    $34 = HEAP32[$35 >> 2] | 0;
    if (($34 + -1 | 0) >>> 0 > 126) {
     if (!$34) {
      label = 20;
      break;
     }
     $40 = _wcrtomb($4, $34, 0) | 0;
     if (($40 | 0) == -1) {
      $$0 = -1;
      break L1;
     }
     if ($$477 >>> 0 < $40 >>> 0) {
      label = 23;
      break;
     }
     _wcrtomb($$278, HEAP32[$35 >> 2] | 0, 0) | 0;
     $$3 = $$278 + $40 | 0;
     $$5 = $$477 - $40 | 0;
     $51 = $35;
    } else {
     HEAP8[$$278 >> 0] = $34;
     $$3 = $$278 + 1 | 0;
     $$5 = $$477 + -1 | 0;
     $51 = HEAP32[$1 >> 2] | 0;
    }
    $35 = $51 + 4 | 0;
    HEAP32[$1 >> 2] = $35;
    if (!$$5) {
     $$0 = $2;
     break L1;
    } else {
     $$278 = $$3;
     $$477 = $$5;
    }
   }
   if ((label | 0) == 20) {
    HEAP8[$$278 >> 0] = 0;
    HEAP32[$1 >> 2] = 0;
    $$0 = $2 - $$477 | 0;
    break;
   } else if ((label | 0) == 23) {
    $$0 = $2 - $$477 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN6spdlog7details11D_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $$pre$i = 0, $$pre$i14 = 0, $$pre$phi$i16Z2D = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $24 = 0, $29 = 0, $31 = 0, $36 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $59 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 10, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE((HEAP32[$2 + 16 >> 2] | 0) + 1 | 0, $3);
 $9 = $3 + 8 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $10 + 1 | 0;
 $12 = $3 + 12 | 0;
 if ((HEAP32[$12 >> 2] | 0) >>> 0 < $11 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $11);
  $$pre$i = HEAP32[$9 >> 2] | 0;
  $$pre$phi$iZ2D = $$pre$i + 1 | 0;
  $20 = $$pre$i;
 } else {
  $$pre$phi$iZ2D = $11;
  $20 = $10;
 }
 $17 = $3 + 4 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 HEAP32[$9 >> 2] = $$pre$phi$iZ2D;
 HEAP8[$18 + $20 >> 0] = 47;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 12 >> 2] | 0, $3);
 $23 = HEAP32[$9 >> 2] | 0;
 $24 = $23 + 1 | 0;
 if ((HEAP32[$12 >> 2] | 0) >>> 0 < $24 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $24);
  $$pre$i14 = HEAP32[$9 >> 2] | 0;
  $$pre$phi$i16Z2D = $$pre$i14 + 1 | 0;
  $31 = $$pre$i14;
 } else {
  $$pre$phi$i16Z2D = $24;
  $31 = $23;
 }
 $29 = HEAP32[$17 >> 2] | 0;
 HEAP32[$9 >> 2] = $$pre$phi$i16Z2D;
 HEAP8[$29 + $31 >> 0] = 47;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE((HEAP32[$2 + 20 >> 2] | 0) % 100 | 0, $3);
 $36 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$36) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $36 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $42 = HEAP32[$4 + 12 >> 2] | 0;
 $44 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$42) {
  STACKTOP = sp;
  return;
 }
 $46 = $42 + $36 | 0;
 $47 = $44 + 8 | 0;
 if (($36 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $49 = HEAP32[$47 >> 2] | 0;
 $50 = $49 + $36 | 0;
 if ((HEAP32[$44 + 12 >> 2] | 0) >>> 0 < $50 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$44 >> 2] >> 2] & 127]($44, $50);
  $59 = HEAP32[$47 >> 2] | 0;
 } else $59 = $49;
 $$010$i$i$i$i$i = $42;
 $$089$i$i$i$i$i = (HEAP32[$44 + 4 >> 2] | 0) + $59 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($46 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$47 >> 2] = $50;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11T_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $$pre$i = 0, $$pre$i14 = 0, $$pre$phi$i16Z2D = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $23 = 0, $28 = 0, $30 = 0, $33 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $56 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 8, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 8 >> 2] | 0, $3);
 $8 = $3 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 + 1 | 0;
 $11 = $3 + 12 | 0;
 if ((HEAP32[$11 >> 2] | 0) >>> 0 < $10 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $10);
  $$pre$i = HEAP32[$8 >> 2] | 0;
  $$pre$phi$iZ2D = $$pre$i + 1 | 0;
  $19 = $$pre$i;
 } else {
  $$pre$phi$iZ2D = $10;
  $19 = $9;
 }
 $16 = $3 + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$8 >> 2] = $$pre$phi$iZ2D;
 HEAP8[$17 + $19 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 4 >> 2] | 0, $3);
 $22 = HEAP32[$8 >> 2] | 0;
 $23 = $22 + 1 | 0;
 if ((HEAP32[$11 >> 2] | 0) >>> 0 < $23 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $23);
  $$pre$i14 = HEAP32[$8 >> 2] | 0;
  $$pre$phi$i16Z2D = $$pre$i14 + 1 | 0;
  $30 = $$pre$i14;
 } else {
  $$pre$phi$i16Z2D = $23;
  $30 = $22;
 }
 $28 = HEAP32[$16 >> 2] | 0;
 HEAP32[$8 >> 2] = $$pre$phi$i16Z2D;
 HEAP8[$28 + $30 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 >> 2] | 0, $3);
 $33 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$33) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $33 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $39 = HEAP32[$4 + 12 >> 2] | 0;
 $41 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$39) {
  STACKTOP = sp;
  return;
 }
 $43 = $39 + $33 | 0;
 $44 = $41 + 8 | 0;
 if (($33 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $46 = HEAP32[$44 >> 2] | 0;
 $47 = $46 + $33 | 0;
 if ((HEAP32[$41 + 12 >> 2] | 0) >>> 0 < $47 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$41 >> 2] >> 2] & 127]($41, $47);
  $56 = HEAP32[$44 >> 2] | 0;
 } else $56 = $46;
 $$010$i$i$i$i$i = $39;
 $$089$i$i$i$i$i = (HEAP32[$41 + 4 >> 2] | 0) + $56 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($43 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$44 >> 2] = $47;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details10fmt_helper10append_intIiLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$010$i$i = 0, $$024$lcssa$i$i$i = 0, $$02425$i$i$i = 0, $$089$i$i = 0, $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $47 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = (($0 | 0) < 0) << 31 >> 31;
 $5 = ($0 | 0) < 0;
 $6 = _i64Subtract(0, 0, $0 | 0, $4 | 0) | 0;
 $7 = getTempRet0() | 0;
 $8 = $5 ? $6 : $0;
 $9 = $5 ? $7 : $4;
 $10 = $2 + 21 | 0;
 if ($9 >>> 0 > 0 | ($9 | 0) == 0 & $8 >>> 0 > 99) {
  $$02425$i$i$i = $10;
  $16 = $8;
  $17 = $9;
  while (1) {
   $18 = ___udivdi3($16 | 0, $17 | 0, 100, 0) | 0;
   $19 = getTempRet0() | 0;
   $20 = ___muldi3($18 | 0, $19 | 0, 100, 0) | 0;
   $22 = _i64Subtract($16 | 0, $17 | 0, $20 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $24 = $22 << 1;
   HEAP8[$$02425$i$i$i + -1 >> 0] = HEAP8[64 + ($24 | 1) >> 0] | 0;
   $31 = $$02425$i$i$i + -2 | 0;
   HEAP8[$31 >> 0] = HEAP8[64 + $24 >> 0] | 0;
   if ($17 >>> 0 > 0 | ($17 | 0) == 0 & $16 >>> 0 > 9999) {
    $$02425$i$i$i = $31;
    $16 = $18;
    $17 = $19;
   } else {
    $$024$lcssa$i$i$i = $31;
    $37 = $19;
    $39 = $18;
    break;
   }
  }
 } else {
  $$024$lcssa$i$i$i = $10;
  $37 = $9;
  $39 = $8;
 }
 if ($37 >>> 0 < 0 | ($37 | 0) == 0 & $39 >>> 0 < 10) {
  $46 = $$024$lcssa$i$i$i + -1 | 0;
  HEAP8[$46 >> 0] = ($39 & 255) + 48 << 24 >> 24;
  $$0$i$i$i = $46;
 } else {
  $47 = $39 << 1;
  HEAP8[$$024$lcssa$i$i$i + -1 >> 0] = HEAP8[64 + ($47 | 1) >> 0] | 0;
  $54 = $$024$lcssa$i$i$i + -2 | 0;
  HEAP8[$54 >> 0] = HEAP8[64 + $47 >> 0] | 0;
  $$0$i$i$i = $54;
 }
 $55 = $2 + 24 | 0;
 HEAP32[$55 >> 2] = $$0$i$i$i;
 if ($5) {
  $56 = $$0$i$i$i + -1 | 0;
  HEAP32[$55 >> 2] = $56;
  HEAP8[$56 >> 0] = 45;
  $57 = HEAP32[$55 >> 2] | 0;
 } else $57 = $$0$i$i$i;
 $59 = $2 - $57 | 0;
 if (($59 | 0) <= -22) ___assert_fail(18933, 18966, 209, 19012);
 $61 = $59 + 21 | 0;
 $62 = $57 + $61 | 0;
 $63 = $1 + 8 | 0;
 if (($61 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $66 = (HEAP32[$63 >> 2] | 0) + $61 | 0;
 if ((HEAP32[$1 + 12 >> 2] | 0) >>> 0 < $66 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $66);
 if (!$61) {
  HEAP32[$63 >> 2] = $66;
  STACKTOP = sp;
  return;
 }
 $$010$i$i = $57;
 $$089$i$i = (HEAP32[$1 + 4 >> 2] | 0) + (HEAP32[$63 >> 2] | 0) | 0;
 while (1) {
  HEAP8[$$089$i$i >> 0] = HEAP8[$$010$i$i >> 0] | 0;
  $$010$i$i = $$010$i$i + 1 | 0;
  if (($$010$i$i | 0) == ($62 | 0)) break; else $$089$i$i = $$089$i$i + 1 | 0;
 }
 HEAP32[$63 >> 2] = $66;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details10fmt_helper10append_intIiLm128EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$010$i$i = 0, $$024$lcssa$i$i$i = 0, $$02425$i$i$i = 0, $$089$i$i = 0, $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $47 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = (($0 | 0) < 0) << 31 >> 31;
 $5 = ($0 | 0) < 0;
 $6 = _i64Subtract(0, 0, $0 | 0, $4 | 0) | 0;
 $7 = getTempRet0() | 0;
 $8 = $5 ? $6 : $0;
 $9 = $5 ? $7 : $4;
 $10 = $2 + 21 | 0;
 if ($9 >>> 0 > 0 | ($9 | 0) == 0 & $8 >>> 0 > 99) {
  $$02425$i$i$i = $10;
  $16 = $8;
  $17 = $9;
  while (1) {
   $18 = ___udivdi3($16 | 0, $17 | 0, 100, 0) | 0;
   $19 = getTempRet0() | 0;
   $20 = ___muldi3($18 | 0, $19 | 0, 100, 0) | 0;
   $22 = _i64Subtract($16 | 0, $17 | 0, $20 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $24 = $22 << 1;
   HEAP8[$$02425$i$i$i + -1 >> 0] = HEAP8[64 + ($24 | 1) >> 0] | 0;
   $31 = $$02425$i$i$i + -2 | 0;
   HEAP8[$31 >> 0] = HEAP8[64 + $24 >> 0] | 0;
   if ($17 >>> 0 > 0 | ($17 | 0) == 0 & $16 >>> 0 > 9999) {
    $$02425$i$i$i = $31;
    $16 = $18;
    $17 = $19;
   } else {
    $$024$lcssa$i$i$i = $31;
    $37 = $19;
    $39 = $18;
    break;
   }
  }
 } else {
  $$024$lcssa$i$i$i = $10;
  $37 = $9;
  $39 = $8;
 }
 if ($37 >>> 0 < 0 | ($37 | 0) == 0 & $39 >>> 0 < 10) {
  $46 = $$024$lcssa$i$i$i + -1 | 0;
  HEAP8[$46 >> 0] = ($39 & 255) + 48 << 24 >> 24;
  $$0$i$i$i = $46;
 } else {
  $47 = $39 << 1;
  HEAP8[$$024$lcssa$i$i$i + -1 >> 0] = HEAP8[64 + ($47 | 1) >> 0] | 0;
  $54 = $$024$lcssa$i$i$i + -2 | 0;
  HEAP8[$54 >> 0] = HEAP8[64 + $47 >> 0] | 0;
  $$0$i$i$i = $54;
 }
 $55 = $2 + 24 | 0;
 HEAP32[$55 >> 2] = $$0$i$i$i;
 if ($5) {
  $56 = $$0$i$i$i + -1 | 0;
  HEAP32[$55 >> 2] = $56;
  HEAP8[$56 >> 0] = 45;
  $57 = HEAP32[$55 >> 2] | 0;
 } else $57 = $$0$i$i$i;
 $59 = $2 - $57 | 0;
 if (($59 | 0) <= -22) ___assert_fail(18933, 18966, 209, 19012);
 $61 = $59 + 21 | 0;
 $62 = $57 + $61 | 0;
 $63 = $1 + 8 | 0;
 if (($61 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $66 = (HEAP32[$63 >> 2] | 0) + $61 | 0;
 if ((HEAP32[$1 + 12 >> 2] | 0) >>> 0 < $66 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $66);
 if (!$61) {
  HEAP32[$63 >> 2] = $66;
  STACKTOP = sp;
  return;
 }
 $$010$i$i = $57;
 $$089$i$i = (HEAP32[$1 + 4 >> 2] | 0) + (HEAP32[$63 >> 2] | 0) | 0;
 while (1) {
  HEAP8[$$089$i$i >> 0] = HEAP8[$$010$i$i >> 0] | 0;
  $$010$i$i = $$010$i$i + 1 | 0;
  if (($$010$i$i | 0) == ($62 | 0)) break; else $$089$i$i = $$089$i$i + 1 | 0;
 }
 HEAP32[$63 >> 2] = $66;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details10fmt_helper10append_intIxLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$010$i$i = 0, $$024$lcssa$i$i$i = 0, $$02425$i$i$i = 0, $$089$i$i = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $3 = 0, $30 = 0, $36 = 0, $38 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 $4 = ($1 | 0) < 0;
 $5 = _i64Subtract(0, 0, $0 | 0, $1 | 0) | 0;
 $6 = getTempRet0() | 0;
 $7 = $4 ? $5 : $0;
 $8 = $4 ? $6 : $1;
 $9 = $3 + 21 | 0;
 if ($8 >>> 0 > 0 | ($8 | 0) == 0 & $7 >>> 0 > 99) {
  $$02425$i$i$i = $9;
  $15 = $7;
  $16 = $8;
  while (1) {
   $17 = ___udivdi3($15 | 0, $16 | 0, 100, 0) | 0;
   $18 = getTempRet0() | 0;
   $19 = ___muldi3($17 | 0, $18 | 0, 100, 0) | 0;
   $21 = _i64Subtract($15 | 0, $16 | 0, $19 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $23 = $21 << 1;
   HEAP8[$$02425$i$i$i + -1 >> 0] = HEAP8[64 + ($23 | 1) >> 0] | 0;
   $30 = $$02425$i$i$i + -2 | 0;
   HEAP8[$30 >> 0] = HEAP8[64 + $23 >> 0] | 0;
   if ($16 >>> 0 > 0 | ($16 | 0) == 0 & $15 >>> 0 > 9999) {
    $$02425$i$i$i = $30;
    $15 = $17;
    $16 = $18;
   } else {
    $$024$lcssa$i$i$i = $30;
    $36 = $18;
    $38 = $17;
    break;
   }
  }
 } else {
  $$024$lcssa$i$i$i = $9;
  $36 = $8;
  $38 = $7;
 }
 if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $38 >>> 0 < 10) {
  $45 = $$024$lcssa$i$i$i + -1 | 0;
  HEAP8[$45 >> 0] = ($38 & 255) + 48 << 24 >> 24;
  $$0$i$i$i = $45;
 } else {
  $46 = $38 << 1;
  HEAP8[$$024$lcssa$i$i$i + -1 >> 0] = HEAP8[64 + ($46 | 1) >> 0] | 0;
  $53 = $$024$lcssa$i$i$i + -2 | 0;
  HEAP8[$53 >> 0] = HEAP8[64 + $46 >> 0] | 0;
  $$0$i$i$i = $53;
 }
 $54 = $3 + 24 | 0;
 HEAP32[$54 >> 2] = $$0$i$i$i;
 if ($4) {
  $55 = $$0$i$i$i + -1 | 0;
  HEAP32[$54 >> 2] = $55;
  HEAP8[$55 >> 0] = 45;
  $56 = HEAP32[$54 >> 2] | 0;
 } else $56 = $$0$i$i$i;
 $58 = $3 - $56 | 0;
 if (($58 | 0) <= -22) ___assert_fail(18933, 18966, 209, 19012);
 $60 = $58 + 21 | 0;
 $61 = $56 + $60 | 0;
 $62 = $2 + 8 | 0;
 if (($60 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $65 = (HEAP32[$62 >> 2] | 0) + $60 | 0;
 if ((HEAP32[$2 + 12 >> 2] | 0) >>> 0 < $65 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$2 >> 2] >> 2] & 127]($2, $65);
 if (!$60) {
  HEAP32[$62 >> 2] = $65;
  STACKTOP = sp;
  return;
 }
 $$010$i$i = $56;
 $$089$i$i = (HEAP32[$2 + 4 >> 2] | 0) + (HEAP32[$62 >> 2] | 0) | 0;
 while (1) {
  HEAP8[$$089$i$i >> 0] = HEAP8[$$010$i$i >> 0] | 0;
  $$010$i$i = $$010$i$i + 1 | 0;
  if (($$010$i$i | 0) == ($61 | 0)) break; else $$089$i$i = $$089$i$i + 1 | 0;
 }
 HEAP32[$62 >> 2] = $65;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v516visit_format_argINS0_8internal17precision_checkerINS2_13error_handlerEEENS0_20basic_format_contextINSt3__220back_insert_iteratorINS2_12basic_bufferIcEEEEcEEEENS2_9result_ofIFT_iEE4typeEOSE_RKNS0_16basic_format_argIT0_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $18 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0;
 do switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 13:
  {
   $31 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($31, 18246);
   ___cxa_throw($31 | 0, 6792, 18);
   break;
  }
 case 1:
  {
   ___assert_fail(17342, 18966, 837, 17377);
   break;
  }
 case 2:
  {
   $4 = HEAP32[$1 >> 2] | 0;
   if (($4 | 0) < 0) {
    $6 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($6, 18227);
    ___cxa_throw($6 | 0, 6792, 18);
   }
   $33 = (($4 | 0) < 0) << 31 >> 31;
   $34 = $4;
   setTempRet0($33 | 0);
   return $34 | 0;
  }
 case 3:
  {
   $33 = 0;
   $34 = HEAP32[$1 >> 2] | 0;
   setTempRet0($33 | 0);
   return $34 | 0;
  }
 case 4:
  {
   $10 = $1;
   $12 = HEAP32[$10 >> 2] | 0;
   $15 = HEAP32[$10 + 4 >> 2] | 0;
   if (($15 | 0) < 0) {
    $17 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($17, 18227);
    ___cxa_throw($17 | 0, 6792, 18);
   } else {
    $33 = $15;
    $34 = $12;
    setTempRet0($33 | 0);
    return $34 | 0;
   }
   break;
  }
 case 5:
  {
   $18 = $1;
   $33 = HEAP32[$18 + 4 >> 2] | 0;
   $34 = HEAP32[$18 >> 2] | 0;
   setTempRet0($33 | 0);
   return $34 | 0;
  }
 case 6:
  {
   $24 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($24, 18246);
   ___cxa_throw($24 | 0, 6792, 18);
   break;
  }
 case 7:
  {
   $25 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($25, 18246);
   ___cxa_throw($25 | 0, 6792, 18);
   break;
  }
 case 8:
  {
   $26 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($26, 18246);
   ___cxa_throw($26 | 0, 6792, 18);
   break;
  }
 case 9:
  {
   $27 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($27, 18246);
   ___cxa_throw($27 | 0, 6792, 18);
   break;
  }
 case 10:
  {
   $28 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($28, 18246);
   ___cxa_throw($28 | 0, 6792, 18);
   break;
  }
 case 11:
  {
   $29 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($29, 18246);
   ___cxa_throw($29 | 0, 6792, 18);
   break;
  }
 case 12:
  {
   $30 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($30, 18246);
   ___cxa_throw($30 | 0, 6792, 18);
   break;
  }
 default:
  {
   $32 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($32, 18246);
   ___cxa_throw($32 | 0, 6792, 18);
  }
 } while (0);
 return 0;
}

function _mbsnrtowcs($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$04975 = 0, $$05374 = 0, $$056 = 0, $$150 = 0, $$154 = 0, $$15773 = 0, $$164 = 0, $$176 = 0, $$2 = 0, $$25170 = 0, $$25569 = 0, $$258 = 0, $$352 = 0, $$359 = 0, $$371 = 0, $$468 = 0, $$cast = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $30 = 0, $31 = 0, $39 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 $5 = sp;
 $6 = sp + 1024 | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP32[$6 >> 2] = $7;
 $8 = ($0 | 0) != 0;
 $$056 = $8 ? $3 : 256;
 $$0 = $8 ? $0 : $5;
 $$cast = $7;
 L1 : do if (($$056 | 0) != 0 & ($7 | 0) != 0) {
  $$04975 = 0;
  $$05374 = $2;
  $$15773 = $$056;
  $$176 = $$0;
  $44 = $$cast;
  while (1) {
   $11 = $$05374 >>> 2;
   $12 = $11 >>> 0 >= $$15773 >>> 0;
   if (!($$05374 >>> 0 > 131 | $12)) {
    $$150 = $$04975;
    $$154 = $$05374;
    $$164 = $$176;
    $$359 = $$15773;
    $25 = $44;
    break L1;
   }
   $spec$select = $12 ? $$15773 : $11;
   $15 = $$05374 - $spec$select | 0;
   $16 = _mbsrtowcs($$176, $6, $spec$select, $4) | 0;
   if (($16 | 0) == -1) break;
   $18 = ($$176 | 0) == ($5 | 0);
   $$258 = $$15773 - ($18 ? 0 : $16) | 0;
   $$2 = $18 ? $$176 : $$176 + ($16 << 2) | 0;
   $21 = $16 + $$04975 | 0;
   $22 = HEAP32[$6 >> 2] | 0;
   if (($$258 | 0) != 0 & ($22 | 0) != 0) {
    $$04975 = $21;
    $$05374 = $15;
    $$15773 = $$258;
    $$176 = $$2;
    $44 = $22;
   } else {
    $$150 = $21;
    $$154 = $15;
    $$164 = $$2;
    $$359 = $$258;
    $25 = $22;
    break L1;
   }
  }
  $$150 = -1;
  $$154 = $15;
  $$164 = $$176;
  $$359 = 0;
  $25 = HEAP32[$6 >> 2] | 0;
 } else {
  $$150 = 0;
  $$154 = $2;
  $$164 = $$0;
  $$359 = $$056;
  $25 = $$cast;
 } while (0);
 L9 : do if (!$25) $$352 = $$150; else if (($$359 | 0) != 0 & ($$154 | 0) != 0) {
  $$25170 = $$150;
  $$25569 = $$154;
  $$371 = $$164;
  $$468 = $$359;
  $30 = $25;
  while (1) {
   $31 = _mbrtowc($$371, $30, $$25569, $4) | 0;
   if (($31 + 2 | 0) >>> 0 < 3) break;
   $30 = (HEAP32[$6 >> 2] | 0) + $31 | 0;
   HEAP32[$6 >> 2] = $30;
   $$25569 = $$25569 - $31 | 0;
   $$468 = $$468 + -1 | 0;
   $39 = $$25170 + 1 | 0;
   if (!(($$468 | 0) != 0 & ($$25569 | 0) != 0)) {
    $$352 = $39;
    break L9;
   } else {
    $$25170 = $39;
    $$371 = $$371 + 4 | 0;
   }
  }
  switch ($31 | 0) {
  case -1:
   {
    $$352 = $31;
    break L9;
    break;
   }
  case 0:
   {
    HEAP32[$6 >> 2] = 0;
    $$352 = $$25170;
    break L9;
    break;
   }
  default:
   {
    HEAP32[$4 >> 2] = 0;
    $$352 = $$25170;
    break L9;
   }
  }
 } else $$352 = $$150; while (0);
 if ($8) HEAP32[$1 >> 2] = HEAP32[$6 >> 2];
 STACKTOP = sp;
 return $$352 | 0;
}

function __ZN3fmt2v516visit_format_argINS0_8internal13width_checkerINS2_13error_handlerEEENS0_20basic_format_contextINSt3__220back_insert_iteratorINS2_12basic_bufferIcEEEEcEEEENS2_9result_ofIFT_iEE4typeEOSE_RKNS0_16basic_format_argIT0_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $18 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0;
 do switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 13:
  {
   $31 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($31, 18206);
   ___cxa_throw($31 | 0, 6792, 18);
   break;
  }
 case 1:
  {
   ___assert_fail(17342, 18966, 837, 17377);
   break;
  }
 case 2:
  {
   $4 = HEAP32[$1 >> 2] | 0;
   if (($4 | 0) < 0) {
    $6 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($6, 18191);
    ___cxa_throw($6 | 0, 6792, 18);
   }
   $33 = (($4 | 0) < 0) << 31 >> 31;
   $34 = $4;
   setTempRet0($33 | 0);
   return $34 | 0;
  }
 case 3:
  {
   $33 = 0;
   $34 = HEAP32[$1 >> 2] | 0;
   setTempRet0($33 | 0);
   return $34 | 0;
  }
 case 4:
  {
   $10 = $1;
   $12 = HEAP32[$10 >> 2] | 0;
   $15 = HEAP32[$10 + 4 >> 2] | 0;
   if (($15 | 0) < 0) {
    $17 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($17, 18191);
    ___cxa_throw($17 | 0, 6792, 18);
   } else {
    $33 = $15;
    $34 = $12;
    setTempRet0($33 | 0);
    return $34 | 0;
   }
   break;
  }
 case 5:
  {
   $18 = $1;
   $33 = HEAP32[$18 + 4 >> 2] | 0;
   $34 = HEAP32[$18 >> 2] | 0;
   setTempRet0($33 | 0);
   return $34 | 0;
  }
 case 6:
  {
   $24 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($24, 18206);
   ___cxa_throw($24 | 0, 6792, 18);
   break;
  }
 case 7:
  {
   $25 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($25, 18206);
   ___cxa_throw($25 | 0, 6792, 18);
   break;
  }
 case 8:
  {
   $26 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($26, 18206);
   ___cxa_throw($26 | 0, 6792, 18);
   break;
  }
 case 9:
  {
   $27 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($27, 18206);
   ___cxa_throw($27 | 0, 6792, 18);
   break;
  }
 case 10:
  {
   $28 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($28, 18206);
   ___cxa_throw($28 | 0, 6792, 18);
   break;
  }
 case 11:
  {
   $29 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($29, 18206);
   ___cxa_throw($29 | 0, 6792, 18);
   break;
  }
 case 12:
  {
   $30 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($30, 18206);
   ___cxa_throw($30 | 0, 6792, 18);
   break;
  }
 default:
  {
   $32 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($32, 18206);
   ___cxa_throw($32 | 0, 6792, 18);
  }
 } while (0);
 return 0;
}

function __ZNSt3__210shared_ptrIN6spdlog6loggerEE11make_sharedIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_11__wrap_iterIPNS0_INS1_5sinks4sinkEEEEESG_EEES3_DpOT_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$04$0$copyload22$i$i$i = 0, $$sroa$5$0$$sroa_idx$i$i$i = 0, $$sroa$5$0$$sroa_idx8$i$i$i = 0, $$sroa$5$i$i$i = 0, $$sroa$512$0$copyload$i$i$i = 0, $10 = 0, $11 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy2 = sp + 28 | 0;
 $$byval_copy = sp + 24 | 0;
 $vararg_buffer = sp;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $$sroa$5$i$i$i = sp + 8 | 0;
 $6 = __Znwm(88) | 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 >> 2] = 9892;
 $9 = $6 + 16 | 0;
 $$sroa$04$0$copyload22$i$i$i = HEAP32[$1 >> 2] | 0;
 $$sroa$5$0$$sroa_idx$i$i$i = $1 + 4 | 0;
 HEAP32[$$sroa$5$i$i$i >> 2] = HEAP32[$$sroa$5$0$$sroa_idx$i$i$i >> 2];
 HEAP16[$$sroa$5$i$i$i + 4 >> 1] = HEAP16[$$sroa$5$0$$sroa_idx$i$i$i + 4 >> 1] | 0;
 HEAP8[$$sroa$5$i$i$i + 6 >> 0] = HEAP8[$$sroa$5$0$$sroa_idx$i$i$i + 6 >> 0] | 0;
 $$sroa$512$0$copyload$i$i$i = HEAP8[$1 + 11 >> 0] | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $10 = HEAP32[$2 >> 2] | 0;
 $11 = HEAP32[$3 >> 2] | 0;
 HEAP32[$9 >> 2] = 9920;
 HEAP32[$6 + 20 >> 2] = $$sroa$04$0$copyload22$i$i$i;
 $$sroa$5$0$$sroa_idx8$i$i$i = $6 + 24 | 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i$i$i >> 2] = HEAP32[$$sroa$5$i$i$i >> 2];
 HEAP16[$$sroa$5$0$$sroa_idx8$i$i$i + 4 >> 1] = HEAP16[$$sroa$5$i$i$i + 4 >> 1] | 0;
 HEAP8[$$sroa$5$0$$sroa_idx8$i$i$i + 6 >> 0] = HEAP8[$$sroa$5$i$i$i + 6 >> 0] | 0;
 HEAP8[$6 + 31 >> 0] = $$sroa$512$0$copyload$i$i$i;
 HEAP32[$$sroa$5$i$i$i >> 2] = 0;
 HEAP16[$$sroa$5$i$i$i + 4 >> 1] = 0;
 HEAP8[$$sroa$5$i$i$i + 6 >> 0] = 0;
 HEAP32[$4 >> 2] = $10;
 HEAP32[$5 >> 2] = $11;
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$5 >> 2];
 __ZNSt3__26vectorINS_10shared_ptrIN6spdlog5sinks4sinkEEENS_9allocatorIS5_EEEC2INS_11__wrap_iterIPS5_EEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISD_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISD_E9referenceEEE5valueESD_E4typeE($6 + 32 | 0, $$byval_copy, $$byval_copy2);
 HEAP32[$6 + 44 >> 2] = 2;
 HEAP32[$6 + 48 >> 2] = 6;
 $16 = $6 + 56 | 0;
 HEAP32[$16 >> 2] = 9948;
 HEAP32[$6 + 60 >> 2] = $9;
 HEAP32[$6 + 72 >> 2] = $16;
 HEAP32[$6 + 80 >> 2] = 0;
 HEAP32[$6 + 84 >> 2] = 1;
 HEAP32[$0 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $6;
 HEAP32[$vararg_buffer >> 2] = $9;
 HEAP32[$vararg_buffer + 4 >> 2] = $9;
 __ZNSt3__210shared_ptrIN6spdlog6loggerEE18__enable_weak_thisEz($0, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$phi$trans$insert = 0, $$pre$phi26Z2D = 0, $$pre$phi28Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $53 = 0, $59 = 0, $6 = 0, $62 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 if (($1 | 0) == -1) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $4 = $0 + 12 | 0;
 $6 = $0 + 8 | 0;
 $8 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0;
 $9 = $0 + 24 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $0 + 28 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (($10 | 0) == ($12 | 0)) {
  $14 = $0 + 48 | 0;
  if (!(HEAP32[$14 >> 2] & 16)) {
   $$1 = -1;
   STACKTOP = sp;
   return $$1 | 0;
  }
  $18 = $0 + 20 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  $22 = $0 + 44 | 0;
  $24 = (HEAP32[$22 >> 2] | 0) - $19 | 0;
  $25 = $0 + 32 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($25, 0);
  $26 = $25 + 11 | 0;
  if ((HEAP8[$26 >> 0] | 0) < 0) $32 = (HEAP32[$0 + 40 >> 2] & 2147483647) + -1 | 0; else $32 = 10;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($25, $32, 0);
  $33 = HEAP8[$26 >> 0] | 0;
  if ($33 << 24 >> 24 < 0) {
   $40 = HEAP32[$25 >> 2] | 0;
   $41 = HEAP32[$0 + 36 >> 2] | 0;
  } else {
   $40 = $25;
   $41 = $33 & 255;
  }
  $39 = $40 + $41 | 0;
  HEAP32[$18 >> 2] = $40;
  HEAP32[$11 >> 2] = $39;
  $42 = $40 + ($10 - $19) | 0;
  HEAP32[$9 >> 2] = $42;
  $43 = $40 + $24 | 0;
  HEAP32[$22 >> 2] = $43;
  $$pre$phi26Z2D = $22;
  $$pre$phi28Z2D = $14;
  $$pre$phiZ2D = $22;
  $45 = $42;
  $47 = $43;
  $62 = $39;
 } else {
  $$phi$trans$insert = $0 + 44 | 0;
  $$pre$phi26Z2D = $$phi$trans$insert;
  $$pre$phi28Z2D = $0 + 48 | 0;
  $$pre$phiZ2D = $$phi$trans$insert;
  $45 = $10;
  $47 = HEAP32[$$phi$trans$insert >> 2] | 0;
  $62 = $12;
 }
 $44 = $45 + 1 | 0;
 HEAP32[$2 >> 2] = $44;
 $49 = HEAP32[($44 >>> 0 < $47 >>> 0 ? $$pre$phiZ2D : $2) >> 2] | 0;
 HEAP32[$$pre$phi26Z2D >> 2] = $49;
 if (HEAP32[$$pre$phi28Z2D >> 2] & 8 | 0) {
  $53 = $0 + 32 | 0;
  if ((HEAP8[$53 + 11 >> 0] | 0) < 0) $59 = HEAP32[$53 >> 2] | 0; else $59 = $53;
  HEAP32[$6 >> 2] = $59;
  HEAP32[$4 >> 2] = $59 + $8;
  HEAP32[$0 + 16 >> 2] = $49;
 }
 if (($45 | 0) == ($62 | 0)) {
  $$1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] & 31]($0, $1 & 255) | 0;
  STACKTOP = sp;
  return $$1 | 0;
 } else {
  HEAP32[$9 >> 2] = $44;
  HEAP8[$45 >> 0] = $1;
  $$1 = $1 & 255;
  STACKTOP = sp;
  return $$1 | 0;
 }
 return 0;
}

function __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa$i = 0, $$035$i = 0, $$2$i = 0, $$sink = 0, $$sink45 = 0, $$sroa$10$0 = 0, $$sroa$10$1 = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $5 = 0, $52 = 0, $54 = 0, $62 = 0, $66 = 0, $7 = 0, $73 = 0, $75 = 0, sp = 0, $20$looptemp = 0, $21$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $0 + 12 | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = $0;
 $7 = HEAP32[$5 >> 2] | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $12 = HEAP32[$0 + 8 >> 2] | 0;
 if (($12 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
 $14 = $2 + $12 | 0;
 if ($10 >>> 0 > 0 | ($10 | 0) == 0 & $7 >>> 0 > 99) {
  $$035$i = $14;
  $$sroa$10$0 = 0;
  $20 = $7;
  $21 = $10;
  while (1) {
   $20$looptemp = $20;
   $20 = ___udivdi3($20 | 0, $21 | 0, 100, 0) | 0;
   $21$looptemp = $21;
   $21 = getTempRet0() | 0;
   $24 = ___muldi3($20 | 0, $21 | 0, 100, 0) | 0;
   $26 = _i64Subtract($20$looptemp | 0, $21$looptemp | 0, $24 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $28 = $26 << 1;
   $32 = $$035$i + -1 | 0;
   HEAP8[$32 >> 0] = HEAP8[64 + ($28 | 1) >> 0] | 0;
   if (!((($$sroa$10$0 | 1) >>> 0) % 3 | 0)) {
    HEAP8[$$035$i + -2 >> 0] = HEAP8[$3 >> 0] | 0;
    $41 = $32;
   } else $41 = $$035$i;
   $40 = $41 + -2 | 0;
   HEAP8[$40 >> 0] = HEAP8[64 + $28 >> 0] | 0;
   $42 = $$sroa$10$0 + 2 | 0;
   if (!(($42 >>> 0) % 3 | 0)) {
    $45 = $41 + -3 | 0;
    HEAP8[$45 >> 0] = HEAP8[$3 >> 0] | 0;
    $$2$i = $45;
   } else $$2$i = $40;
   if (!($21$looptemp >>> 0 > 0 | ($21$looptemp | 0) == 0 & $20$looptemp >>> 0 > 9999)) break; else {
    $$035$i = $$2$i;
    $$sroa$10$0 = $42;
   }
  }
  $$0$lcssa$i = $$2$i;
  $$sroa$10$1 = (($$sroa$10$0 + 3 | 0) >>> 0) % 3 | 0;
  $52 = $21;
  $54 = $20;
 } else {
  $$0$lcssa$i = $14;
  $$sroa$10$1 = 1;
  $52 = $10;
  $54 = $7;
 }
 if ($52 >>> 0 < 0 | ($52 | 0) == 0 & $54 >>> 0 < 10) {
  $$sink = ($54 & 255) + 48 << 24 >> 24;
  $$sink45 = $$0$lcssa$i + -1 | 0;
 } else {
  $62 = $54 << 1;
  $66 = $$0$lcssa$i + -1 | 0;
  HEAP8[$66 >> 0] = HEAP8[64 + ($62 | 1) >> 0] | 0;
  if (!$$sroa$10$1) {
   HEAP8[$$0$lcssa$i + -2 >> 0] = HEAP8[$3 >> 0] | 0;
   $73 = $66;
  } else $73 = $$0$lcssa$i;
  $$sink = HEAP8[64 + $62 >> 0] | 0;
  $$sink45 = $73 + -2 | 0;
 }
 HEAP8[$$sink45 >> 0] = $$sink;
 if (!$12) {
  $75 = $4 + $12 | 0;
  HEAP32[$1 >> 2] = $75;
  STACKTOP = sp;
  return;
 }
 _memcpy($4 | 0, $2 | 0, $12 | 0) | 0;
 $75 = $4 + $12 | 0;
 HEAP32[$1 >> 2] = $75;
 STACKTOP = sp;
 return;
}

function __ZNK3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEE10num_writerclIRPcEEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa$i = 0, $$035$i = 0, $$2$i = 0, $$sink = 0, $$sink45 = 0, $$sroa$10$0 = 0, $$sroa$10$1 = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $5 = 0, $52 = 0, $54 = 0, $62 = 0, $66 = 0, $7 = 0, $73 = 0, $75 = 0, sp = 0, $20$looptemp = 0, $21$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $0 + 12 | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = $0;
 $7 = HEAP32[$5 >> 2] | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $12 = HEAP32[$0 + 8 >> 2] | 0;
 if (($12 | 0) <= -1) ___assert_fail(17394, 17437, 989, 17485);
 $14 = $2 + $12 | 0;
 if ($10 >>> 0 > 0 | ($10 | 0) == 0 & $7 >>> 0 > 99) {
  $$035$i = $14;
  $$sroa$10$0 = 0;
  $20 = $7;
  $21 = $10;
  while (1) {
   $20$looptemp = $20;
   $20 = ___udivdi3($20 | 0, $21 | 0, 100, 0) | 0;
   $21$looptemp = $21;
   $21 = getTempRet0() | 0;
   $24 = ___muldi3($20 | 0, $21 | 0, 100, 0) | 0;
   $26 = _i64Subtract($20$looptemp | 0, $21$looptemp | 0, $24 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $28 = $26 << 1;
   $32 = $$035$i + -1 | 0;
   HEAP8[$32 >> 0] = HEAP8[64 + ($28 | 1) >> 0] | 0;
   if (!((($$sroa$10$0 | 1) >>> 0) % 3 | 0)) {
    HEAP8[$$035$i + -2 >> 0] = HEAP8[$3 >> 0] | 0;
    $41 = $32;
   } else $41 = $$035$i;
   $40 = $41 + -2 | 0;
   HEAP8[$40 >> 0] = HEAP8[64 + $28 >> 0] | 0;
   $42 = $$sroa$10$0 + 2 | 0;
   if (!(($42 >>> 0) % 3 | 0)) {
    $45 = $41 + -3 | 0;
    HEAP8[$45 >> 0] = HEAP8[$3 >> 0] | 0;
    $$2$i = $45;
   } else $$2$i = $40;
   if (!($21$looptemp >>> 0 > 0 | ($21$looptemp | 0) == 0 & $20$looptemp >>> 0 > 9999)) break; else {
    $$035$i = $$2$i;
    $$sroa$10$0 = $42;
   }
  }
  $$0$lcssa$i = $$2$i;
  $$sroa$10$1 = (($$sroa$10$0 + 3 | 0) >>> 0) % 3 | 0;
  $52 = $21;
  $54 = $20;
 } else {
  $$0$lcssa$i = $14;
  $$sroa$10$1 = 1;
  $52 = $10;
  $54 = $7;
 }
 if ($52 >>> 0 < 0 | ($52 | 0) == 0 & $54 >>> 0 < 10) {
  $$sink = ($54 & 255) + 48 << 24 >> 24;
  $$sink45 = $$0$lcssa$i + -1 | 0;
 } else {
  $62 = $54 << 1;
  $66 = $$0$lcssa$i + -1 | 0;
  HEAP8[$66 >> 0] = HEAP8[64 + ($62 | 1) >> 0] | 0;
  if (!$$sroa$10$1) {
   HEAP8[$$0$lcssa$i + -2 >> 0] = HEAP8[$3 >> 0] | 0;
   $73 = $66;
  } else $73 = $$0$lcssa$i;
  $$sink = HEAP8[64 + $62 >> 0] | 0;
  $$sink45 = $73 + -2 | 0;
 }
 HEAP8[$$sink45 >> 0] = $$sink;
 if (!$12) {
  $75 = $4 + $12 | 0;
  HEAP32[$1 >> 2] = $75;
  STACKTOP = sp;
  return;
 }
 _memcpy($4 | 0, $2 | 0, $12 | 0) | 0;
 $75 = $4 + $12 | 0;
 HEAP32[$1 >> 2] = $75;
 STACKTOP = sp;
 return;
}

function _pop_arg($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
 case 9:
  {
   $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $10 = HEAP32[$9 >> 2] | 0;
   HEAP32[$2 >> 2] = $9 + 4;
   HEAP32[$0 >> 2] = $10;
   break L1;
   break;
  }
 case 10:
  {
   $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$2 >> 2] = $16 + 4;
   $20 = $0;
   HEAP32[$20 >> 2] = $17;
   HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $30 = HEAP32[$29 >> 2] | 0;
   HEAP32[$2 >> 2] = $29 + 4;
   $31 = $0;
   HEAP32[$31 >> 2] = $30;
   HEAP32[$31 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $41 = $40;
   $43 = HEAP32[$41 >> 2] | 0;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = $40 + 8;
   $47 = $0;
   HEAP32[$47 >> 2] = $43;
   HEAP32[$47 + 4 >> 2] = $46;
   break L1;
   break;
  }
 case 13:
  {
   $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $57 = HEAP32[$56 >> 2] | 0;
   HEAP32[$2 >> 2] = $56 + 4;
   $59 = ($57 & 65535) << 16 >> 16;
   $62 = $0;
   HEAP32[$62 >> 2] = $59;
   HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $72 = HEAP32[$71 >> 2] | 0;
   HEAP32[$2 >> 2] = $71 + 4;
   $73 = $0;
   HEAP32[$73 >> 2] = $72 & 65535;
   HEAP32[$73 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   $85 = ($83 & 255) << 24 >> 24;
   $88 = $0;
   HEAP32[$88 >> 2] = $85;
   HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $98 = HEAP32[$97 >> 2] | 0;
   HEAP32[$2 >> 2] = $97 + 4;
   $99 = $0;
   HEAP32[$99 >> 2] = $98 & 255;
   HEAP32[$99 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $109 = +HEAPF64[$108 >> 3];
   HEAP32[$2 >> 2] = $108 + 8;
   HEAPF64[$0 >> 3] = $109;
   break L1;
   break;
  }
 case 18:
  {
   $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $116 = +HEAPF64[$115 >> 3];
   HEAP32[$2 >> 2] = $115 + 8;
   HEAPF64[$0 >> 3] = $116;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function __ZN3fmt2v58internal24handle_cstring_type_specIcNS1_18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE20cstring_spec_handlerEEEvT_OT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$06$i$i$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi3$i$iZ2D = 0, $11 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $31 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $$byval_copy1 = sp + 64 | 0;
 $$byval_copy = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 20 | 0;
 $5 = sp;
 switch ($0 << 24 >> 24) {
 case 115:
 case 0:
  {
   __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE5writeEPKc(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 case 112:
  {
   $9 = HEAP32[$1 >> 2] | 0;
   $11 = HEAP32[$1 + 4 >> 2] | 0;
   $13 = HEAP32[$9 + 8 >> 2] | 0;
   if (!$13) {
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 32;
    HEAP32[$5 + 8 >> 2] = 0;
    HEAP32[$5 + 12 >> 2] = -1;
    $18 = $5 + 16 | 0;
    HEAP8[$18 >> 0] = 0;
    $19 = $5 + 17 | 0;
    HEAP8[$19 >> 0] = 0;
    $$pre$phi$i$iZ2D = $18;
    $$pre$phi3$i$iZ2D = $19;
   } else {
    HEAP32[$5 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
    HEAP32[$5 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
    HEAP32[$5 + 16 >> 2] = HEAP32[$13 + 16 >> 2];
    $$pre$phi$i$iZ2D = $5 + 16 | 0;
    $$pre$phi3$i$iZ2D = $5 + 17 | 0;
   }
   HEAP8[$$pre$phi$i$iZ2D >> 0] = 8;
   HEAP8[$$pre$phi3$i$iZ2D >> 0] = 120;
   HEAP32[$4 >> 2] = $9;
   HEAP32[$4 + 4 >> 2] = $5;
   HEAP32[$4 + 8 >> 2] = $11;
   HEAP8[$4 + 12 >> 0] = 48;
   HEAP32[$4 + 16 >> 2] = 2;
   HEAP8[$4 + 13 >> 0] = 120;
   $$0$i$i$i = 0;
   $$06$i$i$i = $11;
   do {
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
    $$06$i$i$i = $$06$i$i$i >>> 4;
   } while (($$06$i$i$i | 0) != 0);
   HEAP32[$2 >> 2] = $4 + 12;
   HEAP32[$2 + 4 >> 2] = 2;
   HEAP32[$3 >> 2] = $4;
   HEAP32[$3 + 4 >> 2] = $$0$i$i$i;
   HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerImSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($9, $$0$i$i$i, $$byval_copy, $5, $$byval_copy1);
   STACKTOP = sp;
   return;
  }
 default:
  {
   $31 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($31, 17534);
   ___cxa_throw($31 | 0, 6792, 18);
  }
 }
}

function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100 = 0, $$194 = 0, $$194$ph = 0, $$2102 = 0, $$598 = 0, $$pre = 0, $21 = 0, $22 = 0, $33 = 0, $47 = 0, $49 = 0, $56 = 0, $76 = 0, $78 = 0, $80 = 0, $86 = 0, $89 = 0;
 $$pre = $1;
 if (!($4 & 4)) $$194$ph = $0; else if (($$pre - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == -17) if ((HEAP8[$0 + 1 >> 0] | 0) == -69) $$194$ph = (HEAP8[$0 + 2 >> 0] | 0) == -65 ? $0 + 3 | 0 : $0; else $$194$ph = $0; else $$194$ph = $0; else $$194$ph = $0;
 $$0100 = 0;
 $$194 = $$194$ph;
 L7 : while (1) {
  if (!($$0100 >>> 0 < $2 >>> 0 & $$194 >>> 0 < $1 >>> 0)) break;
  $21 = HEAP8[$$194 >> 0] | 0;
  $22 = $21 & 255;
  if ($22 >>> 0 > $3 >>> 0) break;
  do if ($21 << 24 >> 24 > -1) {
   $$2102 = $$0100;
   $$598 = $$194 + 1 | 0;
  } else {
   if (($21 & 255) < 194) break L7;
   if (($21 & 255) < 224) {
    if (($$pre - $$194 | 0) < 2) break L7;
    $33 = HEAPU8[$$194 + 1 >> 0] | 0;
    if (($33 & 192 | 0) != 128) break L7;
    if (($33 & 63 | $22 << 6 & 1984) >>> 0 > $3 >>> 0) break L7; else {
     $$2102 = $$0100;
     $$598 = $$194 + 2 | 0;
     break;
    }
   }
   if (($21 & 255) < 240) {
    if (($$pre - $$194 | 0) < 3) break L7;
    $47 = HEAP8[$$194 + 1 >> 0] | 0;
    $49 = HEAP8[$$194 + 2 >> 0] | 0;
    switch ($21 << 24 >> 24) {
    case -32:
     {
      if (($47 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if (($47 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if (($47 & -64) << 24 >> 24 != -128) break L7;
    }
    $56 = $49 & 255;
    if (($56 & 192 | 0) != 128) break L7;
    if ((($47 & 63) << 6 | $22 << 12 & 61440 | $56 & 63) >>> 0 > $3 >>> 0) break L7; else {
     $$2102 = $$0100;
     $$598 = $$194 + 3 | 0;
     break;
    }
   }
   if (($21 & 255) >= 245) break L7;
   if (($2 - $$0100 | 0) >>> 0 < 2 | ($$pre - $$194 | 0) < 4) break L7;
   $76 = HEAP8[$$194 + 1 >> 0] | 0;
   $78 = HEAP8[$$194 + 2 >> 0] | 0;
   $80 = HEAP8[$$194 + 3 >> 0] | 0;
   switch ($21 << 24 >> 24) {
   case -16:
    {
     if (($76 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if (($76 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if (($76 & -64) << 24 >> 24 != -128) break L7;
   }
   $86 = $78 & 255;
   if (($86 & 192 | 0) != 128) break L7;
   $89 = $80 & 255;
   if (($89 & 192 | 0) != 128) break L7;
   if ((($76 & 63) << 12 | $22 << 18 & 1835008 | $86 << 6 & 4032 | $89 & 63) >>> 0 > $3 >>> 0) break L7; else {
    $$2102 = $$0100 + 1 | 0;
    $$598 = $$194 + 4 | 0;
   }
  } while (0);
  $$0100 = $$2102 + 1 | 0;
  $$194 = $$598;
 }
 return $$194 - $0 | 0;
}

function __ZN3sgl11Application13ProcessEventsEv($0) {
 $0 = $0 | 0;
 var $$031 = 0, $$sroa$025$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$528$0$$sroa_idx = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $38 = 0, $4 = 0, $41 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $1 = sp + 32 | 0;
 $2 = sp;
 $3 = sp + 24 | 0;
 $4 = $0 + 12 | 0;
 $5 = __ZN3sgl10EventQueue7GetNextEv($4) | 0;
 if (!$5) {
  STACKTOP = sp;
  return;
 }
 $7 = $0;
 $8 = $2 + 16 | 0;
 $$sroa$025$0$$sroa_idx = $2 + 4 | 0;
 $$sroa$4$0$$sroa_idx = $2 + 8 | 0;
 $$sroa$528$0$$sroa_idx = $2 + 12 | 0;
 $9 = $0 + 8 | 0;
 $10 = $1 + 4 | 0;
 $11 = $3 + 4 | 0;
 $$031 = $5;
 while (1) {
  HEAP32[$2 >> 2] = 9760;
  HEAP32[$$sroa$025$0$$sroa_idx >> 2] = 26;
  HEAP32[$$sroa$4$0$$sroa_idx >> 2] = 0;
  HEAP32[$$sroa$528$0$$sroa_idx >> 2] = $7;
  HEAP32[$8 >> 2] = $2;
  if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$031 >> 2] | 0) + 8 >> 2] & 127]($$031) | 0)) {
   HEAP32[$1 >> 2] = $$031;
   $18 = HEAP32[$8 >> 2] | 0;
   if (!$18) {
    label = 5;
    break;
   }
   HEAP8[$$031 + 4 >> 0] = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$18 >> 2] | 0) + 24 >> 2] & 31]($18, $1) | 0) & 1;
  }
  $27 = HEAP32[$8 >> 2] | 0;
  if (($2 | 0) == ($27 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$27 >> 2] | 0) + 16 >> 2] & 255]($27); else if ($27 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$27 >> 2] | 0) + 20 >> 2] & 255]($27);
  __ZN3sgl10LayerStack3endEv($1, HEAP32[$9 >> 2] | 0);
  __ZN3sgl10LayerStack5beginEv($3, HEAP32[$9 >> 2] | 0);
  $38 = HEAP32[$10 >> 2] | 0;
  L15 : do if (($38 | 0) != (HEAP32[$11 >> 2] | 0)) {
   $41 = $$031 + 4 | 0;
   $48 = $38;
   do {
    $46 = HEAP32[$1 >> 2] | 0;
    if (($48 | 0) == (HEAP32[$46 >> 2] | 0)) {
     $50 = $46 + -4 | 0;
     HEAP32[$1 >> 2] = $50;
     $52 = (HEAP32[$50 >> 2] | 0) + 4096 | 0;
     HEAP32[$10 >> 2] = $52;
     $54 = $52;
    } else $54 = $48;
    $53 = $54 + -4 | 0;
    HEAP32[$10 >> 2] = $53;
    $55 = HEAP32[$53 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$55 >> 2] | 0) + 20 >> 2] & 127]($55, $$031);
    if (HEAP8[$41 >> 0] | 0) break L15;
    __ZN3sgl10LayerStack5beginEv($3, HEAP32[$9 >> 2] | 0);
    $48 = HEAP32[$10 >> 2] | 0;
   } while (($48 | 0) != (HEAP32[$11 >> 2] | 0));
  } while (0);
  __ZN3sgl10EventQueue3PopEv($4);
  $$031 = __ZN3sgl10EventQueue7GetNextEv($4) | 0;
  if (!$$031) {
   label = 18;
   break;
  }
 }
 if ((label | 0) == 5) {
  $20 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$20 >> 2] = 12364;
  ___cxa_throw($20 | 0, 8032, 141);
 } else if ((label | 0) == 18) {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__2L12init_wmonthsEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[30432] | 0)) if (___cxa_guard_acquire(30432) | 0) {
  $4 = 29536;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 29824);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29536, 13708) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29548, 13740) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29560, 13776) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29572, 13800) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29584, 13824) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29596, 13840) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29608, 13860) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29620, 13880) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29632, 13908) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29644, 13948) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29656, 13980) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29668, 14016) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29680, 14052) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29692, 14068) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29704, 14084) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29716, 14100) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29728, 13824) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29740, 14116) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29752, 14132) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29764, 14148) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29776, 14164) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29788, 14180) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29800, 14196) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29812, 14212) | 0;
 return;
}

function __ZNSt3__2L11init_monthsEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[30352] | 0)) if (___cxa_guard_acquire(30352) | 0) {
  $4 = 28784;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 29072);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28784, 23914) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28796, 23922) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28808, 23931) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28820, 23937) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28832, 23943) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28844, 23947) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28856, 23952) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28868, 23957) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28880, 23964) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28892, 23974) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28904, 23982) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28916, 23991) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28928, 24e3) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28940, 24004) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28952, 24008) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28964, 24012) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28976, 23943) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28988, 24016) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29e3, 24020) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29012, 24024) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29024, 24028) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29036, 24032) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29048, 24036) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29060, 24040) | 0;
 return;
}

function __ZN6spdlog17pattern_formatter6formatERKNS_7details7log_msgERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$i$i$i = 0, $$089$i$i$i = 0, $$sroa$015$027 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $30 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $6 = 0, $70 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 44 | 0;
 $4 = sp;
 $5 = $1 + 8 | 0;
 $6 = $5;
 $12 = ___divdi3(HEAP32[$6 >> 2] | 0, HEAP32[$6 + 4 >> 2] | 0, 1e6, 0) | 0;
 $13 = getTempRet0() | 0;
 $14 = $0 + 80 | 0;
 $15 = $14;
 if (!(($12 | 0) == (HEAP32[$15 >> 2] | 0) ? ($13 | 0) == (HEAP32[$15 + 4 >> 2] | 0) : 0)) {
  if (!(HEAP32[$0 + 28 >> 2] | 0)) {
   HEAP32[$3 >> 2] = __ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE($5) | 0;
   _localtime_r($3 | 0, $4 | 0) | 0;
  } else {
   HEAP32[$3 >> 2] = __ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE($5) | 0;
   _gmtime_r($3 | 0, $4 | 0) | 0;
  }
  dest = $0 + 32 | 0;
  src = $4;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $30 = $14;
  HEAP32[$30 >> 2] = $12;
  HEAP32[$30 + 4 >> 2] = $13;
 }
 $35 = HEAP32[$0 + 88 >> 2] | 0;
 $37 = HEAP32[$0 + 92 >> 2] | 0;
 if (($35 | 0) != ($37 | 0)) {
  $39 = $0 + 32 | 0;
  $$sroa$015$027 = $35;
  do {
   $70 = HEAP32[$$sroa$015$027 >> 2] | 0;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$70 >> 2] | 0) + 8 >> 2] & 63]($70, $1, $39, $2);
   $$sroa$015$027 = $$sroa$015$027 + 4 | 0;
  } while (($$sroa$015$027 | 0) != ($37 | 0));
 }
 $40 = $0 + 16 | 0;
 $42 = HEAP8[$40 + 11 >> 0] | 0;
 $43 = $42 << 24 >> 24 < 0;
 $45 = $43 ? HEAP32[$40 >> 2] | 0 : $40;
 $49 = $43 ? HEAP32[$0 + 20 >> 2] | 0 : $42 & 255;
 if (!$45) {
  STACKTOP = sp;
  return;
 }
 $51 = $45 + $49 | 0;
 $52 = $2 + 8 | 0;
 if (($49 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $55 = (HEAP32[$52 >> 2] | 0) + $49 | 0;
 if ((HEAP32[$2 + 12 >> 2] | 0) >>> 0 < $55 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$2 >> 2] >> 2] & 127]($2, $55);
 if ($49 | 0) {
  $$010$i$i$i = $45;
  $$089$i$i$i = (HEAP32[$2 + 4 >> 2] | 0) + (HEAP32[$52 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($51 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$52 >> 2] = $55;
 STACKTOP = sp;
 return;
}

function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $spec$select = ($3 | 0) == 0 ? 31092 : $3;
 $6 = HEAP32[$spec$select >> 2] | 0;
 L1 : do if (!$1) if (!$6) $$0 = 0; else label = 19; else {
  $spec$select47 = ($0 | 0) == 0 ? $4 : $0;
  if (!$2) $$0 = -2; else {
   if (!$6) {
    $12 = HEAP8[$1 >> 0] | 0;
    if ($12 << 24 >> 24 > -1) {
     HEAP32[$spec$select47 >> 2] = $12 & 255;
     $$0 = $12 << 24 >> 24 != 0 & 1;
     break;
    }
    $21 = (HEAP32[HEAP32[(___pthread_self_431() | 0) + 188 >> 2] >> 2] | 0) == 0;
    $22 = HEAP8[$1 >> 0] | 0;
    if ($21) {
     HEAP32[$spec$select47 >> 2] = $22 << 24 >> 24 & 57343;
     $$0 = 1;
     break;
    }
    $26 = ($22 & 255) + -194 | 0;
    if ($26 >>> 0 > 50) {
     label = 19;
     break;
    }
    $30 = HEAP32[976 + ($26 << 2) >> 2] | 0;
    $31 = $2 + -1 | 0;
    if (!$31) $$2 = $30; else {
     $$03952 = $1 + 1 | 0;
     $$04051 = $30;
     $$04350 = $31;
     label = 11;
    }
   } else {
    $$03952 = $1;
    $$04051 = $6;
    $$04350 = $2;
    label = 11;
   }
   L14 : do if ((label | 0) == 11) {
    $34 = HEAPU8[$$03952 >> 0] | 0;
    $35 = $34 >>> 3;
    if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
     label = 19;
     break L1;
    }
    $43 = $34 + -128 | $$04051 << 6;
    $44 = $$04350 + -1 | 0;
    if (($43 | 0) < 0) {
     $$03952$pn = $$03952;
     $47 = $43;
     $53 = $44;
     while (1) {
      $$03952$pn = $$03952$pn + 1 | 0;
      if (!$53) {
       $$2 = $47;
       break L14;
      }
      $49 = HEAP8[$$03952$pn >> 0] | 0;
      if (($49 & -64) << 24 >> 24 != -128) {
       label = 19;
       break L1;
      }
      $51 = ($49 & 255) + -128 | $47 << 6;
      $52 = $53 + -1 | 0;
      if (($51 | 0) >= 0) {
       $$lcssa = $52;
       $$lcssa56 = $51;
       break;
      } else {
       $47 = $51;
       $53 = $52;
      }
     }
    } else {
     $$lcssa = $44;
     $$lcssa56 = $43;
    }
    HEAP32[$spec$select >> 2] = 0;
    HEAP32[$spec$select47 >> 2] = $$lcssa56;
    $$0 = $2 - $$lcssa | 0;
    break L1;
   } while (0);
   HEAP32[$spec$select >> 2] = $$2;
   $$0 = -2;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[$spec$select >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN3fmt2v514format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS6_EEcEEE15on_format_specsEPKcSG_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$0$0$copyload$i616$i = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $3 = 0, $37 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 28 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 $6 = $0 + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $9 = $1 - $7 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 HEAP32[$6 >> 2] = $7 + $9;
 $13 = $0 + 12 | 0;
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) - $9;
 $16 = $0 + 56 | 0;
 $18 = HEAP32[$0 + 64 >> 2] | 0;
 switch ($18 | 0) {
 case 13:
  {
   $19 = $16;
   FUNCTION_TABLE_vii[HEAP32[$19 + 4 >> 2] & 127](HEAP32[$19 >> 2] | 0, $6);
   $$0 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 1:
  {
   ___assert_fail(17342, 18966, 837, 17377);
   break;
  }
 default:
  {
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 32;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = -1;
   HEAP8[$3 + 16 >> 0] = 0;
   HEAP8[$3 + 17 >> 0] = 0;
   HEAP32[$4 >> 2] = $3;
   HEAP32[$4 + 4 >> 2] = $6;
   HEAP32[$4 + 8 >> 2] = $18;
   $37 = __ZN3fmt2v58internal18parse_format_specsIcRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEEEPKT_SH_SH_OT0_($1, $2, $4) | 0;
   if (($37 | 0) == ($2 | 0)) {
    $41 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($41, 17173);
    ___cxa_throw($41 | 0, 6792, 18);
   }
   if ((HEAP8[$37 >> 0] | 0) != 125) {
    $41 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($41, 17173);
    ___cxa_throw($41 | 0, 6792, 18);
   }
   $42 = HEAP32[$6 >> 2] | 0;
   $44 = $37 - $42 | 0;
   if (($44 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   HEAP32[$6 >> 2] = $42 + $44;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) - $44;
   $$sroa$0$0$copyload$i616$i = HEAP32[$0 + 40 >> 2] | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 + 20 >> 2];
   HEAP32[$5 + 4 >> 2] = $$sroa$0$0$copyload$i616$i;
   HEAP32[$5 + 8 >> 2] = $3;
   HEAP32[$5 + 12 >> 2] = $6;
   HEAP32[$0 + 20 >> 2] = __ZN3fmt2v516visit_format_argINS0_13arg_formatterINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEEENS0_20basic_format_contextINSt3__220back_insert_iteratorIS6_EEcEEEENS4_9result_ofIFT_iEE4typeEOSF_RKNS0_16basic_format_argIT0_EE($5, $16) | 0;
   $$0 = $37;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}

function __ZNSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEEclEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$idx$val = 0, $$idx1$val = 0, $$idx2$val = 0, $1 = 0, $11 = 0.0, $12 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0.0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy = sp + 28 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $$idx$val = HEAP32[$0 + 4 >> 2] | 0;
 $$idx1$val = HEAP32[$0 + 8 >> 2] | 0;
 $$idx2$val = HEAP32[$0 + 12 >> 2] | 0;
 $4 = +_glfwGetTime();
 $6 = (HEAP32[$$idx1$val >> 2] | 0) + 1 | 0;
 HEAP32[$$idx1$val >> 2] = $6;
 if ($4 - +HEAPF64[$$idx2$val >> 3] >= 1.0) {
  $11 = 1.0e3 / +($6 | 0);
  HEAPF64[$2 >> 3] = $11;
  $12 = HEAP32[7738] | 0;
  HEAPF64[$3 >> 3] = 1.0 / $11 * 1.0e3;
  HEAP32[$1 >> 2] = 33137;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 33137;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  __ZN6spdlog6logger3logIJddEEEvNS_10source_locENS_5level10level_enumEPKcDpRKT_($12, $$byval_copy, 0, 15979, $2, $3);
  HEAP32[$$idx1$val >> 2] = 0;
  HEAPF64[$$idx2$val >> 3] = +HEAPF64[$$idx2$val >> 3] + 1.0;
 }
 $19 = $$idx$val + 4 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] & 255]($20);
 __ZN3sgl11Application13ProcessEventsEv($$idx$val);
 $25 = HEAP32[$$idx$val + 8 >> 2] | 0;
 __ZN3sgl10LayerStack5beginEv($$byval_copy, $25);
 __ZN3sgl10LayerStack3endEv($1, $25);
 $26 = $$byval_copy + 4 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = $1 + 4 | 0;
 if (($27 | 0) == (HEAP32[$28 >> 2] | 0)) {
  $49 = HEAP32[$19 >> 2] | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  $51 = $50 + 16 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  FUNCTION_TABLE_vi[$52 & 255]($49);
  STACKTOP = sp;
  return;
 }
 $32 = $27;
 while (1) {
  $31 = HEAP32[$32 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$31 >> 2] | 0) + 16 >> 2] & 255]($31);
  $37 = (HEAP32[$26 >> 2] | 0) + 4 | 0;
  HEAP32[$26 >> 2] = $37;
  $38 = HEAP32[$$byval_copy >> 2] | 0;
  if (($37 - (HEAP32[$38 >> 2] | 0) | 0) == 4096) {
   $43 = $38 + 4 | 0;
   HEAP32[$$byval_copy >> 2] = $43;
   $44 = HEAP32[$43 >> 2] | 0;
   HEAP32[$26 >> 2] = $44;
   $47 = $44;
  } else $47 = $37;
  if (($47 | 0) == (HEAP32[$28 >> 2] | 0)) break; else $32 = $47;
 }
 $49 = HEAP32[$19 >> 2] | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 $51 = $50 + 16 | 0;
 $52 = HEAP32[$51 >> 2] | 0;
 FUNCTION_TABLE_vi[$52 & 255]($49);
 STACKTOP = sp;
 return;
}

function __ZNSt3__28ios_base4InitC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $22 = 0, $35 = 0, $38 = 0, $4 = 0, $42 = 0, $45 = 0, $7 = 0;
 $1 = HEAP32[2927] | 0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(32320, $1, 32376);
 HEAP32[7910] = 12532;
 HEAP32[7912] = 12552;
 HEAP32[7911] = 0;
 __ZNSt3__28ios_base4initEPv(31648, 32320);
 HEAP32[7930] = 0;
 HEAP32[7931] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(32384, $1, 32440);
 HEAP32[7932] = 12580;
 HEAP32[7934] = 12600;
 HEAP32[7933] = 0;
 __ZNSt3__28ios_base4initEPv(31736, 32384);
 HEAP32[7952] = 0;
 HEAP32[7953] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $4 = HEAP32[2959] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(32448, $4, 32496);
 HEAP32[7954] = 6284;
 HEAP32[7955] = 6304;
 __ZNSt3__28ios_base4initEPv(31820, 32448);
 HEAP32[7973] = 0;
 HEAP32[7974] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(32504, $4, 32552);
 HEAP32[7975] = 12636;
 HEAP32[7976] = 12656;
 __ZNSt3__28ios_base4initEPv(31904, 32504);
 HEAP32[7994] = 0;
 HEAP32[7995] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $7 = HEAP32[2895] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(32560, $7, 32608);
 HEAP32[7996] = 6284;
 HEAP32[7997] = 6304;
 __ZNSt3__28ios_base4initEPv(31988, 32560);
 HEAP32[8015] = 0;
 HEAP32[8016] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $14 = HEAP32[31984 + (HEAP32[(HEAP32[7996] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[8038] = 6284;
 HEAP32[8039] = 6304;
 __ZNSt3__28ios_base4initEPv(32156, $14);
 HEAP32[8057] = 0;
 HEAP32[8058] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(32616, $7, 32664);
 HEAP32[8017] = 12636;
 HEAP32[8018] = 12656;
 __ZNSt3__28ios_base4initEPv(32072, 32616);
 HEAP32[8036] = 0;
 HEAP32[8037] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $22 = HEAP32[32068 + (HEAP32[(HEAP32[8017] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[8059] = 12636;
 HEAP32[8060] = 12656;
 __ZNSt3__28ios_base4initEPv(32240, $22);
 HEAP32[8078] = 0;
 HEAP32[8079] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[31640 + (HEAP32[(HEAP32[7910] | 0) + -12 >> 2] | 0) + 72 >> 2] = 31816;
 HEAP32[31728 + (HEAP32[(HEAP32[7932] | 0) + -12 >> 2] | 0) + 72 >> 2] = 31900;
 $35 = (HEAP32[7996] | 0) + -12 | 0;
 $38 = 31984 + (HEAP32[$35 >> 2] | 0) + 4 | 0;
 HEAP32[$38 >> 2] = HEAP32[$38 >> 2] | 8192;
 $42 = (HEAP32[8017] | 0) + -12 | 0;
 $45 = 32068 + (HEAP32[$42 >> 2] | 0) + 4 | 0;
 HEAP32[$45 >> 2] = HEAP32[$45 >> 2] | 8192;
 HEAP32[31984 + (HEAP32[$35 >> 2] | 0) + 72 >> 2] = 31816;
 HEAP32[32068 + (HEAP32[$42 >> 2] | 0) + 72 >> 2] = 31900;
 return;
}

function __ZNK3sgl9DropEvent8ToStringEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sroa$018$024 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $26 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $2 = sp + 144 | 0;
 $3 = sp;
 $4 = $3 + 64 | 0;
 $5 = $3 + 8 | 0;
 HEAP32[$5 >> 2] = 10884;
 $6 = $3 + 12 | 0;
 HEAP32[$3 >> 2] = 7604;
 HEAP32[$4 >> 2] = 7624;
 HEAP32[$3 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv($3 + 64 | 0, $6);
 HEAP32[$3 + 136 >> 2] = 0;
 HEAP32[$3 + 140 >> 2] = -1;
 HEAP32[$3 >> 2] = 10864;
 HEAP32[$4 >> 2] = 10904;
 HEAP32[$5 >> 2] = 10884;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($6);
 HEAP32[$6 >> 2] = 10960;
 $11 = $3 + 44 | 0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$11 + 4 >> 2] = 0;
 HEAP32[$11 + 8 >> 2] = 0;
 HEAP32[$11 + 12 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 24;
 $13 = $3 + 8 | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($13, 22187, 14) | 0;
 $15 = HEAP32[$1 + 8 >> 2] | 0;
 $17 = HEAP32[$1 + 12 >> 2] | 0;
 if (($15 | 0) != ($17 | 0)) {
  $$sroa$018$024 = $15;
  do {
   __ZNKSt3__28ios_base6getlocEv($2, $13 + (HEAP32[(HEAP32[$13 >> 2] | 0) + -12 >> 2] | 0) | 0);
   $26 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 32688) | 0;
   $30 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$26 >> 2] | 0) + 28 >> 2] & 31]($26, 10) | 0;
   __ZNSt3__26localeD2Ev($2);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($13, $30) | 0;
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($13) | 0;
   $32 = HEAP8[$$sroa$018$024 + 11 >> 0] | 0;
   $33 = $32 << 24 >> 24 < 0;
   __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($13, $33 ? HEAP32[$$sroa$018$024 >> 2] | 0 : $$sroa$018$024, $33 ? HEAP32[$$sroa$018$024 + 4 >> 2] | 0 : $32 & 255) | 0;
   $$sroa$018$024 = $$sroa$018$024 + 12 | 0;
  } while (($$sroa$018$024 | 0) != ($17 | 0));
 }
 __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $6);
 HEAP32[$3 >> 2] = 10864;
 HEAP32[$4 >> 2] = 10904;
 HEAP32[$13 >> 2] = 10884;
 HEAP32[$6 >> 2] = 10960;
 if ((HEAP8[$11 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($6);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 10916);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($4);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$11 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($6);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN6spdlog6loggerEE11make_sharedIJRPKcNS0_INS1_5sinks14ansicolor_sinkINS1_7details14console_stdoutENSA_13console_mutexEEEEEEEES3_DpOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$016$i$i$i$i$i = 0, $$017$i$i$i$i$i = 0, $10 = 0, $14 = 0, $15 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $40 = 0, $5 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = __Znwm(88) | 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 >> 2] = 9892;
 $8 = $5 + 16 | 0;
 $9 = HEAP32[$1 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $10 = _strlen($9) | 0;
 if ($10 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($3);
 if ($10 >>> 0 < 11) {
  HEAP8[$3 + 11 >> 0] = $10;
  if (!$10) $$017$i$i$i$i$i = $3; else {
   $$016$i$i$i$i$i = $3;
   label = 6;
  }
 } else {
  $14 = $10 + 16 & -16;
  $15 = __Znwm($14) | 0;
  HEAP32[$3 >> 2] = $15;
  HEAP32[$3 + 8 >> 2] = $14 | -2147483648;
  HEAP32[$3 + 4 >> 2] = $10;
  $$016$i$i$i$i$i = $15;
  label = 6;
 }
 if ((label | 0) == 6) {
  _memcpy($$016$i$i$i$i$i | 0, $9 | 0, $10 | 0) | 0;
  $$017$i$i$i$i$i = $$016$i$i$i$i$i;
 }
 HEAP8[$$017$i$i$i$i$i + $10 >> 0] = 0;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 $24 = $4 + 4 | 0;
 $25 = $2 + 4 | 0;
 HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$2 >> 2] = 0;
 HEAP32[$25 >> 2] = 0;
 __ZN6spdlog6loggerC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS_5sinks4sinkEEE($8, $3, $4);
 $27 = HEAP32[$24 >> 2] | 0;
 if ($27 | 0) {
  $29 = $27 + 4 | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  HEAP32[$29 >> 2] = $30 + -1;
  if (!$30) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$27 >> 2] | 0) + 8 >> 2] & 255]($27);
   __ZNSt3__219__shared_weak_count14__release_weakEv($27);
  }
 }
 if ((HEAP8[$3 + 11 >> 0] | 0) >= 0) {
  $40 = $0 + 4 | 0;
  HEAP32[$0 >> 2] = $8;
  HEAP32[$40 >> 2] = $5;
  HEAP32[$vararg_buffer >> 2] = $8;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = $8;
  __ZNSt3__210shared_ptrIN6spdlog6loggerEE18__enable_weak_thisEz($0, $vararg_buffer);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$3 >> 2] | 0);
 $40 = $0 + 4 | 0;
 HEAP32[$0 >> 2] = $8;
 HEAP32[$40 >> 2] = $5;
 HEAP32[$vararg_buffer >> 2] = $8;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = $8;
 __ZNSt3__210shared_ptrIN6spdlog6loggerEE18__enable_weak_thisEz($0, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __ZZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_EN6writerclEPKcSO_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0923 = 0, $$sroa$0$0$copyload$i$i = 0, $$sroa$0$0$copyload$i$i10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $52 = 0, $54 = 0, $6 = 0, $8 = 0, $9 = 0, label = 0;
 if (($1 | 0) == ($2 | 0)) return;
 $4 = $2;
 $5 = $1;
 $6 = $4 - $5 | 0;
 if (($6 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $$0923 = $1;
 $34 = $5;
 $8 = $6;
 while (1) {
  $9 = _memchr($$0923, 125, $8) | 0;
  if (!$9) {
   label = 6;
   break;
  }
  $26 = $9 + 1 | 0;
  if (($26 | 0) == ($2 | 0)) {
   label = 12;
   break;
  }
  if ((HEAP8[$26 >> 0] | 0) != 125) {
   label = 12;
   break;
  }
  $31 = HEAP32[$0 >> 2] | 0;
  $33 = $26 - $34 | 0;
  if (($33 | 0) <= -1) {
   label = 14;
   break;
  }
  $$sroa$0$0$copyload$i$i10 = HEAP32[$31 + 20 >> 2] | 0;
  $38 = $$sroa$0$0$copyload$i$i10 + 8 | 0;
  $39 = HEAP32[$38 >> 2] | 0;
  $40 = $39 + $33 | 0;
  if ((HEAP32[$$sroa$0$0$copyload$i$i10 + 12 >> 2] | 0) >>> 0 < $40 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$$sroa$0$0$copyload$i$i10 >> 2] >> 2] & 127]($$sroa$0$0$copyload$i$i10, $40);
  HEAP32[$38 >> 2] = $40;
  if ($33 | 0) _memmove((HEAP32[$$sroa$0$0$copyload$i$i10 + 4 >> 2] | 0) + $39 | 0, $$0923 | 0, $33 | 0) | 0;
  HEAP32[$31 + 20 >> 2] = $$sroa$0$0$copyload$i$i10;
  $52 = $9 + 2 | 0;
  $34 = $52;
  $54 = $4 - $34 | 0;
  if (($54 | 0) <= -1) {
   label = 4;
   break;
  } else {
   $$0923 = $52;
   $8 = $54;
  }
 }
 if ((label | 0) == 4) ___assert_fail(18933, 18966, 209, 19012); else if ((label | 0) == 6) {
  $11 = HEAP32[$0 >> 2] | 0;
  $$sroa$0$0$copyload$i$i = HEAP32[$11 + 20 >> 2] | 0;
  $14 = $$sroa$0$0$copyload$i$i + 8 | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  $16 = $15 + $8 | 0;
  if ((HEAP32[$$sroa$0$0$copyload$i$i + 12 >> 2] | 0) >>> 0 < $16 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$$sroa$0$0$copyload$i$i >> 2] >> 2] & 127]($$sroa$0$0$copyload$i$i, $16);
  HEAP32[$14 >> 2] = $16;
  if ($8 | 0) _memmove((HEAP32[$$sroa$0$0$copyload$i$i + 4 >> 2] | 0) + $15 | 0, $$0923 | 0, $8 | 0) | 0;
  HEAP32[$11 + 20 >> 2] = $$sroa$0$0$copyload$i$i;
  return;
 } else if ((label | 0) == 12) {
  $30 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($30, 17202);
  ___cxa_throw($30 | 0, 6792, 18);
 } else if ((label | 0) == 14) ___assert_fail(18933, 18966, 209, 19012);
}

function __ZN6spdlog6loggerC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS_5sinks4sinkEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sroa$05$0$copyload = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx6$i = 0, $$sroa$5$i = 0, $$sroa$6$0$copyload = 0, $12 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$sroa$5$i = sp + 16 | 0;
 $$sroa$5 = sp;
 $3 = sp + 8 | 0;
 $$sroa$05$0$copyload = HEAP32[$1 >> 2] | 0;
 $$sroa$5$0$$sroa_idx = $1 + 4 | 0;
 HEAP32[$$sroa$5 >> 2] = HEAP32[$$sroa$5$0$$sroa_idx >> 2];
 HEAP16[$$sroa$5 + 4 >> 1] = HEAP16[$$sroa$5$0$$sroa_idx + 4 >> 1] | 0;
 HEAP8[$$sroa$5 + 6 >> 0] = HEAP8[$$sroa$5$0$$sroa_idx + 6 >> 0] | 0;
 $$sroa$6$0$copyload = HEAP8[$1 + 11 >> 0] | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 $6 = $2 + 4 | 0;
 HEAP32[$3 + 4 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$2 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$$sroa$5$i >> 2] = HEAP32[$$sroa$5 >> 2];
 HEAP16[$$sroa$5$i + 4 >> 1] = HEAP16[$$sroa$5 + 4 >> 1] | 0;
 HEAP8[$$sroa$5$i + 6 >> 0] = HEAP8[$$sroa$5 + 6 >> 0] | 0;
 HEAP32[$$sroa$5 >> 2] = 0;
 HEAP16[$$sroa$5 + 4 >> 1] = 0;
 HEAP8[$$sroa$5 + 6 >> 0] = 0;
 HEAP32[$0 >> 2] = 9920;
 HEAP32[$0 + 4 >> 2] = $$sroa$05$0$copyload;
 $$sroa$5$0$$sroa_idx6$i = $0 + 8 | 0;
 HEAP32[$$sroa$5$0$$sroa_idx6$i >> 2] = HEAP32[$$sroa$5$i >> 2];
 HEAP16[$$sroa$5$0$$sroa_idx6$i + 4 >> 1] = HEAP16[$$sroa$5$i + 4 >> 1] | 0;
 HEAP8[$$sroa$5$0$$sroa_idx6$i + 6 >> 0] = HEAP8[$$sroa$5$i + 6 >> 0] | 0;
 HEAP8[$0 + 15 >> 0] = $$sroa$6$0$copyload;
 HEAP32[$$sroa$5$i >> 2] = 0;
 HEAP16[$$sroa$5$i + 4 >> 1] = 0;
 HEAP8[$$sroa$5$i + 6 >> 0] = 0;
 __ZNSt3__26vectorINS_10shared_ptrIN6spdlog5sinks4sinkEEENS_9allocatorIS5_EEEC2IPKS5_EET_NS_9enable_ifIXaasr21__is_forward_iteratorISC_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueESC_E4typeE($0 + 16 | 0, $3, $3 + 8 | 0);
 HEAP32[$0 + 28 >> 2] = 2;
 HEAP32[$0 + 32 >> 2] = 6;
 $12 = $0 + 40 | 0;
 HEAP32[$12 >> 2] = 9948;
 HEAP32[$0 + 44 >> 2] = $0;
 HEAP32[$0 + 56 >> 2] = $12;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 1;
 $19 = HEAP32[$3 + 4 >> 2] | 0;
 if (!$19) {
  STACKTOP = sp;
  return;
 }
 $21 = $19 + 4 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = $22 + -1;
 if ($22 | 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$19 >> 2] | 0) + 8 >> 2] & 255]($19);
 __ZNSt3__219__shared_weak_count14__release_weakEv($19);
 STACKTOP = sp;
 return;
}

function _wcsnrtombs($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$04773 = 0, $$05172 = 0, $$054 = 0, $$148 = 0, $$152 = 0, $$15571 = 0, $$162 = 0, $$174 = 0, $$2 = 0, $$24968 = 0, $$25367 = 0, $$256 = 0, $$350 = 0, $$357 = 0, $$369 = 0, $$466 = 0, $$cast = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $24 = 0, $30 = 0, $31 = 0, $40 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $5 = sp;
 $6 = sp + 256 | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP32[$6 >> 2] = $7;
 $8 = ($0 | 0) != 0;
 $$054 = $8 ? $3 : 256;
 $$0 = $8 ? $0 : $5;
 $$cast = $7;
 L1 : do if (($$054 | 0) != 0 & ($7 | 0) != 0) {
  $$04773 = 0;
  $$05172 = $2;
  $$15571 = $$054;
  $$174 = $$0;
  $45 = $$cast;
  while (1) {
   $11 = $$05172 >>> 0 >= $$15571 >>> 0;
   if (!($11 | $$05172 >>> 0 > 32)) {
    $$148 = $$04773;
    $$152 = $$05172;
    $$162 = $$174;
    $$357 = $$15571;
    $24 = $45;
    break L1;
   }
   $spec$select = $11 ? $$15571 : $$05172;
   $14 = $$05172 - $spec$select | 0;
   $15 = _wcsrtombs($$174, $6, $spec$select, 0) | 0;
   if (($15 | 0) == -1) break;
   $17 = ($$174 | 0) == ($5 | 0);
   $$256 = $$15571 - ($17 ? 0 : $15) | 0;
   $$2 = $17 ? $$174 : $$174 + $15 | 0;
   $20 = $15 + $$04773 | 0;
   $21 = HEAP32[$6 >> 2] | 0;
   if (($$256 | 0) != 0 & ($21 | 0) != 0) {
    $$04773 = $20;
    $$05172 = $14;
    $$15571 = $$256;
    $$174 = $$2;
    $45 = $21;
   } else {
    $$148 = $20;
    $$152 = $14;
    $$162 = $$2;
    $$357 = $$256;
    $24 = $21;
    break L1;
   }
  }
  $$148 = -1;
  $$152 = $14;
  $$162 = $$174;
  $$357 = 0;
  $24 = HEAP32[$6 >> 2] | 0;
 } else {
  $$148 = 0;
  $$152 = $2;
  $$162 = $$0;
  $$357 = $$054;
  $24 = $$cast;
 } while (0);
 L9 : do if (!$24) $$350 = $$148; else if (($$357 | 0) != 0 & ($$152 | 0) != 0) {
  $$24968 = $$148;
  $$25367 = $$152;
  $$369 = $$162;
  $$466 = $$357;
  $30 = $24;
  while (1) {
   $31 = _wcrtomb($$369, HEAP32[$30 >> 2] | 0, 0) | 0;
   if (($31 + 1 | 0) >>> 0 < 2) break;
   $30 = (HEAP32[$6 >> 2] | 0) + 4 | 0;
   HEAP32[$6 >> 2] = $30;
   $$25367 = $$25367 + -1 | 0;
   $$466 = $$466 - $31 | 0;
   $40 = $31 + $$24968 | 0;
   if (!(($$466 | 0) != 0 & ($$25367 | 0) != 0)) {
    $$350 = $40;
    break L9;
   } else {
    $$24968 = $40;
    $$369 = $$369 + $31 | 0;
   }
  }
  if (!$31) {
   HEAP32[$6 >> 2] = 0;
   $$350 = $$24968;
  } else $$350 = -1;
 } else $$350 = $$148; while (0);
 if ($8) HEAP32[$1 >> 2] = HEAP32[$6 >> 2];
 STACKTOP = sp;
 return $$350 | 0;
}

function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$2 = 0, $$pre49 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $32 = 0, $43 = 0, $46 = 0, $48 = 0, $58 = 0, $63 = 0, $74 = 0, $80 = 0, $85 = 0, $88 = 0, label = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 $$pre49 = $4;
 if (!($7 & 2)) label = 4; else if (($$pre49 - $3 | 0) < 3) $$2 = 1; else {
  HEAP32[$5 >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = -17;
  $14 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $14 + 1;
  HEAP8[$14 >> 0] = -69;
  $16 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $16 + 1;
  HEAP8[$16 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $18 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if ($18 >>> 0 >= $1 >>> 0) {
    $$2 = 0;
    break L4;
   }
   $20 = HEAP32[$18 >> 2] | 0;
   if ($20 >>> 0 > $6 >>> 0 | ($20 & -2048 | 0) == 55296) {
    $$2 = 2;
    break L4;
   }
   do if ($20 >>> 0 < 128) {
    $25 = HEAP32[$5 >> 2] | 0;
    if (($$pre49 - $25 | 0) < 1) {
     $$2 = 1;
     break L4;
    }
    HEAP32[$5 >> 2] = $25 + 1;
    HEAP8[$25 >> 0] = $20;
   } else {
    if ($20 >>> 0 < 2048) {
     $32 = HEAP32[$5 >> 2] | 0;
     if (($$pre49 - $32 | 0) < 2) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $32 + 1;
     HEAP8[$32 >> 0] = $20 >>> 6 | 192;
     $43 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $43 + 1;
     HEAP8[$43 >> 0] = $20 & 63 | 128;
     break;
    }
    $46 = HEAP32[$5 >> 2] | 0;
    $48 = $$pre49 - $46 | 0;
    if ($20 >>> 0 < 65536) {
     if (($48 | 0) < 3) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $46 + 1;
     HEAP8[$46 >> 0] = $20 >>> 12 | 224;
     $58 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $58 + 1;
     HEAP8[$58 >> 0] = $20 >>> 6 & 63 | 128;
     $63 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $63 + 1;
     HEAP8[$63 >> 0] = $20 & 63 | 128;
     break;
    } else {
     if (($48 | 0) < 4) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $46 + 1;
     HEAP8[$46 >> 0] = $20 >>> 18 | 240;
     $74 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $74 + 1;
     HEAP8[$74 >> 0] = $20 >>> 12 & 63 | 128;
     $80 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $80 + 1;
     HEAP8[$80 >> 0] = $20 >>> 6 & 63 | 128;
     $85 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $85 + 1;
     HEAP8[$85 >> 0] = $20 & 63 | 128;
     break;
    }
   } while (0);
   $88 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
   HEAP32[$2 >> 2] = $88;
   $18 = $88;
  }
 } while (0);
 return $$2 | 0;
}

function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$091 = 0, $$185 = 0, $$185$ph = 0, $$589 = 0, $$pre = 0, $21 = 0, $22 = 0, $33 = 0, $47 = 0, $49 = 0, $56 = 0, $74 = 0, $76 = 0, $78 = 0, $84 = 0, $87 = 0;
 $$pre = $1;
 if (!($4 & 4)) $$185$ph = $0; else if (($$pre - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == -17) if ((HEAP8[$0 + 1 >> 0] | 0) == -69) $$185$ph = (HEAP8[$0 + 2 >> 0] | 0) == -65 ? $0 + 3 | 0 : $0; else $$185$ph = $0; else $$185$ph = $0; else $$185$ph = $0;
 $$091 = 0;
 $$185 = $$185$ph;
 L7 : while (1) {
  if (!($$091 >>> 0 < $2 >>> 0 & $$185 >>> 0 < $1 >>> 0)) break;
  $21 = HEAP8[$$185 >> 0] | 0;
  $22 = $21 & 255;
  do if ($21 << 24 >> 24 > -1) {
   if ($22 >>> 0 > $3 >>> 0) break L7;
   $$589 = $$185 + 1 | 0;
  } else {
   if (($21 & 255) < 194) break L7;
   if (($21 & 255) < 224) {
    if (($$pre - $$185 | 0) < 2) break L7;
    $33 = HEAPU8[$$185 + 1 >> 0] | 0;
    if (($33 & 192 | 0) != 128) break L7;
    if (($33 & 63 | $22 << 6 & 1984) >>> 0 > $3 >>> 0) break L7;
    $$589 = $$185 + 2 | 0;
    break;
   }
   if (($21 & 255) < 240) {
    if (($$pre - $$185 | 0) < 3) break L7;
    $47 = HEAP8[$$185 + 1 >> 0] | 0;
    $49 = HEAP8[$$185 + 2 >> 0] | 0;
    switch ($21 << 24 >> 24) {
    case -32:
     {
      if (($47 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if (($47 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if (($47 & -64) << 24 >> 24 != -128) break L7;
    }
    $56 = $49 & 255;
    if (($56 & 192 | 0) != 128) break L7;
    if ((($47 & 63) << 6 | $22 << 12 & 61440 | $56 & 63) >>> 0 > $3 >>> 0) break L7; else {
     $$589 = $$185 + 3 | 0;
     break;
    }
   }
   if (($21 & 255) >= 245) break L7;
   if (($$pre - $$185 | 0) < 4) break L7;
   $74 = HEAP8[$$185 + 1 >> 0] | 0;
   $76 = HEAP8[$$185 + 2 >> 0] | 0;
   $78 = HEAP8[$$185 + 3 >> 0] | 0;
   switch ($21 << 24 >> 24) {
   case -16:
    {
     if (($74 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if (($74 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if (($74 & -64) << 24 >> 24 != -128) break L7;
   }
   $84 = $76 & 255;
   if (($84 & 192 | 0) != 128) break L7;
   $87 = $78 & 255;
   if (($87 & 192 | 0) != 128) break L7;
   if ((($74 & 63) << 12 | $22 << 18 & 1835008 | $84 << 6 & 4032 | $87 & 63) >>> 0 > $3 >>> 0) break L7; else $$589 = $$185 + 4 | 0;
  } while (0);
  $$091 = $$091 + 1 | 0;
  $$185 = $$589;
 }
 return $$185 - $0 | 0;
}

function __ZN3fmt2v55printIA34_cJA100_cNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_EEENS4_9enable_ifIXsr8internal9is_stringIT_EE5valueEvE4typeEP8_IO_FILERKSC_DpRKT0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $33 = 0, $35 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast1$i$i$i$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(640);
 $tmpcast1$i$i$i$byval_copy = sp + 624 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 104 | 0;
 $8 = sp;
 $9 = _strlen($1) | 0;
 HEAP32[$8 >> 2] = $2;
 $11 = $8 + 8 | 0;
 $13 = HEAP8[$3 + 11 >> 0] | 0;
 $14 = $13 << 24 >> 24 < 0;
 $21 = $14 ? HEAP32[$3 + 4 >> 2] | 0 : $13 & 255;
 HEAP32[$11 >> 2] = $14 ? HEAP32[$3 >> 2] | 0 : $3;
 HEAP32[$11 + 4 >> 2] = $21;
 $23 = $8 + 16 | 0;
 $25 = HEAP8[$4 + 11 >> 0] | 0;
 $26 = $25 << 24 >> 24 < 0;
 $33 = $26 ? HEAP32[$4 + 4 >> 2] | 0 : $25 & 255;
 HEAP32[$23 >> 2] = $26 ? HEAP32[$4 >> 2] | 0 : $4;
 HEAP32[$23 + 4 >> 2] = $33;
 $35 = 30016;
 $37 = HEAP32[$35 >> 2] | 0;
 $40 = HEAP32[$35 + 4 >> 2] | 0;
 $41 = $1;
 $42 = $7 + 4 | 0;
 $43 = $7 + 8 | 0;
 HEAP32[$43 >> 2] = 0;
 HEAP32[$7 >> 2] = 9804;
 $45 = $7 + 16 | 0;
 HEAP32[$42 >> 2] = $45;
 HEAP32[$7 + 12 >> 2] = 500;
 HEAP32[$5 + 8 >> 2] = $41;
 HEAP32[$5 + 12 >> 2] = $9;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = $7;
 $49 = $5 + 24 | 0;
 HEAP32[$49 >> 2] = $37;
 HEAP32[$49 + 4 >> 2] = $40;
 HEAP32[$5 + 32 >> 2] = $8;
 HEAP32[$5 + 40 >> 2] = 0;
 $54 = $5 + 44 | 0;
 HEAP32[$54 >> 2] = 0;
 HEAP32[$5 + 48 >> 2] = 0;
 HEAP32[$5 + 56 >> 2] = 0;
 HEAP32[$5 + 64 >> 2] = 0;
 HEAP32[$6 >> 2] = $41;
 HEAP32[$6 + 4 >> 2] = $9;
 HEAP32[$tmpcast1$i$i$i$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$tmpcast1$i$i$i$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 __ZN3fmt2v58internal19parse_format_stringILb0EcRNS0_14format_handlerINS0_13arg_formatterINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEEcNS0_20basic_format_contextINSt3__220back_insert_iteratorIS7_EEcEEEEEEvNS0_17basic_string_viewIT0_EEOT1_($tmpcast1$i$i$i$byval_copy, $5);
 $58 = HEAP32[$54 >> 2] | 0;
 if ($58 | 0) __ZdaPv($58);
 _fwrite(HEAP32[$42 >> 2] | 0, 1, HEAP32[$43 >> 2] | 0, $0) | 0;
 HEAP32[$7 >> 2] = 9804;
 $62 = HEAP32[$42 >> 2] | 0;
 if (($62 | 0) == ($45 | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv($62);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$09$0 = 0, $12 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $5 = sp;
 if (!(HEAP32[$2 + 4 >> 2] & 1)) {
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2];
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$12 & 31]($0, $$byval_copy, $2, $3, $4 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
  $16 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32728) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  $17 = HEAP32[$16 >> 2] | 0;
  if ($4) FUNCTION_TABLE_vii[HEAP32[$17 + 24 >> 2] & 127]($$byval_copy, $16); else FUNCTION_TABLE_vii[HEAP32[$17 + 28 >> 2] & 127]($$byval_copy, $16);
  $23 = $$byval_copy + 8 + 3 | 0;
  $24 = HEAP8[$23 >> 0] | 0;
  $26 = HEAP32[$$byval_copy >> 2] | 0;
  $28 = $$byval_copy + 4 | 0;
  $$sroa$09$0 = $24 << 24 >> 24 < 0 ? $26 : $$byval_copy;
  $29 = $24;
  $33 = $26;
  while (1) {
   $30 = $29 << 24 >> 24 < 0;
   if (($$sroa$09$0 | 0) == (($30 ? $33 : $$byval_copy) + (($30 ? HEAP32[$28 >> 2] | 0 : $29 & 255) << 2) | 0)) break;
   $38 = HEAP32[$$sroa$09$0 >> 2] | 0;
   $39 = HEAP32[$1 >> 2] | 0;
   if ($39 | 0) {
    $41 = $39 + 24 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    if (($42 | 0) == (HEAP32[$39 + 28 >> 2] | 0)) {
     $48 = HEAP32[(HEAP32[$39 >> 2] | 0) + 52 >> 2] | 0;
     $49 = __ZNSt3__211char_traitsIwE11to_int_typeEw($38) | 0;
     $$0$i$i = FUNCTION_TABLE_iii[$48 & 31]($39, $49) | 0;
    } else {
     HEAP32[$41 >> 2] = $42 + 4;
     HEAP32[$42 >> 2] = $38;
     $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($38) | 0;
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) HEAP32[$1 >> 2] = 0;
   }
   $$sroa$09$0 = $$sroa$09$0 + 4 | 0;
   $29 = HEAP8[$23 >> 0] | 0;
   $33 = HEAP32[$$byval_copy >> 2] | 0;
  }
  $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
  $$sroa$0$0 = $$sroa$0$0$copyload;
 }
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$09$0 = 0, $12 = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $47 = 0, $48 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $5 = sp;
 if (!(HEAP32[$2 + 4 >> 2] & 1)) {
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2];
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$12 & 31]($0, $$byval_copy, $2, $3, $4 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
  $16 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32704) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  $17 = HEAP32[$16 >> 2] | 0;
  if ($4) FUNCTION_TABLE_vii[HEAP32[$17 + 24 >> 2] & 127]($$byval_copy, $16); else FUNCTION_TABLE_vii[HEAP32[$17 + 28 >> 2] & 127]($$byval_copy, $16);
  $22 = $$byval_copy + 11 | 0;
  $23 = HEAP8[$22 >> 0] | 0;
  $25 = HEAP32[$$byval_copy >> 2] | 0;
  $27 = $$byval_copy + 4 | 0;
  $$sroa$09$0 = $23 << 24 >> 24 < 0 ? $25 : $$byval_copy;
  $28 = $23;
  $32 = $25;
  while (1) {
   $29 = $28 << 24 >> 24 < 0;
   if (($$sroa$09$0 | 0) == (($29 ? $32 : $$byval_copy) + ($29 ? HEAP32[$27 >> 2] | 0 : $28 & 255) | 0)) break;
   $37 = HEAP8[$$sroa$09$0 >> 0] | 0;
   $38 = HEAP32[$1 >> 2] | 0;
   if ($38 | 0) {
    $40 = $38 + 24 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    if (($41 | 0) == (HEAP32[$38 + 28 >> 2] | 0)) {
     $47 = HEAP32[(HEAP32[$38 >> 2] | 0) + 52 >> 2] | 0;
     $48 = __ZNSt3__211char_traitsIcE11to_int_typeEc($37) | 0;
     $$0$i$i = FUNCTION_TABLE_iii[$47 & 31]($38, $48) | 0;
    } else {
     HEAP32[$40 >> 2] = $41 + 1;
     HEAP8[$41 >> 0] = $37;
     $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($37) | 0;
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[$1 >> 2] = 0;
   }
   $$sroa$09$0 = $$sroa$09$0 + 1 | 0;
   $28 = HEAP8[$22 >> 0] | 0;
   $32 = HEAP32[$$byval_copy >> 2] | 0;
  }
  $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
  $$sroa$0$0 = $$sroa$0$0$copyload;
 }
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $39 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255;
 $7 = ($2 | 0) != 0;
 L1 : do if ($7 & ($0 & 3 | 0) != 0) {
  $8 = $1 & 255;
  $$03555 = $0;
  $$03654 = $2;
  while (1) {
   if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
    $$035$lcssa65 = $$03555;
    $$036$lcssa64 = $$03654;
    label = 6;
    break L1;
   }
   $11 = $$03555 + 1 | 0;
   $12 = $$03654 + -1 | 0;
   $16 = ($12 | 0) != 0;
   if ($16 & ($11 & 3 | 0) != 0) {
    $$03555 = $11;
    $$03654 = $12;
   } else {
    $$035$lcssa = $11;
    $$036$lcssa = $12;
    $$lcssa = $16;
    label = 5;
    break;
   }
  }
 } else {
  $$035$lcssa = $0;
  $$036$lcssa = $2;
  $$lcssa = $7;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$035$lcssa65 = $$035$lcssa;
  $$036$lcssa64 = $$036$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $18 = $1 & 255;
  if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) if (!$$036$lcssa64) {
   label = 16;
   break;
  } else {
   $39 = $$035$lcssa65;
   break;
  }
  $20 = Math_imul($3, 16843009) | 0;
  L13 : do if ($$036$lcssa64 >>> 0 > 3) {
   $$046 = $$035$lcssa65;
   $$13745 = $$036$lcssa64;
   while (1) {
    $23 = HEAP32[$$046 >> 2] ^ $20;
    if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
     $$137$lcssa66 = $$13745;
     $$in = $$046;
     break L13;
    }
    $29 = $$046 + 4 | 0;
    $30 = $$13745 + -4 | 0;
    if ($30 >>> 0 > 3) {
     $$046 = $29;
     $$13745 = $30;
    } else {
     $$0$lcssa = $29;
     $$137$lcssa = $30;
     label = 11;
     break;
    }
   }
  } else {
   $$0$lcssa = $$035$lcssa65;
   $$137$lcssa = $$036$lcssa64;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$$137$lcssa) {
   label = 16;
   break;
  } else {
   $$137$lcssa66 = $$137$lcssa;
   $$in = $$0$lcssa;
  }
  $$140 = $$in;
  $$23839 = $$137$lcssa66;
  while (1) {
   if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
    $39 = $$140;
    break L8;
   }
   $$23839 = $$23839 + -1 | 0;
   if (!$$23839) {
    label = 16;
    break;
   } else $$140 = $$140 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $39 = 0;
 return $39 | 0;
}

function __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$021$i$i = 0, $$021$i$i1 = 0, $$023$i$i = 0, $$023$i$i3 = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i$i7 = 0, $$122$i$i = 0, $$122$i$i4 = 0, $12 = 0, $14 = 0, $16 = 0, $22 = 0, $23 = 0, $3 = 0, $35 = 0, $37 = 0, $40 = 0, $46 = 0, $47 = 0, $6 = 0, $7 = 0, $9 = 0;
 $3 = HEAP32[$1 + 48 >> 2] | 0;
 if ($3 & 16 | 0) {
  $6 = $1 + 44 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $9 = HEAP32[$1 + 24 >> 2] | 0;
  if ($7 >>> 0 < $9 >>> 0) {
   HEAP32[$6 >> 2] = $9;
   $14 = $9;
  } else $14 = $7;
  $12 = HEAP32[$1 + 20 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $16 = $14 - $12 | 0;
  if ($16 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  if ($16 >>> 0 < 11) {
   HEAP8[$0 + 11 >> 0] = $16;
   $$021$i$i1 = $0;
  } else {
   $22 = $16 + 16 & -16;
   $23 = __Znwm($22) | 0;
   HEAP32[$0 >> 2] = $23;
   HEAP32[$0 + 8 >> 2] = $22 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $16;
   $$021$i$i1 = $23;
  }
  if (($12 | 0) == ($14 | 0)) $$1$lcssa$i$i7 = $$021$i$i1; else {
   $$023$i$i3 = $12;
   $$122$i$i4 = $$021$i$i1;
   while (1) {
    HEAP8[$$122$i$i4 >> 0] = HEAP8[$$023$i$i3 >> 0] | 0;
    $$023$i$i3 = $$023$i$i3 + 1 | 0;
    if (($$023$i$i3 | 0) == ($14 | 0)) break; else $$122$i$i4 = $$122$i$i4 + 1 | 0;
   }
   $$1$lcssa$i$i7 = $$021$i$i1 + $16 | 0;
  }
  HEAP8[$$1$lcssa$i$i7 >> 0] = 0;
  return;
 }
 if (!($3 & 8)) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  return;
 }
 $35 = HEAP32[$1 + 8 >> 2] | 0;
 $37 = HEAP32[$1 + 16 >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $40 = $37 - $35 | 0;
 if ($40 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($40 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $40;
  $$021$i$i = $0;
 } else {
  $46 = $40 + 16 & -16;
  $47 = __Znwm($46) | 0;
  HEAP32[$0 >> 2] = $47;
  HEAP32[$0 + 8 >> 2] = $46 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $40;
  $$021$i$i = $47;
 }
 if (($35 | 0) == ($37 | 0)) $$1$lcssa$i$i = $$021$i$i; else {
  $$023$i$i = $35;
  $$122$i$i = $$021$i$i;
  while (1) {
   HEAP8[$$122$i$i >> 0] = HEAP8[$$023$i$i >> 0] | 0;
   $$023$i$i = $$023$i$i + 1 | 0;
   if (($$023$i$i | 0) == ($37 | 0)) break; else $$122$i$i = $$122$i$i + 1 | 0;
  }
  $$1$lcssa$i$i = $$021$i$i + $40 | 0;
 }
 HEAP8[$$1$lcssa$i$i >> 0] = 0;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 40 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 24 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 40 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 24 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 40 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 24 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 40 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 24 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 40 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 24 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 40 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 24 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 40 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 24 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 40 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 24 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$022$0 = 0, $$sroa$022$0$copyload24 = 0, $16 = 0, $21 = 0, $22 = 0, $31 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy2 = sp + 40 | 0;
 $$byval_copy = sp;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 if (!(HEAP32[$3 + 4 >> 2] & 1)) {
  HEAP32[$6 >> 2] = -1;
  $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiii[$16 & 63]($0, $$byval_copy, $$byval_copy2, $3, $4, $6) | 0;
  switch (HEAP32[$6 >> 2] | 0) {
  case 0:
   {
    HEAP8[$5 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$5 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$5 >> 0] = 1;
    HEAP32[$4 >> 2] = 4;
   }
  }
  $$sroa$022$0 = HEAP32[$1 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy2, $3);
  $21 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy2, 32720) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy2);
  __ZNKSt3__28ios_base6getlocEv($$byval_copy2, $3);
  $22 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy2, 32728) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy2);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$22 >> 2] | 0) + 24 >> 2] & 127]($$byval_copy, $22);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$22 >> 2] | 0) + 28 >> 2] & 127]($$byval_copy + 12 | 0, $22);
  HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
  $31 = $$byval_copy + 24 | 0;
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$9 >> 2];
  HEAP8[$5 >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($1, $$byval_copy2, $$byval_copy, $31, $21, $4, 1) | 0) == ($$byval_copy | 0) & 1;
  $$sroa$022$0$copyload24 = HEAP32[$1 >> 2] | 0;
  $36 = $31;
  do {
   $36 = $36 + -12 | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($36);
  } while (($36 | 0) != ($$byval_copy | 0));
  $$sroa$022$0 = $$sroa$022$0$copyload24;
 }
 STACKTOP = sp;
 return $$sroa$022$0 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$022$0 = 0, $$sroa$022$0$copyload24 = 0, $16 = 0, $21 = 0, $22 = 0, $31 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy2 = sp + 40 | 0;
 $$byval_copy = sp;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 if (!(HEAP32[$3 + 4 >> 2] & 1)) {
  HEAP32[$6 >> 2] = -1;
  $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiii[$16 & 63]($0, $$byval_copy, $$byval_copy2, $3, $4, $6) | 0;
  switch (HEAP32[$6 >> 2] | 0) {
  case 0:
   {
    HEAP8[$5 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$5 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$5 >> 0] = 1;
    HEAP32[$4 >> 2] = 4;
   }
  }
  $$sroa$022$0 = HEAP32[$1 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy2, $3);
  $21 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy2, 32688) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy2);
  __ZNKSt3__28ios_base6getlocEv($$byval_copy2, $3);
  $22 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy2, 32704) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy2);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$22 >> 2] | 0) + 24 >> 2] & 127]($$byval_copy, $22);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$22 >> 2] | 0) + 28 >> 2] & 127]($$byval_copy + 12 | 0, $22);
  HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
  $31 = $$byval_copy + 24 | 0;
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$9 >> 2];
  HEAP8[$5 >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($1, $$byval_copy2, $$byval_copy, $31, $21, $4, 1) | 0) == ($$byval_copy | 0) & 1;
  $$sroa$022$0$copyload24 = HEAP32[$1 >> 2] | 0;
  $36 = $31;
  do {
   $36 = $36 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($36);
  } while (($36 | 0) != ($$byval_copy | 0));
  $$sroa$022$0 = $$sroa$022$0$copyload24;
 }
 STACKTOP = sp;
 return $$sroa$022$0 | 0;
}

function __ZN6spdlog7details25source_funcname_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i14 = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i15 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $35 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $58 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 if (!(HEAP32[$1 + 36 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $8 = $1 + 40 | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, _strlen(HEAP32[$8 >> 2] | 0) | 0, $0 + 4 | 0, $3);
 $12 = HEAP32[$8 >> 2] | 0;
 $13 = _strlen($12) | 0;
 if ($12 | 0) {
  $15 = $12 + $13 | 0;
  $16 = $3 + 8 | 0;
  if (($13 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $19 = (HEAP32[$16 >> 2] | 0) + $13 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $19 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $19);
  if ($13 | 0) {
   $$010$i$i$i = $12;
   $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
    $$010$i$i$i = $$010$i$i$i + 1 | 0;
    if (($$010$i$i$i | 0) == ($15 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
   }
  }
  HEAP32[$16 >> 2] = $19;
 }
 $35 = HEAP32[$4 + 8 >> 2] | 0;
 if ($35 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $35 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $41 = HEAP32[$4 + 12 >> 2] | 0;
  $43 = HEAP32[$4 + 4 >> 2] | 0;
  if ($41 | 0) {
   $45 = $41 + $35 | 0;
   $46 = $43 + 8 | 0;
   if (($35 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $48 = HEAP32[$46 >> 2] | 0;
   $49 = $48 + $35 | 0;
   if ((HEAP32[$43 + 12 >> 2] | 0) >>> 0 < $49 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$43 >> 2] >> 2] & 127]($43, $49);
    $58 = HEAP32[$46 >> 2] | 0;
   } else $58 = $48;
   $$010$i$i$i$i$i14 = $41;
   $$089$i$i$i$i$i15 = (HEAP32[$43 + 4 >> 2] | 0) + $58 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i15 >> 0] = HEAP8[$$010$i$i$i$i$i14 >> 0] | 0;
    $$010$i$i$i$i$i14 = $$010$i$i$i$i$i14 + 1 | 0;
    if (($$010$i$i$i$i$i14 | 0) == ($45 | 0)) break; else $$089$i$i$i$i$i15 = $$089$i$i$i$i$i15 + 1 | 0;
   }
   HEAP32[$46 >> 2] = $49;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details25source_filename_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i14 = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i15 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $35 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $58 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 if (!(HEAP32[$1 + 36 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $8 = $1 + 32 | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, _strlen(HEAP32[$8 >> 2] | 0) | 0, $0 + 4 | 0, $3);
 $12 = HEAP32[$8 >> 2] | 0;
 $13 = _strlen($12) | 0;
 if ($12 | 0) {
  $15 = $12 + $13 | 0;
  $16 = $3 + 8 | 0;
  if (($13 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
  $19 = (HEAP32[$16 >> 2] | 0) + $13 | 0;
  if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $19 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $19);
  if ($13 | 0) {
   $$010$i$i$i = $12;
   $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0;
   while (1) {
    HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
    $$010$i$i$i = $$010$i$i$i + 1 | 0;
    if (($$010$i$i$i | 0) == ($15 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
   }
  }
  HEAP32[$16 >> 2] = $19;
 }
 $35 = HEAP32[$4 + 8 >> 2] | 0;
 if ($35 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $35 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $41 = HEAP32[$4 + 12 >> 2] | 0;
  $43 = HEAP32[$4 + 4 >> 2] | 0;
  if ($41 | 0) {
   $45 = $41 + $35 | 0;
   $46 = $43 + 8 | 0;
   if (($35 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $48 = HEAP32[$46 >> 2] | 0;
   $49 = $48 + $35 | 0;
   if ((HEAP32[$43 + 12 >> 2] | 0) >>> 0 < $49 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$43 >> 2] >> 2] & 127]($43, $49);
    $58 = HEAP32[$46 >> 2] | 0;
   } else $58 = $48;
   $$010$i$i$i$i$i14 = $41;
   $$089$i$i$i$i$i15 = (HEAP32[$43 + 4 >> 2] | 0) + $58 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i15 >> 0] = HEAP8[$$010$i$i$i$i$i14 >> 0] | 0;
    $$010$i$i$i$i$i14 = $$010$i$i$i$i$i14 + 1 | 0;
    if (($$010$i$i$i$i$i14 | 0) == ($45 | 0)) break; else $$089$i$i$i$i$i15 = $$089$i$i$i$i$i15 + 1 | 0;
   }
   HEAP32[$46 >> 2] = $49;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIPPN3sgl5EventERNS_9allocatorIS4_EEE10push_frontERKS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$cast = 0, $$pre$phiZ2D = 0, $$sroa$13$0$ptr = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3;
 $5 = HEAP32[$0 >> 2] | 0;
 $7 = $5;
 do if (($3 | 0) == ($5 | 0)) {
  $8 = $0 + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $0 + 12 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $$cast = $11;
  if ($9 >>> 0 < $11 >>> 0) {
   $13 = $9;
   $17 = (($$cast - $13 >> 2) + 1 | 0) / 2 | 0;
   $18 = $9 + ($17 << 2) | 0;
   $19 = $13 - $4 | 0;
   $23 = $18 + (0 - ($19 >> 2) << 2) | 0;
   if (!$19) {
    $$0$i$i = $18;
    $$pre$phiZ2D = $18;
   } else {
    _memmove($23 | 0, $3 | 0, $19 | 0) | 0;
    $$0$i$i = $23;
    $$pre$phiZ2D = (HEAP32[$8 >> 2] | 0) + ($17 << 2) | 0;
   }
   HEAP32[$2 >> 2] = $$0$i$i;
   HEAP32[$8 >> 2] = $$pre$phiZ2D;
   $55 = $$0$i$i;
   break;
  }
  $24 = $$cast - $7 | 0;
  $$sroa$speculated = ($24 | 0) == 0 ? 1 : $24 >> 1;
  $28 = ($$sroa$speculated + 3 | 0) >>> 2;
  do if (!$$sroa$speculated) $34 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $31 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($31, 22468);
   HEAP32[$31 >> 2] = 15792;
   ___cxa_throw($31 | 0, 9584, 225);
  } else {
   $34 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  $35 = $34;
  $36 = $34 + ($28 << 2) | 0;
  $37 = $36;
  $39 = $34 + ($$sroa$speculated << 2) | 0;
  if (($3 | 0) == ($9 | 0)) {
   $$sroa$13$1 = $37;
   $52 = $3;
  } else {
   $45 = (($9 + -4 - $4 | 0) >>> 2) + $28 + 1 | 0;
   $$sroa$13$0$ptr = $36;
   $47 = $3;
   while (1) {
    HEAP32[$$sroa$13$0$ptr >> 2] = HEAP32[$47 >> 2];
    $47 = $47 + 4 | 0;
    if (($47 | 0) == ($9 | 0)) break; else $$sroa$13$0$ptr = $$sroa$13$0$ptr + 4 | 0;
   }
   $$sroa$13$1 = $34 + ($45 << 2) | 0;
   $52 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $35;
  HEAP32[$2 >> 2] = $37;
  HEAP32[$8 >> 2] = $$sroa$13$1;
  HEAP32[$10 >> 2] = $39;
  if (!$52) $55 = $36; else {
   __ZdlPv($52);
   $55 = HEAP32[$2 >> 2] | 0;
  }
 } else $55 = $3; while (0);
 HEAP32[$55 + -4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -4;
 return;
}

function __ZNSt3__214__split_bufferIPPN3sgl5LayerENS_9allocatorIS4_EEE10push_frontERKS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$cast = 0, $$pre$phiZ2D = 0, $$sroa$13$0$ptr = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3;
 $5 = HEAP32[$0 >> 2] | 0;
 $7 = $5;
 do if (($3 | 0) == ($5 | 0)) {
  $8 = $0 + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $0 + 12 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $$cast = $11;
  if ($9 >>> 0 < $11 >>> 0) {
   $13 = $9;
   $17 = (($$cast - $13 >> 2) + 1 | 0) / 2 | 0;
   $18 = $9 + ($17 << 2) | 0;
   $19 = $13 - $4 | 0;
   $23 = $18 + (0 - ($19 >> 2) << 2) | 0;
   if (!$19) {
    $$0$i$i = $18;
    $$pre$phiZ2D = $18;
   } else {
    _memmove($23 | 0, $3 | 0, $19 | 0) | 0;
    $$0$i$i = $23;
    $$pre$phiZ2D = (HEAP32[$8 >> 2] | 0) + ($17 << 2) | 0;
   }
   HEAP32[$2 >> 2] = $$0$i$i;
   HEAP32[$8 >> 2] = $$pre$phiZ2D;
   $55 = $$0$i$i;
   break;
  }
  $24 = $$cast - $7 | 0;
  $$sroa$speculated = ($24 | 0) == 0 ? 1 : $24 >> 1;
  $28 = ($$sroa$speculated + 3 | 0) >>> 2;
  do if (!$$sroa$speculated) $34 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $31 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($31, 22468);
   HEAP32[$31 >> 2] = 15792;
   ___cxa_throw($31 | 0, 9584, 225);
  } else {
   $34 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  $35 = $34;
  $36 = $34 + ($28 << 2) | 0;
  $37 = $36;
  $39 = $34 + ($$sroa$speculated << 2) | 0;
  if (($3 | 0) == ($9 | 0)) {
   $$sroa$13$1 = $37;
   $52 = $3;
  } else {
   $45 = (($9 + -4 - $4 | 0) >>> 2) + $28 + 1 | 0;
   $$sroa$13$0$ptr = $36;
   $47 = $3;
   while (1) {
    HEAP32[$$sroa$13$0$ptr >> 2] = HEAP32[$47 >> 2];
    $47 = $47 + 4 | 0;
    if (($47 | 0) == ($9 | 0)) break; else $$sroa$13$0$ptr = $$sroa$13$0$ptr + 4 | 0;
   }
   $$sroa$13$1 = $34 + ($45 << 2) | 0;
   $52 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $35;
  HEAP32[$2 >> 2] = $37;
  HEAP32[$8 >> 2] = $$sroa$13$1;
  HEAP32[$10 >> 2] = $39;
  if (!$52) $55 = $36; else {
   __ZdlPv($52);
   $55 = HEAP32[$2 >> 2] | 0;
  }
 } else $55 = $3; while (0);
 HEAP32[$55 + -4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -4;
 return;
}

function __ZNSt3__214__split_bufferIPPN3sgl5LayerENS_9allocatorIS4_EEE10push_frontEOS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$cast = 0, $$pre$phiZ2D = 0, $$sroa$13$0$ptr = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3;
 $5 = HEAP32[$0 >> 2] | 0;
 $7 = $5;
 do if (($3 | 0) == ($5 | 0)) {
  $8 = $0 + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $0 + 12 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $$cast = $11;
  if ($9 >>> 0 < $11 >>> 0) {
   $13 = $9;
   $17 = (($$cast - $13 >> 2) + 1 | 0) / 2 | 0;
   $18 = $9 + ($17 << 2) | 0;
   $19 = $13 - $4 | 0;
   $23 = $18 + (0 - ($19 >> 2) << 2) | 0;
   if (!$19) {
    $$0$i$i = $18;
    $$pre$phiZ2D = $18;
   } else {
    _memmove($23 | 0, $3 | 0, $19 | 0) | 0;
    $$0$i$i = $23;
    $$pre$phiZ2D = (HEAP32[$8 >> 2] | 0) + ($17 << 2) | 0;
   }
   HEAP32[$2 >> 2] = $$0$i$i;
   HEAP32[$8 >> 2] = $$pre$phiZ2D;
   $55 = $$0$i$i;
   break;
  }
  $24 = $$cast - $7 | 0;
  $$sroa$speculated = ($24 | 0) == 0 ? 1 : $24 >> 1;
  $28 = ($$sroa$speculated + 3 | 0) >>> 2;
  do if (!$$sroa$speculated) $34 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $31 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($31, 22468);
   HEAP32[$31 >> 2] = 15792;
   ___cxa_throw($31 | 0, 9584, 225);
  } else {
   $34 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  $35 = $34;
  $36 = $34 + ($28 << 2) | 0;
  $37 = $36;
  $39 = $34 + ($$sroa$speculated << 2) | 0;
  if (($3 | 0) == ($9 | 0)) {
   $$sroa$13$1 = $37;
   $52 = $3;
  } else {
   $45 = (($9 + -4 - $4 | 0) >>> 2) + $28 + 1 | 0;
   $$sroa$13$0$ptr = $36;
   $47 = $3;
   while (1) {
    HEAP32[$$sroa$13$0$ptr >> 2] = HEAP32[$47 >> 2];
    $47 = $47 + 4 | 0;
    if (($47 | 0) == ($9 | 0)) break; else $$sroa$13$0$ptr = $$sroa$13$0$ptr + 4 | 0;
   }
   $$sroa$13$1 = $34 + ($45 << 2) | 0;
   $52 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $35;
  HEAP32[$2 >> 2] = $37;
  HEAP32[$8 >> 2] = $$sroa$13$1;
  HEAP32[$10 >> 2] = $39;
  if (!$52) $55 = $36; else {
   __ZdlPv($52);
   $55 = HEAP32[$2 >> 2] | 0;
  }
 } else $55 = $3; while (0);
 HEAP32[$55 + -4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -4;
 return;
}

function __ZNSt3__214__split_bufferIPPN3sgl5EventENS_9allocatorIS4_EEE10push_frontEOS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$cast = 0, $$pre$phiZ2D = 0, $$sroa$13$0$ptr = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3;
 $5 = HEAP32[$0 >> 2] | 0;
 $7 = $5;
 do if (($3 | 0) == ($5 | 0)) {
  $8 = $0 + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $0 + 12 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $$cast = $11;
  if ($9 >>> 0 < $11 >>> 0) {
   $13 = $9;
   $17 = (($$cast - $13 >> 2) + 1 | 0) / 2 | 0;
   $18 = $9 + ($17 << 2) | 0;
   $19 = $13 - $4 | 0;
   $23 = $18 + (0 - ($19 >> 2) << 2) | 0;
   if (!$19) {
    $$0$i$i = $18;
    $$pre$phiZ2D = $18;
   } else {
    _memmove($23 | 0, $3 | 0, $19 | 0) | 0;
    $$0$i$i = $23;
    $$pre$phiZ2D = (HEAP32[$8 >> 2] | 0) + ($17 << 2) | 0;
   }
   HEAP32[$2 >> 2] = $$0$i$i;
   HEAP32[$8 >> 2] = $$pre$phiZ2D;
   $55 = $$0$i$i;
   break;
  }
  $24 = $$cast - $7 | 0;
  $$sroa$speculated = ($24 | 0) == 0 ? 1 : $24 >> 1;
  $28 = ($$sroa$speculated + 3 | 0) >>> 2;
  do if (!$$sroa$speculated) $34 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $31 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($31, 22468);
   HEAP32[$31 >> 2] = 15792;
   ___cxa_throw($31 | 0, 9584, 225);
  } else {
   $34 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  $35 = $34;
  $36 = $34 + ($28 << 2) | 0;
  $37 = $36;
  $39 = $34 + ($$sroa$speculated << 2) | 0;
  if (($3 | 0) == ($9 | 0)) {
   $$sroa$13$1 = $37;
   $52 = $3;
  } else {
   $45 = (($9 + -4 - $4 | 0) >>> 2) + $28 + 1 | 0;
   $$sroa$13$0$ptr = $36;
   $47 = $3;
   while (1) {
    HEAP32[$$sroa$13$0$ptr >> 2] = HEAP32[$47 >> 2];
    $47 = $47 + 4 | 0;
    if (($47 | 0) == ($9 | 0)) break; else $$sroa$13$0$ptr = $$sroa$13$0$ptr + 4 | 0;
   }
   $$sroa$13$1 = $34 + ($45 << 2) | 0;
   $52 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $35;
  HEAP32[$2 >> 2] = $37;
  HEAP32[$8 >> 2] = $$sroa$13$1;
  HEAP32[$10 >> 2] = $39;
  if (!$52) $55 = $36; else {
   __ZdlPv($52);
   $55 = HEAP32[$2 >> 2] | 0;
  }
 } else $55 = $3; while (0);
 HEAP32[$55 + -4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -4;
 return;
}

function __ZN6spdlog7details10fmt_helper10append_intImLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$010$i$i = 0, $$024$lcssa$i$i = 0, $$02425$i$i = 0, $$089$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $2 + 24 | 0;
 $4 = $2 + 21 | 0;
 if ($0 >>> 0 > 99) {
  $$02425$i$i = $4;
  $6 = $0;
  $7 = 0;
  while (1) {
   $8 = ___udivdi3($6 | 0, $7 | 0, 100, 0) | 0;
   $9 = getTempRet0() | 0;
   $10 = ___muldi3($8 | 0, $9 | 0, 100, 0) | 0;
   $12 = _i64Subtract($6 | 0, $7 | 0, $10 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $14 = $12 << 1;
   HEAP8[$$02425$i$i + -1 >> 0] = HEAP8[64 + ($14 | 1) >> 0] | 0;
   $21 = $$02425$i$i + -2 | 0;
   HEAP8[$21 >> 0] = HEAP8[64 + $14 >> 0] | 0;
   if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 9999) {
    $$02425$i$i = $21;
    $6 = $8;
    $7 = $9;
   } else {
    $$024$lcssa$i$i = $21;
    $27 = $9;
    $29 = $8;
    break;
   }
  }
 } else {
  $$024$lcssa$i$i = $4;
  $27 = 0;
  $29 = $0;
 }
 if ($27 >>> 0 < 0 | ($27 | 0) == 0 & $29 >>> 0 < 10) {
  $36 = $$024$lcssa$i$i + -1 | 0;
  HEAP8[$36 >> 0] = ($29 & 255) + 48 << 24 >> 24;
  $$0$i$i = $36;
 } else {
  $37 = $29 << 1;
  HEAP8[$$024$lcssa$i$i + -1 >> 0] = HEAP8[64 + ($37 | 1) >> 0] | 0;
  $44 = $$024$lcssa$i$i + -2 | 0;
  HEAP8[$44 >> 0] = HEAP8[64 + $37 >> 0] | 0;
  $$0$i$i = $44;
 }
 HEAP32[$3 >> 2] = $$0$i$i;
 $46 = $2 - $$0$i$i | 0;
 if (($46 | 0) <= -22) ___assert_fail(18933, 18966, 209, 19012);
 $48 = $46 + 21 | 0;
 $49 = $$0$i$i + $48 | 0;
 $50 = $1 + 8 | 0;
 if (($48 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $53 = (HEAP32[$50 >> 2] | 0) + $48 | 0;
 if ((HEAP32[$1 + 12 >> 2] | 0) >>> 0 < $53 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $53);
 if (!$48) {
  HEAP32[$50 >> 2] = $53;
  STACKTOP = sp;
  return;
 }
 $$010$i$i = $$0$i$i;
 $$089$i$i = (HEAP32[$1 + 4 >> 2] | 0) + (HEAP32[$50 >> 2] | 0) | 0;
 while (1) {
  HEAP8[$$089$i$i >> 0] = HEAP8[$$010$i$i >> 0] | 0;
  $$010$i$i = $$010$i$i + 1 | 0;
  if (($$010$i$i | 0) == ($49 | 0)) break; else $$089$i$i = $$089$i$i + 1 | 0;
 }
 HEAP32[$50 >> 2] = $53;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$010$i$i = 0, $$024$lcssa$i$i = 0, $$02425$i$i = 0, $$089$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $2 + 24 | 0;
 $4 = $2 + 21 | 0;
 if ($0 >>> 0 > 99) {
  $$02425$i$i = $4;
  $6 = $0;
  $7 = 0;
  while (1) {
   $8 = ___udivdi3($6 | 0, $7 | 0, 100, 0) | 0;
   $9 = getTempRet0() | 0;
   $10 = ___muldi3($8 | 0, $9 | 0, 100, 0) | 0;
   $12 = _i64Subtract($6 | 0, $7 | 0, $10 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $14 = $12 << 1;
   HEAP8[$$02425$i$i + -1 >> 0] = HEAP8[64 + ($14 | 1) >> 0] | 0;
   $21 = $$02425$i$i + -2 | 0;
   HEAP8[$21 >> 0] = HEAP8[64 + $14 >> 0] | 0;
   if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 9999) {
    $$02425$i$i = $21;
    $6 = $8;
    $7 = $9;
   } else {
    $$024$lcssa$i$i = $21;
    $27 = $9;
    $29 = $8;
    break;
   }
  }
 } else {
  $$024$lcssa$i$i = $4;
  $27 = 0;
  $29 = $0;
 }
 if ($27 >>> 0 < 0 | ($27 | 0) == 0 & $29 >>> 0 < 10) {
  $36 = $$024$lcssa$i$i + -1 | 0;
  HEAP8[$36 >> 0] = ($29 & 255) + 48 << 24 >> 24;
  $$0$i$i = $36;
 } else {
  $37 = $29 << 1;
  HEAP8[$$024$lcssa$i$i + -1 >> 0] = HEAP8[64 + ($37 | 1) >> 0] | 0;
  $44 = $$024$lcssa$i$i + -2 | 0;
  HEAP8[$44 >> 0] = HEAP8[64 + $37 >> 0] | 0;
  $$0$i$i = $44;
 }
 HEAP32[$3 >> 2] = $$0$i$i;
 $46 = $2 - $$0$i$i | 0;
 if (($46 | 0) <= -22) ___assert_fail(18933, 18966, 209, 19012);
 $48 = $46 + 21 | 0;
 $49 = $$0$i$i + $48 | 0;
 $50 = $1 + 8 | 0;
 if (($48 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $53 = (HEAP32[$50 >> 2] | 0) + $48 | 0;
 if ((HEAP32[$1 + 12 >> 2] | 0) >>> 0 < $53 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $53);
 if (!$48) {
  HEAP32[$50 >> 2] = $53;
  STACKTOP = sp;
  return;
 }
 $$010$i$i = $$0$i$i;
 $$089$i$i = (HEAP32[$1 + 4 >> 2] | 0) + (HEAP32[$50 >> 2] | 0) | 0;
 while (1) {
  HEAP8[$$089$i$i >> 0] = HEAP8[$$010$i$i >> 0] | 0;
  $$010$i$i = $$010$i$i + 1 | 0;
  if (($$010$i$i | 0) == ($49 | 0)) break; else $$089$i$i = $$089$i$i + 1 | 0;
 }
 HEAP32[$50 >> 2] = $53;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10bin_writerILi3EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10bin_writerILi3EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10bin_writerILi1EEEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10bin_writerILi1EEEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$pre = 0, $11 = 0, $15 = 0, $17 = 0, $23 = 0, $25 = 0, $34 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $50 = 0, $6 = 0, $7 = 0, $76 = 0, $8 = 0, $81 = 0, $83 = 0, $86 = 0, $9 = 0;
 $6 = $1 + 44 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $1 + 24 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($7 >>> 0 < $9 >>> 0) {
  HEAP32[$6 >> 2] = $9;
  $15 = $9;
 } else $15 = $7;
 $11 = $5 & 24;
 L4 : do if (!$11) {
  $83 = -1;
  $86 = -1;
 } else if (($4 | 0) == 1 & ($11 | 0) == 24) {
  $83 = -1;
  $86 = -1;
 } else {
  if (!$15) {
   $48 = 0;
   $50 = 0;
  } else {
   $17 = $1 + 32 | 0;
   if ((HEAP8[$17 + 11 >> 0] | 0) < 0) $23 = HEAP32[$17 >> 2] | 0; else $23 = $17;
   $25 = $15 - $23 | 0;
   $48 = (($25 | 0) < 0) << 31 >> 31;
   $50 = $25;
  }
  L14 : do switch ($4 | 0) {
  case 0:
   {
    $43 = 0;
    $44 = 0;
    break;
   }
  case 1:
   {
    if (!($5 & 8)) {
     $40 = $9 - (HEAP32[$1 + 20 >> 2] | 0) | 0;
     $43 = $40;
     $44 = (($40 | 0) < 0) << 31 >> 31;
     break L14;
    } else {
     $34 = (HEAP32[$1 + 12 >> 2] | 0) - (HEAP32[$1 + 8 >> 2] | 0) | 0;
     $43 = $34;
     $44 = (($34 | 0) < 0) << 31 >> 31;
     break L14;
    }
    break;
   }
  case 2:
   {
    $43 = $50;
    $44 = $48;
    break;
   }
  default:
   {
    $83 = -1;
    $86 = -1;
    break L4;
   }
  } while (0);
  $45 = _i64Add($43 | 0, $44 | 0, $2 | 0, $3 | 0) | 0;
  $46 = getTempRet0() | 0;
  if (($46 | 0) < 0 | (($48 | 0) < ($46 | 0) | ($48 | 0) == ($46 | 0) & $50 >>> 0 < $45 >>> 0)) {
   $83 = -1;
   $86 = -1;
  } else {
   $$pre = $5 & 8;
   if (!(($45 | 0) == 0 & ($46 | 0) == 0)) {
    if ($$pre | 0) if (!(HEAP32[$1 + 12 >> 2] | 0)) {
     $83 = -1;
     $86 = -1;
     break;
    }
    if (($5 & 16 | 0) != 0 & ($9 | 0) == 0) {
     $83 = -1;
     $86 = -1;
     break;
    }
   }
   if ($$pre | 0) {
    HEAP32[$1 + 12 >> 2] = (HEAP32[$1 + 8 >> 2] | 0) + $45;
    HEAP32[$1 + 16 >> 2] = $15;
   }
   if (!($5 & 16)) {
    $83 = $45;
    $86 = $46;
   } else {
    HEAP32[$8 >> 2] = (HEAP32[$1 + 20 >> 2] | 0) + $45;
    $83 = $45;
    $86 = $46;
   }
  }
 } while (0);
 $76 = $0;
 HEAP32[$76 >> 2] = 0;
 HEAP32[$76 + 4 >> 2] = 0;
 $81 = $0 + 8 | 0;
 HEAP32[$81 >> 2] = $83;
 HEAP32[$81 + 4 >> 2] = $86;
 return;
}

function __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclEPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$06$i$i$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$phi$iZ2D = 0, $$pre$phi3$iZ2D = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $$byval_copy1 = sp + 64 | 0;
 $$byval_copy = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 20 | 0;
 $5 = sp;
 $7 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if (!$7) {
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 32;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = -1;
  $15 = $5 + 16 | 0;
  HEAP8[$15 >> 0] = 0;
  $16 = $5 + 17 | 0;
  HEAP8[$16 >> 0] = 0;
  $$pre$phi$iZ2D = $15;
  $$pre$phi3$iZ2D = $16;
  $29 = $5;
 } else switch (HEAP8[$7 + 17 >> 0] | 0) {
 case 112:
 case 0:
  {
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$7 + 16 >> 2];
   $$pre$phi$iZ2D = $5 + 16 | 0;
   $$pre$phi3$iZ2D = $5 + 17 | 0;
   $29 = $5;
   break L1;
   break;
  }
 default:
  {
   $11 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($11, 17534);
   ___cxa_throw($11 | 0, 6792, 18);
  }
 } while (0);
 HEAP8[$$pre$phi$iZ2D >> 0] = 8;
 HEAP8[$$pre$phi3$iZ2D >> 0] = 120;
 $17 = $1;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $5;
 HEAP32[$4 + 8 >> 2] = $17;
 HEAP8[$4 + 12 >> 0] = 48;
 HEAP32[$4 + 16 >> 2] = 2;
 HEAP8[$4 + 13 >> 0] = 120;
 $$0$i$i$i = 0;
 $$06$i$i$i = $17;
 do {
  $$0$i$i$i = $$0$i$i$i + 1 | 0;
  $$06$i$i$i = $$06$i$i$i >>> 4;
 } while (($$06$i$i$i | 0) != 0);
 HEAP32[$2 >> 2] = $4 + 12;
 HEAP32[$2 + 4 >> 2] = 2;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $$0$i$i$i;
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerImSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $$0$i$i$i, $$byval_copy, $5, $$byval_copy1);
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIyNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIxNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10dec_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10dec_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}
function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerImSA_E10hex_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 28 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $53 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $53 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $43 = $4;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $6 + 20 | 0;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerImNS0_18basic_format_specsIcEEE10hex_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 32 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 20 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIjNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 32 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 20 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIiNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$020 = 0, $$02025 = 0, $$021 = 0, $$02124 = 0, $$026 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $5 = sp + 32 | 0;
 $6 = sp;
 $8 = HEAP32[$2 + 4 >> 2] | 0;
 if (($1 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $10 = $8 + $1 | 0;
 $13 = HEAP32[$3 + 4 >> 2] & 255;
 $15 = HEAP32[$3 + 8 >> 2] | 0;
 if (($15 | 0) == 4) {
  $17 = HEAP32[$3 >> 2] | 0;
  $18 = $17 >>> 0 > $10 >>> 0;
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $$02025 = $13;
  $$02124 = $18 ? $17 : $10;
  $$026 = $18 ? $17 - $10 | 0 : 0;
  $43 = $5;
 } else {
  $21 = HEAP32[$3 + 12 >> 2] | 0;
  if (($21 | 0) > ($1 | 0)) {
   if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $25 = $21 - $1 | 0;
   if (($25 | 0) > -1) {
    $$0 = $25;
    $$020 = 48;
    $$021 = $21 + $8 | 0;
   } else ___assert_fail(18933, 18966, 209, 19012);
  } else {
   $$0 = 0;
   $$020 = $13;
   $$021 = $10;
  };
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  if (!$15) {
   HEAP32[$5 + 8 >> 2] = 2;
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  } else {
   $$02025 = $$020;
   $$02124 = $$021;
   $$026 = $$0;
   $43 = $5;
  }
 }
 HEAP32[$6 >> 2] = $$02124;
 $30 = $2;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6 + 4 | 0;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP8[$6 + 12 >> 0] = $$02025;
 HEAP32[$6 + 16 >> 2] = $$026;
 $42 = $6 + 20 | 0;
 HEAP32[$42 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17padded_int_writerINS7_10int_writerIcNS0_18basic_format_specsIcEEE10num_writerEEEEEvRKNS0_10align_specEOT_($0, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $29 = 0, $30 = 0, $38 = 0, $4 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $55 = 0, $6 = 0, $63 = 0, $66 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(528);
 $2 = sp;
 $4 = HEAP32[$0 + 304 >> 2] | 0;
 __ZNSt3__25mutex4lockEv($4);
 $5 = $2 + 4 | 0;
 $6 = $2 + 8 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$2 >> 2] = 9804;
 $8 = $2 + 16 | 0;
 HEAP32[$5 >> 2] = $8;
 HEAP32[$2 + 12 >> 2] = 500;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2] & 7]($10, $1, $2);
 if (!(HEAP8[$0 + 308 >> 0] | 0)) label = 4; else {
  $17 = $1 + 28 | 0;
  $19 = $1 + 24 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  if ((HEAP32[$17 >> 2] | 0) >>> 0 > $20 >>> 0) {
   $23 = $0 + 300 | 0;
   _fwrite(HEAP32[$5 >> 2] | 0, 1, $20, HEAP32[$23 >> 2] | 0) | 0;
   $27 = __ZNSt3__213unordered_mapIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIiEENS_8equal_toIS3_EENS7_INS_4pairIKS3_S9_EEEEEixERSF_($0 + 312 | 0, $1 + 4 | 0) | 0;
   $29 = HEAP8[$27 + 11 >> 0] | 0;
   $30 = $29 << 24 >> 24 < 0;
   _fwrite($30 ? HEAP32[$27 >> 2] | 0 : $27, 1, $30 ? HEAP32[$27 + 4 >> 2] | 0 : $29 & 255, HEAP32[$23 >> 2] | 0) | 0;
   $38 = HEAP32[$19 >> 2] | 0;
   _fwrite((HEAP32[$5 >> 2] | 0) + $38 | 0, 1, (HEAP32[$17 >> 2] | 0) - $38 | 0, HEAP32[$23 >> 2] | 0) | 0;
   $44 = $0 + 12 | 0;
   $46 = HEAP8[$44 + 11 >> 0] | 0;
   $47 = $46 << 24 >> 24 < 0;
   _fwrite($47 ? HEAP32[$44 >> 2] | 0 : $44, 1, $47 ? HEAP32[$0 + 16 >> 2] | 0 : $46 & 255, HEAP32[$23 >> 2] | 0) | 0;
   $55 = HEAP32[$17 >> 2] | 0;
   _fwrite((HEAP32[$5 >> 2] | 0) + $55 | 0, 1, (HEAP32[$6 >> 2] | 0) - $55 | 0, HEAP32[$23 >> 2] | 0) | 0;
   $$pre$phiZ2D = $23;
  } else label = 4;
 }
 if ((label | 0) == 4) {
  $63 = $0 + 300 | 0;
  _fwrite(HEAP32[$5 >> 2] | 0, 1, HEAP32[$6 >> 2] | 0, HEAP32[$63 >> 2] | 0) | 0;
  $$pre$phiZ2D = $63;
 }
 _fflush(HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = 9804;
 $66 = HEAP32[$5 >> 2] | 0;
 if (($66 | 0) == ($8 | 0)) {
  __ZNSt3__25mutex6unlockEv($4);
  STACKTOP = sp;
  return;
 }
 __ZdlPv($66);
 __ZNSt3__25mutex6unlockEv($4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $14 = 0, $21 = 0, $29 = 0, $34 = 0, $36 = 0, $42 = 0, $43 = 0, $56 = 0, $58 = 0, label = 0;
 $10 = HEAP32[$3 >> 2] | 0;
 $11 = ($10 | 0) == ($2 | 0);
 do if ($11) {
  $14 = (HEAP32[$9 + 96 >> 2] | 0) == ($0 | 0);
  if (!$14) if ((HEAP32[$9 + 100 >> 2] | 0) != ($0 | 0)) {
   label = 5;
   break;
  }
  HEAP32[$3 >> 2] = $2 + 1;
  HEAP8[$2 >> 0] = $14 ? 43 : 45;
  HEAP32[$4 >> 2] = 0;
  $$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $21 = HEAP8[$6 + 11 >> 0] | 0;
  if (($0 | 0) == ($5 | 0) ? (($21 << 24 >> 24 < 0 ? HEAP32[$6 + 4 >> 2] | 0 : $21 & 255) | 0) != 0 : 0) {
   $29 = HEAP32[$8 >> 2] | 0;
   if (($29 - $7 | 0) >= 160) {
    $$1 = 0;
    break;
   }
   $34 = HEAP32[$4 >> 2] | 0;
   HEAP32[$8 >> 2] = $29 + 4;
   HEAP32[$29 >> 2] = $34;
   HEAP32[$4 >> 2] = 0;
   $$1 = 0;
   break;
  }
  $36 = $9 + 104 | 0;
  $$0$i$idx = 0;
  while (1) {
   $$0$i$ptr = $9 + ($$0$i$idx << 2) | 0;
   if (($$0$i$idx | 0) == 26) {
    $$0$lcssa$i = $36;
    break;
   }
   if ((HEAP32[$$0$i$ptr >> 2] | 0) == ($0 | 0)) {
    $$0$lcssa$i = $$0$i$ptr;
    break;
   } else $$0$i$idx = $$0$i$idx + 1 | 0;
  }
  $42 = $$0$lcssa$i - $9 | 0;
  $43 = $42 >> 2;
  if (($42 | 0) > 92) $$1 = -1; else {
   switch ($1 | 0) {
   case 10:
   case 8:
    {
     if (($43 | 0) >= ($1 | 0)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($42 | 0) >= 88) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      if (($10 - $2 | 0) >= 3) {
       $$1 = -1;
       break L6;
      }
      if ((HEAP8[$10 + -1 >> 0] | 0) != 48) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4 >> 2] = 0;
      $56 = HEAP8[6320 + $43 >> 0] | 0;
      HEAP32[$3 >> 2] = $10 + 1;
      HEAP8[$10 >> 0] = $56;
      $$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $58 = HEAP8[6320 + $43 >> 0] | 0;
   HEAP32[$3 >> 2] = $10 + 1;
   HEAP8[$10 >> 0] = $58;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
   $$1 = 0;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $14 = 0, $21 = 0, $29 = 0, $34 = 0, $36 = 0, $42 = 0, $55 = 0, $57 = 0, label = 0;
 $10 = HEAP32[$3 >> 2] | 0;
 $11 = ($10 | 0) == ($2 | 0);
 do if ($11) {
  $14 = (HEAP8[$9 + 24 >> 0] | 0) == $0 << 24 >> 24;
  if (!$14) if ((HEAP8[$9 + 25 >> 0] | 0) != $0 << 24 >> 24) {
   label = 5;
   break;
  }
  HEAP32[$3 >> 2] = $2 + 1;
  HEAP8[$2 >> 0] = $14 ? 43 : 45;
  HEAP32[$4 >> 2] = 0;
  $$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $21 = HEAP8[$6 + 11 >> 0] | 0;
  if ($0 << 24 >> 24 == $5 << 24 >> 24 ? (($21 << 24 >> 24 < 0 ? HEAP32[$6 + 4 >> 2] | 0 : $21 & 255) | 0) != 0 : 0) {
   $29 = HEAP32[$8 >> 2] | 0;
   if (($29 - $7 | 0) >= 160) {
    $$1 = 0;
    break;
   }
   $34 = HEAP32[$4 >> 2] | 0;
   HEAP32[$8 >> 2] = $29 + 4;
   HEAP32[$29 >> 2] = $34;
   HEAP32[$4 >> 2] = 0;
   $$1 = 0;
   break;
  }
  $36 = $9 + 26 | 0;
  $$0$i$idx = 0;
  while (1) {
   $$0$i$ptr = $9 + $$0$i$idx | 0;
   if (($$0$i$idx | 0) == 26) {
    $$0$lcssa$i = $36;
    break;
   }
   if ((HEAP8[$$0$i$ptr >> 0] | 0) == $0 << 24 >> 24) {
    $$0$lcssa$i = $$0$i$ptr;
    break;
   } else $$0$i$idx = $$0$i$idx + 1 | 0;
  }
  $42 = $$0$lcssa$i - $9 | 0;
  if (($42 | 0) > 23) $$1 = -1; else {
   switch ($1 | 0) {
   case 10:
   case 8:
    {
     if (($42 | 0) >= ($1 | 0)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($42 | 0) >= 22) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      if (($10 - $2 | 0) >= 3) {
       $$1 = -1;
       break L6;
      }
      if ((HEAP8[$10 + -1 >> 0] | 0) != 48) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4 >> 2] = 0;
      $55 = HEAP8[6320 + $42 >> 0] | 0;
      HEAP32[$3 >> 2] = $10 + 1;
      HEAP8[$10 >> 0] = $55;
      $$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $57 = HEAP8[6320 + $42 >> 0] | 0;
   HEAP32[$3 >> 2] = $10 + 1;
   HEAP8[$10 >> 0] = $57;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
   $$1 = 0;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$016$i$i = 0, $$pre$phi47Z2D = 0, $$pre$phi49Z2D = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $27 = 0, $28 = 0, $33 = 0, $50 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $6 = sp;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!$7) {
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 $9 = $3;
 $10 = $1;
 $11 = $9 - $10 | 0;
 $12 = $4 + 12 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $$0 = ($13 | 0) > ($11 | 0) ? $13 - $11 | 0 : 0;
 $16 = $2;
 $17 = $16 - $10 | 0;
 if (($17 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 31]($7, $1, $17) | 0) != ($17 | 0)) {
  HEAP32[$0 >> 2] = 0;
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 do if (($$0 | 0) > 0) {
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  if ($$0 >>> 0 < 11) {
   $33 = $6 + 11 | 0;
   HEAP8[$33 >> 0] = $$0;
   $$016$i$i = $6;
   $$pre$phi47Z2D = $33;
   $$pre$phi49Z2D = $6;
  } else {
   $27 = $$0 + 16 & -16;
   $28 = __Znwm($27) | 0;
   HEAP32[$6 >> 2] = $28;
   HEAP32[$6 + 8 >> 2] = $27 | -2147483648;
   HEAP32[$6 + 4 >> 2] = $$0;
   $$016$i$i = $28;
   $$pre$phi47Z2D = $6 + 11 | 0;
   $$pre$phi49Z2D = $6;
  }
  _memset($$016$i$i | 0, $5 | 0, $$0 | 0) | 0;
  HEAP8[$$016$i$i + $$0 >> 0] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 31]($7, (HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0 ? HEAP32[$$pre$phi49Z2D >> 2] | 0 : $6, $$0) | 0) == ($$0 | 0)) {
   if ((HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0) __ZdlPv(HEAP32[$$pre$phi49Z2D >> 2] | 0);
   break;
  }
  HEAP32[$0 >> 2] = 0;
  if ((HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0) __ZdlPv(HEAP32[$$pre$phi49Z2D >> 2] | 0);
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 } while (0);
 $50 = $9 - $16 | 0;
 if (($50 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 31]($7, $2, $50) | 0) != ($50 | 0)) {
  HEAP32[$0 >> 2] = 0;
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 HEAP32[$12 >> 2] = 0;
 $$sroa$0$2 = $7;
 STACKTOP = sp;
 return $$sroa$0$2 | 0;
}

function __ZN3fmt2v58internal14sprintf_formatIeEEvT_RNS1_12basic_bufferIcEENS0_17core_format_specsE($0, $1, $2) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$031 = 0, $$132 = 0, $$lcssa = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $52 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $3 = sp + 24 | 0;
 $4 = $1 + 12 | 0;
 if (!(HEAP32[$4 >> 2] | 0)) ___assert_fail(17591, 17631, 767, 17683);
 $7 = $3 + 1 | 0;
 HEAP8[$3 >> 0] = 37;
 if (!(HEAP8[$2 + 4 >> 0] & 8)) $$031 = $7; else {
  HEAP8[$7 >> 0] = 35;
  $$031 = $3 + 2 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) > -1) {
  HEAP8[$$031 >> 0] = 46;
  HEAP8[$$031 + 1 >> 0] = 42;
  $$132 = $$031 + 2 | 0;
 } else $$132 = $$031;
 HEAP8[$$132 >> 0] = 76;
 HEAP8[$$132 + 1 >> 0] = HEAP8[$2 + 5 >> 0] | 0;
 HEAP8[$$132 + 2 >> 0] = 0;
 $21 = $1 + 4 | 0;
 $22 = HEAP32[$2 >> 2] | 0;
 if (($22 | 0) < 0) {
  while (1) {
   $24 = HEAP32[$4 >> 2] | 0;
   $25 = HEAP32[$21 >> 2] | 0;
   HEAPF64[$vararg_buffer >> 3] = $0;
   $26 = _snprintf($25, $24, $3, $vararg_buffer) | 0;
   $28 = HEAP32[$4 >> 2] | 0;
   if (($26 | 0) > -1) {
    if ($26 >>> 0 < $28 >>> 0) {
     $$lcssa = $26;
     break;
    }
    $34 = $26 + 1 | 0;
    if ($28 >>> 0 < $34 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $34);
   } else if (($28 | 0) != -1) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $28 + 1 | 0);
  }
  $52 = $1 + 8 | 0;
  HEAP32[$52 >> 2] = $$lcssa;
  STACKTOP = sp;
  return;
 } else {
  while (1) {
   $38 = HEAP32[$4 >> 2] | 0;
   $39 = HEAP32[$21 >> 2] | 0;
   HEAP32[$vararg_buffer1 >> 2] = $22;
   HEAPF64[$vararg_buffer1 + 8 >> 3] = $0;
   $40 = _snprintf($39, $38, $3, $vararg_buffer1) | 0;
   $42 = HEAP32[$4 >> 2] | 0;
   if (($40 | 0) > -1) {
    if ($40 >>> 0 < $42 >>> 0) {
     $$lcssa = $40;
     break;
    }
    $44 = $40 + 1 | 0;
    if ($42 >>> 0 < $44 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $44);
   } else if (($42 | 0) != -1) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $42 + 1 | 0);
  }
  $52 = $1 + 8 | 0;
  HEAP32[$52 >> 2] = $$lcssa;
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 8 | 0;
 HEAP8[$5 >> 0] = HEAP8[23644] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[23645] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[23646] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[23647] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[23648] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[23649] | 0;
 $10 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 23650, 1, HEAP32[$10 >> 2] | 0);
 $$lobit = (HEAP32[$10 >> 2] | 0) >>> 9 & 1;
 $14 = $$lobit + 13 | 0;
 $15 = _llvm_stacksave() | 0;
 $$alloca_mul = $14;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $17 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $19 = $16 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16, $14, $17, $5, $$byval_copy) | 0) | 0;
 $20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16, $19, $2) | 0;
 $$alloca_mul6 = ($$lobit << 1 | 24) + -1 << 2;
 $24 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul6 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul6 | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($16, $20, $19, $24, $6, $7, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
 $26 = HEAP32[$6 >> 2] | 0;
 $27 = HEAP32[$7 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
 $28 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $24, $26, $27, $2, $3) | 0;
 _llvm_stackrestore($15 | 0);
 STACKTOP = sp;
 return $28 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 8 | 0;
 HEAP8[$5 >> 0] = HEAP8[23644] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[23645] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[23646] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[23647] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[23648] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[23649] | 0;
 $10 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 23650, 1, HEAP32[$10 >> 2] | 0);
 $$lobit = (HEAP32[$10 >> 2] | 0) >>> 9 & 1;
 $14 = $$lobit + 13 | 0;
 $15 = _llvm_stacksave() | 0;
 $$alloca_mul = $14;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $17 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $19 = $16 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16, $14, $17, $5, $$byval_copy) | 0) | 0;
 $20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16, $19, $2) | 0;
 $$alloca_mul6 = ($$lobit << 1 | 24) + -1 | 0;
 $24 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul6 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul6 | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($16, $20, $19, $24, $6, $7, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
 $26 = HEAP32[$6 >> 2] | 0;
 $27 = HEAP32[$7 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
 $28 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $24, $26, $27, $2, $3) | 0;
 _llvm_stackrestore($15 | 0);
 STACKTOP = sp;
 return $28 | 0;
}

function __ZN6spdlog19synchronous_factory6createINS_5sinks14ansicolor_sinkINS_7details14console_stdoutENS4_13console_mutexEEEJEEENSt3__210shared_ptrINS_6loggerEEENS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEDpOT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $4 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = __Znwm(344) | 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 >> 2] = 9844;
 $7 = $4 + 12 | 0;
 __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEEC2Ev($7);
 $8 = $2 + 4 | 0;
 HEAP32[$2 >> 2] = $7;
 HEAP32[$8 >> 2] = $4;
 HEAP32[$vararg_buffer >> 2] = $7;
 HEAP32[$vararg_buffer + 4 >> 2] = $7;
 __ZNSt3__210shared_ptrIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEEE18__enable_weak_thisEz($2, $vararg_buffer);
 __ZNSt3__210shared_ptrIN6spdlog6loggerEE11make_sharedIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS0_INS1_5sinks14ansicolor_sinkINS1_7details14console_stdoutENSD_13console_mutexEEEEEEEES3_DpOT_($0, $1, $2);
 if (!(HEAP8[30056] | 0)) if (___cxa_guard_acquire(30056) | 0) __ZN6spdlog7details8registryC2Ev(30064);
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 $14 = $3 + 4 | 0;
 $16 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$14 >> 2] = $16;
 if ($16 | 0) {
  $18 = $16 + 4 | 0;
  HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
 }
 __ZN6spdlog7details8registry17initialize_loggerENSt3__210shared_ptrINS_6loggerEEE(30064, $3);
 $21 = HEAP32[$14 >> 2] | 0;
 if ($21 | 0) {
  $23 = $21 + 4 | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  HEAP32[$23 >> 2] = $24 + -1;
  if (!$24) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] & 255]($21);
   __ZNSt3__219__shared_weak_count14__release_weakEv($21);
  }
 }
 $30 = HEAP32[$8 >> 2] | 0;
 if (!$30) {
  STACKTOP = sp;
  return;
 }
 $32 = $30 + 4 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 HEAP32[$32 >> 2] = $33 + -1;
 if ($33 | 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 255]($30);
 __ZNSt3__219__shared_weak_count14__release_weakEv($30);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details21short_level_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i16 = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i17 = 0, $11 = 0, $12 = 0, $15 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $54 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $8 = HEAP32[592 + (HEAP32[$1 + 4 >> 2] << 2) >> 2] | 0;
 $9 = _strlen($8) | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $9, $0 + 4 | 0, $3);
 $11 = $8 + $9 | 0;
 $12 = $3 + 8 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $15 = (HEAP32[$12 >> 2] | 0) + $9 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $15 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $15);
 if ($9 | 0) {
  $$010$i$i$i = $8;
  $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($11 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$12 >> 2] = $15;
 $31 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$31) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $31 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $37 = HEAP32[$4 + 12 >> 2] | 0;
 $39 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$37) {
  STACKTOP = sp;
  return;
 }
 $41 = $37 + $31 | 0;
 $42 = $39 + 8 | 0;
 if (($31 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $44 = HEAP32[$42 >> 2] | 0;
 $45 = $44 + $31 | 0;
 if ((HEAP32[$39 + 12 >> 2] | 0) >>> 0 < $45 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$39 >> 2] >> 2] & 127]($39, $45);
  $54 = HEAP32[$42 >> 2] | 0;
 } else $54 = $44;
 $$010$i$i$i$i$i16 = $37;
 $$089$i$i$i$i$i17 = (HEAP32[$39 + 4 >> 2] | 0) + $54 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i17 >> 0] = HEAP8[$$010$i$i$i$i$i16 >> 0] | 0;
  $$010$i$i$i$i$i16 = $$010$i$i$i$i$i16 + 1 | 0;
  if (($$010$i$i$i$i$i16 | 0) == ($41 | 0)) break; else $$089$i$i$i$i$i17 = $$089$i$i$i$i$i17 + 1 | 0;
 }
 HEAP32[$42 >> 2] = $45;
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIPPN3sgl5LayerERNS_9allocatorIS4_EEE9push_backEOS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $$sroa$13$0$ptr = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $51 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $5;
 do if (($3 | 0) == ($5 | 0)) {
  $8 = $0 + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $9;
  $11 = HEAP32[$0 >> 2] | 0;
  $13 = $11;
  if ($9 >>> 0 > $11 >>> 0) {
   $17 = (($10 - $13 >> 2) + 1 | 0) / -2 | 0;
   $18 = $9 + ($17 << 2) | 0;
   $20 = $3 - $10 | 0;
   if (!$20) $$pre$phiZ2D = $18; else {
    _memmove($18 | 0, $9 | 0, $20 | 0) | 0;
    $$pre$phiZ2D = (HEAP32[$8 >> 2] | 0) + ($17 << 2) | 0;
   }
   $23 = $18 + ($20 >> 2 << 2) | 0;
   HEAP32[$2 >> 2] = $23;
   HEAP32[$8 >> 2] = $$pre$phiZ2D;
   $55 = $23;
   break;
  }
  $24 = $7 - $13 | 0;
  $$sroa$speculated = ($24 | 0) == 0 ? 1 : $24 >> 1;
  $27 = $$sroa$speculated >>> 2;
  do if (!$$sroa$speculated) $33 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $30 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($30, 22468);
   HEAP32[$30 >> 2] = 15792;
   ___cxa_throw($30 | 0, 9584, 225);
  } else {
   $33 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  $34 = $33;
  $35 = $33 + ($27 << 2) | 0;
  $36 = $35;
  $38 = $33 + ($$sroa$speculated << 2) | 0;
  if (($9 | 0) == ($3 | 0)) {
   $$sroa$13$1 = $36;
   $51 = $11;
  } else {
   $44 = $27 + (($3 + -4 - $10 | 0) >>> 2) + 1 | 0;
   $$sroa$13$0$ptr = $35;
   $46 = $9;
   while (1) {
    HEAP32[$$sroa$13$0$ptr >> 2] = HEAP32[$46 >> 2];
    $46 = $46 + 4 | 0;
    if (($46 | 0) == ($3 | 0)) break; else $$sroa$13$0$ptr = $$sroa$13$0$ptr + 4 | 0;
   }
   $$sroa$13$1 = $33 + ($44 << 2) | 0;
   $51 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $34;
  HEAP32[$8 >> 2] = $36;
  HEAP32[$2 >> 2] = $$sroa$13$1;
  HEAP32[$4 >> 2] = $38;
  if (!$51) $55 = $$sroa$13$1; else {
   __ZdlPv($51);
   $55 = HEAP32[$2 >> 2] | 0;
  }
 } else $55 = $3; while (0);
 HEAP32[$55 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 4;
 return;
}

function __ZNSt3__214__split_bufferIPPN3sgl5EventERNS_9allocatorIS4_EEE9push_backEOS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $$sroa$13$0$ptr = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $51 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $5;
 do if (($3 | 0) == ($5 | 0)) {
  $8 = $0 + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $9;
  $11 = HEAP32[$0 >> 2] | 0;
  $13 = $11;
  if ($9 >>> 0 > $11 >>> 0) {
   $17 = (($10 - $13 >> 2) + 1 | 0) / -2 | 0;
   $18 = $9 + ($17 << 2) | 0;
   $20 = $3 - $10 | 0;
   if (!$20) $$pre$phiZ2D = $18; else {
    _memmove($18 | 0, $9 | 0, $20 | 0) | 0;
    $$pre$phiZ2D = (HEAP32[$8 >> 2] | 0) + ($17 << 2) | 0;
   }
   $23 = $18 + ($20 >> 2 << 2) | 0;
   HEAP32[$2 >> 2] = $23;
   HEAP32[$8 >> 2] = $$pre$phiZ2D;
   $55 = $23;
   break;
  }
  $24 = $7 - $13 | 0;
  $$sroa$speculated = ($24 | 0) == 0 ? 1 : $24 >> 1;
  $27 = $$sroa$speculated >>> 2;
  do if (!$$sroa$speculated) $33 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $30 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($30, 22468);
   HEAP32[$30 >> 2] = 15792;
   ___cxa_throw($30 | 0, 9584, 225);
  } else {
   $33 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  $34 = $33;
  $35 = $33 + ($27 << 2) | 0;
  $36 = $35;
  $38 = $33 + ($$sroa$speculated << 2) | 0;
  if (($9 | 0) == ($3 | 0)) {
   $$sroa$13$1 = $36;
   $51 = $11;
  } else {
   $44 = $27 + (($3 + -4 - $10 | 0) >>> 2) + 1 | 0;
   $$sroa$13$0$ptr = $35;
   $46 = $9;
   while (1) {
    HEAP32[$$sroa$13$0$ptr >> 2] = HEAP32[$46 >> 2];
    $46 = $46 + 4 | 0;
    if (($46 | 0) == ($3 | 0)) break; else $$sroa$13$0$ptr = $$sroa$13$0$ptr + 4 | 0;
   }
   $$sroa$13$1 = $33 + ($44 << 2) | 0;
   $51 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $34;
  HEAP32[$8 >> 2] = $36;
  HEAP32[$2 >> 2] = $$sroa$13$1;
  HEAP32[$4 >> 2] = $38;
  if (!$51) $55 = $$sroa$13$1; else {
   __ZdlPv($51);
   $55 = HEAP32[$2 >> 2] | 0;
  }
 } else $55 = $3; while (0);
 HEAP32[$55 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 4;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 8 | 0;
 HEAP8[$5 >> 0] = HEAP8[23644] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[23645] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[23646] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[23647] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[23648] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[23649] | 0;
 $10 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 23650, 0, HEAP32[$10 >> 2] | 0);
 $$lobit = (HEAP32[$10 >> 2] | 0) >>> 9 & 1;
 $14 = $$lobit | 12;
 $15 = _llvm_stacksave() | 0;
 $$alloca_mul = $14;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $17 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $19 = $16 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16, $14, $17, $5, $$byval_copy) | 0) | 0;
 $20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16, $19, $2) | 0;
 $$alloca_mul6 = ($$lobit << 1 | 21) << 2;
 $23 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul6 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul6 | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($16, $20, $19, $23, $6, $7, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
 $25 = HEAP32[$6 >> 2] | 0;
 $26 = HEAP32[$7 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
 $27 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $23, $25, $26, $2, $3) | 0;
 _llvm_stackrestore($15 | 0);
 STACKTOP = sp;
 return $27 | 0;
}

function __ZNSt3__214__split_bufferIPPN3sgl5LayerENS_9allocatorIS4_EEE9push_backEOS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $$sroa$13$0$ptr = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $51 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $5;
 do if (($3 | 0) == ($5 | 0)) {
  $8 = $0 + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $9;
  $11 = HEAP32[$0 >> 2] | 0;
  $13 = $11;
  if ($9 >>> 0 > $11 >>> 0) {
   $17 = (($10 - $13 >> 2) + 1 | 0) / -2 | 0;
   $18 = $9 + ($17 << 2) | 0;
   $20 = $3 - $10 | 0;
   if (!$20) $$pre$phiZ2D = $18; else {
    _memmove($18 | 0, $9 | 0, $20 | 0) | 0;
    $$pre$phiZ2D = (HEAP32[$8 >> 2] | 0) + ($17 << 2) | 0;
   }
   $23 = $18 + ($20 >> 2 << 2) | 0;
   HEAP32[$2 >> 2] = $23;
   HEAP32[$8 >> 2] = $$pre$phiZ2D;
   $55 = $23;
   break;
  }
  $24 = $7 - $13 | 0;
  $$sroa$speculated = ($24 | 0) == 0 ? 1 : $24 >> 1;
  $27 = $$sroa$speculated >>> 2;
  do if (!$$sroa$speculated) $33 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $30 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($30, 22468);
   HEAP32[$30 >> 2] = 15792;
   ___cxa_throw($30 | 0, 9584, 225);
  } else {
   $33 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  $34 = $33;
  $35 = $33 + ($27 << 2) | 0;
  $36 = $35;
  $38 = $33 + ($$sroa$speculated << 2) | 0;
  if (($9 | 0) == ($3 | 0)) {
   $$sroa$13$1 = $36;
   $51 = $11;
  } else {
   $44 = $27 + (($3 + -4 - $10 | 0) >>> 2) + 1 | 0;
   $$sroa$13$0$ptr = $35;
   $46 = $9;
   while (1) {
    HEAP32[$$sroa$13$0$ptr >> 2] = HEAP32[$46 >> 2];
    $46 = $46 + 4 | 0;
    if (($46 | 0) == ($3 | 0)) break; else $$sroa$13$0$ptr = $$sroa$13$0$ptr + 4 | 0;
   }
   $$sroa$13$1 = $33 + ($44 << 2) | 0;
   $51 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $34;
  HEAP32[$8 >> 2] = $36;
  HEAP32[$2 >> 2] = $$sroa$13$1;
  HEAP32[$4 >> 2] = $38;
  if (!$51) $55 = $$sroa$13$1; else {
   __ZdlPv($51);
   $55 = HEAP32[$2 >> 2] | 0;
  }
 } else $55 = $3; while (0);
 HEAP32[$55 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 4;
 return;
}

function __ZNSt3__214__split_bufferIPPN3sgl5EventENS_9allocatorIS4_EEE9push_backEOS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $$sroa$13$0$ptr = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $51 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $5;
 do if (($3 | 0) == ($5 | 0)) {
  $8 = $0 + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $9;
  $11 = HEAP32[$0 >> 2] | 0;
  $13 = $11;
  if ($9 >>> 0 > $11 >>> 0) {
   $17 = (($10 - $13 >> 2) + 1 | 0) / -2 | 0;
   $18 = $9 + ($17 << 2) | 0;
   $20 = $3 - $10 | 0;
   if (!$20) $$pre$phiZ2D = $18; else {
    _memmove($18 | 0, $9 | 0, $20 | 0) | 0;
    $$pre$phiZ2D = (HEAP32[$8 >> 2] | 0) + ($17 << 2) | 0;
   }
   $23 = $18 + ($20 >> 2 << 2) | 0;
   HEAP32[$2 >> 2] = $23;
   HEAP32[$8 >> 2] = $$pre$phiZ2D;
   $55 = $23;
   break;
  }
  $24 = $7 - $13 | 0;
  $$sroa$speculated = ($24 | 0) == 0 ? 1 : $24 >> 1;
  $27 = $$sroa$speculated >>> 2;
  do if (!$$sroa$speculated) $33 = 0; else if ($$sroa$speculated >>> 0 > 1073741823) {
   $30 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($30, 22468);
   HEAP32[$30 >> 2] = 15792;
   ___cxa_throw($30 | 0, 9584, 225);
  } else {
   $33 = __Znwm($$sroa$speculated << 2) | 0;
   break;
  } while (0);
  $34 = $33;
  $35 = $33 + ($27 << 2) | 0;
  $36 = $35;
  $38 = $33 + ($$sroa$speculated << 2) | 0;
  if (($9 | 0) == ($3 | 0)) {
   $$sroa$13$1 = $36;
   $51 = $11;
  } else {
   $44 = $27 + (($3 + -4 - $10 | 0) >>> 2) + 1 | 0;
   $$sroa$13$0$ptr = $35;
   $46 = $9;
   while (1) {
    HEAP32[$$sroa$13$0$ptr >> 2] = HEAP32[$46 >> 2];
    $46 = $46 + 4 | 0;
    if (($46 | 0) == ($3 | 0)) break; else $$sroa$13$0$ptr = $$sroa$13$0$ptr + 4 | 0;
   }
   $$sroa$13$1 = $33 + ($44 << 2) | 0;
   $51 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $34;
  HEAP32[$8 >> 2] = $36;
  HEAP32[$2 >> 2] = $$sroa$13$1;
  HEAP32[$4 >> 2] = $38;
  if (!$51) $55 = $$sroa$13$1; else {
   __ZdlPv($51);
   $55 = HEAP32[$2 >> 2] | 0;
  }
 } else $55 = $3; while (0);
 HEAP32[$55 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 4;
 return;
}

function __ZZN3sgl9WebWindow4InitEvEN3__48__invokeEP10GLFWwindowiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $20 = 0, $25 = 0, $27 = 0, $31 = 0, $35 = 0, $37 = 0, $41 = 0, $46 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $5 = sp;
 $6 = _glfwGetWindowUserPointer($0 | 0) | 0;
 switch ($3 | 0) {
 case 1:
  {
   switch ($1 | 0) {
   case 257:
    {
     $7 = HEAP32[7749] | 0;
     if (FUNCTION_TABLE_iii[HEAP32[HEAP32[$7 >> 2] >> 2] & 31]($7, 342) | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 255]($6);
     break;
    }
   case 256:
    {
     $14 = $6 + 57 | 0;
     if (HEAP8[$14 >> 0] | 0) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 255]($6);
      HEAP8[$14 >> 0] = 0;
     }
     break;
    }
   default:
    {}
   }
   $20 = __Znwm(16) | 0;
   HEAP8[$20 + 4 >> 0] = 0;
   HEAP32[$20 + 8 >> 2] = $1;
   HEAP32[$20 >> 2] = 11168;
   HEAP32[$20 + 12 >> 2] = 0;
   HEAP32[$5 >> 2] = $20;
   $25 = HEAP32[$6 + 24 >> 2] | 0;
   if (!$25) {
    $27 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$27 >> 2] = 12364;
    ___cxa_throw($27 | 0, 8032, 141);
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$25 >> 2] | 0) + 24 >> 2] & 127]($25, $5);
   STACKTOP = sp;
   return;
  }
 case 0:
  {
   $31 = __Znwm(12) | 0;
   HEAP8[$31 + 4 >> 0] = 0;
   HEAP32[$31 + 8 >> 2] = $1;
   HEAP32[$31 >> 2] = 11192;
   HEAP32[$5 >> 2] = $31;
   $35 = HEAP32[$6 + 24 >> 2] | 0;
   if (!$35) {
    $37 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$37 >> 2] = 12364;
    ___cxa_throw($37 | 0, 8032, 141);
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$35 >> 2] | 0) + 24 >> 2] & 127]($35, $5);
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   $41 = __Znwm(16) | 0;
   HEAP8[$41 + 4 >> 0] = 0;
   HEAP32[$41 + 8 >> 2] = $1;
   HEAP32[$41 >> 2] = 11168;
   HEAP32[$41 + 12 >> 2] = 1;
   HEAP32[$5 >> 2] = $41;
   $46 = HEAP32[$6 + 24 >> 2] | 0;
   if (!$46) {
    $48 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$48 >> 2] = 12364;
    ___cxa_throw($48 | 0, 8032, 141);
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$46 >> 2] | 0) + 24 >> 2] & 127]($46, $5);
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 8 | 0;
 HEAP8[$5 >> 0] = HEAP8[23644] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[23645] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[23646] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[23647] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[23648] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[23649] | 0;
 $10 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 23650, 0, HEAP32[$10 >> 2] | 0);
 $$lobit = (HEAP32[$10 >> 2] | 0) >>> 9 & 1;
 $14 = $$lobit | 12;
 $15 = _llvm_stacksave() | 0;
 $$alloca_mul = $14;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $17 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $19 = $16 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16, $14, $17, $5, $$byval_copy) | 0) | 0;
 $20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16, $19, $2) | 0;
 $$alloca_mul6 = $$lobit << 1 | 21;
 $23 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul6 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul6 | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($16, $20, $19, $23, $6, $7, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
 $25 = HEAP32[$6 >> 2] | 0;
 $26 = HEAP32[$7 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
 $27 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $23, $25, $26, $2, $3) | 0;
 _llvm_stackrestore($15 | 0);
 STACKTOP = sp;
 return $27 | 0;
}

function __ZN6spdlog7details11R_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $17 = 0, $19 = 0, $23 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $46 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 5, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 8 >> 2] | 0, $3);
 $8 = $3 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 + 1 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $10);
  $$pre$i = HEAP32[$8 >> 2] | 0;
  $$pre$phi$iZ2D = $$pre$i + 1 | 0;
  $19 = $$pre$i;
 } else {
  $$pre$phi$iZ2D = $10;
  $19 = $9;
 }
 $17 = HEAP32[$3 + 4 >> 2] | 0;
 HEAP32[$8 >> 2] = $$pre$phi$iZ2D;
 HEAP8[$17 + $19 >> 0] = 58;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 4 >> 2] | 0, $3);
 $23 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$23) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $23 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $29 = HEAP32[$4 + 12 >> 2] | 0;
 $31 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$29) {
  STACKTOP = sp;
  return;
 }
 $33 = $29 + $23 | 0;
 $34 = $31 + 8 | 0;
 if (($23 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $36 = HEAP32[$34 >> 2] | 0;
 $37 = $36 + $23 | 0;
 if ((HEAP32[$31 + 12 >> 2] | 0) >>> 0 < $37 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$31 >> 2] >> 2] & 127]($31, $37);
  $46 = HEAP32[$34 >> 2] | 0;
 } else $46 = $36;
 $$010$i$i$i$i$i = $29;
 $$089$i$i$i$i$i = (HEAP32[$31 + 4 >> 2] | 0) + $46 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($33 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$34 >> 2] = $37;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal14sprintf_formatIdEEvT_RNS1_12basic_bufferIcEENS0_17core_format_specsE($0, $1, $2) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$030 = 0, $$131 = 0, $$lcssa = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $33 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $51 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $3 = sp + 24 | 0;
 $4 = $1 + 12 | 0;
 if (!(HEAP32[$4 >> 2] | 0)) ___assert_fail(17591, 17631, 767, 17683);
 $7 = $3 + 1 | 0;
 HEAP8[$3 >> 0] = 37;
 if (!(HEAP8[$2 + 4 >> 0] & 8)) $$030 = $7; else {
  HEAP8[$7 >> 0] = 35;
  $$030 = $3 + 2 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) > -1) {
  HEAP8[$$030 >> 0] = 46;
  HEAP8[$$030 + 1 >> 0] = 42;
  $$131 = $$030 + 2 | 0;
 } else $$131 = $$030;
 HEAP8[$$131 >> 0] = HEAP8[$2 + 5 >> 0] | 0;
 HEAP8[$$131 + 1 >> 0] = 0;
 $20 = $1 + 4 | 0;
 $21 = HEAP32[$2 >> 2] | 0;
 if (($21 | 0) < 0) {
  while (1) {
   $23 = HEAP32[$4 >> 2] | 0;
   $24 = HEAP32[$20 >> 2] | 0;
   HEAPF64[$vararg_buffer >> 3] = $0;
   $25 = _snprintf($24, $23, $3, $vararg_buffer) | 0;
   $27 = HEAP32[$4 >> 2] | 0;
   if (($25 | 0) > -1) {
    if ($25 >>> 0 < $27 >>> 0) {
     $$lcssa = $25;
     break;
    }
    $33 = $25 + 1 | 0;
    if ($27 >>> 0 < $33 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $33);
   } else if (($27 | 0) != -1) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $27 + 1 | 0);
  }
  $51 = $1 + 8 | 0;
  HEAP32[$51 >> 2] = $$lcssa;
  STACKTOP = sp;
  return;
 } else {
  while (1) {
   $37 = HEAP32[$4 >> 2] | 0;
   $38 = HEAP32[$20 >> 2] | 0;
   HEAP32[$vararg_buffer1 >> 2] = $21;
   HEAPF64[$vararg_buffer1 + 8 >> 3] = $0;
   $39 = _snprintf($38, $37, $3, $vararg_buffer1) | 0;
   $41 = HEAP32[$4 >> 2] | 0;
   if (($39 | 0) > -1) {
    if ($39 >>> 0 < $41 >>> 0) {
     $$lcssa = $39;
     break;
    }
    $43 = $39 + 1 | 0;
    if ($41 >>> 0 < $43 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $43);
   } else if (($41 | 0) != -1) FUNCTION_TABLE_vii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1, $41 + 1 | 0);
  }
  $51 = $1 + 8 | 0;
  HEAP32[$51 >> 2] = $$lcssa;
  STACKTOP = sp;
  return;
 }
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_17inf_or_nan_writerEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$071 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $19 = 0, $20 = 0, $25 = 0, $3 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $42 = 0, $47 = 0, $49 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $8 = 0, $9 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP8[$2 >> 0] | 0;
 $6 = $4 << 24 >> 24 == 0 ? 3 : 4;
 $8 = HEAP32[$0 >> 2] | 0;
 $9 = $8 + 8 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if ($3 >>> 0 <= $6 >>> 0) {
  $11 = $10 + $6 | 0;
  if ((HEAP32[$8 + 12 >> 2] | 0) >>> 0 < $11 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$8 >> 2] >> 2] & 127]($8, $11);
   $20 = HEAP8[$2 >> 0] | 0;
  } else $20 = $4;
  HEAP32[$9 >> 2] = $11;
  $19 = (HEAP32[$8 + 4 >> 2] | 0) + $10 | 0;
  if (!($20 << 24 >> 24)) $$0 = $19; else {
   HEAP8[$19 >> 0] = $20;
   $$0 = $19 + 1 | 0;
  }
  _memmove($$0 | 0, HEAP32[$2 + 4 >> 2] | 0, 3) | 0;
  return;
 }
 $25 = $10 + $3 | 0;
 if ((HEAP32[$8 + 12 >> 2] | 0) >>> 0 < $25 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$8 >> 2] >> 2] & 127]($8, $25);
 HEAP32[$9 >> 2] = $25;
 $33 = (HEAP32[$8 + 4 >> 2] | 0) + $10 | 0;
 $36 = HEAP32[$1 + 4 >> 2] & 255;
 $37 = $3 - $6 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($37 | 0) _memset($33 | 0, $36 | 0, $37 | 0) | 0;
   $41 = $33 + $37 | 0;
   $42 = HEAP8[$2 >> 0] | 0;
   if (!($42 << 24 >> 24)) $$071 = $41; else {
    HEAP8[$41 >> 0] = $42;
    $$071 = $41 + 1 | 0;
   }
   _memmove($$071 | 0, HEAP32[$2 + 4 >> 2] | 0, 3) | 0;
   return;
  }
 case 3:
  {
   $47 = $37 >>> 1;
   if ($47 | 0) _memset($33 | 0, $36 | 0, $47 | 0) | 0;
   $49 = $33 + $47 | 0;
   $50 = HEAP8[$2 >> 0] | 0;
   if (!($50 << 24 >> 24)) $$1 = $49; else {
    HEAP8[$49 >> 0] = $50;
    $$1 = $49 + 1 | 0;
   }
   _memmove($$1 | 0, HEAP32[$2 + 4 >> 2] | 0, 3) | 0;
   $55 = $37 - $47 | 0;
   if (!$55) return;
   _memset($$1 + 3 | 0, $36 | 0, $55 | 0) | 0;
   return;
  }
 default:
  {
   $58 = HEAP8[$2 >> 0] | 0;
   if (!($58 << 24 >> 24)) $$2 = $33; else {
    HEAP8[$33 >> 0] = $58;
    $$2 = $33 + 1 | 0;
   }
   _memmove($$2 | 0, HEAP32[$2 + 4 >> 2] | 0, 3) | 0;
   if (!$37) return;
   _memset($$2 + 3 | 0, $36 | 0, $37 | 0) | 0;
   return;
  }
 }
}

function __ZN3fmt2v58internal17handle_char_specsIcNS1_18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE17char_spec_handlerEEEvPKNS0_18basic_format_specsIT_EEOT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $48 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 if (!$0) {
  __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE17char_spec_handler7on_charEv($1);
  STACKTOP = sp;
  return;
 }
 switch (HEAP8[$0 + 17 >> 0] | 0) {
 case 99:
 case 0:
  {
   if ((HEAP32[$0 + 8 >> 2] | 0) == 4) {
    $48 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($48, 17557);
    ___cxa_throw($48 | 0, 6792, 18);
   }
   if (HEAP8[$0 + 16 >> 0] | 0) {
    $48 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($48, 17557);
    ___cxa_throw($48 | 0, 6792, 18);
   }
   __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE17char_spec_handler7on_charEv($1);
   STACKTOP = sp;
   return;
  }
 default:
  {}
 }
 $6 = HEAP32[$1 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $11 = HEAP8[$1 + 4 >> 0] | 0;
 if (!$8) {
  $30 = HEAP32[$6 >> 2] | 0;
  $31 = $30 + 8 | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  $33 = $32 + 1 | 0;
  if ((HEAP32[$30 + 12 >> 2] | 0) >>> 0 < $33 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$30 >> 2] >> 2] & 127]($30, $33);
  HEAP32[$31 >> 2] = $33;
  HEAP8[(HEAP32[$30 + 4 >> 2] | 0) + $32 >> 0] = $11;
  STACKTOP = sp;
  return;
 }
 $13 = HEAP8[$8 + 17 >> 0] | 0;
 HEAP32[$2 >> 2] = $6;
 HEAP32[$2 + 4 >> 2] = $8;
 $15 = $2 + 8 | 0;
 $16 = $11 << 24 >> 24;
 HEAP32[$15 >> 2] = $16;
 $17 = $2 + 16 | 0;
 HEAP32[$17 >> 2] = 0;
 if ($11 << 24 >> 24 < 0) {
  HEAP8[$2 + 12 >> 0] = 45;
  HEAP32[$17 >> 2] = 1;
  HEAP32[$15 >> 2] = 0 - $16;
 } else {
  $23 = HEAPU8[$8 + 16 >> 0] | 0;
  if ($23 & 1 | 0) {
   HEAP8[$2 + 12 >> 0] = ($23 & 2 | 0) == 0 ? 32 : 43;
   HEAP32[$17 >> 2] = 1;
  }
 }
 __ZN3fmt2v58internal20handle_int_type_specINS0_12basic_writerINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE10int_writerIcNS0_18basic_format_specsIcEEEEEEvcOT_($13, $2);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIyNS0_18basic_format_specsIcEEE6on_numEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$neg$i = 0, $1 = 0, $11 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $47 = 0, $48 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $4 = $3;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $11 = _llvm_ctlz_i64($6 | 1 | 0, $9 | 0, 1) | 0;
 getTempRet0() | 0;
 $15 = ((64 - $11 | 0) * 1233 | 0) >>> 12;
 $17 = 272 + ($15 << 3) | 0;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 $$neg$i = ($22 >>> 0 > $9 >>> 0 | (($22 | 0) == ($9 | 0) ? (HEAP32[$17 >> 2] | 0) >>> 0 > $6 >>> 0 : 0)) << 31 >> 31;
 $30 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0;
 if (!$30) __ZNSt3__26localeC2Ev($$byval_copy1); else __ZNSt3__26localeC2ERKS0_($$byval_copy1, $30);
 $32 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1, 32704) | 0;
 $36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 16 >> 2] & 127]($32) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy1);
 $37 = $15 + $$neg$i | 0;
 $40 = $37 + 1 + (($37 | 0) / 3 | 0) | 0;
 $41 = HEAP32[$0 >> 2] | 0;
 $44 = HEAP32[$0 + 20 >> 2] | 0;
 HEAP32[$1 >> 2] = $0 + 16;
 HEAP32[$1 + 4 >> 2] = $44;
 $47 = HEAP32[$0 + 4 >> 2] | 0;
 $48 = $3;
 $53 = HEAP32[$48 + 4 >> 2] | 0;
 $54 = $2;
 HEAP32[$54 >> 2] = HEAP32[$48 >> 2];
 HEAP32[$54 + 4 >> 2] = $53;
 HEAP32[$2 + 8 >> 2] = $40;
 HEAP8[$2 + 12 >> 0] = $36;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIySA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($41, $40, $$byval_copy, $47, $$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIxNS0_18basic_format_specsIcEEE6on_numEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$neg$i = 0, $1 = 0, $11 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $47 = 0, $48 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $4 = $3;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $11 = _llvm_ctlz_i64($6 | 1 | 0, $9 | 0, 1) | 0;
 getTempRet0() | 0;
 $15 = ((64 - $11 | 0) * 1233 | 0) >>> 12;
 $17 = 272 + ($15 << 3) | 0;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 $$neg$i = ($22 >>> 0 > $9 >>> 0 | (($22 | 0) == ($9 | 0) ? (HEAP32[$17 >> 2] | 0) >>> 0 > $6 >>> 0 : 0)) << 31 >> 31;
 $30 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0;
 if (!$30) __ZNSt3__26localeC2Ev($$byval_copy1); else __ZNSt3__26localeC2ERKS0_($$byval_copy1, $30);
 $32 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1, 32704) | 0;
 $36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 16 >> 2] & 127]($32) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy1);
 $37 = $15 + $$neg$i | 0;
 $40 = $37 + 1 + (($37 | 0) / 3 | 0) | 0;
 $41 = HEAP32[$0 >> 2] | 0;
 $44 = HEAP32[$0 + 20 >> 2] | 0;
 HEAP32[$1 >> 2] = $0 + 16;
 HEAP32[$1 + 4 >> 2] = $44;
 $47 = HEAP32[$0 + 4 >> 2] | 0;
 $48 = $3;
 $53 = HEAP32[$48 + 4 >> 2] | 0;
 $54 = $2;
 HEAP32[$54 >> 2] = HEAP32[$48 >> 2];
 HEAP32[$54 + 4 >> 2] = $53;
 HEAP32[$2 + 8 >> 2] = $40;
 HEAP8[$2 + 12 >> 0] = $36;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIxSA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($41, $40, $$byval_copy, $47, $$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11b_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i = 0, $11 = 0, $12 = 0, $15 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $54 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $8 = HEAP32[464 + (HEAP32[$2 + 16 >> 2] << 2) >> 2] | 0;
 $9 = _strlen($8) | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $9, $0 + 4 | 0, $3);
 $11 = $8 + $9 | 0;
 $12 = $3 + 8 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $15 = (HEAP32[$12 >> 2] | 0) + $9 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $15 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $15);
 if ($9 | 0) {
  $$010$i$i$i = $8;
  $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($11 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$12 >> 2] = $15;
 $31 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$31) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $31 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $37 = HEAP32[$4 + 12 >> 2] | 0;
 $39 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$37) {
  STACKTOP = sp;
  return;
 }
 $41 = $37 + $31 | 0;
 $42 = $39 + 8 | 0;
 if (($31 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $44 = HEAP32[$42 >> 2] | 0;
 $45 = $44 + $31 | 0;
 if ((HEAP32[$39 + 12 >> 2] | 0) >>> 0 < $45 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$39 >> 2] >> 2] & 127]($39, $45);
  $54 = HEAP32[$42 >> 2] | 0;
 } else $54 = $44;
 $$010$i$i$i$i$i = $37;
 $$089$i$i$i$i$i = (HEAP32[$39 + 4 >> 2] | 0) + $54 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($41 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$42 >> 2] = $45;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11a_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i = 0, $11 = 0, $12 = 0, $15 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $54 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $8 = HEAP32[432 + (HEAP32[$2 + 24 >> 2] << 2) >> 2] | 0;
 $9 = _strlen($8) | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $9, $0 + 4 | 0, $3);
 $11 = $8 + $9 | 0;
 $12 = $3 + 8 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $15 = (HEAP32[$12 >> 2] | 0) + $9 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $15 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $15);
 if ($9 | 0) {
  $$010$i$i$i = $8;
  $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($11 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$12 >> 2] = $15;
 $31 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$31) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $31 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $37 = HEAP32[$4 + 12 >> 2] | 0;
 $39 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$37) {
  STACKTOP = sp;
  return;
 }
 $41 = $37 + $31 | 0;
 $42 = $39 + 8 | 0;
 if (($31 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $44 = HEAP32[$42 >> 2] | 0;
 $45 = $44 + $31 | 0;
 if ((HEAP32[$39 + 12 >> 2] | 0) >>> 0 < $45 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$39 >> 2] >> 2] & 127]($39, $45);
  $54 = HEAP32[$42 >> 2] | 0;
 } else $54 = $44;
 $$010$i$i$i$i$i = $37;
 $$089$i$i$i$i$i = (HEAP32[$39 + 4 >> 2] | 0) + $54 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($41 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$42 >> 2] = $45;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11B_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i = 0, $11 = 0, $12 = 0, $15 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $54 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $8 = HEAP32[512 + (HEAP32[$2 + 16 >> 2] << 2) >> 2] | 0;
 $9 = _strlen($8) | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $9, $0 + 4 | 0, $3);
 $11 = $8 + $9 | 0;
 $12 = $3 + 8 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $15 = (HEAP32[$12 >> 2] | 0) + $9 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $15 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $15);
 if ($9 | 0) {
  $$010$i$i$i = $8;
  $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($11 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$12 >> 2] = $15;
 $31 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$31) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $31 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $37 = HEAP32[$4 + 12 >> 2] | 0;
 $39 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$37) {
  STACKTOP = sp;
  return;
 }
 $41 = $37 + $31 | 0;
 $42 = $39 + 8 | 0;
 if (($31 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $44 = HEAP32[$42 >> 2] | 0;
 $45 = $44 + $31 | 0;
 if ((HEAP32[$39 + 12 >> 2] | 0) >>> 0 < $45 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$39 >> 2] >> 2] & 127]($39, $45);
  $54 = HEAP32[$42 >> 2] | 0;
 } else $54 = $44;
 $$010$i$i$i$i$i = $37;
 $$089$i$i$i$i$i = (HEAP32[$39 + 4 >> 2] | 0) + $54 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($41 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$42 >> 2] = $45;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11A_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$010$i$i$i$i$i = 0, $$089$i$i$i = 0, $$089$i$i$i$i$i = 0, $11 = 0, $12 = 0, $15 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $54 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $8 = HEAP32[560 + (HEAP32[$2 + 24 >> 2] << 2) >> 2] | 0;
 $9 = _strlen($8) | 0;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $9, $0 + 4 | 0, $3);
 $11 = $8 + $9 | 0;
 $12 = $3 + 8 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $15 = (HEAP32[$12 >> 2] | 0) + $9 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $15 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $15);
 if ($9 | 0) {
  $$010$i$i$i = $8;
  $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($11 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$12 >> 2] = $15;
 $31 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$31) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $31 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $37 = HEAP32[$4 + 12 >> 2] | 0;
 $39 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$37) {
  STACKTOP = sp;
  return;
 }
 $41 = $37 + $31 | 0;
 $42 = $39 + 8 | 0;
 if (($31 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $44 = HEAP32[$42 >> 2] | 0;
 $45 = $44 + $31 | 0;
 if ((HEAP32[$39 + 12 >> 2] | 0) >>> 0 < $45 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$39 >> 2] >> 2] & 127]($39, $45);
  $54 = HEAP32[$42 >> 2] | 0;
 } else $54 = $44;
 $$010$i$i$i$i$i = $37;
 $$089$i$i$i$i$i = (HEAP32[$39 + 4 >> 2] | 0) + $54 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($41 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$42 >> 2] = $45;
 STACKTOP = sp;
 return;
}

function __ZN3sgl9WebWindow4InitEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$byval_copy1 = 0, $1 = 0, $16 = 0, $17 = 0, $19 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy1 = sp + 12 | 0;
 $1 = sp;
 if (!(_glfwInit() | 0)) {
  $4 = HEAP32[7738] | 0;
  HEAP32[$1 >> 2] = 33137;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 33137;
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  __ZN6spdlog6logger3logENS_10source_locENS_5level10level_enumEPKc($4, $$byval_copy1, 4, 21845);
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _glfwWindowHint(139270, 1);
 _glfwWindowHint(139266, 3);
 _glfwWindowHint(139267, 3);
 _glfwWindowHint(139272, 204801);
 _glfwWindowHint(135181, 4);
 _glfwWindowHint(131075, 0);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 127]($0, 1);
 $16 = _glfwCreateWindow(HEAP32[$0 + 44 >> 2] | 0, HEAP32[$0 + 48 >> 2] | 0, HEAP32[$0 + 52 >> 2] | 0, 0, 0) | 0;
 $17 = $0 + 40 | 0;
 HEAP32[$17 >> 2] = $16;
 if (!$16) {
  _glfwTerminate();
  $19 = HEAP32[7738] | 0;
  HEAP32[$1 >> 2] = 33137;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 33137;
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  __ZN6spdlog6logger3logENS_10source_locENS_5level10level_enumEPKc($19, $$byval_copy1, 4, 21862);
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _glfwMakeContextCurrent($16 | 0);
  _glfwSetWindowUserPointer(HEAP32[$17 >> 2] | 0, $0 | 0);
  _emscripten_set_fullscreenchange_callback_on_thread(0, HEAP32[$17 >> 2] | 0, 0, 27, 2) | 0;
  _glfwSetWindowSizeCallback(HEAP32[$17 >> 2] | 0, 4) | 0;
  _glfwSetFramebufferSizeCallback(HEAP32[$17 >> 2] | 0, 5) | 0;
  _glfwSetDropCallback(HEAP32[$17 >> 2] | 0, 6) | 0;
  _glfwSetMouseButtonCallback(HEAP32[$17 >> 2] | 0, 48) | 0;
  _glfwSetKeyCallback(HEAP32[$17 >> 2] | 0, 4) | 0;
  _glfwSetWindowCloseCallback(HEAP32[$17 >> 2] | 0, 231) | 0;
  _glEnable(2884);
  _glCullFace(1029);
  _glEnable(2929);
  _glDepthFunc(515);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $7 = $0 + 20 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
 HEAP32[$3 + 4 >> 2] = $9;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
  $$04756 = 2;
  $$04855 = $12;
  $$04954 = $3;
  $26 = $17;
  while (1) {
   if (($26 | 0) < 0) break;
   $$04855 = $$04855 - $26 | 0;
   $37 = HEAP32[$$04954 + 4 >> 2] | 0;
   $38 = $26 >>> 0 > $37 >>> 0;
   $$150 = $38 ? $$04954 + 8 | 0 : $$04954;
   $$1 = $$04756 + ($38 << 31 >> 31) | 0;
   $$0 = $26 - ($38 ? $37 : 0) | 0;
   HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
   $44 = $$150 + 4 | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
   $26 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($$04855 | 0) == ($26 | 0)) {
    label = 3;
    break L1;
   } else {
    $$04756 = $$1;
    $$04954 = $$150;
   }
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$4 >> 2] = $25;
  HEAP32[$7 >> 2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i$i = 0, $$in = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $6 = 0, $7 = 0, $9 = 0, $spec$select$i = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = ((HEAP32[$2 >> 2] | 0) - $4 | 0) / 12 | 0;
 $7 = $6 + 1 | 0;
 if ($7 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $9 = $0 + 8 | 0;
 $12 = ((HEAP32[$9 >> 2] | 0) - $4 | 0) / 12 | 0;
 $14 = $12 << 1;
 $spec$select$i = $12 >>> 0 < 178956970 ? ($14 >>> 0 < $7 >>> 0 ? $7 : $14) : 357913941;
 do if (!$spec$select$i) $22 = 0; else if ($spec$select$i >>> 0 > 357913941) {
  $18 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($18, 22468);
  HEAP32[$18 >> 2] = 15792;
  ___cxa_throw($18 | 0, 9584, 225);
 } else {
  $22 = __Znwm($spec$select$i * 12 | 0) | 0;
  break;
 } while (0);
 $21 = $22 + ($6 * 12 | 0) | 0;
 $24 = $22 + ($spec$select$i * 12 | 0) | 0;
 HEAP32[$21 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$21 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$21 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $26 = $21 + 12 | 0;
 $27 = HEAP32[$0 >> 2] | 0;
 $28 = HEAP32[$2 >> 2] | 0;
 if (($28 | 0) == ($27 | 0)) {
  $$in = $21;
  $36 = $27;
  $38 = $27;
 } else {
  $$06$i$i = $28;
  $32 = $21;
  do {
   $32 = $32 + -12 | 0;
   $$06$i$i = $$06$i$i + -12 | 0;
   HEAP32[$32 >> 2] = HEAP32[$$06$i$i >> 2];
   HEAP32[$32 + 4 >> 2] = HEAP32[$$06$i$i + 4 >> 2];
   HEAP32[$32 + 8 >> 2] = HEAP32[$$06$i$i + 8 >> 2];
   HEAP32[$$06$i$i >> 2] = 0;
   HEAP32[$$06$i$i + 4 >> 2] = 0;
   HEAP32[$$06$i$i + 8 >> 2] = 0;
  } while (($$06$i$i | 0) != ($27 | 0));
  $$in = $32;
  $36 = HEAP32[$0 >> 2] | 0;
  $38 = HEAP32[$2 >> 2] | 0;
 }
 HEAP32[$0 >> 2] = $$in;
 HEAP32[$2 >> 2] = $26;
 HEAP32[$9 >> 2] = $24;
 $37 = $36;
 if (($38 | 0) != ($37 | 0)) {
  $41 = $38;
  do {
   $41 = $41 + -12 | 0;
   if ((HEAP8[$41 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$41 >> 2] | 0);
  } while (($41 | 0) != ($37 | 0));
 }
 if (!$36) return;
 __ZdlPv($36);
 return;
}

function __ZN3sgl12VertexBuffer10BindLayoutERK18VertexBufferLayout($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$02931 = 0, $$032 = 0, $$ph = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $4 = 0, $47 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = 0;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $2 + 8 | 0;
 HEAP32[$4 >> 2] = 0;
 $7 = HEAP32[$1 >> 2] | 0;
 $8 = (HEAP32[$1 + 4 >> 2] | 0) - $7 | 0;
 $9 = ($8 | 0) / 12 | 0;
 if (!$8) {
  $$ph = 0;
  label = 5;
 } else {
  if ($9 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($2);
  $12 = __Znwm($8) | 0;
  HEAP32[$3 >> 2] = $12;
  HEAP32[$2 >> 2] = $12;
  HEAP32[$4 >> 2] = $12 + ($9 * 12 | 0);
  if (($8 | 0) > 0) {
   _memcpy($12 | 0, $7 | 0, $8 | 0) | 0;
   $17 = $12 + ((($8 >>> 0) / 12 | 0) * 12 | 0) | 0;
   HEAP32[$3 >> 2] = $17;
   if (($17 | 0) == ($12 | 0)) {
    $24 = $12;
    $26 = $3;
   } else {
    $19 = $1 + 12 | 0;
    $$02931 = 0;
    $$032 = 0;
    $28 = $12;
    do {
     $27 = $28 + ($$02931 * 12 | 0) + 4 | 0;
     $30 = $28 + ($$02931 * 12 | 0) | 0;
     _glVertexAttribPointer($$02931 | 0, HEAP32[$27 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$28 + ($$02931 * 12 | 0) + 8 >> 2] & 255 | 0, HEAP32[$19 >> 2] | 0, $$032 | 0);
     _glEnableVertexAttribArray($$02931 | 0);
     $37 = HEAP32[$27 >> 2] | 0;
     switch (HEAP32[$30 >> 2] | 0) {
     case 5125:
     case 5126:
      {
       $$0$i = 4;
       break;
      }
     case 5121:
      {
       $$0$i = 1;
       break;
      }
     default:
      $$0$i = 0;
     }
     $$032 = (Math_imul($$0$i, $37) | 0) + $$032 | 0;
     $$02931 = $$02931 + 1 | 0;
     $28 = HEAP32[$2 >> 2] | 0;
    } while ($$02931 >>> 0 < (((HEAP32[$3 >> 2] | 0) - $28 | 0) / 12 | 0) >>> 0);
    $22 = $28;
    $47 = $3;
    label = 9;
   }
  } else {
   $$ph = $12;
   label = 5;
  }
 }
 if ((label | 0) == 5) {
  $22 = $$ph;
  $47 = $3;
  label = 9;
 }
 if ((label | 0) == 9) if (!$22) {
  STACKTOP = sp;
  return;
 } else {
  $24 = $22;
  $26 = $47;
 }
 HEAP32[$26 >> 2] = $24;
 __ZdlPv($24);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal11parse_alignIcRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEEEPKT_SH_SH_OT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$1$ph = 0, $$126 = 0, $$128$ph = 0, $$sink59 = 0, $10 = 0, $12 = 0, $15 = 0, $18 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $4 = 0, label = 0;
 if (($0 | 0) == ($1 | 0)) ___assert_fail(17949, 17437, 1849, 17970);
 $4 = $0 + 1 | 0;
 $$126 = ($4 | 0) != ($1 | 0) & 1;
 L4 : while (1) {
  switch (HEAP8[$0 + $$126 >> 0] | 0) {
  case 60:
   {
    label = 7;
    break L4;
    break;
   }
  case 62:
   {
    $$128$ph = 2;
    break L4;
    break;
   }
  case 61:
   {
    label = 5;
    break L4;
    break;
   }
  case 94:
   {
    label = 6;
    break L4;
    break;
   }
  default:
   {}
  }
  if (($$126 | 0) > 0) $$126 = $$126 + -1 | 0; else {
   $$1 = $0;
   label = 24;
   break;
  }
 }
 if ((label | 0) == 5) $$128$ph = 4; else if ((label | 0) == 6) $$128$ph = 3; else if ((label | 0) == 7) $$128$ph = 1; else if ((label | 0) == 24) return $$1 | 0;
 if (($$126 | 0) > 0) {
  $10 = HEAP8[$0 >> 0] | 0;
  if ($10 << 24 >> 24 == 123) {
   $12 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($12, 17982);
   ___cxa_throw($12 | 0, 6792, 18);
  }
  $20 = $0 + 2 | 0;
  $22 = HEAP32[$2 >> 2] | 0;
  HEAP32[$22 + 4 >> 2] = $10 << 24 >> 24;
  if (($$128$ph | 0) == 4) {
   $26 = HEAP32[$2 + 8 >> 2] | 0;
   if (($26 | 0) == 1) ___assert_fail(18052, 18966, 546, 18111);
   if (($26 + -1 | 0) >>> 0 < 9) {
    $$1$ph = $20;
    $$sink59 = $22;
   } else {
    $29 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($29, 18009);
    ___cxa_throw($29 | 0, 6792, 18);
   }
  } else {
   $$1$ph = $20;
   $$sink59 = $22;
  }
 } else {
  if (($$128$ph | 0) == 4) {
   $15 = HEAP32[$2 + 8 >> 2] | 0;
   if (($15 | 0) == 1) ___assert_fail(18052, 18966, 546, 18111);
   if (($15 + -1 | 0) >>> 0 >= 9) {
    $18 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($18, 18009);
    ___cxa_throw($18 | 0, 6792, 18);
   }
  }
  $$1$ph = $4;
  $$sink59 = HEAP32[$2 >> 2] | 0;
 }
 HEAP32[$$sink59 + 8 >> 2] = $$128$ph;
 $$1 = $$1$ph;
 return $$1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 20 | 0;
 $10 = $6;
 HEAP32[$10 >> 2] = 37;
 HEAP32[$10 + 4 >> 2] = 0;
 $15 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 23641, 1, HEAP32[$15 >> 2] | 0);
 $$lobit = (HEAP32[$15 >> 2] | 0) >>> 9 & 1;
 $19 = $$lobit + 23 | 0;
 $20 = _llvm_stacksave() | 0;
 $$alloca_mul = $19;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $22 = __ZNSt3__26__clocEv() | 0;
 $23 = $$byval_copy;
 HEAP32[$23 >> 2] = $4;
 HEAP32[$23 + 4 >> 2] = $5;
 $28 = $21 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($21, $19, $22, $6, $$byval_copy) | 0) | 0;
 $29 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($21, $28, $2) | 0;
 $$alloca_mul6 = ($$lobit << 1 | 44) + -1 << 2;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul6 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul6 | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($21, $29, $28, $33, $7, $8, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
 $35 = HEAP32[$7 >> 2] | 0;
 $36 = HEAP32[$8 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
 $37 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $33, $35, $36, $2, $3) | 0;
 _llvm_stackrestore($20 | 0);
 STACKTOP = sp;
 return $37 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 20 | 0;
 $10 = $6;
 HEAP32[$10 >> 2] = 37;
 HEAP32[$10 + 4 >> 2] = 0;
 $15 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 23641, 1, HEAP32[$15 >> 2] | 0);
 $$lobit = (HEAP32[$15 >> 2] | 0) >>> 9 & 1;
 $19 = $$lobit + 23 | 0;
 $20 = _llvm_stacksave() | 0;
 $$alloca_mul = $19;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $22 = __ZNSt3__26__clocEv() | 0;
 $23 = $$byval_copy;
 HEAP32[$23 >> 2] = $4;
 HEAP32[$23 + 4 >> 2] = $5;
 $28 = $21 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($21, $19, $22, $6, $$byval_copy) | 0) | 0;
 $29 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($21, $28, $2) | 0;
 $$alloca_mul6 = ($$lobit << 1 | 44) + -1 | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul6 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul6 | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($21, $29, $28, $33, $7, $8, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
 $35 = HEAP32[$7 >> 2] | 0;
 $36 = HEAP32[$8 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
 $37 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $33, $35, $36, $2, $3) | 0;
 _llvm_stackrestore($20 | 0);
 STACKTOP = sp;
 return $37 | 0;
}

function __ZN3sgl6ShaderC2EPKcS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$016$i$i = 0, $$016$i$i8 = 0, $$017$i$i = 0, $$017$i$i9 = 0, $11 = 0, $12 = 0, $20 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = $0 + 4 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 1065353216;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $7 = _strlen($1) | 0;
 if ($7 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($3);
 if ($7 >>> 0 < 11) {
  HEAP8[$3 + 11 >> 0] = $7;
  if (!$7) $$017$i$i = $3; else {
   $$016$i$i = $3;
   label = 6;
  }
 } else {
  $11 = $7 + 16 & -16;
  $12 = __Znwm($11) | 0;
  HEAP32[$3 >> 2] = $12;
  HEAP32[$3 + 8 >> 2] = $11 | -2147483648;
  HEAP32[$3 + 4 >> 2] = $7;
  $$016$i$i = $12;
  label = 6;
 }
 if ((label | 0) == 6) {
  _memcpy($$016$i$i | 0, $1 | 0, $7 | 0) | 0;
  $$017$i$i = $$016$i$i;
 }
 HEAP8[$$017$i$i + $7 >> 0] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 $20 = _strlen($2) | 0;
 if ($20 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
 if ($20 >>> 0 < 11) {
  HEAP8[$4 + 11 >> 0] = $20;
  if (!$20) $$017$i$i9 = $4; else {
   $$016$i$i8 = $4;
   label = 12;
  }
 } else {
  $24 = $20 + 16 & -16;
  $25 = __Znwm($24) | 0;
  HEAP32[$4 >> 2] = $25;
  HEAP32[$4 + 8 >> 2] = $24 | -2147483648;
  HEAP32[$4 + 4 >> 2] = $20;
  $$016$i$i8 = $25;
  label = 12;
 }
 if ((label | 0) == 12) {
  _memcpy($$016$i$i8 | 0, $2 | 0, $20 | 0) | 0;
  $$017$i$i9 = $$016$i$i8;
 }
 HEAP8[$$017$i$i9 + $20 >> 0] = 0;
 HEAP32[$0 >> 2] = __ZN3sgl6Shader12CreateShaderERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_($0, $3, $4) | 0;
 if ((HEAP8[$4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$4 >> 2] | 0);
 if ((HEAP8[$3 + 11 >> 0] | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$034 = 0, $15 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $scevgep38 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = $1;
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $35 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $36 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $35 = 10;
  $36 = $6 & 255;
 }
 $15 = $2 - $3 | 0;
 do if ($15 | 0) {
  if ($7) {
   $22 = HEAP32[$0 >> 2] | 0;
   $23 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $22 = $0;
   $23 = $6 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1, $22, $22 + $23 | 0) | 0) {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($4, $1, $2);
   $26 = HEAP8[$4 + 11 >> 0] | 0;
   $27 = $26 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0, $27 ? HEAP32[$4 >> 2] | 0 : $4, $27 ? HEAP32[$4 + 4 >> 2] | 0 : $26 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   break;
  }
  if (($35 - $36 | 0) >>> 0 < $15 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $35, $36 + $15 - $35 | 0, $36, $36, 0, 0);
  if ((HEAP8[$5 >> 0] | 0) < 0) $44 = HEAP32[$0 >> 2] | 0; else $44 = $0;
  $scevgep38 = $2 + ($36 - $3) | 0;
  $$0 = $44 + $36 | 0;
  $$034 = $1;
  while (1) {
   if (($$034 | 0) == ($2 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $$034);
   $$0 = $$0 + 1 | 0;
   $$034 = $$034 + 1 | 0;
  }
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($44 + $scevgep38 | 0, $4);
  $49 = $36 + $15 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $49;
   break;
  } else {
   HEAP8[$5 >> 0] = $49;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $10 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 20 | 0;
 $10 = $6;
 HEAP32[$10 >> 2] = 37;
 HEAP32[$10 + 4 >> 2] = 0;
 $15 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 23641, 0, HEAP32[$15 >> 2] | 0);
 $19 = (HEAP32[$15 >> 2] | 0) >>> 9 & 1 | 22;
 $20 = $19 + 1 | 0;
 $21 = _llvm_stacksave() | 0;
 $$alloca_mul = $20;
 $22 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $23 = __ZNSt3__26__clocEv() | 0;
 $24 = $$byval_copy;
 HEAP32[$24 >> 2] = $4;
 HEAP32[$24 + 4 >> 2] = $5;
 $29 = $22 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($22, $20, $23, $6, $$byval_copy) | 0) | 0;
 $30 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($22, $29, $2) | 0;
 $$alloca_mul6 = ($19 << 1) + -1 << 2;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul6 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul6 | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($22, $30, $29, $33, $7, $8, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
 $35 = HEAP32[$7 >> 2] | 0;
 $36 = HEAP32[$8 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
 $37 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $33, $35, $36, $2, $3) | 0;
 _llvm_stackrestore($21 | 0);
 STACKTOP = sp;
 return $37 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $10 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 20 | 0;
 $10 = $6;
 HEAP32[$10 >> 2] = 37;
 HEAP32[$10 + 4 >> 2] = 0;
 $15 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 23641, 0, HEAP32[$15 >> 2] | 0);
 $19 = (HEAP32[$15 >> 2] | 0) >>> 9 & 1 | 22;
 $20 = $19 + 1 | 0;
 $21 = _llvm_stacksave() | 0;
 $$alloca_mul = $20;
 $22 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $23 = __ZNSt3__26__clocEv() | 0;
 $24 = $$byval_copy;
 HEAP32[$24 >> 2] = $4;
 HEAP32[$24 + 4 >> 2] = $5;
 $29 = $22 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($22, $20, $23, $6, $$byval_copy) | 0) | 0;
 $30 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($22, $29, $2) | 0;
 $$alloca_mul6 = ($19 << 1) + -1 | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul6 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul6 | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($22, $30, $29, $33, $7, $8, $$byval_copy);
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
 $35 = HEAP32[$7 >> 2] | 0;
 $36 = HEAP32[$8 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
 $37 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $33, $35, $36, $2, $3) | 0;
 _llvm_stackrestore($21 | 0);
 STACKTOP = sp;
 return $37 | 0;
}

function __ZN3fmt2v58internal11parse_widthIcRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEEEPKT_SH_SH_OT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i = 0, $$027$i = 0, $$2 = 0, $$lcssa = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $24 = 0, $26 = 0, $3 = 0, $30 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) ___assert_fail(17949, 17437, 1886, 18179);
 $5 = HEAP8[$0 >> 0] | 0;
 if (($5 + -48 & 255) >= 10) {
  if ($5 << 24 >> 24 != 123) {
   $$2 = $0;
   STACKTOP = sp;
   return $$2 | 0;
  }
  $24 = $0 + 1 | 0;
  if (($24 | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = $2;
   $26 = __ZN3fmt2v58internal12parse_arg_idIcNS1_13width_adapterIRNS1_13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEEEcEEEEPKT_SJ_SJ_OT0_($24, $1, $3) | 0;
   if (($26 | 0) != ($1 | 0)) if ((HEAP8[$26 >> 0] | 0) == 125) {
    $$2 = $26 + 1 | 0;
    STACKTOP = sp;
    return $$2 | 0;
   }
  }
  $30 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($30, 17126);
  ___cxa_throw($30 | 0, 6792, 18);
 }
 if ($5 << 24 >> 24 == 48) {
  $$0 = $0 + 1 | 0;
  $$0$i = 0;
 } else {
  $$027$i = 0;
  $12 = $5;
  $16 = $0;
  while (1) {
   if ($$027$i >>> 0 > 214748364) {
    label = 11;
    break;
   }
   $$027$i = ($12 << 24 >> 24) + -48 + ($$027$i * 10 | 0) | 0;
   $15 = $16 + 1 | 0;
   if (($15 | 0) == ($1 | 0)) {
    $$lcssa = $1;
    break;
   }
   $12 = HEAP8[$15 >> 0] | 0;
   if (($12 + -48 & 255) >= 10) {
    $$lcssa = $15;
    break;
   } else $16 = $15;
  }
  if ((label | 0) == 11) {
   $21 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($21, 17827);
   ___cxa_throw($21 | 0, 6792, 18);
  }
  if (($$027$i | 0) < 0) {
   $21 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($21, 17827);
   ___cxa_throw($21 | 0, 6792, 18);
  } else {
   $$0 = $$lcssa;
   $$0$i = $$027$i;
  }
 }
 HEAP32[HEAP32[$2 >> 2] >> 2] = $$0$i;
 $$2 = $$0;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$034 = 0, $15 = 0, $16 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $46 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 8 | 0;
 $5 = $4 + 3 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $37 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0;
  $38 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $37 = 1;
  $38 = $6 & 255;
 }
 $15 = $2 - $1 | 0;
 $16 = $15 >> 2;
 do if ($15 | 0) {
  if ($7) {
   $23 = HEAP32[$0 >> 2] | 0;
   $24 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $23 = $0;
   $24 = $6 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($1, $23, $23 + ($24 << 2) | 0) | 0) {
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($3, $1, $2);
   $28 = HEAP8[$3 + 8 + 3 >> 0] | 0;
   $29 = $28 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($0, $29 ? HEAP32[$3 >> 2] | 0 : $3, $29 ? HEAP32[$3 + 4 >> 2] | 0 : $28 & 255) | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
   break;
  }
  if (($37 - $38 | 0) >>> 0 < $16 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0, $37, $38 + $16 - $37 | 0, $38, $38, 0, 0);
  if ((HEAP8[$5 >> 0] | 0) < 0) $46 = HEAP32[$0 >> 2] | 0; else $46 = $0;
  $$0 = $46 + ($38 << 2) | 0;
  $$034 = $1;
  while (1) {
   if (($$034 | 0) == ($2 | 0)) break;
   __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $$034);
   $$0 = $$0 + 4 | 0;
   $$034 = $$034 + 4 | 0;
  }
  HEAP32[$3 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $3);
  $50 = $38 + $16 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $50;
   break;
  } else {
   HEAP8[$5 >> 0] = $50;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZN6spdlog7details24source_linenum_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i18 = 0, $$089$i$i$i$i$i19 = 0, $15 = 0, $23 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $46 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = $1 + 36 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$6) {
  STACKTOP = sp;
  return;
 }
 $8 = $0 + 4 | 0;
 if (!(HEAP32[$8 >> 2] | 0)) {
  __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($6, $3);
  STACKTOP = sp;
  return;
 }
 $15 = ((32 - (Math_clz32($6 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $15 + 1 + (((HEAP32[16 + ($15 << 2) >> 2] | 0) >>> 0 > $6 >>> 0) << 31 >> 31) | 0, $8, $3);
 __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE(HEAP32[$5 >> 2] | 0, $3);
 $23 = HEAP32[$4 + 8 >> 2] | 0;
 if ($23 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $23 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $29 = HEAP32[$4 + 12 >> 2] | 0;
  $31 = HEAP32[$4 + 4 >> 2] | 0;
  if ($29 | 0) {
   $33 = $29 + $23 | 0;
   $34 = $31 + 8 | 0;
   if (($23 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $36 = HEAP32[$34 >> 2] | 0;
   $37 = $36 + $23 | 0;
   if ((HEAP32[$31 + 12 >> 2] | 0) >>> 0 < $37 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$31 >> 2] >> 2] & 127]($31, $37);
    $46 = HEAP32[$34 >> 2] | 0;
   } else $46 = $36;
   $$010$i$i$i$i$i18 = $29;
   $$089$i$i$i$i$i19 = (HEAP32[$31 + 4 >> 2] | 0) + $46 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i19 >> 0] = HEAP8[$$010$i$i$i$i$i18 >> 0] | 0;
    $$010$i$i$i$i$i18 = $$010$i$i$i$i$i18 + 1 | 0;
    if (($$010$i$i$i$i$i18 | 0) == ($33 | 0)) break; else $$089$i$i$i$i$i19 = $$089$i$i$i$i$i19 + 1 | 0;
   }
   HEAP32[$34 >> 2] = $37;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i$i = 0, $$in = 0, $11 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $7 = 0, $9 = 0, $spec$select$i = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = (HEAP32[$2 >> 2] | 0) - $4 >> 2;
 $7 = $6 + 1 | 0;
 if ($7 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $9 = $0 + 8 | 0;
 $11 = (HEAP32[$9 >> 2] | 0) - $4 | 0;
 $14 = $11 >> 1;
 $spec$select$i = $11 >> 2 >>> 0 < 536870911 ? ($14 >>> 0 < $7 >>> 0 ? $7 : $14) : 1073741823;
 do if (!$spec$select$i) $22 = 0; else if ($spec$select$i >>> 0 > 1073741823) {
  $18 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($18, 22468);
  HEAP32[$18 >> 2] = 15792;
  ___cxa_throw($18 | 0, 9584, 225);
 } else {
  $22 = __Znwm($spec$select$i << 2) | 0;
  break;
 } while (0);
 $21 = $22 + ($6 << 2) | 0;
 $24 = $22 + ($spec$select$i << 2) | 0;
 $25 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$21 >> 2] = $25;
 $27 = $21 + 4 | 0;
 $28 = HEAP32[$0 >> 2] | 0;
 $29 = $28;
 $30 = HEAP32[$2 >> 2] | 0;
 if (($30 | 0) == ($28 | 0)) {
  $$in = $21;
  $43 = $29;
  $45 = $28;
 } else {
  $36 = $6 + -1 - (($30 + -4 - $29 | 0) >>> 2) | 0;
  $$06$i$i = $30;
  $38 = $21;
  do {
   $38 = $38 + -4 | 0;
   $$06$i$i = $$06$i$i + -4 | 0;
   $40 = HEAP32[$$06$i$i >> 2] | 0;
   HEAP32[$$06$i$i >> 2] = 0;
   HEAP32[$38 >> 2] = $40;
  } while (($$06$i$i | 0) != ($28 | 0));
  $$in = $22 + ($36 << 2) | 0;
  $43 = HEAP32[$0 >> 2] | 0;
  $45 = HEAP32[$2 >> 2] | 0;
 }
 HEAP32[$0 >> 2] = $$in;
 HEAP32[$2 >> 2] = $27;
 HEAP32[$9 >> 2] = $24;
 $44 = $43;
 if (($45 | 0) != ($44 | 0)) {
  $48 = $45;
  do {
   $48 = $48 + -4 | 0;
   $49 = HEAP32[$48 >> 2] | 0;
   HEAP32[$48 >> 2] = 0;
   if ($49 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$49 >> 2] | 0) + 4 >> 2] & 255]($49);
  } while (($48 | 0) != ($44 | 0));
 }
 if (!$43) return;
 __ZdlPv($43);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$017$off042 = 0, $$01938 = 0, $$020355154 = 0, $$02036 = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$select$i = 0, label = 0;
 if ($1 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 $3 = $0 + 8 | 0;
 $4 = $3 + 3 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $12 = HEAP32[$0 + 4 >> 2] | 0;
  $18 = (HEAP32[$3 >> 2] & 2147483647) + -1 | 0;
 } else {
  $12 = $5 & 255;
  $18 = 1;
 }
 $$sroa$speculated = $12 >>> 0 > $1 >>> 0 ? $12 : $1;
 $14 = $$sroa$speculated >>> 0 < 2;
 $spec$select$i = $14 ? 1 : ($$sroa$speculated + 4 & -4) + -1 | 0;
 do if (($spec$select$i | 0) != ($18 | 0)) {
  do if ($14) {
   $24 = HEAP32[$0 >> 2] | 0;
   if ($6) {
    $$017$off042 = 0;
    $$01938 = $24;
    $$02036 = $0;
    label = 15;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwm($0, $24, ($5 & 255) + 1 | 0) | 0;
    __ZdlPv($24);
    label = 18;
   }
  } else {
   $19 = $spec$select$i + 1 | 0;
   if ($19 >>> 0 > 1073741823) _abort();
   $22 = __Znwm($19 << 2) | 0;
   if ($6) {
    $$017$off042 = 1;
    $$01938 = HEAP32[$0 >> 2] | 0;
    $$02036 = $22;
    label = 15;
    break;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwm($22, $0, ($5 & 255) + 1 | 0) | 0;
    $$020355154 = $22;
    $$pre$phi57Z2D = $19;
    $$pre$phiZ2D = $0 + 4 | 0;
    label = 17;
    break;
   }
  } while (0);
  if ((label | 0) == 15) {
   $29 = $0 + 4 | 0;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($$02036, $$01938, (HEAP32[$29 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv($$01938);
   if ($$017$off042) {
    $$020355154 = $$02036;
    $$pre$phi57Z2D = $spec$select$i + 1 | 0;
    $$pre$phiZ2D = $29;
    label = 17;
   } else label = 18;
  }
  if ((label | 0) == 17) {
   HEAP32[$3 >> 2] = $$pre$phi57Z2D | -2147483648;
   HEAP32[$$pre$phiZ2D >> 2] = $12;
   HEAP32[$0 >> 2] = $$020355154;
   break;
  } else if ((label | 0) == 18) {
   HEAP8[$4 >> 0] = $12;
   break;
  }
 } while (0);
 return;
}

function __ZN3sgl14Renderer2D_ES25BeginEv($0) {
 $0 = $0 | 0;
 var $$sroa$15$0$$sroa_idx18$i = 0, $$sroa$5$0$$sroa_idx8$i = 0, $1 = 0, $12 = 0.0, $13 = 0.0, $15 = 0.0, $16 = 0.0, $19 = 0.0, $2 = 0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $1 = sp + 80 | 0;
 $2 = sp + 64 | 0;
 $3 = sp;
 $4 = $0 + 32 | 0;
 __ZNK3sgl6Shader4BindEv($4);
 HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 168 >> 2];
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $8 = $2 + 11 | 0;
 HEAP8[$8 >> 0] = 6;
 HEAP8[$2 >> 0] = HEAP8[22296] | 0;
 HEAP8[$2 + 1 >> 0] = HEAP8[22297] | 0;
 HEAP8[$2 + 2 >> 0] = HEAP8[22298] | 0;
 HEAP8[$2 + 3 >> 0] = HEAP8[22299] | 0;
 HEAP8[$2 + 4 >> 0] = HEAP8[22300] | 0;
 HEAP8[$2 + 5 >> 0] = HEAP8[22301] | 0;
 HEAP8[$2 + 6 >> 0] = 0;
 HEAP32[$1 >> 2] = 1065353216;
 $$sroa$5$0$$sroa_idx8$i = $1 + 4 | 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i + 4 >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i + 8 >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx8$i + 12 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 1065353216;
 $$sroa$15$0$$sroa_idx18$i = $1 + 24 | 0;
 HEAP32[$$sroa$15$0$$sroa_idx18$i >> 2] = 0;
 HEAP32[$$sroa$15$0$$sroa_idx18$i + 4 >> 2] = 0;
 HEAP32[$$sroa$15$0$$sroa_idx18$i + 8 >> 2] = 0;
 HEAP32[$$sroa$15$0$$sroa_idx18$i + 12 >> 2] = 0;
 HEAP32[$1 + 40 >> 2] = 1065353216;
 HEAPF32[$1 + 44 >> 2] = 0.0;
 $12 = +HEAPF32[$0 + 140 >> 2];
 $13 = $12 * 0.0;
 $15 = +HEAPF32[$0 + 144 >> 2];
 $16 = $15 * 0.0;
 $19 = $13 + $16;
 $21 = +HEAPF32[$0 + 148 >> 2];
 $22 = $21 * 0.0;
 HEAPF32[$1 + 48 >> 2] = $12 + $16 + $22 + 0.0;
 HEAPF32[$1 + 52 >> 2] = $13 + $15 + $22 + 0.0;
 HEAPF32[$1 + 56 >> 2] = $21 + $19 + 0.0;
 HEAPF32[$1 + 60 >> 2] = $19 + $22 + 1.0;
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($3, $0 + 76 | 0, $1);
 __ZN3sgl6Shader15SetUniformMat4fERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3glm3matILi4ELi4EfLNSA_9qualifierE0EEE($4, $2, $3);
 if ((HEAP8[$8 >> 0] | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$2 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i = 0, $$010$i$i$i$i13 = 0, $$089$i$i$i$i = 0, $$089$i$i$i$i14 = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $18 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $7 = 0;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = 19243;
 HEAP32[$0 + 16 >> 2] = 128;
 $7 = HEAP32[$2 >> 2] | 0;
 if ($7 >>> 0 <= $1 >>> 0) {
  HEAP32[$0 + 8 >> 2] = 0;
  return;
 }
 $10 = $7 - $1 | 0;
 $11 = $0 + 8 | 0;
 HEAP32[$11 >> 2] = $10;
 switch (HEAP32[$2 + 4 >> 2] | 0) {
 case 0:
  {
   if ($10 >>> 0 > 128) ___assert_fail(19157, 19181, 99, 19236);
   $15 = 19243 + $10 | 0;
   $16 = $3 + 8 | 0;
   $18 = (HEAP32[$16 >> 2] | 0) + $10 | 0;
   if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $18 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $18);
   if ($10 | 0) {
    $$010$i$i$i$i13 = 19243;
    $$089$i$i$i$i14 = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0;
    while (1) {
     HEAP8[$$089$i$i$i$i14 >> 0] = HEAP8[$$010$i$i$i$i13 >> 0] | 0;
     $$010$i$i$i$i13 = $$010$i$i$i$i13 + 1 | 0;
     if (($$010$i$i$i$i13 | 0) == ($15 | 0)) break; else $$089$i$i$i$i14 = $$089$i$i$i$i14 + 1 | 0;
    }
   }
   HEAP32[$16 >> 2] = $18;
   HEAP32[$11 >> 2] = 0;
   return;
  }
 case 2:
  {
   $33 = $10 >>> 1;
   $34 = $10 & 1;
   if ($10 >>> 0 > 257) ___assert_fail(19157, 19181, 99, 19236);
   $36 = 19243 + $33 | 0;
   $37 = $3 + 8 | 0;
   $39 = (HEAP32[$37 >> 2] | 0) + $33 | 0;
   if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $39 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $39);
   if ($33 | 0) {
    $$010$i$i$i$i = 19243;
    $$089$i$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$37 >> 2] | 0) | 0;
    while (1) {
     HEAP8[$$089$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i >> 0] | 0;
     $$010$i$i$i$i = $$010$i$i$i$i + 1 | 0;
     if (($$010$i$i$i$i | 0) == ($36 | 0)) break; else $$089$i$i$i$i = $$089$i$i$i$i + 1 | 0;
    }
   }
   HEAP32[$37 >> 2] = $39;
   HEAP32[$11 >> 2] = $33 + $34;
   return;
  }
 default:
  return;
 }
}

function __ZN3sgl9DropEventC2EiPPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01420 = 0, $$016$i$i = 0, $$017$i$i = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $24 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP8[$0 + 4 >> 0] = 0;
 HEAP32[$0 >> 2] = 11264;
 $5 = $0 + 8 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $0 + 12 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $0 + 16 | 0;
 HEAP32[$7 >> 2] = 0;
 if (($1 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $9 = $3 + 11 | 0;
 $10 = $3 + 8 | 0;
 $11 = $3 + 4 | 0;
 $$01420 = 0;
 while (1) {
  $13 = HEAP32[$2 + ($$01420 << 2) >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  $14 = _strlen($13) | 0;
  if ($14 >>> 0 > 4294967279) {
   label = 5;
   break;
  }
  if ($14 >>> 0 < 11) {
   HEAP8[$9 >> 0] = $14;
   if (!$14) $$017$i$i = $3; else {
    $$016$i$i = $3;
    label = 9;
   }
  } else {
   $18 = $14 + 16 & -16;
   $19 = __Znwm($18) | 0;
   HEAP32[$3 >> 2] = $19;
   HEAP32[$10 >> 2] = $18 | -2147483648;
   HEAP32[$11 >> 2] = $14;
   $$016$i$i = $19;
   label = 9;
  }
  if ((label | 0) == 9) {
   label = 0;
   _memcpy($$016$i$i | 0, $13 | 0, $14 | 0) | 0;
   $$017$i$i = $$016$i$i;
  }
  HEAP8[$$017$i$i + $14 >> 0] = 0;
  $24 = HEAP32[$6 >> 2] | 0;
  if ($24 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$24 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$24 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$24 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 12;
  } else {
   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_($5, $3);
   if ((HEAP8[$9 >> 0] | 0) < 0) __ZdlPv(HEAP32[$3 >> 2] | 0);
  }
  $$01420 = $$01420 + 1 | 0;
  if (($$01420 | 0) >= ($1 | 0)) {
   label = 3;
   break;
  }
 }
 if ((label | 0) == 3) {
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 5) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($3);
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function __ZN6spdlog7details11t_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i17 = 0, $$089$i$i$i$i$i18 = 0, $14 = 0, $22 = 0, $28 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $45 = 0, $5 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = $0 + 4 | 0;
 $8 = $1 + 16 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if (!(HEAP32[$5 >> 2] | 0)) {
  __ZN6spdlog7details10fmt_helper10append_intImLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($9, $3);
  STACKTOP = sp;
  return;
 }
 $14 = ((32 - (Math_clz32($9 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $14 + 1 + (((HEAP32[16 + ($14 << 2) >> 2] | 0) >>> 0 > $9 >>> 0) << 31 >> 31) | 0, $5, $3);
 __ZN6spdlog7details10fmt_helper10append_intImLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE(HEAP32[$8 >> 2] | 0, $3);
 $22 = HEAP32[$4 + 8 >> 2] | 0;
 if ($22 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $22 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $28 = HEAP32[$4 + 12 >> 2] | 0;
  $30 = HEAP32[$4 + 4 >> 2] | 0;
  if ($28 | 0) {
   $32 = $28 + $22 | 0;
   $33 = $30 + 8 | 0;
   if (($22 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $35 = HEAP32[$33 >> 2] | 0;
   $36 = $35 + $22 | 0;
   if ((HEAP32[$30 + 12 >> 2] | 0) >>> 0 < $36 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$30 >> 2] >> 2] & 127]($30, $36);
    $45 = HEAP32[$33 >> 2] | 0;
   } else $45 = $35;
   $$010$i$i$i$i$i17 = $28;
   $$089$i$i$i$i$i18 = (HEAP32[$30 + 4 >> 2] | 0) + $45 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i18 >> 0] = HEAP8[$$010$i$i$i$i$i17 >> 0] | 0;
    $$010$i$i$i$i$i17 = $$010$i$i$i$i$i17 + 1 | 0;
    if (($$010$i$i$i$i$i17 | 0) == ($32 | 0)) break; else $$089$i$i$i$i$i18 = $$089$i$i$i$i$i18 + 1 | 0;
   }
   HEAP32[$33 >> 2] = $36;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN6spdlog6logger5cloneENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $18 = 0, $20 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = HEAP32[$1 + 16 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 + 20 >> 2];
 __ZNSt3__210shared_ptrIN6spdlog6loggerEE11make_sharedIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_11__wrap_iterIPNS0_INS1_5sinks4sinkEEEEESG_EEES3_DpOT_($0, $2, $3, $4);
 HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] = HEAP32[$1 + 28 >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] = HEAP32[$1 + 32 >> 2];
 $18 = HEAP32[$0 >> 2] | 0;
 $20 = HEAP32[$1 + 56 >> 2] | 0;
 do if (!$20) HEAP32[$5 + 16 >> 2] = 0; else if (($1 + 40 | 0) == ($20 | 0)) {
  HEAP32[$5 + 16 >> 2] = $5;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] & 127]($20, $5);
  break;
 } else {
  HEAP32[$5 + 16 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] & 127]($20) | 0;
  break;
 } while (0);
 $34 = $18 + 40 | 0;
 $35 = $18 + 56 | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 if (($34 | 0) == ($36 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$36 >> 2] | 0) + 16 >> 2] & 255]($36); else if ($36 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$36 >> 2] | 0) + 20 >> 2] & 255]($36);
 HEAP32[$35 >> 2] = 0;
 $45 = $5 + 16 | 0;
 $46 = HEAP32[$45 >> 2] | 0;
 if (!$46) {
  HEAP32[$35 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 if (($5 | 0) != ($46 | 0)) {
  HEAP32[$35 >> 2] = $46;
  HEAP32[$45 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$35 >> 2] = $34;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$46 >> 2] | 0) + 12 >> 2] & 127]($46, $34);
 $$pr = HEAP32[$45 >> 2] | 0;
 if (($5 | 0) == ($$pr | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$$pr >> 2] | 0) + 16 >> 2] & 255]($$pr);
  STACKTOP = sp;
  return;
 }
 if (!$$pr) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$$pr >> 2] | 0) + 20 >> 2] & 255]($$pr);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11p_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i14 = 0, $$089$i$i$i$i$i15 = 0, $$str$151$$str$152$i = 0, $17 = 0, $18 = 0, $24 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $47 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 2, $0 + 4 | 0, $3);
 $$str$151$$str$152$i = (HEAP32[$2 + 8 >> 2] | 0) > 11 ? 23911 : 23908;
 $7 = $3 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $8 + 2 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $9);
  $18 = HEAP32[$7 >> 2] | 0;
 } else $18 = $8;
 $17 = (HEAP32[$3 + 4 >> 2] | 0) + $18 | 0;
 HEAP8[$17 >> 0] = HEAP8[$$str$151$$str$152$i >> 0] | 0;
 HEAP8[$17 + 1 >> 0] = HEAP8[$$str$151$$str$152$i + 1 >> 0] | 0;
 HEAP32[$7 >> 2] = $9;
 $24 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$24) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $24 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $30 = HEAP32[$4 + 12 >> 2] | 0;
 $32 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$30) {
  STACKTOP = sp;
  return;
 }
 $34 = $30 + $24 | 0;
 $35 = $32 + 8 | 0;
 if (($24 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $37 = HEAP32[$35 >> 2] | 0;
 $38 = $37 + $24 | 0;
 if ((HEAP32[$32 + 12 >> 2] | 0) >>> 0 < $38 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$32 >> 2] >> 2] & 127]($32, $38);
  $47 = HEAP32[$35 >> 2] | 0;
 } else $47 = $37;
 $$010$i$i$i$i$i14 = $30;
 $$089$i$i$i$i$i15 = (HEAP32[$32 + 4 >> 2] | 0) + $47 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i15 >> 0] = HEAP8[$$010$i$i$i$i$i14 >> 0] | 0;
  $$010$i$i$i$i$i14 = $$010$i$i$i$i$i14 + 1 | 0;
  if (($$010$i$i$i$i$i14 | 0) == ($34 | 0)) break; else $$089$i$i$i$i$i15 = $$089$i$i$i$i$i15 + 1 | 0;
 }
 HEAP32[$35 >> 2] = $38;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$017$off042 = 0, $$01938 = 0, $$020355154 = 0, $$02036 = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $spec$select$i = 0, label = 0;
 if ($1 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 $3 = $0 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 if ($5) {
  $12 = HEAP32[$0 + 4 >> 2] | 0;
  $18 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $12 = $4 & 255;
  $18 = 10;
 }
 $$sroa$speculated = $12 >>> 0 > $1 >>> 0 ? $12 : $1;
 $14 = $$sroa$speculated >>> 0 < 11;
 $spec$select$i = $14 ? 10 : ($$sroa$speculated + 16 & -16) + -1 | 0;
 do if (($spec$select$i | 0) != ($18 | 0)) {
  do if ($14) {
   $22 = HEAP32[$0 >> 2] | 0;
   if ($5) {
    $$017$off042 = 0;
    $$01938 = $22;
    $$02036 = $0;
    label = 13;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $22, ($4 & 255) + 1 | 0) | 0;
    __ZdlPv($22);
    label = 16;
   }
  } else {
   $19 = $spec$select$i + 1 | 0;
   $20 = __Znwm($19) | 0;
   if ($5) {
    $$017$off042 = 1;
    $$01938 = HEAP32[$0 >> 2] | 0;
    $$02036 = $20;
    label = 13;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcm($20, $0, ($4 & 255) + 1 | 0) | 0;
    $$020355154 = $20;
    $$pre$phi57Z2D = $19;
    $$pre$phiZ2D = $0 + 4 | 0;
    label = 15;
    break;
   }
  } while (0);
  if ((label | 0) == 13) {
   $27 = $0 + 4 | 0;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($$02036, $$01938, (HEAP32[$27 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv($$01938);
   if ($$017$off042) {
    $$020355154 = $$02036;
    $$pre$phi57Z2D = $spec$select$i + 1 | 0;
    $$pre$phiZ2D = $27;
    label = 15;
   } else label = 16;
  }
  if ((label | 0) == 15) {
   HEAP32[$0 + 8 >> 2] = $$pre$phi57Z2D | -2147483648;
   HEAP32[$$pre$phiZ2D >> 2] = $12;
   HEAP32[$0 >> 2] = $$020355154;
   break;
  } else if ((label | 0) == 16) {
   HEAP8[$3 >> 0] = $12;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__210shared_ptrIN6spdlog6loggerEE11make_sharedIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS0_INS1_5sinks14ansicolor_sinkINS1_7details14console_stdoutENSD_13console_mutexEEEEEEEES3_DpOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = __Znwm(88) | 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 >> 2] = 9892;
 $8 = $5 + 16 | 0;
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 $10 = $4 + 4 | 0;
 $11 = $2 + 4 | 0;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$2 >> 2] = 0;
 HEAP32[$11 >> 2] = 0;
 __ZN6spdlog6loggerC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS_5sinks4sinkEEE($8, $3, $4);
 $13 = HEAP32[$10 >> 2] | 0;
 if ($13 | 0) {
  $15 = $13 + 4 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  HEAP32[$15 >> 2] = $16 + -1;
  if (!$16) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2] & 255]($13);
   __ZNSt3__219__shared_weak_count14__release_weakEv($13);
  }
 }
 if ((HEAP8[$3 + 11 >> 0] | 0) >= 0) {
  $26 = $0 + 4 | 0;
  HEAP32[$0 >> 2] = $8;
  HEAP32[$26 >> 2] = $5;
  HEAP32[$vararg_buffer >> 2] = $8;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = $8;
  __ZNSt3__210shared_ptrIN6spdlog6loggerEE18__enable_weak_thisEz($0, $vararg_buffer);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$3 >> 2] | 0);
 $26 = $0 + 4 | 0;
 HEAP32[$0 >> 2] = $8;
 HEAP32[$26 >> 2] = $5;
 HEAP32[$vararg_buffer >> 2] = $8;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = $8;
 __ZNSt3__210shared_ptrIN6spdlog6loggerEE18__enable_weak_thisEz($0, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __ZNK3sgl15KeyPressedEvent8ToStringEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $2 = sp;
 $3 = $2 + 64 | 0;
 $4 = $2 + 8 | 0;
 HEAP32[$4 >> 2] = 10884;
 $5 = $2 + 12 | 0;
 HEAP32[$2 >> 2] = 7604;
 HEAP32[$3 >> 2] = 7624;
 HEAP32[$2 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv($2 + 64 | 0, $5);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$4 >> 2] = 10884;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($5);
 HEAP32[$5 >> 2] = 10960;
 $10 = $2 + 44 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 $12 = $2 + 8 | 0;
 $13 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($12, 22011, 17) | 0;
 $17 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($13, HEAP32[$1 + 8 >> 2] | 0) | 0, 22029, 2) | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($17, HEAP32[$1 + 12 >> 2] | 0) | 0, 22032, 9) | 0;
 __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $5);
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$12 >> 2] = 10884;
 HEAP32[$5 >> 2] = 10960;
 if ((HEAP8[$10 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$10 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEEclENS0_17basic_string_viewIcEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = 0, $$sroa$0$0$copyload$i$i = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 if ($4 | 0) {
  switch (HEAP8[$4 + 17 >> 0] | 0) {
  case 115:
  case 0:
   break;
  default:
   {
    $8 = ___cxa_allocate_exception(8) | 0;
    __ZN3fmt2v512format_errorC2EPKc($8, 17534);
    ___cxa_throw($8 | 0, 6792, 18);
   }
  }
  $9 = $1;
  $14 = HEAP32[$9 + 4 >> 2] | 0;
  $16 = HEAP32[$4 + 12 >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$2 + 4 >> 2] = ($16 | 0) > -1 & $16 >>> 0 < $14 >>> 0 ? $16 : $14;
  __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_10str_writerIcEEEEvRKNS0_10align_specEOT_($0, $4, $2);
  $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
  $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
  STACKTOP = sp;
  return $$sroa$0$0$copyload$i$i | 0;
 }
 $20 = $1;
 $22 = HEAP32[$20 >> 2] | 0;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 $26 = HEAP32[$0 >> 2] | 0;
 $27 = $26 + 8 | 0;
 $28 = HEAP32[$27 >> 2] | 0;
 $29 = $28 + $25 | 0;
 if ((HEAP32[$26 + 12 >> 2] | 0) >>> 0 < $29 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$26 >> 2] >> 2] & 127]($26, $29);
 HEAP32[$27 >> 2] = $29;
 if (!$25) {
  $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
  $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
  STACKTOP = sp;
  return $$sroa$0$0$copyload$i$i | 0;
 }
 _memmove((HEAP32[$26 + 4 >> 2] | 0) + $28 | 0, $22 | 0, $25 | 0) | 0;
 $$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D = $0;
 $$sroa$0$0$copyload$i$i = HEAP32[$$sroa$0$0$$sroa_idx$i$i$pre$phiZZZZZZZZ2D >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$0$0$copyload$i$i | 0;
}

function __ZN6spdlog7details13pid_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i20 = 0, $$089$i$i$i$i$i21 = 0, $13 = 0, $20 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $43 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 $5 = _getpid() | 0;
 $6 = $0 + 4 | 0;
 if (!(HEAP32[$6 >> 2] | 0)) {
  __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($5, $3);
  STACKTOP = sp;
  return;
 }
 $13 = ((32 - (Math_clz32($5 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, $13 + 1 + (((HEAP32[16 + ($13 << 2) >> 2] | 0) >>> 0 > $5 >>> 0) << 31 >> 31) | 0, $6, $3);
 __ZN6spdlog7details10fmt_helper10append_intIjLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($5, $3);
 $20 = HEAP32[$4 + 8 >> 2] | 0;
 if ($20 | 0) {
  if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $20 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
  $26 = HEAP32[$4 + 12 >> 2] | 0;
  $28 = HEAP32[$4 + 4 >> 2] | 0;
  if ($26 | 0) {
   $30 = $26 + $20 | 0;
   $31 = $28 + 8 | 0;
   if (($20 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
   $33 = HEAP32[$31 >> 2] | 0;
   $34 = $33 + $20 | 0;
   if ((HEAP32[$28 + 12 >> 2] | 0) >>> 0 < $34 >>> 0) {
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$28 >> 2] >> 2] & 127]($28, $34);
    $43 = HEAP32[$31 >> 2] | 0;
   } else $43 = $33;
   $$010$i$i$i$i$i20 = $26;
   $$089$i$i$i$i$i21 = (HEAP32[$28 + 4 >> 2] | 0) + $43 | 0;
   while (1) {
    HEAP8[$$089$i$i$i$i$i21 >> 0] = HEAP8[$$010$i$i$i$i$i20 >> 0] | 0;
    $$010$i$i$i$i$i20 = $$010$i$i$i$i$i20 + 1 | 0;
    if (($$010$i$i$i$i$i20 | 0) == ($30 | 0)) break; else $$089$i$i$i$i$i21 = $$089$i$i$i$i$i21 + 1 | 0;
   }
   HEAP32[$31 >> 2] = $34;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details12ch_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 1, $0 + 4 | 0, $3);
 $7 = $3 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $8 + 1 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $9 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $9);
  $$pre$i = HEAP32[$7 >> 2] | 0;
  $$pre$phi$iZ2D = $$pre$i + 1 | 0;
  $19 = $$pre$i;
 } else {
  $$pre$phi$iZ2D = $9;
  $19 = $8;
 }
 $15 = HEAP8[$0 + 12 >> 0] | 0;
 $17 = HEAP32[$3 + 4 >> 2] | 0;
 HEAP32[$7 >> 2] = $$pre$phi$iZ2D;
 HEAP8[$17 + $19 >> 0] = $15;
 $21 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$21) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $21 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $27 = HEAP32[$4 + 12 >> 2] | 0;
 $29 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$27) {
  STACKTOP = sp;
  return;
 }
 $31 = $27 + $21 | 0;
 $32 = $29 + 8 | 0;
 if (($21 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $34 = HEAP32[$32 >> 2] | 0;
 $35 = $34 + $21 | 0;
 if ((HEAP32[$29 + 12 >> 2] | 0) >>> 0 < $35 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$29 >> 2] >> 2] & 127]($29, $35);
  $44 = HEAP32[$32 >> 2] | 0;
 } else $44 = $34;
 $$010$i$i$i$i$i = $27;
 $$089$i$i$i$i$i = (HEAP32[$29 + 4 >> 2] | 0) + $44 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($31 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$32 >> 2] = $35;
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIwE9pbackfailEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $7 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
 $8 = $0 + 52 | 0;
 $10 = (HEAP8[$8 >> 0] | 0) != 0;
 do if ($7) if ($10) $$1 = $1; else {
  $12 = HEAP32[$0 + 48 >> 2] | 0;
  HEAP8[$8 >> 0] = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj($12, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) ^ 1) & 1;
  $$1 = $12;
 } else {
  if ($10) {
   $17 = $0 + 48 | 0;
   HEAP32[$4 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[$17 >> 2] | 0) | 0;
   $21 = HEAP32[$0 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 15]($21, HEAP32[$0 + 40 >> 2] | 0, $4, $4 + 4 | 0, $5, $2, $2 + 8 | 0, $3) | 0) {
   case 1:
   case 2:
    {
     label = 11;
     break;
    }
   case 3:
    {
     HEAP8[$2 >> 0] = HEAP32[$17 >> 2];
     HEAP32[$3 >> 2] = $2 + 1;
     label = 8;
     break;
    }
   default:
    label = 8;
   }
   L9 : do if ((label | 0) == 8) {
    $33 = $0 + 32 | 0;
    while (1) {
     $34 = HEAP32[$3 >> 2] | 0;
     if ($34 >>> 0 <= $2 >>> 0) {
      $$0 = 1;
      $$07 = 0;
      break L9;
     }
     $36 = $34 + -1 | 0;
     HEAP32[$3 >> 2] = $36;
     if ((_ungetc(HEAP8[$36 >> 0] | 0, HEAP32[$33 >> 2] | 0) | 0) == -1) {
      label = 11;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0 = 0;
    $$07 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   }
   if ($$0) $$pre$phiZ2D = $17; else {
    $$1 = $$07;
    break;
   }
  } else $$pre$phiZ2D = $0 + 48 | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $1;
  HEAP8[$8 >> 0] = 1;
  $$1 = $1;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__210__stdinbufIcE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 16 | 0;
 $3 = sp + 4 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $7 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
 $8 = $0 + 52 | 0;
 $10 = (HEAP8[$8 >> 0] | 0) != 0;
 do if ($7) if ($10) $$1 = $1; else {
  $12 = HEAP32[$0 + 48 >> 2] | 0;
  HEAP8[$8 >> 0] = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii($12, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) ^ 1) & 1;
  $$1 = $12;
 } else {
  if ($10) {
   $17 = $0 + 48 | 0;
   HEAP8[$4 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$17 >> 2] | 0) | 0;
   $21 = HEAP32[$0 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 15]($21, HEAP32[$0 + 40 >> 2] | 0, $4, $4 + 1 | 0, $5, $2, $2 + 8 | 0, $3) | 0) {
   case 1:
   case 2:
    {
     label = 11;
     break;
    }
   case 3:
    {
     HEAP8[$2 >> 0] = HEAP32[$17 >> 2];
     HEAP32[$3 >> 2] = $2 + 1;
     label = 8;
     break;
    }
   default:
    label = 8;
   }
   L9 : do if ((label | 0) == 8) {
    $33 = $0 + 32 | 0;
    while (1) {
     $34 = HEAP32[$3 >> 2] | 0;
     if ($34 >>> 0 <= $2 >>> 0) {
      $$0 = 1;
      $$07 = 0;
      break L9;
     }
     $36 = $34 + -1 | 0;
     HEAP32[$3 >> 2] = $36;
     if ((_ungetc(HEAP8[$36 >> 0] | 0, HEAP32[$33 >> 2] | 0) | 0) == -1) {
      label = 11;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0 = 0;
    $$07 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   }
   if ($$0) $$pre$phiZ2D = $17; else {
    $$1 = $$07;
    break;
   }
  } else $$pre$phiZ2D = $0 + 48 | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $1;
  HEAP8[$8 >> 0] = 1;
  $$1 = $1;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN3fmt2v520basic_format_contextINSt3__220back_insert_iteratorINS0_8internal12basic_bufferIcEEEEcE7get_argENS0_17basic_string_viewIcEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$i$i$i = 0, $$0823$i = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $1 + 36 | 0;
 $5 = $1 + 16 | 0;
 HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
 __ZN3fmt2v58internal7arg_mapINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE4initERKNS0_17basic_format_argsIS9_EE($4, $3);
 $6 = $2;
 $11 = HEAP32[$6 + 4 >> 2] | 0;
 $12 = HEAP32[$4 >> 2] | 0;
 $14 = HEAP32[$1 + 40 >> 2] | 0;
 $15 = $12 + ($14 * 24 | 0) | 0;
 L1 : do if ($14 | 0) {
  $17 = HEAP32[$6 >> 2] | 0;
  $$0823$i = $12;
  while (1) {
   $18 = $$0823$i;
   $20 = HEAP32[$18 >> 2] | 0;
   $23 = HEAP32[$18 + 4 >> 2] | 0;
   $$$i$i$i = $23 >>> 0 < $11 >>> 0 ? $23 : $11;
   if (!$$$i$i$i) {
    if (($23 | 0) == ($11 | 0)) break;
   } else if (($23 | 0) == ($11 | 0) & (_memcmp($20, $17, $$$i$i$i) | 0) == 0) break;
   $31 = $$0823$i + 24 | 0;
   if (($31 | 0) == ($15 | 0)) break L1; else $$0823$i = $31;
  }
  $34 = $$0823$i + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$34 + 12 >> 2];
  if (!(HEAP32[$0 + 8 >> 2] | 0)) {
   $35 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($35, 17902);
   ___cxa_throw($35 | 0, 6792, 18);
  } else {
   STACKTOP = sp;
   return;
  }
 } while (0);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $35 = ___cxa_allocate_exception(8) | 0;
 __ZN3fmt2v512format_errorC2EPKc($35, 17902);
 ___cxa_throw($35 | 0, 6792, 18);
}

function __ZN6spdlog7details8registry16throw_if_exists_ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sroa$0$0$copyload28 = 0, $$sroa$4 = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx12 = 0, $$sroa$416$0$copyload = 0, $2 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$sroa$4 = sp + 12 | 0;
 $2 = sp;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEERKT_($0 + 84 | 0, $1) | 0)) {
  STACKTOP = sp;
  return;
 } else {
  $6 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($2, 18343, $1);
  $7 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($2, 18362) | 0;
  $$sroa$0$0$copyload28 = HEAP32[$7 >> 2] | 0;
  $$sroa$4$0$$sroa_idx = $7 + 4 | 0;
  HEAP32[$$sroa$4 >> 2] = HEAP32[$$sroa$4$0$$sroa_idx >> 2];
  HEAP16[$$sroa$4 + 4 >> 1] = HEAP16[$$sroa$4$0$$sroa_idx + 4 >> 1] | 0;
  HEAP8[$$sroa$4 + 6 >> 0] = HEAP8[$$sroa$4$0$$sroa_idx + 6 >> 0] | 0;
  $$sroa$416$0$copyload = HEAP8[$7 + 11 >> 0] | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  HEAP32[$6 >> 2] = 9872;
  HEAP32[$6 + 4 >> 2] = $$sroa$0$0$copyload28;
  $$sroa$4$0$$sroa_idx12 = $6 + 8 | 0;
  HEAP32[$$sroa$4$0$$sroa_idx12 >> 2] = HEAP32[$$sroa$4 >> 2];
  HEAP16[$$sroa$4$0$$sroa_idx12 + 4 >> 1] = HEAP16[$$sroa$4 + 4 >> 1] | 0;
  HEAP8[$$sroa$4$0$$sroa_idx12 + 6 >> 0] = HEAP8[$$sroa$4 + 6 >> 0] | 0;
  HEAP8[$6 + 15 >> 0] = $$sroa$416$0$copyload;
  HEAP32[$$sroa$4 >> 2] = 0;
  HEAP16[$$sroa$4 + 4 >> 1] = 0;
  HEAP8[$$sroa$4 + 6 >> 0] = 0;
  ___cxa_throw($6 | 0, 6808, 24);
 }
}

function __ZN6spdlog7details8registry13set_formatterENSt3__210unique_ptrINS_9formatterENS2_14default_deleteIS4_EEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sroa$014$019$i = 0, $$sroa$017$029 = 0, $$sroa$017$030 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp + 4 | 0;
 $3 = sp;
 __ZNSt3__25mutex4lockEv($0);
 $4 = $0 + 104 | 0;
 $5 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 $6 = HEAP32[$4 >> 2] | 0;
 HEAP32[$4 >> 2] = $5;
 if ($6 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] & 255]($6);
 $$sroa$017$029 = HEAP32[$0 + 92 >> 2] | 0;
 if (!$$sroa$017$029) {
  __ZNSt3__25mutex6unlockEv($0);
  STACKTOP = sp;
  return;
 }
 $$sroa$017$030 = $$sroa$017$029;
 do {
  $15 = HEAP32[$$sroa$017$030 + 20 >> 2] | 0;
  $16 = HEAP32[$4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$16 >> 2] | 0) + 12 >> 2] & 127]($3, $16);
  $21 = HEAP32[$15 + 16 >> 2] | 0;
  $23 = HEAP32[$15 + 20 >> 2] | 0;
  if (($21 | 0) != ($23 | 0)) {
   $$sroa$014$019$i = $21;
   do {
    $25 = HEAP32[$$sroa$014$019$i >> 2] | 0;
    $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0;
    $29 = HEAP32[$3 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 12 >> 2] & 127]($2, $29);
    FUNCTION_TABLE_vii[$28 & 127]($25, $2);
    $33 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = 0;
    if ($33 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$33 >> 2] | 0) + 4 >> 2] & 255]($33);
    $$sroa$014$019$i = $$sroa$014$019$i + 8 | 0;
   } while (($$sroa$014$019$i | 0) != ($23 | 0));
  }
  $40 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  if ($40 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$40 >> 2] | 0) + 4 >> 2] & 255]($40);
  $$sroa$017$030 = HEAP32[$$sroa$017$030 >> 2] | 0;
 } while (($$sroa$017$030 | 0) != 0);
 __ZNSt3__25mutex6unlockEv($0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIwE8overflowEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$032 = 0, $$4 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $3 = 0, $38 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 do if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) label = 15; else {
  HEAP32[$3 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($1) | 0;
  if (HEAP8[$0 + 44 >> 0] | 0) {
   if ((_fwrite($3, 4, 1, HEAP32[$0 + 32 >> 2] | 0) | 0) == 1) {
    label = 15;
    break;
   }
   $$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
  HEAP32[$4 >> 2] = $2;
  $17 = $3 + 4 | 0;
  $18 = $0 + 36 | 0;
  $19 = $0 + 40 | 0;
  $20 = $2 + 8 | 0;
  $21 = $2;
  $22 = $0 + 32 | 0;
  $$032 = $3;
  while (1) {
   $23 = HEAP32[$18 >> 2] | 0;
   $28 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$23 >> 2] | 0) + 12 >> 2] & 15]($23, HEAP32[$19 >> 2] | 0, $$032, $17, $5, $2, $20, $4) | 0;
   if ((HEAP32[$5 >> 2] | 0) == ($$032 | 0)) {
    label = 14;
    break;
   }
   if (($28 | 0) == 3) {
    label = 8;
    break;
   }
   if ($28 >>> 0 >= 2) {
    label = 14;
    break;
   }
   $38 = (HEAP32[$4 >> 2] | 0) - $21 | 0;
   if ((_fwrite($2, 1, $38, HEAP32[$22 >> 2] | 0) | 0) != ($38 | 0)) {
    label = 14;
    break;
   }
   if (($28 | 0) == 1) $$032 = HEAP32[$5 >> 2] | 0; else {
    label = 13;
    break;
   }
  }
  if ((label | 0) == 8) if ((_fwrite($$032, 1, 1, HEAP32[$22 >> 2] | 0) | 0) == 1) label = 13; else label = 14;
  if ((label | 0) == 13) {
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   $$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((label | 0) == 15) $$4 = __ZNSt3__211char_traitsIwE7not_eofEj($1) | 0;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNSt3__211__stdoutbufIcE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$032 = 0, $$4 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $3 = 0, $38 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) label = 15; else {
  HEAP8[$3 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($1) | 0;
  if (HEAP8[$0 + 44 >> 0] | 0) {
   if ((_fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2] | 0) | 0) == 1) {
    label = 15;
    break;
   }
   $$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
  HEAP32[$4 >> 2] = $2;
  $17 = $3 + 1 | 0;
  $18 = $0 + 36 | 0;
  $19 = $0 + 40 | 0;
  $20 = $2 + 8 | 0;
  $21 = $2;
  $22 = $0 + 32 | 0;
  $$032 = $3;
  while (1) {
   $23 = HEAP32[$18 >> 2] | 0;
   $28 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$23 >> 2] | 0) + 12 >> 2] & 15]($23, HEAP32[$19 >> 2] | 0, $$032, $17, $5, $2, $20, $4) | 0;
   if ((HEAP32[$5 >> 2] | 0) == ($$032 | 0)) {
    label = 14;
    break;
   }
   if (($28 | 0) == 3) {
    label = 8;
    break;
   }
   if ($28 >>> 0 >= 2) {
    label = 14;
    break;
   }
   $38 = (HEAP32[$4 >> 2] | 0) - $21 | 0;
   if ((_fwrite($2, 1, $38, HEAP32[$22 >> 2] | 0) | 0) != ($38 | 0)) {
    label = 14;
    break;
   }
   if (($28 | 0) == 1) $$032 = HEAP32[$5 >> 2] | 0; else {
    label = 13;
    break;
   }
  }
  if ((label | 0) == 8) if ((_fwrite($$032, 1, 1, HEAP32[$22 >> 2] | 0) | 0) == 1) label = 13; else label = 14;
  if ((label | 0) == 13) {
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   $$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((label | 0) == 15) $$4 = __ZNSt3__211char_traitsIcE7not_eofEi($1) | 0;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $33 = 0, $43 = 0, $45 = 0, label = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $45 = HEAP32[$0 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$45 >> 2] | 0) + 24 >> 2] & 7]($45, $1, $2, $3, $4);
   break;
  }
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $22 = $1 + 52 | 0;
    HEAP8[$22 >> 0] = 0;
    $23 = $1 + 53 | 0;
    HEAP8[$23 >> 0] = 0;
    $25 = HEAP32[$0 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] & 15]($25, $1, $2, $2, 1, $4);
    if (!(HEAP8[$23 >> 0] | 0)) {
     $$037$off038 = 0;
     label = 11;
    } else if (!(HEAP8[$22 >> 0] | 0)) {
     $$037$off038 = 1;
     label = 11;
    } else label = 15;
    do if ((label | 0) == 11) {
     HEAP32[$13 >> 2] = $2;
     $33 = $1 + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
      HEAP8[$1 + 54 >> 0] = 1;
      if ($$037$off038) {
       label = 15;
       break;
      } else {
       $43 = 4;
       break;
      }
     }
     if ($$037$off038) label = 15; else $43 = 4;
    } while (0);
    if ((label | 0) == 15) $43 = 3;
    HEAP32[$19 >> 2] = $43;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__28functionIFvPN3sgl5EventEEE4swapERS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $18 = 0, $2 = 0, $22 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $5 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 if (($1 | 0) == ($0 | 0)) {
  STACKTOP = sp;
  return;
 }
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $5;
 $8 = $1 + 16 | 0;
 if (($5 | 0) == ($0 | 0)) if ((HEAP32[$8 >> 2] | 0) == ($1 | 0)) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 127]($5, $2);
  $14 = HEAP32[$4 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] & 255]($14);
  HEAP32[$4 >> 2] = 0;
  $18 = HEAP32[$8 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$18 >> 2] | 0) + 12 >> 2] & 127]($18, $0);
  $22 = HEAP32[$8 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$22 >> 2] | 0) + 16 >> 2] & 255]($22);
  HEAP32[$8 >> 2] = 0;
  HEAP32[$4 >> 2] = $0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] & 127]($2, $1);
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] & 255]($2);
  HEAP32[$8 >> 2] = $1;
  STACKTOP = sp;
  return;
 } else {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 127]($5, $1);
  $35 = HEAP32[$4 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$35 >> 2] | 0) + 16 >> 2] & 255]($35);
  $39 = $1 + 16 | 0;
  HEAP32[$4 >> 2] = HEAP32[$39 >> 2];
  HEAP32[$39 >> 2] = $1;
  STACKTOP = sp;
  return;
 } else {
  $41 = HEAP32[$8 >> 2] | 0;
  if (($1 | 0) == ($41 | 0)) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$41 >> 2] | 0) + 12 >> 2] & 127]($41, $0);
   $46 = HEAP32[$8 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$46 >> 2] | 0) + 16 >> 2] & 255]($46);
   HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$4 >> 2] = $0;
   STACKTOP = sp;
   return;
  } else {
   HEAP32[$4 >> 2] = $41;
   HEAP32[$8 >> 2] = $7;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN3sgl10Renderer2DC2EiiRKNS_6ShaderE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$sroa$5$0$$sroa_idx = 0, $$sroa$7$0$$sroa_idx = 0, $14 = 0.0, $16 = 0.0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 11360;
 $4 = $0 + 4 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 __ZN3sgl12VertexBufferC2Ev($0 + 20 | 0);
 __ZN3sgl11IndexBufferC2Ev($0 + 24 | 0);
 HEAP32[$0 + 32 >> 2] = HEAP32[$3 >> 2];
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0 + 36 | 0, $3 + 4 | 0);
 __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEC2ERKSF_($0 + 48 | 0, $3 + 16 | 0);
 $14 = +($1 | 0);
 HEAPF32[$0 + 68 >> 2] = $14;
 $16 = +($2 | 0);
 HEAPF32[$0 + 72 >> 2] = $16;
 HEAPF32[$0 + 76 >> 2] = 2.0 / $14;
 $$sroa$5$0$$sroa_idx = $0 + 80 | 0;
 HEAP32[$$sroa$5$0$$sroa_idx >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx + 4 >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx + 8 >> 2] = 0;
 HEAP32[$$sroa$5$0$$sroa_idx + 12 >> 2] = 0;
 HEAPF32[$0 + 96 >> 2] = 2.0 / $16;
 $$sroa$7$0$$sroa_idx = $0 + 100 | 0;
 HEAP32[$$sroa$7$0$$sroa_idx >> 2] = 0;
 HEAP32[$$sroa$7$0$$sroa_idx + 4 >> 2] = 0;
 HEAP32[$$sroa$7$0$$sroa_idx + 8 >> 2] = 0;
 HEAP32[$$sroa$7$0$$sroa_idx + 12 >> 2] = 0;
 HEAPF32[$0 + 116 >> 2] = -1.0;
 HEAP32[$0 + 120 >> 2] = 0;
 HEAPF32[$0 + 124 >> 2] = -$14 / $14;
 HEAPF32[$0 + 128 >> 2] = -$16 / $16;
 HEAPF32[$0 + 132 >> 2] = -0.0;
 HEAP32[$0 + 136 >> 2] = 1065353216;
 $23 = $0 + 140 | 0;
 HEAP32[$23 >> 2] = 0;
 HEAP32[$23 + 4 >> 2] = 0;
 HEAP32[$23 + 8 >> 2] = 0;
 $24 = $0 + 152 | 0;
 HEAP32[$24 >> 2] = 0;
 HEAP32[$24 + 4 >> 2] = 0;
 HEAP32[$24 + 8 >> 2] = 0;
 HEAP32[$24 + 12 >> 2] = 0;
 $25 = __Znwm(64) | 0;
 HEAP32[$0 + 156 >> 2] = $25;
 HEAP32[$0 + 160 >> 2] = $25;
 HEAP32[$0 + 164 >> 2] = $25 + 64;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIjNS0_18basic_format_specsIcEEE6on_numEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$neg$i = 0, $1 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy1 = sp + 32 | 0;
 $$byval_copy = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $9 = ((32 - (Math_clz32($4 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $$neg$i = ((HEAP32[16 + ($9 << 2) >> 2] | 0) >>> 0 > $4 >>> 0) << 31 >> 31;
 $15 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0;
 if (!$15) __ZNSt3__26localeC2Ev($$byval_copy1); else __ZNSt3__26localeC2ERKS0_($$byval_copy1, $15);
 $17 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1, 32704) | 0;
 $21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 16 >> 2] & 127]($17) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy1);
 $22 = $9 + $$neg$i | 0;
 $25 = $22 + 1 + (($22 | 0) / 3 | 0) | 0;
 $26 = HEAP32[$0 >> 2] | 0;
 $29 = HEAP32[$0 + 16 >> 2] | 0;
 HEAP32[$1 >> 2] = $0 + 12;
 HEAP32[$1 + 4 >> 2] = $29;
 $32 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $25;
 HEAP8[$2 + 8 >> 0] = $21;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIjSA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($26, $25, $$byval_copy, $32, $$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIiNS0_18basic_format_specsIcEEE6on_numEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$neg$i = 0, $1 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy1 = sp + 32 | 0;
 $$byval_copy = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $9 = ((32 - (Math_clz32($4 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $$neg$i = ((HEAP32[16 + ($9 << 2) >> 2] | 0) >>> 0 > $4 >>> 0) << 31 >> 31;
 $15 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0;
 if (!$15) __ZNSt3__26localeC2Ev($$byval_copy1); else __ZNSt3__26localeC2ERKS0_($$byval_copy1, $15);
 $17 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1, 32704) | 0;
 $21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 16 >> 2] & 127]($17) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy1);
 $22 = $9 + $$neg$i | 0;
 $25 = $22 + 1 + (($22 | 0) / 3 | 0) | 0;
 $26 = HEAP32[$0 >> 2] | 0;
 $29 = HEAP32[$0 + 16 >> 2] | 0;
 HEAP32[$1 >> 2] = $0 + 12;
 HEAP32[$1 + 4 >> 2] = $29;
 $32 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $25;
 HEAP8[$2 + 8 >> 0] = $21;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIiSA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($26, $25, $$byval_copy, $32, $$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE10int_writerIcNS0_18basic_format_specsIcEEE6on_numEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$neg$i = 0, $1 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy1 = sp + 32 | 0;
 $$byval_copy = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $9 = ((32 - (Math_clz32($4 | 1 | 0) | 0) | 0) * 1233 | 0) >>> 12;
 $$neg$i = ((HEAP32[16 + ($9 << 2) >> 2] | 0) >>> 0 > $4 >>> 0) << 31 >> 31;
 $15 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0;
 if (!$15) __ZNSt3__26localeC2Ev($$byval_copy1); else __ZNSt3__26localeC2ERKS0_($$byval_copy1, $15);
 $17 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1, 32704) | 0;
 $21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 16 >> 2] & 127]($17) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy1);
 $22 = $9 + $$neg$i | 0;
 $25 = $22 + 1 + (($22 | 0) / 3 | 0) | 0;
 $26 = HEAP32[$0 >> 2] | 0;
 $29 = HEAP32[$0 + 16 >> 2] | 0;
 HEAP32[$1 >> 2] = $0 + 12;
 HEAP32[$1 + 4 >> 2] = $29;
 $32 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $25;
 HEAP8[$2 + 8 >> 0] = $21;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE9write_intINS0_18basic_format_specsIcEENS7_10int_writerIcSA_E10num_writerEEEviNS0_17basic_string_viewIcEERKT_T0_($26, $25, $$byval_copy, $32, $$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$038 = 0, $$sroa$0$2 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $6 = sp;
 $7 = HEAP32[$0 >> 2] | 0;
 L1 : do if (!$7) $$sroa$0$2 = 0; else {
  $9 = $3;
  $10 = $1;
  $12 = $9 - $10 >> 2;
  $13 = $4 + 12 | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  $$038 = ($14 | 0) > ($12 | 0) ? $14 - $12 | 0 : 0;
  $17 = $2;
  $18 = $17 - $10 | 0;
  $19 = $18 >> 2;
  if (($18 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 31]($7, $1, $19) | 0) != ($19 | 0)) {
   HEAP32[$0 >> 2] = 0;
   $$sroa$0$2 = 0;
   break;
  }
  do if (($$038 | 0) > 0) {
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$6 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($6, $$038, $5);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 31]($7, (HEAP8[$6 + 8 + 3 >> 0] | 0) < 0 ? HEAP32[$6 >> 2] | 0 : $6, $$038) | 0) == ($$038 | 0)) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
    break;
   } else {
    HEAP32[$0 >> 2] = 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
    $$sroa$0$2 = 0;
    break L1;
   }
  } while (0);
  $38 = $9 - $17 | 0;
  $39 = $38 >> 2;
  if (($38 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 31]($7, $2, $39) | 0) != ($39 | 0)) {
   HEAP32[$0 >> 2] = 0;
   $$sroa$0$2 = 0;
   break;
  }
  HEAP32[$13 >> 2] = 0;
  $$sroa$0$2 = $7;
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$2 | 0;
}

function __ZNK3sgl19MouseButtonReleased8ToStringEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $2 = sp;
 $3 = $2 + 64 | 0;
 $4 = $2 + 8 | 0;
 HEAP32[$4 >> 2] = 10884;
 $5 = $2 + 12 | 0;
 HEAP32[$2 >> 2] = 7604;
 HEAP32[$3 >> 2] = 7624;
 HEAP32[$2 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv($2 + 64 | 0, $5);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$4 >> 2] = 10884;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($5);
 HEAP32[$5 >> 2] = 10960;
 $10 = $2 + 44 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 $12 = $2 + 8 | 0;
 $13 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($12, 22066, 22) | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($13, HEAP32[$1 + 8 >> 2] | 0) | 0, 22089, 1) | 0;
 __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $5);
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$12 >> 2] = 10884;
 HEAP32[$5 >> 2] = 10960;
 if ((HEAP8[$10 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$10 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZNK3sgl18MouseButtonPressed8ToStringEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $2 = sp;
 $3 = $2 + 64 | 0;
 $4 = $2 + 8 | 0;
 HEAP32[$4 >> 2] = 10884;
 $5 = $2 + 12 | 0;
 HEAP32[$2 >> 2] = 7604;
 HEAP32[$3 >> 2] = 7624;
 HEAP32[$2 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv($2 + 64 | 0, $5);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$4 >> 2] = 10884;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($5);
 HEAP32[$5 >> 2] = 10960;
 $10 = $2 + 44 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 $12 = $2 + 8 | 0;
 $13 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($12, 22138, 21) | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($13, HEAP32[$1 + 8 >> 2] | 0) | 0, 22089, 1) | 0;
 __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $5);
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$12 >> 2] = 10884;
 HEAP32[$5 >> 2] = 10960;
 if ((HEAP8[$10 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$10 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_10str_writerIcEEEEvRKNS0_10align_specEOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $16 = 0, $22 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = $2 + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($3 >>> 0 <= $5 >>> 0) {
  $10 = $9 + $5 | 0;
  if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $10 >>> 0) {
   FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $10);
   $16 = HEAP32[$4 >> 2] | 0;
  } else $16 = $5;
  HEAP32[$8 >> 2] = $10;
  if (!$16) return;
  _memmove((HEAP32[$7 + 4 >> 2] | 0) + $9 | 0, HEAP32[$2 >> 2] | 0, $16 | 0) | 0;
  return;
 }
 $22 = $9 + $3 | 0;
 if ((HEAP32[$7 + 12 >> 2] | 0) >>> 0 < $22 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7, $22);
 HEAP32[$8 >> 2] = $22;
 $30 = (HEAP32[$7 + 4 >> 2] | 0) + $9 | 0;
 $33 = HEAP32[$1 + 4 >> 2] & 255;
 $34 = $3 - $5 | 0;
 switch (HEAP32[$1 + 8 >> 2] | 0) {
 case 2:
  {
   if ($34 | 0) _memset($30 | 0, $33 | 0, $34 | 0) | 0;
   $38 = HEAP32[$4 >> 2] | 0;
   if (!$38) return;
   _memmove($30 + $34 | 0, HEAP32[$2 >> 2] | 0, $38 | 0) | 0;
   return;
  }
 case 3:
  {
   $42 = $34 >>> 1;
   if ($42 | 0) _memset($30 | 0, $33 | 0, $42 | 0) | 0;
   $44 = $30 + $42 | 0;
   $45 = HEAP32[$4 >> 2] | 0;
   if ($45 | 0) _memmove($44 | 0, HEAP32[$2 >> 2] | 0, $45 | 0) | 0;
   $48 = $34 - $42 | 0;
   if (!$48) return;
   _memset($44 + $45 | 0, $33 | 0, $48 | 0) | 0;
   return;
  }
 default:
  {
   $51 = HEAP32[$4 >> 2] | 0;
   if ($51 | 0) _memmove($30 | 0, HEAP32[$2 >> 2] | 0, $51 | 0) | 0;
   if (!$34) return;
   _memset($30 + $51 | 0, $33 | 0, $34 | 0) | 0;
   return;
  }
 }
}

function __ZN6spdlog17pattern_formatterC2ENS_17pattern_time_typeENSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $19 = 0, $29 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$0 >> 2] = 9992;
 $4 = $0 + 4 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP8[$4 + 11 >> 0] = 2;
 HEAP8[$4 >> 0] = 37;
 HEAP8[$4 + 1 >> 0] = 43;
 HEAP8[$4 + 2 >> 0] = 0;
 $7 = $0 + 16 | 0;
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$7 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = $1;
 $9 = $0 + 80 | 0;
 $10 = $0 + 88 | 0;
 dest = $0 + 32 | 0;
 stop = dest + 44 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 HEAP32[$9 + 12 >> 2] = 0;
 HEAP32[$9 + 16 >> 2] = 0;
 $12 = __Znwm(168) | 0;
 $14 = $12 + 4 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$12 >> 2] = 10016;
 $19 = $12 + 16 | 0;
 HEAP32[$19 >> 2] = 0;
 HEAP32[$19 + 4 >> 2] = 0;
 HEAP32[$12 + 32 >> 2] = 0;
 HEAP32[$12 + 24 >> 2] = 10036;
 HEAP32[$12 + 28 >> 2] = $12 + 40;
 HEAP32[$12 + 36 >> 2] = 128;
 HEAP32[$3 >> 2] = $12;
 __ZNSt3__26vectorINS_10unique_ptrIN6spdlog7details14flag_formatterENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($10, $3);
 $29 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 if (!$29) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$29 >> 2] | 0) + 4 >> 2] & 255]($29);
 STACKTOP = sp;
 return;
}

function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $37 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 12 | 0;
 $3 = sp;
 $4 = sp + 8 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($3, $0);
 if (!(HEAP8[$3 >> 0] | 0)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  STACKTOP = sp;
  return $0 | 0;
 }
 $8 = (HEAP32[$0 >> 2] | 0) + -12 | 0;
 HEAP32[$4 >> 2] = HEAP32[$0 + (HEAP32[$8 >> 2] | 0) + 24 >> 2];
 $14 = $0 + (HEAP32[$8 >> 2] | 0) | 0;
 $16 = HEAP32[$14 + 4 >> 2] | 0;
 $17 = $1 + $2 | 0;
 $18 = $14 + 76 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 if (($19 | 0) == -1) {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy, $14);
  $21 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32688) | 0;
  $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 28 >> 2] & 31]($21, 32) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  $26 = $25 << 24 >> 24;
  HEAP32[$18 >> 2] = $26;
  $28 = $26;
 } else $28 = $19;
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
 if (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $1, ($16 & 176 | 0) == 32 ? $17 : $1, $17, $14, $28 & 255) | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  STACKTOP = sp;
  return $0 | 0;
 }
 $37 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__28ios_base5clearEj($37, HEAP32[$37 + 16 >> 2] | 5);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZN6spdlog7details11E_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i18 = 0, $$089$i$i$i$i$i19 = 0, $12 = 0, $15 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $38 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 10, $0 + 4 | 0, $3);
 $6 = $1 + 8 | 0;
 $12 = ___divdi3(HEAP32[$6 >> 2] | 0, HEAP32[$6 + 4 >> 2] | 0, 1e6, 0) | 0;
 __ZN6spdlog7details10fmt_helper10append_intIxLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE($12, getTempRet0() | 0, $3);
 $15 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$15) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $15 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $21 = HEAP32[$4 + 12 >> 2] | 0;
 $23 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$21) {
  STACKTOP = sp;
  return;
 }
 $25 = $21 + $15 | 0;
 $26 = $23 + 8 | 0;
 if (($15 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $28 = HEAP32[$26 >> 2] | 0;
 $29 = $28 + $15 | 0;
 if ((HEAP32[$23 + 12 >> 2] | 0) >>> 0 < $29 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$23 >> 2] >> 2] & 127]($23, $29);
  $38 = HEAP32[$26 >> 2] | 0;
 } else $38 = $28;
 $$010$i$i$i$i$i18 = $21;
 $$089$i$i$i$i$i19 = (HEAP32[$23 + 4 >> 2] | 0) + $38 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i19 >> 0] = HEAP8[$$010$i$i$i$i$i18 >> 0] | 0;
  $$010$i$i$i$i$i18 = $$010$i$i$i$i$i18 + 1 | 0;
  if (($$010$i$i$i$i$i18 | 0) == ($25 | 0)) break; else $$089$i$i$i$i$i19 = $$089$i$i$i$i$i19 + 1 | 0;
 }
 HEAP32[$26 >> 2] = $29;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE17char_spec_handler7on_charEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $21 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $37 = 0, $39 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP8[$0 + 4 >> 0] | 0;
 $5 = HEAP32[$1 + 8 >> 2] | 0;
 if (!$5) {
  $44 = HEAP32[$1 >> 2] | 0;
  $45 = $44 + 8 | 0;
  $46 = HEAP32[$45 >> 2] | 0;
  $47 = $46 + 1 | 0;
  if ((HEAP32[$44 + 12 >> 2] | 0) >>> 0 < $47 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$44 >> 2] >> 2] & 127]($44, $47);
  HEAP32[$45 >> 2] = $47;
  HEAP8[(HEAP32[$44 + 4 >> 2] | 0) + $46 >> 0] = $3;
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0;
 $9 = HEAP32[$1 >> 2] | 0;
 $10 = $9 + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if ($7 >>> 0 <= 1) {
  $12 = $11 + 1 | 0;
  if ((HEAP32[$9 + 12 >> 2] | 0) >>> 0 < $12 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$9 >> 2] >> 2] & 127]($9, $12);
  HEAP32[$10 >> 2] = $12;
  HEAP8[(HEAP32[$9 + 4 >> 2] | 0) + $11 >> 0] = $3;
  return;
 }
 $21 = $11 + $7 | 0;
 if ((HEAP32[$9 + 12 >> 2] | 0) >>> 0 < $21 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$9 >> 2] >> 2] & 127]($9, $21);
 HEAP32[$10 >> 2] = $21;
 $29 = (HEAP32[$9 + 4 >> 2] | 0) + $11 | 0;
 $32 = HEAP32[$5 + 4 >> 2] & 255;
 $33 = $7 + -1 | 0;
 switch (HEAP32[$5 + 8 >> 2] | 0) {
 case 2:
  {
   _memset($29 | 0, $32 | 0, $33 | 0) | 0;
   HEAP8[$29 + $33 >> 0] = $3;
   return;
  }
 case 3:
  {
   $37 = $33 >>> 1;
   if ($37 | 0) _memset($29 | 0, $32 | 0, $37 | 0) | 0;
   $39 = $29 + $37 | 0;
   HEAP8[$39 >> 0] = $3;
   $40 = $33 - $37 | 0;
   if (!$40) return;
   _memset($39 + 1 | 0, $32 | 0, $40 | 0) | 0;
   return;
  }
 default:
  {
   HEAP8[$29 >> 0] = $3;
   _memset($29 + 1 | 0, $32 | 0, $33 | 0) | 0;
   return;
  }
 }
}

function __ZN6spdlog7details11I_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i13 = 0, $$089$i$i$i$i$i14 = 0, $$idx$val = 0, $10 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $33 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 2, $0 + 4 | 0, $3);
 $$idx$val = HEAP32[$2 + 8 >> 2] | 0;
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(($$idx$val | 0) > 12 ? $$idx$val + -12 | 0 : $$idx$val, $3);
 $10 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$10) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $10 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $16 = HEAP32[$4 + 12 >> 2] | 0;
 $18 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$16) {
  STACKTOP = sp;
  return;
 }
 $20 = $16 + $10 | 0;
 $21 = $18 + 8 | 0;
 if (($10 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $23 = HEAP32[$21 >> 2] | 0;
 $24 = $23 + $10 | 0;
 if ((HEAP32[$18 + 12 >> 2] | 0) >>> 0 < $24 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$18 >> 2] >> 2] & 127]($18, $24);
  $33 = HEAP32[$21 >> 2] | 0;
 } else $33 = $23;
 $$010$i$i$i$i$i13 = $16;
 $$089$i$i$i$i$i14 = (HEAP32[$18 + 4 >> 2] | 0) + $33 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i14 >> 0] = HEAP8[$$010$i$i$i$i$i13 >> 0] | 0;
  $$010$i$i$i$i$i13 = $$010$i$i$i$i$i13 + 1 | 0;
  if (($$010$i$i$i$i$i13 | 0) == ($20 | 0)) break; else $$089$i$i$i$i$i14 = $$089$i$i$i$i$i14 + 1 | 0;
 }
 HEAP32[$21 >> 2] = $24;
 STACKTOP = sp;
 return;
}

function _mbtowc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $25 = 0, $3 = 0, $33 = 0, $34 = 0, $42 = 0, $47 = 0, $50 = 0, $55 = 0, $7 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 L1 : do if (!$1) $$0 = 0; else {
  do if ($2 | 0) {
   $spec$select = ($0 | 0) == 0 ? $3 : $0;
   $7 = HEAP8[$1 >> 0] | 0;
   if ($7 << 24 >> 24 > -1) {
    HEAP32[$spec$select >> 2] = $7 & 255;
    $$0 = $7 << 24 >> 24 != 0 & 1;
    break L1;
   }
   $16 = (HEAP32[HEAP32[(___pthread_self_437() | 0) + 188 >> 2] >> 2] | 0) == 0;
   $17 = HEAP8[$1 >> 0] | 0;
   if ($16) {
    HEAP32[$spec$select >> 2] = $17 << 24 >> 24 & 57343;
    $$0 = 1;
    break L1;
   }
   $21 = ($17 & 255) + -194 | 0;
   if ($21 >>> 0 <= 50) {
    $23 = $1 + 1 | 0;
    $25 = HEAP32[976 + ($21 << 2) >> 2] | 0;
    if ($2 >>> 0 < 4) if ($25 & -2147483648 >>> (($2 * 6 | 0) + -6 | 0) | 0) break;
    $33 = HEAPU8[$23 >> 0] | 0;
    $34 = $33 >>> 3;
    if (($34 + -16 | $34 + ($25 >> 26)) >>> 0 <= 7) {
     $42 = $33 + -128 | $25 << 6;
     if (($42 | 0) >= 0) {
      HEAP32[$spec$select >> 2] = $42;
      $$0 = 2;
      break L1;
     }
     $47 = (HEAPU8[$1 + 2 >> 0] | 0) + -128 | 0;
     if ($47 >>> 0 <= 63) {
      $50 = $47 | $42 << 6;
      if (($50 | 0) >= 0) {
       HEAP32[$spec$select >> 2] = $50;
       $$0 = 3;
       break L1;
      }
      $55 = (HEAPU8[$1 + 3 >> 0] | 0) + -128 | 0;
      if ($55 >>> 0 <= 63) {
       HEAP32[$spec$select >> 2] = $55 | $50 << 6;
       $$0 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $31 = 0, $37 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($3, $0);
 if (HEAP8[$3 >> 0] | 0) {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
  $10 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32744) | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  $14 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
  $16 = HEAP32[$14 + 24 >> 2] | 0;
  $17 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  $18 = $14 + 76 | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($17, HEAP32[$18 >> 2] | 0) | 0) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $14);
   $21 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32688) | 0;
   $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 28 >> 2] & 31]($21, 32) | 0;
   __ZNSt3__26localeD2Ev($$byval_copy);
   $26 = $25 << 24 >> 24;
   HEAP32[$18 >> 2] = $26;
   $28 = $26;
  } else $28 = HEAP32[$18 >> 2] | 0;
  $31 = HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$2 >> 2] = $16;
  HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
  if (!(FUNCTION_TABLE_iiiiii[$31 & 31]($10, $$byval_copy, $14, $28 & 255, $1) | 0)) {
   $37 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj($37, HEAP32[$37 + 16 >> 2] | 5);
  }
 }
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__2L11init_wweeksEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[30448] | 0)) if (___cxa_guard_acquire(30448) | 0) {
  $4 = 29824;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 29992);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29824, 14228) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29836, 14256) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29848, 14284) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29860, 14316) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29872, 14356) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29884, 14392) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29896, 14420) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29908, 14456) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29920, 14472) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29932, 14488) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29944, 14504) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29956, 14520) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29968, 14536) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29980, 14552) | 0;
 return;
}

function __ZNSt3__2L10init_weeksEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[30368] | 0)) if (___cxa_guard_acquire(30368) | 0) {
  $4 = 29072;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 29240);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29072, 24044) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29084, 24051) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29096, 24058) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29108, 24066) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29120, 24076) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29132, 24085) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29144, 24092) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29156, 24101) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29168, 24105) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29180, 24109) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29192, 24113) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29204, 24117) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29216, 24121) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(29228, 24125) | 0;
 return;
}

function __ZNK3sgl16KeyReleasedEvent8ToStringEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $2 = sp;
 $3 = $2 + 64 | 0;
 $4 = $2 + 8 | 0;
 HEAP32[$4 >> 2] = 10884;
 $5 = $2 + 12 | 0;
 HEAP32[$2 >> 2] = 7604;
 HEAP32[$3 >> 2] = 7624;
 HEAP32[$2 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv($2 + 64 | 0, $5);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$4 >> 2] = 10884;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($5);
 HEAP32[$5 >> 2] = 10960;
 $10 = $2 + 44 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 $12 = $2 + 8 | 0;
 $13 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($12, 21951, 18) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($13, HEAP32[$1 + 8 >> 2] | 0) | 0;
 __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $5);
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$12 >> 2] = 10884;
 HEAP32[$5 >> 2] = 10960;
 if ((HEAP8[$10 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$10 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;
 return;
}

function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$select = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $3 = sp + 208 | 0;
 $4 = sp + 160 | 0;
 $5 = sp + 80 | 0;
 $6 = sp;
 dest = $4;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $39 = ___lockfile($0) | 0; else $39 = 0;
  $13 = HEAP32[$0 >> 2] | 0;
  $14 = $13 & 32;
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) HEAP32[$0 >> 2] = $13 & -33;
  $19 = $0 + 48 | 0;
  if (!(HEAP32[$19 >> 2] | 0)) {
   $23 = $0 + 44 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$23 >> 2] = $6;
   $25 = $0 + 28 | 0;
   HEAP32[$25 >> 2] = $6;
   $26 = $0 + 20 | 0;
   HEAP32[$26 >> 2] = $6;
   HEAP32[$19 >> 2] = 80;
   $28 = $0 + 16 | 0;
   HEAP32[$28 >> 2] = $6 + 80;
   $29 = _printf_core($0, $1, $3, $5, $4) | 0;
   if (!$24) $$1 = $29; else {
    FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0;
    $spec$select = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29;
    HEAP32[$23 >> 2] = $24;
    HEAP32[$19 >> 2] = 0;
    HEAP32[$28 >> 2] = 0;
    HEAP32[$25 >> 2] = 0;
    HEAP32[$26 >> 2] = 0;
    $$1 = $spec$select;
   }
  } else $$1 = _printf_core($0, $1, $3, $5, $4) | 0;
  $35 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $35 | $14;
  if ($39 | 0) ___unlockfile($0);
  $$0 = ($35 & 32 | 0) == 0 ? $$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond32 = 0, label = 0;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $7 = $0 + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $5 & 255;
 do if (($5 << 24 >> 24 < 0 ? $8 : $9) | 0) {
  if (($1 | 0) == ($2 | 0)) {
   $$pre$phiZ2D = $9;
   $18 = $5;
   $22 = $8;
  } else {
   $$0$i$i = $2;
   $$07$i$i = $1;
   while (1) {
    $13 = $$0$i$i + -4 | 0;
    if ($$07$i$i >>> 0 >= $13 >>> 0) break;
    $15 = HEAP32[$$07$i$i >> 2] | 0;
    HEAP32[$$07$i$i >> 2] = HEAP32[$13 >> 2];
    HEAP32[$13 >> 2] = $15;
    $$0$i$i = $13;
    $$07$i$i = $$07$i$i + 4 | 0;
   }
   $$pre = HEAP8[$4 >> 0] | 0;
   $$pre$phiZ2D = $$pre & 255;
   $18 = $$pre;
   $22 = HEAP32[$7 >> 2] | 0;
  }
  $19 = $18 << 24 >> 24 < 0;
  $21 = $19 ? HEAP32[$0 >> 2] | 0 : $0;
  $25 = $2 + -4 | 0;
  $26 = $21 + ($19 ? $22 : $$pre$phiZ2D) | 0;
  $$029 = $1;
  $$030 = $21;
  while (1) {
   $28 = HEAP8[$$030 >> 0] | 0;
   $or$cond32 = $28 << 24 >> 24 > 0 & $28 << 24 >> 24 != 127;
   if ($$029 >>> 0 >= $25 >>> 0) break;
   if ($or$cond32) if ((HEAP32[$$029 >> 2] | 0) != ($28 << 24 >> 24 | 0)) {
    label = 11;
    break;
   }
   $$029 = $$029 + 4 | 0;
   $$030 = ($26 - $$030 | 0) > 1 ? $$030 + 1 | 0 : $$030;
  }
  if ((label | 0) == 11) {
   HEAP32[$3 >> 2] = 4;
   break;
  }
  if ($or$cond32) if (((HEAP32[$25 >> 2] | 0) + -1 | 0) >>> 0 >= $28 << 24 >> 24 >>> 0) HEAP32[$3 >> 2] = 4;
 } while (0);
 return;
}

function __ZN3sgl6Shader18GetUniformLocationERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$byval_copy = 0, $14 = 0, $16 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 12 | 0;
 $2 = sp;
 $3 = $0 + 16 | 0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($3, $1) | 0) {
  $$0 = HEAP32[(__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($3, $1) | 0) >> 2] | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $14 = _glGetUniformLocation(HEAP32[$0 >> 2] | 0, ((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1) | 0) | 0;
 if (($14 | 0) == -1) {
  $16 = HEAP32[7738] | 0;
  HEAP32[$2 >> 2] = 33137;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 33137;
  HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  __ZN6spdlog6logger3logIJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEvNS_10source_locENS_5level10level_enumEPKcDpRKT_($16, $$byval_copy, 3, 21774, $1);
 }
 HEAP32[(__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($3, $1) | 0) >> 2] = $14;
 $$0 = $14;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i17 = 0, $$0$i22 = 0, $10 = 0, $11 = 0, $16 = 0, $18 = 0, $30 = 0, $31 = 0, $35 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $6 = sp;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $10 = HEAP8[$5 + 11 >> 0] | 0;
 $11 = $10 << 24 >> 24 < 0;
 $16 = $11 ? HEAP32[$5 >> 2] | 0 : $5;
 $18 = $16 + ($11 ? HEAP32[$5 + 4 >> 2] | 0 : $10 & 255) | 0;
 $$0$i22 = $16;
 while (1) {
  if ($$0$i22 >>> 0 >= $18 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($6, HEAP8[$$0$i22 >> 0] | 0);
  $$0$i22 = $$0$i22 + 1 | 0;
 }
 $30 = (HEAP8[$6 + 11 >> 0] | 0) < 0 ? HEAP32[$6 >> 2] | 0 : $6;
 $31 = _catgets(($2 | 0) == -1 ? -1 : $2 << 1, $3, $4, $30) | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i17 = 0;
 while (1) {
  if (($$0$i$i17 | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i17 << 2) >> 2] = 0;
  $$0$i$i17 = $$0$i$i17 + 1 | 0;
 }
 $35 = $30 + (_strlen($31) | 0) | 0;
 $$0$i = $30;
 while (1) {
  if ($$0$i >>> 0 >= $35 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0, HEAP8[$$0$i >> 0] | 0);
  $$0$i = $$0$i + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11Y_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $10 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $33 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 4, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper10append_intIiLm500EEEvT_RN3fmt2v519basic_memory_bufferIcXT0_ENSt3__29allocatorIcEEEE((HEAP32[$2 + 20 >> 2] | 0) + 1900 | 0, $3);
 $10 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$10) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $10 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $16 = HEAP32[$4 + 12 >> 2] | 0;
 $18 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$16) {
  STACKTOP = sp;
  return;
 }
 $20 = $16 + $10 | 0;
 $21 = $18 + 8 | 0;
 if (($10 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $23 = HEAP32[$21 >> 2] | 0;
 $24 = $23 + $10 | 0;
 if ((HEAP32[$18 + 12 >> 2] | 0) >>> 0 < $24 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$18 >> 2] >> 2] & 127]($18, $24);
  $33 = HEAP32[$21 >> 2] | 0;
 } else $33 = $23;
 $$010$i$i$i$i$i = $16;
 $$089$i$i$i$i$i = (HEAP32[$18 + 4 >> 2] | 0) + $33 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($20 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$21 >> 2] = $24;
 STACKTOP = sp;
 return;
}

function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $4 = sp;
 $5 = HEAP32[$0 >> 2] | 0;
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0;
 $10 = HEAP32[$5 + -4 >> 2] | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $3;
 $14 = $4 + 16 | 0;
 $15 = $4 + 20 | 0;
 $16 = $4 + 24 | 0;
 $17 = $4 + 28 | 0;
 $18 = $4 + 32 | 0;
 $19 = $4 + 40 | 0;
 dest = $14;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0;
 HEAP8[$14 + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
  HEAP32[$4 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 15]($10, $4, $8, $8, 1, 0);
  $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 7]($10, $4, $8, 1, 0);
  switch (HEAP32[$4 + 36 >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$16 >> 2] | 0) != 1) if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
   $$0 = 0;
   break;
  }
  $$0 = HEAP32[$14 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN6spdlog7details11C_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $10 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $33 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 2, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE((HEAP32[$2 + 20 >> 2] | 0) % 100 | 0, $3);
 $10 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$10) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $10 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $16 = HEAP32[$4 + 12 >> 2] | 0;
 $18 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$16) {
  STACKTOP = sp;
  return;
 }
 $20 = $16 + $10 | 0;
 $21 = $18 + 8 | 0;
 if (($10 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $23 = HEAP32[$21 >> 2] | 0;
 $24 = $23 + $10 | 0;
 if ((HEAP32[$18 + 12 >> 2] | 0) >>> 0 < $24 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$18 >> 2] >> 2] & 127]($18, $24);
  $33 = HEAP32[$21 >> 2] | 0;
 } else $33 = $23;
 $$010$i$i$i$i$i = $16;
 $$089$i$i$i$i$i = (HEAP32[$18 + 4 >> 2] | 0) + $33 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($20 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$21 >> 2] = $24;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11m_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $10 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $33 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 2, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE((HEAP32[$2 + 16 >> 2] | 0) + 1 | 0, $3);
 $10 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$10) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $10 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $16 = HEAP32[$4 + 12 >> 2] | 0;
 $18 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$16) {
  STACKTOP = sp;
  return;
 }
 $20 = $16 + $10 | 0;
 $21 = $18 + 8 | 0;
 if (($10 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $23 = HEAP32[$21 >> 2] | 0;
 $24 = $23 + $10 | 0;
 if ((HEAP32[$18 + 12 >> 2] | 0) >>> 0 < $24 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$18 >> 2] >> 2] & 127]($18, $24);
  $33 = HEAP32[$21 >> 2] | 0;
 } else $33 = $23;
 $$010$i$i$i$i$i = $16;
 $$089$i$i$i$i$i = (HEAP32[$18 + 4 >> 2] | 0) + $33 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($20 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$21 >> 2] = $24;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal12context_baseINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEENS0_20basic_format_contextIS7_cEEcE10do_get_argEj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $$pr$i = 0, $10 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $3 = 0, $32 = 0, $37 = 0, $38 = 0, $44 = 0, $46 = 0, $5 = 0, $7 = 0, label = 0;
 HEAP32[$0 >> 2] = 0;
 $3 = $0 + 8 | 0;
 HEAP32[$3 >> 2] = 0;
 $5 = $1 + 16 | 0;
 $7 = HEAP32[$5 >> 2] | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 if (($10 | 0) > -1 | ($10 | 0) == -1 & $7 >>> 0 > 4294967295) {
  if ($2 >>> 0 <= 15) {
   $21 = $2 << 2;
   $22 = _bitshift64Shl(15, 0, $21 | 0) | 0;
   $26 = _bitshift64Lshr($7 & $22 | 0, $10 & (getTempRet0() | 0) | 0, $21 | 0) | 0;
   getTempRet0() | 0;
   HEAP32[$3 >> 2] = $26;
   if ($26 | 0) {
    $32 = (HEAP32[$1 + 24 >> 2] | 0) + ($2 << 3) | 0;
    $37 = HEAP32[$32 + 4 >> 2] | 0;
    $38 = $0;
    HEAP32[$38 >> 2] = HEAP32[$32 >> 2];
    HEAP32[$38 + 4 >> 2] = $37;
    $$pr$i = $26;
    label = 7;
   }
  }
 } else if ($7 >>> 0 > $2 >>> 0) {
  $19 = (HEAP32[$1 + 24 >> 2] | 0) + ($2 << 4) | 0;
  HEAP32[$0 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
  $$pr$i = HEAP32[$3 >> 2] | 0;
  label = 7;
 }
 if ((label | 0) == 7) {
  if (($$pr$i | 0) == 1) {
   $44 = (HEAP32[$0 >> 2] | 0) + 8 | 0;
   HEAP32[$0 >> 2] = HEAP32[$44 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$44 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$44 + 8 >> 2];
   $$pr = HEAP32[$3 >> 2] | 0;
  } else $$pr = $$pr$i;
  if ($$pr | 0) return;
 }
 $46 = ___cxa_allocate_exception(8) | 0;
 __ZN3fmt2v512format_errorC2EPKc($46, 17257);
 ___cxa_throw($46 | 0, 6792, 18);
}

function __ZN6spdlog7details11d_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $32 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 2, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 12 >> 2] | 0, $3);
 $9 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$9) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $9 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $15 = HEAP32[$4 + 12 >> 2] | 0;
 $17 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$15) {
  STACKTOP = sp;
  return;
 }
 $19 = $15 + $9 | 0;
 $20 = $17 + 8 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $22 = HEAP32[$20 >> 2] | 0;
 $23 = $22 + $9 | 0;
 if ((HEAP32[$17 + 12 >> 2] | 0) >>> 0 < $23 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$17 >> 2] >> 2] & 127]($17, $23);
  $32 = HEAP32[$20 >> 2] | 0;
 } else $32 = $22;
 $$010$i$i$i$i$i = $15;
 $$089$i$i$i$i$i = (HEAP32[$17 + 4 >> 2] | 0) + $32 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($19 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$20 >> 2] = $23;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11M_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $32 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 2, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 4 >> 2] | 0, $3);
 $9 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$9) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $9 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $15 = HEAP32[$4 + 12 >> 2] | 0;
 $17 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$15) {
  STACKTOP = sp;
  return;
 }
 $19 = $15 + $9 | 0;
 $20 = $17 + 8 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $22 = HEAP32[$20 >> 2] | 0;
 $23 = $22 + $9 | 0;
 if ((HEAP32[$17 + 12 >> 2] | 0) >>> 0 < $23 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$17 >> 2] >> 2] & 127]($17, $23);
  $32 = HEAP32[$20 >> 2] | 0;
 } else $32 = $22;
 $$010$i$i$i$i$i = $15;
 $$089$i$i$i$i$i = (HEAP32[$17 + 4 >> 2] | 0) + $32 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($19 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$20 >> 2] = $23;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11H_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $32 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 2, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 + 8 >> 2] | 0, $3);
 $9 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$9) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $9 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $15 = HEAP32[$4 + 12 >> 2] | 0;
 $17 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$15) {
  STACKTOP = sp;
  return;
 }
 $19 = $15 + $9 | 0;
 $20 = $17 + 8 | 0;
 if (($9 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $22 = HEAP32[$20 >> 2] | 0;
 $23 = $22 + $9 | 0;
 if ((HEAP32[$17 + 12 >> 2] | 0) >>> 0 < $23 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$17 >> 2] >> 2] & 127]($17, $23);
  $32 = HEAP32[$20 >> 2] | 0;
 } else $32 = $22;
 $$010$i$i$i$i$i = $15;
 $$089$i$i$i$i$i = (HEAP32[$17 + 4 >> 2] | 0) + $32 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($19 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$20 >> 2] = $23;
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11S_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i$i$i = 0, $$089$i$i$i$i$i = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $31 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp;
 __ZN6spdlog7details10scoped_padC2EmRNS0_12padding_infoERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($4, 2, $0 + 4 | 0, $3);
 __ZN6spdlog7details10fmt_helper4pad2ILm500EEEviRN3fmt2v519basic_memory_bufferIcXT_ENSt3__29allocatorIcEEEE(HEAP32[$2 >> 2] | 0, $3);
 $8 = HEAP32[$4 + 8 >> 2] | 0;
 if (!$8) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$4 + 16 >> 2] | 0) >>> 0 < $8 >>> 0) ___assert_fail(19157, 19181, 99, 19236);
 $14 = HEAP32[$4 + 12 >> 2] | 0;
 $16 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$14) {
  STACKTOP = sp;
  return;
 }
 $18 = $14 + $8 | 0;
 $19 = $16 + 8 | 0;
 if (($8 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $21 = HEAP32[$19 >> 2] | 0;
 $22 = $21 + $8 | 0;
 if ((HEAP32[$16 + 12 >> 2] | 0) >>> 0 < $22 >>> 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$16 >> 2] >> 2] & 127]($16, $22);
  $31 = HEAP32[$19 >> 2] | 0;
 } else $31 = $21;
 $$010$i$i$i$i$i = $14;
 $$089$i$i$i$i$i = (HEAP32[$16 + 4 >> 2] | 0) + $31 | 0;
 while (1) {
  HEAP8[$$089$i$i$i$i$i >> 0] = HEAP8[$$010$i$i$i$i$i >> 0] | 0;
  $$010$i$i$i$i$i = $$010$i$i$i$i$i + 1 | 0;
  if (($$010$i$i$i$i$i | 0) == ($18 | 0)) break; else $$089$i$i$i$i$i = $$089$i$i$i$i$i + 1 | 0;
 }
 HEAP32[$19 >> 2] = $22;
 STACKTOP = sp;
 return;
}

function __ZNK3sgl18WindowResizedEvent8ToStringEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $2 = sp;
 $3 = $2 + 64 | 0;
 $4 = $2 + 8 | 0;
 HEAP32[$4 >> 2] = 10884;
 $5 = $2 + 12 | 0;
 HEAP32[$2 >> 2] = 7604;
 HEAP32[$3 >> 2] = 7624;
 HEAP32[$2 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv($2 + 64 | 0, $5);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$4 >> 2] = 10884;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($5);
 HEAP32[$5 >> 2] = 10960;
 $10 = $2 + 44 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 $12 = $2 + 8 | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($12, 22219, 27) | 0;
 __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $5);
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$12 >> 2] = 10884;
 HEAP32[$5 >> 2] = 10960;
 if ((HEAP8[$10 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$10 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZNK3sgl16WindowCloseEvent8ToStringEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $2 = sp;
 $3 = $2 + 64 | 0;
 $4 = $2 + 8 | 0;
 HEAP32[$4 >> 2] = 10884;
 $5 = $2 + 12 | 0;
 HEAP32[$2 >> 2] = 7604;
 HEAP32[$3 >> 2] = 7624;
 HEAP32[$2 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv($2 + 64 | 0, $5);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$4 >> 2] = 10884;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($5);
 HEAP32[$5 >> 2] = 10960;
 $10 = $2 + 44 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 $12 = $2 + 8 | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($12, 21887, 25) | 0;
 __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $5);
 HEAP32[$2 >> 2] = 10864;
 HEAP32[$3 >> 2] = 10904;
 HEAP32[$12 >> 2] = 10884;
 HEAP32[$5 >> 2] = 10960;
 if ((HEAP8[$10 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$10 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($5);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $$byval_copy = sp + 184 | 0;
 $5 = sp + 192 | 0;
 $6 = sp + 160 | 0;
 $7 = sp;
 $8 = sp + 188 | 0;
 HEAP8[$5 >> 0] = HEAP8[23633] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[23634] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[23635] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[23636] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[23637] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[23638] | 0;
 $9 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $10 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 20, $9, $5, $$byval_copy) | 0;
 $11 = $6 + $10 | 0;
 $12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $11, $2) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 $13 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32720) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 48 >> 2] & 7]($13, $6, $11, $7) | 0;
 $17 = $7 + ($10 << 2) | 0;
 HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
 $24 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, ($12 | 0) == ($11 | 0) ? $17 : $7 + ($12 - $6 << 2) | 0, $17, $2, $3) | 0;
 STACKTOP = sp;
 return $24 | 0;
}

function __ZN3sgl6Shader13CompileShaderEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$alloca_mul = 0, $$byval_copy = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy = sp + 32 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $1;
 $9 = _glCreateShader($1 | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP8[$2 + 11 >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2;
 _glShaderSource($9 | 0, 1, $5 | 0, 0);
 _glCompileShader($9 | 0);
 _glGetShaderiv($9 | 0, 35713, $6 | 0);
 if (HEAP32[$6 >> 2] | 0) {
  $$0 = $9;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _glGetShaderiv($9 | 0, 35716, $7 | 0);
 $17 = HEAP32[$7 >> 2] | 0;
 $$alloca_mul = $17;
 $18 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 HEAP32[$8 >> 2] = $18;
 _glGetShaderInfoLog($9 | 0, $17 | 0, $7 | 0, $18 | 0);
 $19 = HEAP32[7738] | 0;
 HEAP32[$3 >> 2] = 33137;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 33137;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 __ZN6spdlog6logger3logIJPcjEEEvNS_10source_locENS_5level10level_enumEPKcDpRKT_($19, $$byval_copy, 3, 21632, $8, $4);
 _glDeleteShader($9 | 0);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN3fmt2v58internal13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE20on_dynamic_precisionINS1_7auto_idEEEvT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $2 = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 $7 = (HEAP32[$0 >> 2] | 0) + 12 | 0;
 $9 = HEAP32[$0 + 4 >> 2] | 0;
 $10 = $9 + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (($11 | 0) <= -1) {
  $13 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($13, 17285);
  ___cxa_throw($13 | 0, 6792, 18);
 }
 HEAP32[$10 >> 2] = $11 + 1;
 __ZN3fmt2v58internal12context_baseINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEENS0_20basic_format_contextIS7_cEEcE10do_get_argEj($4, $9, $11);
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 HEAP32[$2 >> 2] = sp + 36;
 $15 = __ZN3fmt2v516visit_format_argINS0_8internal17precision_checkerINS2_13error_handlerEEENS0_20basic_format_contextINSt3__220back_insert_iteratorINS2_12basic_bufferIcEEEEcEEEENS2_9result_ofIFT_iEE4typeEOSE_RKNS0_16basic_format_argIT0_EE($2, $3) | 0;
 $16 = getTempRet0() | 0;
 if ($16 >>> 0 > 0 | ($16 | 0) == 0 & $15 >>> 0 > 2147483647) {
  $22 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($22, 17827);
  ___cxa_throw($22 | 0, 6792, 18);
 } else {
  HEAP32[$7 >> 2] = $15;
  STACKTOP = sp;
  return;
 }
}

function __ZN6spdlog6logger3logINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEELPS8_0EEEvNS_10source_locENS_5level10level_enumERKT_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $31 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $4 = sp + 56 | 0;
 $5 = sp;
 if ((HEAP32[$0 + 28 >> 2] | 0) > ($2 | 0)) {
  STACKTOP = sp;
  return;
 }
 $11 = HEAP8[$3 + 11 >> 0] | 0;
 $12 = $11 << 24 >> 24 < 0;
 $18 = $12 ? HEAP32[$3 + 4 >> 2] | 0 : $11 & 255;
 $19 = $12 ? HEAP32[$3 >> 2] | 0 : $3;
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$5 >> 2] = $0 + 4;
 HEAP32[$5 + 4 >> 2] = $2;
 $21 = __ZNSt3__26chrono12system_clock3nowEv() | 0;
 $22 = getTempRet0() | 0;
 $24 = $5 + 8 | 0;
 HEAP32[$24 >> 2] = $21;
 HEAP32[$24 + 4 >> 2] = $22;
 if (!(HEAP8[30048] | 0)) {
  $31 = _pthread_self() | 0;
  HEAP32[7737] = $31;
  $32 = 30048;
  HEAP32[$32 >> 2] = 1;
  HEAP32[$32 + 4 >> 2] = 0;
  $36 = $31;
 } else $36 = HEAP32[7737] | 0;
 HEAP32[$5 + 16 >> 2] = $36;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 0;
 $40 = $5 + 32 | 0;
 HEAP32[$40 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$40 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$40 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$5 + 44 >> 2] = $19;
 HEAP32[$5 + 48 >> 2] = $18;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 127]($0, $5);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $$byval_copy = sp + 72 | 0;
 $5 = sp + 80 | 0;
 $6 = sp + 48 | 0;
 $7 = sp;
 $8 = sp + 76 | 0;
 HEAP8[$5 >> 0] = HEAP8[23633] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[23634] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[23635] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[23636] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[23637] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[23638] | 0;
 $9 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $10 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 20, $9, $5, $$byval_copy) | 0;
 $11 = $6 + $10 | 0;
 $12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $11, $2) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 $13 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32688) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 32 >> 2] & 7]($13, $6, $11, $7) | 0;
 $17 = $7 + $10 | 0;
 HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
 $24 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, ($12 | 0) == ($11 | 0) ? $17 : $7 + ($12 - $6) | 0, $17, $2, $3) | 0;
 STACKTOP = sp;
 return $24 | 0;
}

function __ZN3fmt2v58internal13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE16on_dynamic_widthINS1_7auto_idEEEvT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $2 = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 $6 = HEAP32[$0 >> 2] | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 $9 = $8 + 8 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 | 0) <= -1) {
  $12 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($12, 17285);
  ___cxa_throw($12 | 0, 6792, 18);
 }
 HEAP32[$9 >> 2] = $10 + 1;
 __ZN3fmt2v58internal12context_baseINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEENS0_20basic_format_contextIS7_cEEcE10do_get_argEj($4, $8, $10);
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 HEAP32[$2 >> 2] = sp + 36;
 $14 = __ZN3fmt2v516visit_format_argINS0_8internal13width_checkerINS2_13error_handlerEEENS0_20basic_format_contextINSt3__220back_insert_iteratorINS2_12basic_bufferIcEEEEcEEEENS2_9result_ofIFT_iEE4typeEOSE_RKNS0_16basic_format_argIT0_EE($2, $3) | 0;
 $15 = getTempRet0() | 0;
 if ($15 >>> 0 > 0 | ($15 | 0) == 0 & $14 >>> 0 > 2147483647) {
  $21 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($21, 17827);
  ___cxa_throw($21 | 0, 6792, 18);
 } else {
  HEAP32[$6 >> 2] = $14;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $11 = 0, $17 = 0, $18 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $41 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp;
 if ((1073741806 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 $11 = $0 + 8 | 0;
 if ((HEAP8[$11 + 3 >> 0] | 0) < 0) $29 = HEAP32[$0 >> 2] | 0; else $29 = $0;
 if ($1 >>> 0 < 536870887) {
  $17 = $2 + $1 | 0;
  $18 = $1 << 1;
  $$sroa$speculated = $17 >>> 0 < $18 >>> 0 ? $18 : $17;
  $23 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($23 >>> 0 > 1073741823) _abort(); else $26 = $23;
 } else $26 = 1073741807;
 $27 = __Znwm($26 << 2) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($27, $29, $4) | 0;
 if ($6 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($27 + ($4 << 2) | 0, $7, $6) | 0;
 $32 = $3 - $5 | 0;
 $33 = $32 - $4 | 0;
 if ($33 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($27 + ($4 << 2) + ($6 << 2) | 0, $29 + ($4 << 2) + ($5 << 2) | 0, $33) | 0;
 if (($1 | 0) != 1) __ZdlPv($29);
 HEAP32[$0 >> 2] = $27;
 HEAP32[$11 >> 2] = $26 | -2147483648;
 $41 = $32 + $6 | 0;
 HEAP32[$0 + 4 >> 2] = $41;
 HEAP32[$8 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($27 + ($41 << 2) | 0, $8);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE20on_dynamic_precisionIjEEvT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $2 = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 $7 = (HEAP32[$0 >> 2] | 0) + 12 | 0;
 $9 = HEAP32[$0 + 4 >> 2] | 0;
 $10 = $9 + 8 | 0;
 if ((HEAP32[$10 >> 2] | 0) > 0) {
  $13 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($13, 17845);
  ___cxa_throw($13 | 0, 6792, 18);
 }
 HEAP32[$10 >> 2] = -1;
 __ZN3fmt2v58internal12context_baseINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEENS0_20basic_format_contextIS7_cEEcE10do_get_argEj($4, $9, $1);
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 HEAP32[$2 >> 2] = sp + 36;
 $14 = __ZN3fmt2v516visit_format_argINS0_8internal17precision_checkerINS2_13error_handlerEEENS0_20basic_format_contextINSt3__220back_insert_iteratorINS2_12basic_bufferIcEEEEcEEEENS2_9result_ofIFT_iEE4typeEOSE_RKNS0_16basic_format_argIT0_EE($2, $3) | 0;
 $15 = getTempRet0() | 0;
 if ($15 >>> 0 > 0 | ($15 | 0) == 0 & $14 >>> 0 > 2147483647) {
  $21 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($21, 17827);
  ___cxa_throw($21 | 0, 6792, 18);
 } else {
  HEAP32[$7 >> 2] = $14;
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $29 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $7 = sp;
 $8 = sp + 400 | 0;
 HEAP32[$8 >> 2] = $7 + 400;
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0 + 8 | 0, $7, $8, $4, $5, $6);
 $11 = HEAP32[$8 >> 2] | 0;
 $$0$i$i = $7;
 $$sroa$04$0$i = HEAP32[$1 >> 2] | 0;
 while (1) {
  if (($$0$i$i | 0) == ($11 | 0)) break;
  $14 = HEAP32[$$0$i$i >> 2] | 0;
  if (!$$sroa$04$0$i) $$sroa$04$1$i = 0; else {
   $16 = $$sroa$04$0$i + 24 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if (($17 | 0) == (HEAP32[$$sroa$04$0$i + 28 >> 2] | 0)) {
    $23 = HEAP32[(HEAP32[$$sroa$04$0$i >> 2] | 0) + 52 >> 2] | 0;
    $24 = __ZNSt3__211char_traitsIwE11to_int_typeEw($14) | 0;
    $$0$i$i$i$i = FUNCTION_TABLE_iii[$23 & 31]($$sroa$04$0$i, $24) | 0;
   } else {
    HEAP32[$16 >> 2] = $17 + 4;
    HEAP32[$17 >> 2] = $14;
    $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($14) | 0;
   }
   $29 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
   $$sroa$04$1$i = $29 ? 0 : $$sroa$04$0$i;
  }
  $$0$i$i = $$0$i$i + 4 | 0;
  $$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;
 return $$sroa$04$0$i | 0;
}

function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $29 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $7 = sp;
 $8 = sp + 100 | 0;
 HEAP32[$8 >> 2] = $7 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0 + 8 | 0, $7, $8, $4, $5, $6);
 $11 = HEAP32[$8 >> 2] | 0;
 $$0$i$i = $7;
 $$sroa$04$0$i = HEAP32[$1 >> 2] | 0;
 while (1) {
  if (($$0$i$i | 0) == ($11 | 0)) break;
  $14 = HEAP8[$$0$i$i >> 0] | 0;
  if (!$$sroa$04$0$i) $$sroa$04$1$i = 0; else {
   $16 = $$sroa$04$0$i + 24 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if (($17 | 0) == (HEAP32[$$sroa$04$0$i + 28 >> 2] | 0)) {
    $23 = HEAP32[(HEAP32[$$sroa$04$0$i >> 2] | 0) + 52 >> 2] | 0;
    $24 = __ZNSt3__211char_traitsIcE11to_int_typeEc($14) | 0;
    $$0$i$i$i$i = FUNCTION_TABLE_iii[$23 & 31]($$sroa$04$0$i, $24) | 0;
   } else {
    HEAP32[$16 >> 2] = $17 + 1;
    HEAP8[$17 >> 0] = $14;
    $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($14) | 0;
   }
   $29 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
   $$sroa$04$1$i = $29 ? 0 : $$sroa$04$0$i;
  }
  $$0$i$i = $$0$i$i + 1 | 0;
  $$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;
 return $$sroa$04$0$i | 0;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $34 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $0 = sp + 36 | 0;
 $1 = ___cxa_get_globals_fast() | 0;
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 | 0) {
   $7 = $3 + 48 | 0;
   $9 = HEAP32[$7 >> 2] | 0;
   $12 = HEAP32[$7 + 4 >> 2] | 0;
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 25798;
    _abort_message(25748, $vararg_buffer7);
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) $22 = HEAP32[$3 + 44 >> 2] | 0; else $22 = $3 + 80 | 0;
   HEAP32[$0 >> 2] = $22;
   $23 = HEAP32[$3 >> 2] | 0;
   $25 = HEAP32[$23 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[2372] | 0) + 16 >> 2] & 31](9488, $23, $0) | 0) {
    $30 = HEAP32[$0 >> 2] | 0;
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 127]($30) | 0;
    HEAP32[$vararg_buffer >> 2] = 25798;
    HEAP32[$vararg_buffer + 4 >> 2] = $25;
    HEAP32[$vararg_buffer + 8 >> 2] = $34;
    _abort_message(25662, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = 25798;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25;
    _abort_message(25707, $vararg_buffer3);
   }
  }
 }
 _abort_message(25786, $vararg_buffer10);
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE6rehashEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $27 = 0, $30 = 0, $8 = 0;
 if (($1 | 0) == 1) $$0 = 2; else if (!($1 + -1 & $1)) $$0 = $1; else $$0 = __ZNSt3__212__next_primeEm($1) | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if ($$0 >>> 0 > $8 >>> 0) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE8__rehashEm($0, $$0);
  return;
 }
 if ($$0 >>> 0 >= $8 >>> 0) return;
 $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0;
 if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
  $27 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0);
  $30 = $22 >>> 0 < 2 ? $22 : $27;
 } else $30 = __ZNSt3__212__next_primeEm($22) | 0;
 $$sroa$speculated = $$0 >>> 0 < $30 >>> 0 ? $30 : $$0;
 if ($$sroa$speculated >>> 0 >= $8 >>> 0) return;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE8__rehashEm($0, $$sroa$speculated);
 return;
}

function __ZN3sglL24EmscriptenResizeCallbackEiPK31EmscriptenFullscreenChangeEventPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $16 = 0, $18 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = _glfwGetWindowUserPointer($2 | 0) | 0;
 $6 = (HEAP32[$1 >> 2] | 0) == 0;
 $7 = __Znwm(16) | 0;
 if ($6) {
  $27 = HEAP32[$4 + 44 >> 2] | 0;
  $29 = HEAP32[$4 + 48 >> 2] | 0;
  HEAP8[$7 + 4 >> 0] = 0;
  HEAP32[$7 >> 2] = 11288;
  HEAP32[$7 + 8 >> 2] = $27;
  HEAP32[$7 + 12 >> 2] = $29;
  HEAP32[$3 >> 2] = $7;
  $34 = HEAP32[$4 + 24 >> 2] | 0;
  if (!$34) {
   $36 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$36 >> 2] = 12364;
   ___cxa_throw($36 | 0, 8032, 141);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$34 >> 2] | 0) + 24 >> 2] & 127]($34, $3);
  STACKTOP = sp;
  return 0;
 } else {
  $8 = $1 + 264 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $1 + 268 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  HEAP8[$7 + 4 >> 0] = 0;
  HEAP32[$7 >> 2] = 11288;
  HEAP32[$7 + 8 >> 2] = $9;
  HEAP32[$7 + 12 >> 2] = $11;
  HEAP32[$3 >> 2] = $7;
  $16 = HEAP32[$4 + 24 >> 2] | 0;
  if (!$16) {
   $18 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$18 >> 2] = 12364;
   ___cxa_throw($18 | 0, 8032, 141);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$16 >> 2] | 0) + 24 >> 2] & 127]($16, $3);
  HEAP32[$4 + 32 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$4 + 36 >> 2] = HEAP32[$10 >> 2];
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function __ZN3fmt2v58internal13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEE16on_dynamic_widthIjEEvT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $2 = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 $6 = HEAP32[$0 >> 2] | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 $9 = $8 + 8 | 0;
 if ((HEAP32[$9 >> 2] | 0) > 0) {
  $12 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($12, 17845);
  ___cxa_throw($12 | 0, 6792, 18);
 }
 HEAP32[$9 >> 2] = -1;
 __ZN3fmt2v58internal12context_baseINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEENS0_20basic_format_contextIS7_cEEcE10do_get_argEj($4, $8, $1);
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 HEAP32[$2 >> 2] = sp + 36;
 $13 = __ZN3fmt2v516visit_format_argINS0_8internal13width_checkerINS2_13error_handlerEEENS0_20basic_format_contextINSt3__220back_insert_iteratorINS2_12basic_bufferIcEEEEcEEEENS2_9result_ofIFT_iEE4typeEOSE_RKNS0_16basic_format_argIT0_EE($2, $3) | 0;
 $14 = getTempRet0() | 0;
 if ($14 >>> 0 > 0 | ($14 | 0) == 0 & $13 >>> 0 > 2147483647) {
  $20 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($20, 17827);
  ___cxa_throw($20 | 0, 6792, 18);
 } else {
  HEAP32[$6 >> 2] = $13;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS4_SB_NS_4hashIiEELb1EEENS_21__unordered_map_equalIS4_SB_NS_8equal_toIS4_EELb1EEENS8_ISB_EEE6rehashEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $27 = 0, $30 = 0, $8 = 0;
 if (($1 | 0) == 1) $$0 = 2; else if (!($1 + -1 & $1)) $$0 = $1; else $$0 = __ZNSt3__212__next_primeEm($1) | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if ($$0 >>> 0 > $8 >>> 0) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS4_SB_NS_4hashIiEELb1EEENS_21__unordered_map_equalIS4_SB_NS_8equal_toIS4_EELb1EEENS8_ISB_EEE8__rehashEm($0, $$0);
  return;
 }
 if ($$0 >>> 0 >= $8 >>> 0) return;
 $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0;
 if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
  $27 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0);
  $30 = $22 >>> 0 < 2 ? $22 : $27;
 } else $30 = __ZNSt3__212__next_primeEm($22) | 0;
 $$sroa$speculated = $$0 >>> 0 < $30 >>> 0 ? $30 : $$0;
 if ($$sroa$speculated >>> 0 >= $8 >>> 0) return;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIN6spdlog5level10level_enumENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS4_SB_NS_4hashIiEELb1EEENS_21__unordered_map_equalIS4_SB_NS_8equal_toIS4_EELb1EEENS8_ISB_EEE8__rehashEm($0, $$sroa$speculated);
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $9 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $9 = $1 + 52 | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  $11 = $1 + 53 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $15 = HEAP32[$0 + 12 >> 2] | 0;
  $16 = $0 + 16 + ($15 << 3) | 0;
  HEAP8[$9 >> 0] = 0;
  HEAP8[$11 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5);
  L4 : do if (($15 | 0) > 1) {
   $19 = $1 + 24 | 0;
   $20 = $0 + 8 | 0;
   $21 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    if (HEAP8[$21 >> 0] | 0) break L4;
    if (!(HEAP8[$9 >> 0] | 0)) {
     if (HEAP8[$11 >> 0] | 0) if (!(HEAP32[$20 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$19 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$20 >> 2] & 2)) break L4;
    }
    HEAP8[$9 >> 0] = 0;
    HEAP8[$11 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5);
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $16 >>> 0);
  } while (0);
  HEAP8[$9 >> 0] = $10;
  HEAP8[$11 >> 0] = $12;
 }
 return;
}

function __ZN3sgl6Shader12CreateShaderERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $13 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 12 | 0;
 $3 = sp;
 $5 = HEAP8[$1 + 11 >> 0] | 0;
 if (!(($5 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] | 0 : $5 & 255) | 0)) label = 3; else {
  $13 = HEAP8[$2 + 11 >> 0] | 0;
  if (!(($13 << 24 >> 24 < 0 ? HEAP32[$2 + 4 >> 2] | 0 : $13 & 255) | 0)) label = 3;
 }
 if ((label | 0) == 3) {
  $20 = HEAP32[7738] | 0;
  HEAP32[$3 >> 2] = 33137;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 33137;
  HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  __ZN6spdlog6logger3logENS_10source_locENS_5level10level_enumEPKc($20, $$byval_copy, 4, 21599);
 }
 $23 = _glCreateProgram() | 0;
 $24 = __ZN3sgl6Shader13CompileShaderEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(0, 35633, $1) | 0;
 $25 = __ZN3sgl6Shader13CompileShaderEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(0, 35632, $2) | 0;
 _glAttachShader($23 | 0, $24 | 0);
 _glAttachShader($23 | 0, $25 | 0);
 _glLinkProgram($23 | 0);
 _glValidateProgram($23 | 0);
 _glDeleteShader($24 | 0);
 _glDeleteShader($25 | 0);
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $0 + 8 | 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 do if ((HEAP32[$3 >> 2] | 0) - $6 >> 2 >>> 0 < $1 >>> 0) {
  $13 = ($6 - (HEAP32[$0 >> 2] | 0) >> 2) + $1 | 0;
  $14 = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0) | 0;
  if ($14 >>> 0 < $13 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
   $18 = HEAP32[$0 >> 2] | 0;
   $19 = (HEAP32[$3 >> 2] | 0) - $18 | 0;
   $23 = $19 >> 1;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($2, $19 >> 2 >>> 0 < $14 >>> 1 >>> 0 ? ($23 >>> 0 < $13 >>> 0 ? $13 : $23) : $14, (HEAP32[$5 >> 2] | 0) - $18 >> 2, $0 + 16 | 0);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($2, $1);
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $2);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($2);
   break;
  }
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0, $1); while (0);
 STACKTOP = sp;
 return;
}

function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $9 = 0;
 $2 = $1 & 255;
 L1 : do if (!$2) $$0 = $0 + (_strlen($0) | 0) | 0; else {
  if (!($0 & 3)) $$030$lcssa = $0; else {
   $9 = $1 & 255;
   $$03039 = $0;
   while (1) {
    $10 = HEAP8[$$03039 >> 0] | 0;
    if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $9 << 24 >> 24) {
     $$0 = $$03039;
     break L1;
    }
    $13 = $$03039 + 1 | 0;
    if (!($13 & 3)) {
     $$030$lcssa = $13;
     break;
    } else $$03039 = $13;
   }
  }
  $17 = Math_imul($2, 16843009) | 0;
  $18 = HEAP32[$$030$lcssa >> 2] | 0;
  L10 : do if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
   $$02936 = $$030$lcssa;
   $25 = $18;
   while (1) {
    $24 = $25 ^ $17;
    if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
     $$029$lcssa = $$02936;
     break L10;
    }
    $31 = $$02936 + 4 | 0;
    $25 = HEAP32[$31 >> 2] | 0;
    if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
     $$029$lcssa = $31;
     break;
    } else $$02936 = $31;
   }
  } else $$029$lcssa = $$030$lcssa; while (0);
  $38 = $1 & 255;
  $$1 = $$029$lcssa;
  while (1) {
   $39 = HEAP8[$$1 >> 0] | 0;
   if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $27 = 0, $30 = 0, $8 = 0;
 if (($1 | 0) == 1) $$0 = 2; else if (!($1 + -1 & $1)) $$0 = $1; else $$0 = __ZNSt3__212__next_primeEm($1) | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if ($$0 >>> 0 > $8 >>> 0) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm($0, $$0);
  return;
 }
 if ($$0 >>> 0 >= $8 >>> 0) return;
 $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0;
 if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
  $27 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0);
  $30 = $22 >>> 0 < 2 ? $22 : $27;
 } else $30 = __ZNSt3__212__next_primeEm($22) | 0;
 $$sroa$speculated = $$0 >>> 0 < $30 >>> 0 ? $30 : $$0;
 if ($$sroa$speculated >>> 0 >= $8 >>> 0) return;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm($0, $$sroa$speculated);
 return;
}

function __ZNSt3__26vectorIN3sgl10VertexDataENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $spec$select$i = 0, dest = 0, src = 0, stop = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = (HEAP32[$2 >> 2] | 0) - $4 | 0;
 $6 = ($5 | 0) / 40 | 0;
 $7 = $6 + 1 | 0;
 if ($7 >>> 0 > 107374182) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $9 = $0 + 8 | 0;
 $12 = ((HEAP32[$9 >> 2] | 0) - $4 | 0) / 40 | 0;
 $14 = $12 << 1;
 $spec$select$i = $12 >>> 0 < 53687091 ? ($14 >>> 0 < $7 >>> 0 ? $7 : $14) : 107374182;
 do if (!$spec$select$i) $22 = 0; else if ($spec$select$i >>> 0 > 107374182) {
  $18 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($18, 22468);
  HEAP32[$18 >> 2] = 15792;
  ___cxa_throw($18 | 0, 9584, 225);
 } else {
  $22 = __Znwm($spec$select$i * 40 | 0) | 0;
  break;
 } while (0);
 $21 = $22 + ($6 * 40 | 0) | 0;
 $24 = $22 + ($spec$select$i * 40 | 0) | 0;
 dest = $21;
 src = $1;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $28 = $21 + ((($5 | 0) / -40 | 0) * 40 | 0) | 0;
 if (($5 | 0) > 0) _memcpy($28 | 0, $4 | 0, $5 | 0) | 0;
 HEAP32[$0 >> 2] = $28;
 HEAP32[$2 >> 2] = $21 + 40;
 HEAP32[$9 >> 2] = $24;
 if (!$4) return;
 __ZdlPv($4);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp;
 if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
 if ($1 >>> 0 < 2147483623) {
  $16 = $2 + $1 | 0;
  $17 = $1 << 1;
  $$sroa$speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16;
  $22 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $22 = -17;
 $23 = __Znwm($22) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23, $25, $4) | 0;
 if ($6 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23 + $4 | 0, $7, $6) | 0;
 $28 = $3 - $5 | 0;
 $29 = $28 - $4 | 0;
 if ($29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23 + $4 + $6 | 0, $25 + $4 + $5 | 0, $29) | 0;
 if (($1 | 0) != 10) __ZdlPv($25);
 HEAP32[$0 >> 2] = $23;
 HEAP32[$0 + 8 >> 2] = $22 | -2147483648;
 $38 = $28 + $6 | 0;
 HEAP32[$0 + 4 >> 2] = $38;
 HEAP8[$8 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($23 + $38 | 0, $8);
 STACKTOP = sp;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $9 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $4 = HEAP8[$1 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 $9 = $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255;
 $11 = HEAP8[$2 + 11 >> 0] | 0;
 $12 = $11 << 24 >> 24 < 0;
 $16 = $12 ? HEAP32[$2 + 4 >> 2] | 0 : $11 & 255;
 $18 = $5 ? HEAP32[$1 >> 2] | 0 : $1;
 $19 = $16 + $9 | 0;
 if ($19 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($19 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $9;
  $$0$i = $0;
 } else {
  $25 = $19 + 16 & -16;
  $26 = __Znwm($25) | 0;
  HEAP32[$0 >> 2] = $26;
  HEAP32[$0 + 8 >> 2] = $25 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $9;
  $$0$i = $26;
 }
 if (!$9) {
  $31 = $$0$i + $9 | 0;
  HEAP8[$31 >> 0] = 0;
  $32 = HEAP32[$2 >> 2] | 0;
  $33 = $12 ? $32 : $2;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0, $33, $16) | 0;
  return;
 }
 _memcpy($$0$i | 0, $18 | 0, $9 | 0) | 0;
 $31 = $$0$i + $9 | 0;
 HEAP8[$31 >> 0] = 0;
 $32 = HEAP32[$2 >> 2] | 0;
 $33 = $12 ? $32 : $2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0, $33, $16) | 0;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $14 = 0, $21 = 0, $27 = 0, $28 = 0, $37 = 0, $39 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] & 127]($7) | 0;
 $14 = HEAP8[$11 + 8 + 3 >> 0] | 0;
 if ($14 << 24 >> 24 < 0) $28 = HEAP32[$11 + 4 >> 2] | 0; else $28 = $14 & 255;
 $21 = HEAP8[$11 + 20 + 3 >> 0] | 0;
 if ($21 << 24 >> 24 < 0) $27 = HEAP32[$11 + 16 >> 2] | 0; else $27 = $21 & 255;
 do if (($28 | 0) == (0 - $27 | 0)) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; else {
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  $37 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $11 + 24 | 0, $5, $4, 0) | 0) - $11 | 0;
  $39 = HEAP32[$1 >> 2] | 0;
  if (($39 | 0) == 12 & ($37 | 0) == 0) {
   HEAP32[$1 >> 2] = 0;
   break;
  }
  if (($39 | 0) < 12 & ($37 | 0) == 12) HEAP32[$1 >> 2] = $39 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $13 = 0, $20 = 0, $26 = 0, $27 = 0, $36 = 0, $38 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] & 127]($7) | 0;
 $13 = HEAP8[$11 + 11 >> 0] | 0;
 if ($13 << 24 >> 24 < 0) $27 = HEAP32[$11 + 4 >> 2] | 0; else $27 = $13 & 255;
 $20 = HEAP8[$11 + 12 + 11 >> 0] | 0;
 if ($20 << 24 >> 24 < 0) $26 = HEAP32[$11 + 16 >> 2] | 0; else $26 = $20 & 255;
 do if (($27 | 0) == (0 - $26 | 0)) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; else {
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  $36 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $11 + 24 | 0, $5, $4, 0) | 0) - $11 | 0;
  $38 = HEAP32[$1 >> 2] | 0;
  if (($38 | 0) == 12 & ($36 | 0) == 0) {
   HEAP32[$1 >> 2] = 0;
   break;
  }
  if (($38 | 0) < 12 & ($36 | 0) == 12) HEAP32[$1 >> 2] = $38 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03846 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) if (!(___towrite($2) | 0)) {
  $12 = HEAP32[$3 >> 2] | 0;
  label = 5;
 } else $$1 = 0; else {
  $12 = $4;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $9 = $2 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $14 = $10;
  if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
   $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0;
   break;
  }
  L10 : do if ((HEAP8[$2 + 75 >> 0] | 0) < 0 | ($1 | 0) == 0) {
   $$139 = 0;
   $$141 = $0;
   $$143 = $1;
   $32 = $14;
  } else {
   $$03846 = $1;
   while (1) {
    $22 = $$03846 + -1 | 0;
    if ((HEAP8[$0 + $22 >> 0] | 0) == 10) break;
    if (!$22) {
     $$139 = 0;
     $$141 = $0;
     $$143 = $1;
     $32 = $14;
     break L10;
    } else $$03846 = $22;
   }
   $29 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$03846) | 0;
   if ($29 >>> 0 < $$03846 >>> 0) {
    $$1 = $29;
    break L5;
   }
   $$139 = $$03846;
   $$141 = $0 + $$03846 | 0;
   $$143 = $1 - $$03846 | 0;
   $32 = HEAP32[$9 >> 2] | 0;
  } while (0);
  _memcpy($32 | 0, $$141 | 0, $$143 | 0) | 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
  $$1 = $$139 + $$143 | 0;
 } while (0);
 return $$1 | 0;
}

function __ZN6spdlog6logger3logENS_10source_locENS_5level10level_enumEPKc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $16 = 0, $23 = 0, $24 = 0, $28 = 0, $32 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $4 = sp + 56 | 0;
 $5 = sp;
 if ((HEAP32[$0 + 28 >> 2] | 0) > ($2 | 0)) {
  STACKTOP = sp;
  return;
 }
 $10 = _strlen($3) | 0;
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$5 >> 2] = $0 + 4;
 HEAP32[$5 + 4 >> 2] = $2;
 $13 = __ZNSt3__26chrono12system_clock3nowEv() | 0;
 $14 = getTempRet0() | 0;
 $16 = $5 + 8 | 0;
 HEAP32[$16 >> 2] = $13;
 HEAP32[$16 + 4 >> 2] = $14;
 if (!(HEAP8[30048] | 0)) {
  $23 = _pthread_self() | 0;
  HEAP32[7737] = $23;
  $24 = 30048;
  HEAP32[$24 >> 2] = 1;
  HEAP32[$24 + 4 >> 2] = 0;
  $28 = $23;
 } else $28 = HEAP32[7737] | 0;
 HEAP32[$5 + 16 >> 2] = $28;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 0;
 $32 = $5 + 32 | 0;
 HEAP32[$32 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$32 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$32 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$5 + 44 >> 2] = $3;
 HEAP32[$5 + 48 >> 2] = $10;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 127]($0, $5);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIN6spdlog6loggerENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i$i$i$i$i = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $32 = 0;
 HEAP32[$0 >> 2] = 9892;
 HEAP32[$0 + 16 >> 2] = 9920;
 $3 = HEAP32[$0 + 72 >> 2] | 0;
 if (($0 + 56 | 0) == ($3 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] & 255]($3); else if ($3 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 255]($3);
 $13 = $0 + 32 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if ($14 | 0) {
  $16 = $0 + 36 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == ($14 | 0)) $31 = $14; else {
   $$08$i$i$i$i$i$i = $17;
   do {
    $21 = HEAP32[$$08$i$i$i$i$i$i + -4 >> 2] | 0;
    $$08$i$i$i$i$i$i = $$08$i$i$i$i$i$i + -8 | 0;
    if ($21 | 0) {
     $23 = $21 + 4 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     HEAP32[$23 >> 2] = $24 + -1;
     if (!$24) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] & 255]($21);
      __ZNSt3__219__shared_weak_count14__release_weakEv($21);
     }
    }
   } while (($$08$i$i$i$i$i$i | 0) != ($14 | 0));
   $31 = HEAP32[$13 >> 2] | 0;
  }
  HEAP32[$16 >> 2] = $14;
  __ZdlPv($31);
 }
 $32 = $0 + 20 | 0;
 if ((HEAP8[$32 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__214__shared_countD2Ev($0);
  __ZdlPv($0);
  return;
 }
 __ZdlPv(HEAP32[$32 >> 2] | 0);
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN3sgl12GenericInput19GetJoystickAxisImplEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07$i$i$i = 0, $$idx = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $22 = 0, $24 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = HEAP32[7749] | 0;
 if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] & 31]($4, $2) | 0)) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $11 = _glfwGetJoystickAxes($2 | 0, $3 | 0) | 0;
 $12 = HEAP32[$3 >> 2] | 0;
 $13 = $11 + ($12 << 2) | 0;
 HEAP32[$0 >> 2] = 0;
 $14 = $0 + 4 | 0;
 HEAP32[$14 >> 2] = 0;
 $15 = $0 + 8 | 0;
 HEAP32[$15 >> 2] = 0;
 $16 = $11;
 $$idx = $12 << 2;
 $17 = $$idx >> 2;
 if ($12 | 0) {
  if ($17 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  $20 = __Znwm($$idx) | 0;
  HEAP32[$14 >> 2] = $20;
  HEAP32[$0 >> 2] = $20;
  HEAP32[$15 >> 2] = $20 + ($17 << 2);
  $22 = $13 + -4 | 0;
  $$07$i$i$i = $11;
  $24 = $20;
  while (1) {
   HEAP32[$24 >> 2] = HEAP32[$$07$i$i$i >> 2];
   $$07$i$i$i = $$07$i$i$i + 4 | 0;
   if (($$07$i$i$i | 0) == ($13 | 0)) break; else $24 = $24 + 4 | 0;
  }
  HEAP32[$14 >> 2] = $20 + ((($22 - $16 | 0) >>> 2) + 1 << 2);
 }
 STACKTOP = sp;
 return;
}

function __ZN3sgl14Renderer2D_ES25FlushEv($0) {
 $0 = $0 | 0;
 var $$01015 = 0, $$014 = 0, $$in = 0, $$in23 = 0, $$lcssa = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $28 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 156 | 0;
 $2 = $0 + 160 | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$2 >> 2] | 0) != ($4 | 0)) {
  $$01015 = 0;
  $$in = $4;
  do {
   __ZNK3sgl9Texture2D4BindEj(HEAP32[$$in + ($$01015 << 2) >> 2] | 0, $$01015);
   $$01015 = $$01015 + 1 | 0;
   $$in = HEAP32[$1 >> 2] | 0;
  } while ($$01015 >>> 0 < (HEAP32[$2 >> 2] | 0) - $$in >> 2 >>> 0);
 }
 $6 = $0 + 20 | 0;
 __ZNK3sgl12VertexBuffer4BindEv($6);
 $7 = $0 + 24 | 0;
 __ZNK3sgl11IndexBuffer4BindEv($7);
 __ZN3sgl12VertexBuffer10BindLayoutERK18VertexBufferLayout($6, $0 + 4 | 0);
 $9 = $0 + 152 | 0;
 _glDrawElements(4, HEAP32[$9 >> 2] | 0, 5125, 0);
 __ZNK3sgl12VertexBuffer6UnbindEv($6);
 __ZNK3sgl11IndexBuffer6UnbindEv($7);
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = HEAP32[$1 >> 2] | 0;
 if (($11 | 0) == ($12 | 0)) {
  $$lcssa = $11;
  HEAP32[$2 >> 2] = $$lcssa;
  HEAP32[$9 >> 2] = 0;
  return;
 }
 $$014 = 0;
 $$in23 = $12;
 while (1) {
  __ZNK3sgl9Texture2D6UnbindEv(HEAP32[$$in23 + ($$014 << 2) >> 2] | 0);
  $$014 = $$014 + 1 | 0;
  $28 = HEAP32[$1 >> 2] | 0;
  if ($$014 >>> 0 >= (HEAP32[$2 >> 2] | 0) - $28 >> 2 >>> 0) {
   $$lcssa = $28;
   break;
  } else $$in23 = $28;
 }
 HEAP32[$2 >> 2] = $$lcssa;
 HEAP32[$9 >> 2] = 0;
 return;
}

function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert28 = 0, $$pre = 0, $1 = 0, $10 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $37 = 0, $42 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) label = 3; else if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0;
  if (($7 | 0) < 0) label = 4; else {
   $10 = HEAP32[$1 >> 2] | 0;
   $$pre = HEAP32[$0 + 8 >> 2] | 0;
   if (!$10) {
    $42 = $$pre;
    label = 9;
   } else {
    $14 = HEAP32[$0 + 4 >> 2] | 0;
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0;
    $21 = $$pre;
    if (($$pre - $14 | 0) < ($19 | 0)) {
     $42 = $21;
     label = 9;
    } else {
     HEAP32[$0 + 100 >> 2] = $14 + ($19 + -1);
     $26 = $21;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$0 + 100 >> 2] = $$pre;
    $26 = $42;
   }
   $$phi$trans$insert28 = $0 + 4 | 0;
   if (!$26) $37 = HEAP32[$$phi$trans$insert28 >> 2] | 0; else {
    $28 = HEAP32[$$phi$trans$insert28 >> 2] | 0;
    $30 = $0 + 108 | 0;
    HEAP32[$30 >> 2] = $26 + 1 - $28 + (HEAP32[$30 >> 2] | 0);
    $37 = $28;
   }
   $36 = $37 + -1 | 0;
   if (($7 | 0) == (HEAPU8[$36 >> 0] | 0 | 0)) $$0 = $7; else {
    HEAP8[$36 >> 0] = $7;
    $$0 = $7;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__220__shared_ptr_emplaceIN6spdlog6loggerENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i$i$i$i = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $32 = 0;
 HEAP32[$0 >> 2] = 9892;
 HEAP32[$0 + 16 >> 2] = 9920;
 $3 = HEAP32[$0 + 72 >> 2] | 0;
 if (($0 + 56 | 0) == ($3 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] & 255]($3); else if ($3 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 255]($3);
 $13 = $0 + 32 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if ($14 | 0) {
  $16 = $0 + 36 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == ($14 | 0)) $31 = $14; else {
   $$08$i$i$i$i$i = $17;
   do {
    $21 = HEAP32[$$08$i$i$i$i$i + -4 >> 2] | 0;
    $$08$i$i$i$i$i = $$08$i$i$i$i$i + -8 | 0;
    if ($21 | 0) {
     $23 = $21 + 4 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     HEAP32[$23 >> 2] = $24 + -1;
     if (!$24) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] & 255]($21);
      __ZNSt3__219__shared_weak_count14__release_weakEv($21);
     }
    }
   } while (($$08$i$i$i$i$i | 0) != ($14 | 0));
   $31 = HEAP32[$13 >> 2] | 0;
  }
  HEAP32[$16 >> 2] = $14;
  __ZdlPv($31);
 }
 $32 = $0 + 20 | 0;
 if ((HEAP8[$32 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__214__shared_countD2Ev($0);
  return;
 }
 __ZdlPv(HEAP32[$32 >> 2] | 0);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}

function __ZNSt3__26vectorI19VertexBufferElementNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $spec$select$i = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = (HEAP32[$2 >> 2] | 0) - $4 | 0;
 $6 = ($5 | 0) / 12 | 0;
 $7 = $6 + 1 | 0;
 if ($7 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $9 = $0 + 8 | 0;
 $12 = ((HEAP32[$9 >> 2] | 0) - $4 | 0) / 12 | 0;
 $14 = $12 << 1;
 $spec$select$i = $12 >>> 0 < 178956970 ? ($14 >>> 0 < $7 >>> 0 ? $7 : $14) : 357913941;
 do if (!$spec$select$i) $22 = 0; else if ($spec$select$i >>> 0 > 357913941) {
  $18 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($18, 22468);
  HEAP32[$18 >> 2] = 15792;
  ___cxa_throw($18 | 0, 9584, 225);
 } else {
  $22 = __Znwm($spec$select$i * 12 | 0) | 0;
  break;
 } while (0);
 $21 = $22 + ($6 * 12 | 0) | 0;
 HEAP32[$21 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$21 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$21 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $28 = $21 + ((($5 | 0) / -12 | 0) * 12 | 0) | 0;
 if (($5 | 0) > 0) _memcpy($28 | 0, $4 | 0, $5 | 0) | 0;
 HEAP32[$0 >> 2] = $28;
 HEAP32[$2 >> 2] = $21 + 12;
 HEAP32[$9 >> 2] = $22 + ($spec$select$i * 12 | 0);
 if (!$4) return;
 __ZdlPv($4);
 return;
}

function __ZN6spdlog7details8registry16register_logger_ENSt3__210shared_ptrINS_6loggerEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2, (HEAP32[$1 >> 2] | 0) + 4 | 0);
 __ZN6spdlog7details8registry16throw_if_exists_ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $2);
 $6 = __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN6spdlog6loggerEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEEixERSG_($0 + 84 | 0, $2) | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 $8 = $1 + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$8 >> 2] = 0;
 HEAP32[$6 >> 2] = $7;
 $10 = $6 + 4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 HEAP32[$10 >> 2] = $9;
 if ($11 | 0) {
  $13 = $11 + 4 | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  HEAP32[$13 >> 2] = $14 + -1;
  if (!$14) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 255]($11);
   __ZNSt3__219__shared_weak_count14__release_weakEv($11);
  }
 }
 if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$2 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $4 = sp + 124 | 0;
 $5 = sp;
 dest = $5;
 src = 11968;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) if (!$1) {
  $$014 = $4;
  $$015 = 1;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
 } else {
  $$014 = $0;
  $$015 = $1;
  label = 4;
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0;
  $spec$select = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015;
  HEAP32[$5 + 48 >> 2] = $spec$select;
  $14 = $5 + 20 | 0;
  HEAP32[$14 >> 2] = $$014;
  HEAP32[$5 + 44 >> 2] = $$014;
  $16 = $$014 + $spec$select | 0;
  $17 = $5 + 16 | 0;
  HEAP32[$17 >> 2] = $16;
  HEAP32[$5 + 28 >> 2] = $16;
  $19 = _vfprintf($5, $2, $3) | 0;
  if (!$spec$select) $$0 = $19; else {
   $21 = HEAP32[$14 >> 2] | 0;
   HEAP8[$21 + ((($21 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0;
 } else {
  $7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $10 = _strtoll_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $11 = getTempRet0() | 0;
  $13 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$13) HEAP32[(___errno_location() | 0) >> 2] = $7;
  L7 : do if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) {
   do if (($13 | 0) == 34) {
    HEAP32[$2 >> 2] = 4;
    if (($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 0) {
     $$0 = 2147483647;
     break L7;
    }
   } else {
    if (($11 | 0) < -1 | ($11 | 0) == -1 & $10 >>> 0 < 2147483648) {
     HEAP32[$2 >> 2] = 4;
     break;
    }
    if (($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 2147483647) {
     HEAP32[$2 >> 2] = 4;
     $$0 = 2147483647;
     break L7;
    } else {
     $$0 = $10;
     break L7;
    }
   } while (0);
   $$0 = -2147483648;
  } else {
   HEAP32[$2 >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN6spdlog11set_patternENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_17pattern_time_typeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 24 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = __Znwm(104) | 0;
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 $6 = $4 + 11 | 0;
 HEAP8[$6 >> 0] = 1;
 HEAP8[$4 >> 0] = 10;
 HEAP8[$4 + 1 >> 0] = 0;
 __ZN6spdlog17pattern_formatterC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_17pattern_time_typeES7_($5, $3, $1, $4);
 HEAP32[$2 >> 2] = $5;
 __ZN6spdlog13set_formatterENSt3__210unique_ptrINS_9formatterENS0_14default_deleteIS2_EEEE($2);
 $9 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = 0;
 if ($9 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] & 255]($9);
 if ((HEAP8[$6 >> 0] | 0) < 0) __ZdlPv(HEAP32[$4 >> 2] | 0);
 if ((HEAP8[$3 + 11 >> 0] | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZZN3sgl9WebWindow4InitEvEN3__38__invokeEP10GLFWwindowiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $20 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $5 = _glfwGetWindowUserPointer($0 | 0) | 0;
 switch ($2 | 0) {
 case 1:
  {
   $6 = __Znwm(12) | 0;
   HEAP8[$6 + 4 >> 0] = 0;
   HEAP32[$6 >> 2] = 11216;
   HEAP32[$6 + 8 >> 2] = $1;
   HEAP32[$4 >> 2] = $6;
   $10 = HEAP32[$5 + 24 >> 2] | 0;
   if (!$10) {
    $12 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$12 >> 2] = 12364;
    ___cxa_throw($12 | 0, 8032, 141);
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 127]($10, $4);
   STACKTOP = sp;
   return;
  }
 case 0:
  {
   $16 = __Znwm(12) | 0;
   HEAP8[$16 + 4 >> 0] = 0;
   HEAP32[$16 >> 2] = 11240;
   HEAP32[$16 + 8 >> 2] = $1;
   HEAP32[$4 >> 2] = $16;
   $20 = HEAP32[$5 + 24 >> 2] | 0;
   if (!$20) {
    $22 = ___cxa_allocate_exception(4) | 0;
    HEAP32[$22 >> 2] = 12364;
    ___cxa_throw($22 | 0, 8032, 141);
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$20 >> 2] | 0) + 24 >> 2] & 127]($20, $4);
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $31 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($2, $0);
 do if (HEAP8[$2 >> 0] | 0) {
  $10 = HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  $11 = $10;
  if ($10 | 0) {
   $13 = $11 + 24 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$11 + 28 >> 2] | 0)) {
    $21 = HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] | 0;
    $22 = __ZNSt3__211char_traitsIcE11to_int_typeEc($1) | 0;
    $$0$i$i = FUNCTION_TABLE_iii[$21 & 31]($11, $22) | 0;
   } else {
    HEAP32[$13 >> 2] = $14 + 1;
    HEAP8[$14 >> 0] = $1;
    $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($1) | 0;
   }
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) break;
  }
  $31 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj($31, HEAP32[$31 + 16 >> 2] | 1);
 } while (0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZN3sgl9Texture2D8SetColorEhhhh($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i4$i = 0, $$02729$us = 0, $$028$us = 0, $13 = 0, $16 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = $0 + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0 + 20 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = Math_imul($8, $6) | 0;
 $13 = __Znam(($9 | 0) < 0 ? -1 : $9 << 2) | 0;
 if (($6 | 0) > 0 & ($8 | 0) > 0) {
  $$02729$us = 0;
  do {
   $16 = Math_imul($$02729$us, $8) | 0;
   $$028$us = 0;
   do {
    $18 = $$028$us + $16 << 2;
    HEAP8[$13 + $18 >> 0] = $1;
    HEAP8[$13 + ($18 | 1) >> 0] = $2;
    HEAP8[$13 + ($18 | 2) >> 0] = $3;
    HEAP8[$13 + ($18 | 3) >> 0] = $4;
    $$028$us = $$028$us + 1 | 0;
   } while (($$028$us | 0) != ($8 | 0));
   $$02729$us = $$02729$us + 1 | 0;
  } while (($$02729$us | 0) != ($6 | 0));
 }
 _glBindTexture(3553, HEAP32[$0 >> 2] | 0);
 switch (HEAP32[$0 + 32 >> 2] | 0) {
 case 0:
  {
   $$0$i4$i = 6408;
   break;
  }
 case 1:
  {
   $$0$i4$i = 6407;
   break;
  }
 case 3:
  {
   $$0$i4$i = 6409;
   break;
  }
 case 4:
  {
   $$0$i4$i = 6410;
   break;
  }
 default:
  $$0$i4$i = 0;
 }
 _glTexImage2D(3553, 0, $$0$i4$i | 0, HEAP32[$5 >> 2] | 0, HEAP32[$7 >> 2] | 0, 0, $$0$i4$i | 0, 5121, $13 | 0);
 __ZdaPv($13);
 return;
}

function __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE11set_patternERKNSt3__212basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 12 | 0;
 $3 = sp;
 $5 = HEAP32[$0 + 304 >> 2] | 0;
 __ZNSt3__25mutex4lockEv($5);
 $6 = __Znwm(104) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2, $1);
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $7 = $3 + 11 | 0;
 HEAP8[$7 >> 0] = 1;
 HEAP8[$3 >> 0] = 10;
 HEAP8[$3 + 1 >> 0] = 0;
 __ZN6spdlog17pattern_formatterC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_17pattern_time_typeES7_($6, $2, 0, $3);
 $10 = $0 + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 HEAP32[$10 >> 2] = $6;
 if ($11 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] & 255]($11);
 if ((HEAP8[$7 >> 0] | 0) < 0) __ZdlPv(HEAP32[$3 >> 2] | 0);
 if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__25mutex6unlockEv($5);
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$2 >> 2] | 0);
 __ZNSt3__25mutex6unlockEv($5);
 STACKTOP = sp;
 return;
}

function ___stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$cast = 0, $11 = 0, $18 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $1;
 $4 = $3 + 4 | 0;
 $5 = $0 + 48 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $2 - (($6 | 0) != 0 & 1);
 $11 = $0 + 44 | 0;
 HEAP32[$3 + 8 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$3 + 12 >> 2] = $6;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $18 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
 if (($18 | 0) < 1) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $18 & 48 ^ 16;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4 >> 2] | 0;
  if ($18 >>> 0 > $24 >>> 0) {
   $27 = HEAP32[$11 >> 2] | 0;
   $28 = $0 + 4 | 0;
   HEAP32[$28 >> 2] = $27;
   $$cast = $27;
   HEAP32[$0 + 8 >> 2] = $$cast + ($18 - $24);
   if (!(HEAP32[$5 >> 2] | 0)) $$0 = $2; else {
    HEAP32[$28 >> 2] = $$cast + 1;
    HEAP8[$1 + ($2 + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $2;
   }
  } else $$0 = $18;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $12 = 0, $14 = 0, $30 = 0, $8 = 0, $9 = 0, $8$looptemp = 0, $9$looptemp = 0, $$012$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  do {
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $9$looptemp = $9;
   $9 = getTempRet0() | 0;
   $12 = ___muldi3($8 | 0, $9 | 0, 10, 0) | 0;
   $14 = _i64Subtract($8$looptemp | 0, $9$looptemp | 0, $12 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $$0914 = $$0914 + -1 | 0;
   HEAP8[$$0914 >> 0] = $14 & 255 | 48;
  } while ($9$looptemp >>> 0 > 9 | ($9$looptemp | 0) == 9 & $8$looptemp >>> 0 > 4294967295);
  $$010$lcssa$off0 = $8;
  $$09$lcssa = $$0914;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $$012$looptemp = $$012;
   $$012 = ($$012 >>> 0) / 10 | 0;
   $30 = $$111 + -1 | 0;
   HEAP8[$30 >> 0] = $$012$looptemp - ($$012 * 10 | 0) | 48;
   if ($$012$looptemp >>> 0 < 10) {
    $$1$lcssa = $30;
    break;
   } else $$111 = $30;
  }
 }
 return $$1$lcssa | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function __ZNSt3__26vectorIPKN3sgl9Texture2DENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $spec$select$i = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = (HEAP32[$2 >> 2] | 0) - $4 | 0;
 $6 = $5 >> 2;
 $7 = $6 + 1 | 0;
 if ($7 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $9 = $0 + 8 | 0;
 $11 = (HEAP32[$9 >> 2] | 0) - $4 | 0;
 $14 = $11 >> 1;
 $spec$select$i = $11 >> 2 >>> 0 < 536870911 ? ($14 >>> 0 < $7 >>> 0 ? $7 : $14) : 1073741823;
 do if (!$spec$select$i) {
  $22 = 0;
  $31 = 0;
 } else if ($spec$select$i >>> 0 > 1073741823) {
  $18 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($18, 22468);
  HEAP32[$18 >> 2] = 15792;
  ___cxa_throw($18 | 0, 9584, 225);
 } else {
  $20 = __Znwm($spec$select$i << 2) | 0;
  $22 = $20;
  $31 = $20;
  break;
 } while (0);
 $21 = $22 + ($6 << 2) | 0;
 HEAP32[$21 >> 2] = HEAP32[$1 >> 2];
 if (($5 | 0) > 0) _memcpy($31 | 0, $4 | 0, $5 | 0) | 0;
 HEAP32[$0 >> 2] = $22;
 HEAP32[$2 >> 2] = $21 + 4;
 HEAP32[$9 >> 2] = $22 + ($spec$select$i << 2);
 if (!$4) return;
 __ZdlPv($4);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 $4 = $0 + 8 | 0;
 $5 = $4 + 3 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0;
  $$019 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0;
 } else {
  $$018 = $6 & 255;
  $$019 = 1;
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0, $$019, 1, $$019, $$019, 0, 0);
  if ((HEAP8[$5 >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($7) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$5 >> 0] = $$018 + 1;
  $$pn = $0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = $$018 + 1;
  $$pn = $19;
 }
 $$0 = $$pn + ($$018 << 2) | 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $2);
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0 + 4 | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal18arg_formatter_baseINS0_17back_insert_rangeINS1_12basic_bufferIcEEEEE5writeEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 if (!$1) {
  $4 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($4, 17698);
  ___cxa_throw($4 | 0, 6792, 18);
 }
 $5 = _strlen($1) | 0;
 $7 = HEAP32[$0 + 8 >> 2] | 0;
 if ($7 | 0) {
  $11 = HEAP32[$7 + 12 >> 2] | 0;
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = ($11 | 0) > -1 & $11 >>> 0 < $5 >>> 0 ? $11 : $5;
  __ZN3fmt2v512basic_writerINS0_17back_insert_rangeINS0_8internal12basic_bufferIcEEEEE12write_paddedINS7_10str_writerIcEEEEvRKNS0_10align_specEOT_($0, $7, $2);
  STACKTOP = sp;
  return;
 }
 $15 = HEAP32[$0 >> 2] | 0;
 $16 = $15 + 8 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $17 + $5 | 0;
 if ((HEAP32[$15 + 12 >> 2] | 0) >>> 0 < $18 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$15 >> 2] >> 2] & 127]($15, $18);
 HEAP32[$16 >> 2] = $18;
 if (!$5) {
  STACKTOP = sp;
  return;
 }
 _memmove((HEAP32[$15 + 4 >> 2] | 0) + $17 | 0, $1 | 0, $5 | 0) | 0;
 STACKTOP = sp;
 return;
}

function ___newlocale($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$03338 = 0, $$03439 = 0, $$036 = 0, $$13537 = 0, $$pre41 = 0, $12 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 L1 : do if (!(___loc_is_allocated($2) | 0)) {
  $12 = ($2 | 0) != 0;
  $$03338 = 0;
  $$13537 = 0;
  do {
   $$pre41 = 1 << $$13537 & $0;
   if ($12 & ($$pre41 | 0) == 0) $$0 = HEAP32[$2 + ($$13537 << 2) >> 2] | 0; else $$0 = ___get_locale($$13537, ($$pre41 | 0) == 0 ? 33137 : $1) | 0;
   $$03338 = $$03338 + (($$0 | 0) != 0 & 1) | 0;
   HEAP32[$3 + ($$13537 << 2) >> 2] = $$0;
   $$13537 = $$13537 + 1 | 0;
  } while (($$13537 | 0) != 6);
  switch ($$03338 & 2147483647 | 0) {
  case 0:
   {
    $$036 = 31064;
    break L1;
    break;
   }
  case 1:
   {
    if ((HEAP32[$3 >> 2] | 0) == 11528) {
     $$036 = 11556;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $$036 = $2;
 } else {
  $$03439 = 0;
  do {
   if (1 << $$03439 & $0 | 0) HEAP32[$2 + ($$03439 << 2) >> 2] = ___get_locale($$03439, $1) | 0;
   $$03439 = $$03439 + 1 | 0;
  } while (($$03439 | 0) != 6);
  $$036 = $2;
 } while (0);
 STACKTOP = sp;
 return $$036 | 0;
}

function __ZNSt3__26vectorINS_10shared_ptrIN6spdlog5sinks4sinkEEENS_9allocatorIS5_EEEC2INS_11__wrap_iterIPS5_EEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISD_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISD_E9referenceEEE5valueESD_E4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 0;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $0 + 8 | 0;
 HEAP32[$4 >> 2] = 0;
 $5 = HEAP32[$1 >> 2] | 0;
 $6 = HEAP32[$2 >> 2] | 0;
 $7 = $6 - $5 | 0;
 $8 = $7 >> 3;
 if (!$7) return;
 if ($8 >>> 0 > 536870911) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $11 = __Znwm($7) | 0;
 HEAP32[$3 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 HEAP32[$4 >> 2] = $11 + ($8 << 3);
 $13 = $5;
 $14 = $6;
 if (($14 | 0) == ($13 | 0)) return;
 $17 = $13;
 $18 = $11;
 do {
  HEAP32[$18 >> 2] = HEAP32[$17 >> 2];
  $21 = HEAP32[$17 + 4 >> 2] | 0;
  HEAP32[$18 + 4 >> 2] = $21;
  if ($21 | 0) {
   $23 = $21 + 4 | 0;
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
  }
  $17 = $17 + 8 | 0;
  $18 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAP32[$3 >> 2] = $18;
 } while (($17 | 0) != ($14 | 0));
 return;
}

function __ZN6spdlog6loggerD0Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i$i$i = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $30 = 0, $31 = 0;
 HEAP32[$0 >> 2] = 9920;
 $2 = HEAP32[$0 + 56 >> 2] | 0;
 if (($0 + 40 | 0) == ($2 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] & 255]($2); else if ($2 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 255]($2);
 $12 = $0 + 16 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if ($13 | 0) {
  $15 = $0 + 20 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  if (($16 | 0) == ($13 | 0)) $30 = $13; else {
   $$08$i$i$i$i = $16;
   do {
    $20 = HEAP32[$$08$i$i$i$i + -4 >> 2] | 0;
    $$08$i$i$i$i = $$08$i$i$i$i + -8 | 0;
    if ($20 | 0) {
     $22 = $20 + 4 | 0;
     $23 = HEAP32[$22 >> 2] | 0;
     HEAP32[$22 >> 2] = $23 + -1;
     if (!$23) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] & 255]($20);
      __ZNSt3__219__shared_weak_count14__release_weakEv($20);
     }
    }
   } while (($$08$i$i$i$i | 0) != ($13 | 0));
   $30 = HEAP32[$12 >> 2] | 0;
  }
  HEAP32[$15 >> 2] = $13;
  __ZdlPv($30);
 }
 $31 = $0 + 4 | 0;
 if ((HEAP8[$31 + 11 >> 0] | 0) >= 0) {
  __ZdlPv($0);
  return;
 }
 __ZdlPv(HEAP32[$31 >> 2] | 0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $15 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $21 = 0;
  $22 = 0;
 } else {
  if ((HEAP8[$0 >> 0] | 0) == 45) {
   HEAP32[$2 >> 2] = 4;
   $21 = 0;
   $22 = 0;
   break;
  }
  $9 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $13 = getTempRet0() | 0;
  $15 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$15) HEAP32[(___errno_location() | 0) >> 2] = $9;
  if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if (($15 | 0) == 34) {
   $23 = -1;
   $24 = -1;
   label = 8;
  } else {
   $25 = $12;
   $26 = $13;
  } else {
   $23 = 0;
   $24 = 0;
   label = 8;
  }
  if ((label | 0) == 8) {
   HEAP32[$2 >> 2] = 4;
   $25 = $23;
   $26 = $24;
  }
  $21 = $26;
  $22 = $25;
 } while (0);
 setTempRet0($21 | 0);
 STACKTOP = sp;
 return $22 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp + 1 | 0;
 $3 = sp;
 HEAP8[$2 >> 0] = $1;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0;
  $$019 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $$018 = $5 & 255;
  $$019 = 10;
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $$019, 1, $$019, $$019, 0, 0);
  if ((HEAP8[$4 >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($6) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$4 >> 0] = $$018 + 1;
  $$pn = $0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = $$018 + 1;
  $$pn = $19;
 }
 $$0 = $$pn + $$018 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $2);
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + 1 | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $12 = 0, $17 = 0, $18 = 0, $23 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 $8 = $0 + 8 | 0;
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 127]($8) | 0;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 $17 = HEAP8[$12 + 8 + 3 >> 0] | 0;
 $18 = $17 << 24 >> 24 < 0;
 $23 = $18 ? HEAP32[$12 >> 2] | 0 : $12;
 $25 = $23 + (($18 ? HEAP32[$12 + 4 >> 2] | 0 : $17 & 255) << 2) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $26 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $23, $25) | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function __ZN3sgl12GenericInput27IsJoystickButtonPressedImplEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $11 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 20 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $5 = sp + 4 | 0;
 HEAP32[$4 >> 2] = $2;
 $6 = HEAP32[7749] | 0;
 if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] & 31]($6, $2) | 0)) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $11 = _glfwGetJoystickButtons($2 | 0, $5 | 0) | 0;
 if (($1 | 0) < 0 ? 1 : ($1 + -1 | 0) > (HEAP32[$5 >> 2] | 0)) {
  $16 = HEAP32[7738] | 0;
  HEAP32[$3 >> 2] = 33137;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 33137;
  HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  __ZN6spdlog6logger3logIJiEEEvNS_10source_locENS_5level10level_enumEPKcDpRKT_($16, $$byval_copy, 3, 22355, $4);
  $$0 = 0;
 } else $$0 = ((HEAP8[$11 + $1 >> 0] | 0) + -1 & 255) < 2;
 $$1 = $$0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$be = 0, $$021 = 0, $$021$be = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $4 = $0 + 24 | 0;
 $5 = $0 + 28 | 0;
 $$0 = $1;
 $$021 = 0;
 while (1) {
  if (($$021 | 0) >= ($2 | 0)) break;
  $7 = HEAP32[$4 >> 2] | 0;
  $8 = HEAP32[$5 >> 2] | 0;
  if ($7 >>> 0 < $8 >>> 0) {
   $22 = $8 - $7 >> 2;
   $23 = $2 - $$021 | 0;
   $$sroa$speculated = ($23 | 0) < ($22 | 0) ? $23 : $22;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($7, $$0, $$sroa$speculated) | 0;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + ($$sroa$speculated << 2);
   $$0$be = $$0 + ($$sroa$speculated << 2) | 0;
   $$021$be = $$sroa$speculated + $$021 | 0;
  } else {
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0;
   $14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$$0 >> 2] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$12 & 31]($0, $14) | 0) == ($3 | 0)) break;
   $$0$be = $$0 + 4 | 0;
   $$021$be = $$021 + 1 | 0;
  }
  $$0 = $$0$be;
  $$021 = $$021$be;
 }
 return $$021 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $12 = 0, $16 = 0, $17 = 0, $22 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 $8 = $0 + 8 | 0;
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 127]($8) | 0;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 $16 = HEAP8[$12 + 11 >> 0] | 0;
 $17 = $16 << 24 >> 24 < 0;
 $22 = $17 ? HEAP32[$12 >> 2] | 0 : $12;
 $24 = $22 + ($17 ? HEAP32[$12 + 4 >> 2] | 0 : $16 & 255) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $25 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $22, $24) | 0;
 STACKTOP = sp;
 return $25 | 0;
}

function __ZN6spdlog6loggerD2Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i$i = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $30 = 0, $31 = 0;
 HEAP32[$0 >> 2] = 9920;
 $2 = HEAP32[$0 + 56 >> 2] | 0;
 if (($0 + 40 | 0) == ($2 | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] & 255]($2); else if ($2 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 255]($2);
 $12 = $0 + 16 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if ($13 | 0) {
  $15 = $0 + 20 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  if (($16 | 0) == ($13 | 0)) $30 = $13; else {
   $$08$i$i$i = $16;
   do {
    $20 = HEAP32[$$08$i$i$i + -4 >> 2] | 0;
    $$08$i$i$i = $$08$i$i$i + -8 | 0;
    if ($20 | 0) {
     $22 = $20 + 4 | 0;
     $23 = HEAP32[$22 >> 2] | 0;
     HEAP32[$22 >> 2] = $23 + -1;
     if (!$23) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] & 255]($20);
      __ZNSt3__219__shared_weak_count14__release_weakEv($20);
     }
    }
   } while (($$08$i$i$i | 0) != ($13 | 0));
   $30 = HEAP32[$12 >> 2] | 0;
  }
  HEAP32[$15 >> 2] = $13;
  __ZdlPv($30);
 }
 $31 = $0 + 4 | 0;
 if ((HEAP8[$31 + 11 >> 0] | 0) >= 0) return;
 __ZdlPv(HEAP32[$31 >> 2] | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$be = 0, $$021 = 0, $$021$be = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $4 = $0 + 24 | 0;
 $5 = $0 + 28 | 0;
 $$0 = $1;
 $$021 = 0;
 while (1) {
  if (($$021 | 0) >= ($2 | 0)) break;
  $7 = HEAP32[$4 >> 2] | 0;
  $8 = HEAP32[$5 >> 2] | 0;
  if ($7 >>> 0 < $8 >>> 0) {
   $21 = $8 - $7 | 0;
   $22 = $2 - $$021 | 0;
   $$sroa$speculated = ($22 | 0) < ($21 | 0) ? $22 : $21;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($7, $$0, $$sroa$speculated) | 0;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $$sroa$speculated;
   $$0$be = $$0 + $$sroa$speculated | 0;
   $$021$be = $$sroa$speculated + $$021 | 0;
  } else {
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0;
   $14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$$0 >> 0] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$12 & 31]($0, $14) | 0) == ($3 | 0)) break;
   $$0$be = $$0 + 1 | 0;
   $$021$be = $$021 + 1 | 0;
  }
  $$0 = $$0$be;
  $$021 = $$021$be;
 }
 return $$021 | 0;
}

function __ZN3sgl14Renderer2D_ES213SubmitTextureEPKNS_9Texture2DE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $1;
 $4 = $0 + 156 | 0;
 $5 = $0 + 160 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($6 - (HEAP32[$4 >> 2] | 0) | 0) == 64) {
  $11 = HEAP32[7738] | 0;
  HEAP32[$2 >> 2] = 33137;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 33137;
  HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  __ZN6spdlog6logger3logENS_10source_locENS_5level10level_enumEPKc($11, $$byval_copy, 3, 22274);
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$0 + 164 >> 2] | 0) == ($6 | 0)) {
  __ZNSt3__26vectorIPKN3sgl9Texture2DENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($4, $3);
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$6 >> 2] = $1;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
  STACKTOP = sp;
  return;
 }
}

function __ZN3sgl9Texture2DC2EiiNS_17TextureParametersE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $10 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp;
 $4 = $0 + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$4 + 11 >> 0] = 4;
 HEAP8[$4 >> 0] = 78;
 HEAP8[$4 + 1 >> 0] = 85;
 HEAP8[$4 + 2 >> 0] = 76;
 HEAP8[$4 + 3 >> 0] = 76;
 HEAP8[$0 + 8 >> 0] = 0;
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $2;
 HEAP32[$0 + 24 >> 2] = 0;
 $10 = $0 + 28 | 0;
 HEAP32[$10 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$10 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$10 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 _glGenTextures(1, $0 | 0);
 _glBindTexture(3553, HEAP32[$0 >> 2] | 0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 __ZN3sgl9Texture2D9SetParamsENS_17TextureParametersEPKv($0, $$byval_copy, 0);
 _glBindTexture(3553, 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$sroa$speculated = 0, $15 = 0, $16 = 0, $21 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $9 = 0;
 if ((1073741807 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 $9 = $0 + 8 | 0;
 if ((HEAP8[$9 + 3 >> 0] | 0) < 0) $27 = HEAP32[$0 >> 2] | 0; else $27 = $0;
 if ($1 >>> 0 < 536870887) {
  $15 = $2 + $1 | 0;
  $16 = $1 << 1;
  $$sroa$speculated = $15 >>> 0 < $16 >>> 0 ? $16 : $15;
  $21 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($21 >>> 0 > 1073741823) _abort(); else $24 = $21;
 } else $24 = 1073741807;
 $25 = __Znwm($24 << 2) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($25, $27, $4) | 0;
 $29 = $3 - $5 - $4 | 0;
 if ($29 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($25 + ($4 << 2) + ($6 << 2) | 0, $27 + ($4 << 2) + ($5 << 2) | 0, $29) | 0;
 if (($1 | 0) != 1) __ZdlPv($27);
 HEAP32[$0 >> 2] = $25;
 HEAP32[$9 >> 2] = $24 | -2147483648;
 return;
}

function __ZN3sgl14Renderer2D_ES213DrawRectangleERKN3glm3vecILi2EfLNS1_9qualifierE0EEES6_RKNS2_ILi4EfLS3_0EEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $15 = 0.0, $16 = 0.0, $21 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $4 = sp + 36 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 12 | 0;
 $7 = sp;
 $8 = HEAP32[$2 >> 2] | 0;
 HEAP32[$4 >> 2] = $8;
 $11 = HEAP32[$2 + 4 >> 2] | 0;
 HEAP32[$4 + 4 >> 2] = $11;
 HEAPF32[$4 + 8 >> 2] = 1.0;
 $15 = +HEAPF32[$1 >> 2] + (HEAP32[tempDoublePtr >> 2] = $8, +HEAPF32[tempDoublePtr >> 2]);
 $16 = (HEAP32[tempDoublePtr >> 2] = $11, +HEAPF32[tempDoublePtr >> 2]);
 HEAPF32[$5 >> 2] = $15;
 HEAP32[$5 + 4 >> 2] = $11;
 HEAPF32[$5 + 8 >> 2] = 1.0;
 $21 = +HEAPF32[$1 + 4 >> 2] + $16;
 HEAPF32[$6 >> 2] = $15;
 HEAPF32[$6 + 4 >> 2] = $21;
 HEAPF32[$6 + 8 >> 2] = 1.0;
 HEAP32[$7 >> 2] = $8;
 HEAPF32[$7 + 4 >> 2] = $21;
 HEAPF32[$7 + 8 >> 2] = 1.0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 15]($0, $4, $5, $6, $7, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$022 = 0, $$023$off0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $11 = 0, $14 = 0, $25 = 0, $9 = 0;
 if (!($2 & 2048)) $$0 = $0; else {
  HEAP8[$0 >> 0] = 43;
  $$0 = $0 + 1 | 0;
 }
 if (!($2 & 1024)) $$1 = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$1 = $$0 + 1 | 0;
 }
 $9 = $2 & 260;
 $10 = $2 & 16384;
 $11 = ($9 | 0) == 260;
 if ($11) {
  $$023$off0 = 0;
  $$2 = $$1;
 } else {
  HEAP8[$$1 >> 0] = 46;
  HEAP8[$$1 + 1 >> 0] = 42;
  $$023$off0 = 1;
  $$2 = $$1 + 2 | 0;
 }
 $$022 = $1;
 $$3 = $$2;
 while (1) {
  $14 = HEAP8[$$022 >> 0] | 0;
  if (!($14 << 24 >> 24)) break;
  HEAP8[$$3 >> 0] = $14;
  $$022 = $$022 + 1 | 0;
  $$3 = $$3 + 1 | 0;
 }
 L14 : do switch ($9 & 511) {
 case 4:
  {
   $$sink = $10 >>> 9 & 255 ^ 102;
   break;
  }
 case 256:
  {
   $$sink = $10 >>> 9 & 255 ^ 101;
   break;
  }
 default:
  {
   $25 = $10 >>> 9 & 255;
   if ($11) {
    $$sink = $25 ^ 97;
    break L14;
   } else {
    $$sink = $25 ^ 103;
    break L14;
   }
  }
 } while (0);
 HEAP8[$$3 >> 0] = $$sink;
 return $$023$off0 | 0;
}

function __ZN6spdlog17pattern_formatterC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_17pattern_time_typeES7_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $7 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 9992;
 $4 = $0 + 4 | 0;
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $5 = $0 + 16 | 0;
 HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = $2;
 $7 = $0 + 80 | 0;
 dest = $0 + 32 | 0;
 stop = dest + 44 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 + 12 >> 2] = 0;
 HEAP32[$7 + 16 >> 2] = 0;
 __ZN6spdlog17pattern_formatter16compile_pattern_ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $4);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $20 = 0, $24 = 0, $25 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($1 | 0) {
  $5 = $0 + 11 | 0;
  $6 = HEAP8[$5 >> 0] | 0;
  if ($6 << 24 >> 24 < 0) {
   $15 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
   $16 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $15 = 10;
   $16 = $6 & 255;
  }
  if (($15 - $16 | 0) >>> 0 < $1 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $15, $16 + $1 - $15 | 0, $16, $16, 0, 0);
   $20 = HEAP8[$5 >> 0] | 0;
  } else $20 = $6;
  if ($20 << 24 >> 24 < 0) $24 = HEAP32[$0 >> 2] | 0; else $24 = $0;
  __ZNSt3__211char_traitsIcE6assignEPcmc($24 + $16 | 0, $1, $2) | 0;
  $25 = $16 + $1 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $25; else HEAP8[$5 >> 0] = $25;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($24 + $25 | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__26vectorINS_10shared_ptrIN6spdlog5sinks4sinkEEENS_9allocatorIS5_EEEC2IPKS5_EET_NS_9enable_ifIXaasr21__is_forward_iteratorISC_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueESC_E4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07$i$i = 0, $11 = 0, $15 = 0, $18 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 0;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $0 + 8 | 0;
 HEAP32[$4 >> 2] = 0;
 $7 = $2 - $1 | 0;
 $8 = $7 >> 3;
 if (!$7) return;
 if ($8 >>> 0 > 536870911) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $11 = __Znwm($7) | 0;
 HEAP32[$3 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 HEAP32[$4 >> 2] = $11 + ($8 << 3);
 if (($1 | 0) == ($2 | 0)) return;
 $$07$i$i = $1;
 $15 = $11;
 do {
  HEAP32[$15 >> 2] = HEAP32[$$07$i$i >> 2];
  $18 = HEAP32[$$07$i$i + 4 >> 2] | 0;
  HEAP32[$15 + 4 >> 2] = $18;
  if ($18 | 0) {
   $20 = $18 + 4 | 0;
   HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
  }
  $$07$i$i = $$07$i$i + 8 | 0;
  $15 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAP32[$3 >> 2] = $15;
 } while (($$07$i$i | 0) != ($2 | 0));
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 8 | 0;
 $5 = $4 + 3 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $14 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0;
  $15 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $14 = 1;
  $15 = $6 & 255;
 }
 if (($14 - $15 | 0) >>> 0 < $2 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0, $14, $15 + $2 - $14 | 0, $15, $15, 0, $2, $1); else if ($2 | 0) {
  if ($7) $20 = HEAP32[$0 >> 2] | 0; else $20 = $0;
  __ZNSt3__211char_traitsIwE4copyEPwPKwm($20 + ($15 << 2) | 0, $1, $2) | 0;
  $21 = $15 + $2 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $21; else HEAP8[$5 >> 0] = $21;
  HEAP32[$3 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($20 + ($21 << 2) | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $25 = 0, $29 = 0, $7 = 0, $phitmp = 0;
 do if (!$0) {
  if (!(HEAP32[2991] | 0)) $29 = 0; else $29 = _fflush(HEAP32[2991] | 0) | 0;
  $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (!$$02325) $$024$lcssa = $29; else {
   $$02327 = $$02325;
   $$02426 = $29;
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) $25 = ___lockfile($$02327) | 0; else $25 = 0;
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) $$1 = ___fflush_unlocked($$02327) | 0 | $$02426; else $$1 = $$02426;
    if ($25 | 0) ___unlockfile($$02327);
    $$02327 = HEAP32[$$02327 + 56 >> 2] | 0;
    if (!$$02327) {
     $$024$lcssa = $$1;
     break;
    } else $$02426 = $$1;
   }
  }
  ___ofl_unlock();
  $$0 = $$024$lcssa;
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($0) | 0;
   break;
  }
  $phitmp = (___lockfile($0) | 0) == 0;
  $7 = ___fflush_unlocked($0) | 0;
  if ($phitmp) $$0 = $7; else {
   ___unlockfile($0);
   $$0 = $7;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $26 = 0;
  $27 = 0;
 } else {
  $7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $10 = _strtoll_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $11 = getTempRet0() | 0;
  $13 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$13) HEAP32[(___errno_location() | 0) >> 2] = $7;
  if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if (($13 | 0) == 34) {
   HEAP32[$2 >> 2] = 4;
   $23 = ($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 0;
   $28 = $23 ? -1 : 0;
   $29 = $23 ? 2147483647 : -2147483648;
  } else {
   $28 = $10;
   $29 = $11;
  } else {
   HEAP32[$2 >> 2] = 4;
   $28 = 0;
   $29 = 0;
  }
  $26 = $29;
  $27 = $28;
 }
 setTempRet0($26 | 0);
 STACKTOP = sp;
 return $27 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$0 >> 0] | 0) == 45) {
   HEAP32[$2 >> 2] = 4;
   $$1 = 0;
   break;
  }
  $9 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $13 = getTempRet0() | 0;
  $15 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$15) HEAP32[(___errno_location() | 0) >> 2] = $9;
  do if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 65535 | ($15 | 0) == 34) {
   HEAP32[$2 >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $12 & 65535;
   break;
  } else {
   HEAP32[$2 >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN3sgl9Texture2D9SetParamsENS_17TextureParametersEPKv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i410 = 0, $$0$i6 = 0, $5 = 0;
 $5 = (HEAP32[$1 + 8 >> 2] | 0) == 1;
 _glTexParameteri(3553, 10241, ($5 ? 9987 : 9728) | 0);
 _glTexParameteri(3553, 10240, ($5 ? 9729 : 9728) | 0);
 switch (HEAP32[$1 >> 2] | 0) {
 case 2:
  {
   _glTexParameteri(3553, 10242, 33071);
   $$0$i6 = 33071;
   break;
  }
 case 3:
  {
   _glTexParameteri(3553, 10242, 10497);
   $$0$i6 = 10497;
   break;
  }
 case 4:
  {
   _glTexParameteri(3553, 10242, 33648);
   $$0$i6 = 33648;
   break;
  }
 default:
  {
   _glTexParameteri(3553, 10242, 0);
   $$0$i6 = 0;
  }
 }
 _glTexParameteri(3553, 10243, $$0$i6 | 0);
 if (!$2) return;
 switch (HEAP32[$1 + 4 >> 2] | 0) {
 case 0:
  {
   $$0$i410 = 6408;
   break;
  }
 case 1:
  {
   $$0$i410 = 6407;
   break;
  }
 case 3:
  {
   $$0$i410 = 6409;
   break;
  }
 case 4:
  {
   $$0$i410 = 6410;
   break;
  }
 default:
  $$0$i410 = 0;
 }
 _glTexImage2D(3553, 0, $$0$i410 | 0, HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 20 >> 2] | 0, 0, $$0$i410 | 0, 5121, $2 | 0);
 return;
}

function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$0 >> 0] | 0) == 45) {
   HEAP32[$2 >> 2] = 4;
   $$1 = 0;
   break;
  }
  $9 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $13 = getTempRet0() | 0;
  $15 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$15) HEAP32[(___errno_location() | 0) >> 2] = $9;
  do if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 4294967295 | ($15 | 0) == 34) {
   HEAP32[$2 >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $12;
   break;
  } else {
   HEAP32[$2 >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$0 >> 0] | 0) == 45) {
   HEAP32[$2 >> 2] = 4;
   $$1 = 0;
   break;
  }
  $9 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $13 = getTempRet0() | 0;
  $15 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$15) HEAP32[(___errno_location() | 0) >> 2] = $9;
  do if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 4294967295 | ($15 | 0) == 34) {
   HEAP32[$2 >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $12;
   break;
  } else {
   HEAP32[$2 >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 8 | 0;
 $5 = $4 + 3 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) $10 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0; else $10 = 1;
 do if ($10 >>> 0 < $2 >>> 0) {
  if ($7) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $6 & 255;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0, $10, $2 - $10 | 0, $23, 0, $23, $2, $1);
 } else {
  if ($7) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
  __ZNSt3__211char_traitsIwE4moveEPwPKwm($13, $1, $2) | 0;
  HEAP32[$3 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($13 + ($2 << 2) | 0, $3);
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $2;
   break;
  } else {
   HEAP8[$5 >> 0] = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$1$ph = 0, $14 = 0, $17 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $7 = $2 - $1 >> 2;
 if ($7 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 do if ($7 >>> 0 < 2) {
  HEAP8[$0 + 8 + 3 >> 0] = $7;
  $$1$ph = $0;
 } else {
  $14 = $7 + 4 & -4;
  if ($14 >>> 0 > 1073741823) _abort(); else {
   $17 = __Znwm($14 << 2) | 0;
   HEAP32[$0 >> 2] = $17;
   HEAP32[$0 + 8 >> 2] = $14 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $7;
   $$1$ph = $17;
   break;
  }
 } while (0);
 $$0 = $1;
 $$1 = $$1$ph;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($$1, $$0);
  $$0 = $$0 + 4 | 0;
  $$1 = $$1 + 4 | 0;
 }
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$1, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$1$ph = 0, $14 = 0, $17 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $7 = $2 - $1 >> 2;
 if ($7 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 do if ($7 >>> 0 < 2) {
  HEAP8[$0 + 8 + 3 >> 0] = $7;
  $$1$ph = $0;
 } else {
  $14 = $7 + 4 & -4;
  if ($14 >>> 0 > 1073741823) _abort(); else {
   $17 = __Znwm($14 << 2) | 0;
   HEAP32[$0 >> 2] = $17;
   HEAP32[$0 + 8 >> 2] = $14 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $7;
   $$1$ph = $17;
   break;
  }
 } while (0);
 $$0 = $1;
 $$1 = $$1$ph;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($$1, $$0);
  $$0 = $$0 + 4 | 0;
  $$1 = $$1 + 4 | 0;
 }
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$1, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $14 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $15 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $14 = 10;
  $15 = $5 & 255;
 }
 if (($14 - $15 | 0) >>> 0 < $2 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $14, $15 + $2 - $14 | 0, $15, $15, 0, $2, $1); else if ($2 | 0) {
  if ($6) $20 = HEAP32[$0 >> 2] | 0; else $20 = $0;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($20 + $15 | 0, $1, $2) | 0;
  $21 = $15 + $2 | 0;
  if ((HEAP8[$4 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $21; else HEAP8[$4 >> 0] = $21;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($20 + $21 | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$in = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = $0 + 44 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = HEAP32[$0 + 24 >> 2] | 0;
 if ($3 >>> 0 < $5 >>> 0) {
  HEAP32[$2 >> 2] = $5;
  $$in = $5;
 } else $$in = $3;
 $7 = $$in;
 $10 = $0 + 12 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if ((HEAP32[$0 + 8 >> 2] | 0) >>> 0 >= $11 >>> 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 if (($1 | 0) == -1) {
  HEAP32[$10 >> 2] = $11 + -1;
  HEAP32[$0 + 16 >> 2] = $7;
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$0 + 48 >> 2] & 16)) {
  $20 = $1 & 255;
  $21 = $11 + -1 | 0;
  if ((HEAP8[$21 >> 0] | 0) == $20 << 24 >> 24) {
   $$pre$phi7Z2D = $20;
   $$pre$phiZ2D = $21;
  } else {
   $$0 = -1;
   return $$0 | 0;
  }
 } else {
  $$pre$phi7Z2D = $1 & 255;
  $$pre$phiZ2D = $11 + -1 | 0;
 }
 HEAP32[$10 >> 2] = $$pre$phiZ2D;
 HEAP32[$0 + 16 >> 2] = $7;
 HEAP8[$$pre$phiZ2D >> 0] = $$pre$phi7Z2D;
 $$0 = $1;
 return $$0 | 0;
}

function __ZN6spdlog7details19aggregate_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010$i$i$i = 0, $$089$i$i$i = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0;
 $4 = $0 + 12 | 0;
 $6 = HEAP8[$4 + 11 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 $9 = $7 ? HEAP32[$4 >> 2] | 0 : $4;
 $13 = $7 ? HEAP32[$0 + 16 >> 2] | 0 : $6 & 255;
 if (!$9) return;
 $15 = $9 + $13 | 0;
 $16 = $3 + 8 | 0;
 if (($13 | 0) <= -1) ___assert_fail(18933, 18966, 209, 19012);
 $19 = (HEAP32[$16 >> 2] | 0) + $13 | 0;
 if ((HEAP32[$3 + 12 >> 2] | 0) >>> 0 < $19 >>> 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3, $19);
 if ($13 | 0) {
  $$010$i$i$i = $9;
  $$089$i$i$i = (HEAP32[$3 + 4 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0;
  while (1) {
   HEAP8[$$089$i$i$i >> 0] = HEAP8[$$010$i$i$i >> 0] | 0;
   $$010$i$i$i = $$010$i$i$i + 1 | 0;
   if (($$010$i$i$i | 0) == ($15 | 0)) break; else $$089$i$i$i = $$089$i$i$i + 1 | 0;
  }
 }
 HEAP32[$16 >> 2] = $19;
 return;
}

function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do if (!$0) $$0 = 1; else {
  if ($1 >>> 0 < 128) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_440() | 0) + 188 >> 2] >> 2] | 0)) if (($1 & -128 | 0) == 57216) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
  if ($1 >>> 0 < 2048) {
   HEAP8[$0 >> 0] = $1 >>> 6 | 192;
   HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
   HEAP8[$0 >> 0] = $1 >>> 12 | 224;
   HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($1 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$0 >> 0] = $1 >>> 18 | 240;
   HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $10 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $10 = 10;
 do if ($10 >>> 0 < $2 >>> 0) {
  if ($6) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $5 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $10, $2 - $10 | 0, $23, 0, $23, $2, $1);
 } else {
  if ($6) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($13, $1, $2) | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($13 + $2 | 0, $3);
  if ((HEAP8[$4 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $2;
   break;
  } else {
   HEAP8[$4 >> 0] = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $12 = 0, $13 = 0, $18 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = $1;
 $4 = sp;
 $6 = $2 - $3 | 0;
 if ($6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($6 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $6;
  $$021 = $0;
 } else {
  $12 = $6 + 16 & -16;
  $13 = __Znwm($12) | 0;
  HEAP32[$0 >> 2] = $13;
  HEAP32[$0 + 8 >> 2] = $12 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $6;
  $$021 = $13;
 }
 $18 = $2 - $3 | 0;
 $$0 = $1;
 $$1 = $$021;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1, $$0);
  $$0 = $$0 + 1 | 0;
  $$1 = $$1 + 1 | 0;
 }
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$021 + $18 | 0, $4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $12 = 0, $13 = 0, $18 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = $1;
 $4 = sp;
 $6 = $2 - $3 | 0;
 if ($6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($6 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $6;
  $$021 = $0;
 } else {
  $12 = $6 + 16 & -16;
  $13 = __Znwm($12) | 0;
  HEAP32[$0 >> 2] = $13;
  HEAP32[$0 + 8 >> 2] = $12 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $6;
  $$021 = $13;
 }
 $18 = $2 - $3 | 0;
 $$0 = $1;
 $$1 = $$021;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1, $$0);
  $$0 = $$0 + 1 | 0;
  $$1 = $$1 + 1 | 0;
 }
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$021 + $18 | 0, $4);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog7details11make_uniqueINS_17pattern_formatterEJRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKNS_17pattern_time_typeESB_EEENS3_10unique_ptrIT_NS3_14default_deleteISG_EEEEDpOT0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = __Znwm(104) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4, $1);
 $7 = HEAP32[$2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($5, $3);
 __ZN6spdlog17pattern_formatterC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_17pattern_time_typeES7_($6, $4, $7, $5);
 HEAP32[$0 >> 2] = $6;
 if ((HEAP8[$5 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$5 >> 2] | 0);
 if ((HEAP8[$4 + 11 >> 0] | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$4 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $3 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) $$2 = 1; else if (!$1) $$2 = 0; else {
  $6 = ___dynamic_cast($1, 9512, 9496, 0) | 0;
  if (!$6) $$2 = 0; else {
   dest = $3 + 4 | 0;
   stop = dest + 52 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 8 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = -1;
   HEAP32[$3 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 63]($6, $3, HEAP32[$2 >> 2] | 0, 1);
   if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
    HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$2 = $$0;
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$sroa$speculated = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0;
 if ((-17 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $23 = HEAP32[$0 >> 2] | 0; else $23 = $0;
 if ($1 >>> 0 < 2147483623) {
  $14 = $2 + $1 | 0;
  $15 = $1 << 1;
  $$sroa$speculated = $14 >>> 0 < $15 >>> 0 ? $15 : $14;
  $20 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $20 = -17;
 $21 = __Znwm($20) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($21, $23, $4) | 0;
 $25 = $3 - $5 - $4 | 0;
 if ($25 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($21 + $4 + $6 | 0, $23 + $4 + $5 | 0, $25) | 0;
 if (($1 | 0) != 10) __ZdlPv($23);
 HEAP32[$0 >> 2] = $21;
 HEAP32[$0 + 8 >> 2] = $20 | -2147483648;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$pn = 0, $12 = 0, $13 = 0, $15 = 0, $22 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $3 = $0 + 12 | 0;
 $4 = $0 + 16 | 0;
 $$0 = $1;
 $$023 = 0;
 while (1) {
  if (($$023 | 0) >= ($2 | 0)) break;
  $6 = HEAP32[$3 >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  if ($6 >>> 0 < $7 >>> 0) {
   $12 = $7 - $6 >> 2;
   $13 = $2 - $$023 | 0;
   $15 = ($13 | 0) < ($12 | 0) ? $13 : $12;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($$0, $6, $15) | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + ($15 << 2);
   $$1 = $$0 + ($15 << 2) | 0;
   $$pn = $15;
  } else {
   $22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 127]($0) | 0;
   if (($22 | 0) == -1) break;
   HEAP32[$$0 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($22) | 0;
   $$1 = $$0 + 4 | 0;
   $$pn = 1;
  }
  $$0 = $$1;
  $$023 = $$pn + $$023 | 0;
 }
 return $$023 | 0;
}

function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $33 = 0, $7 = 0, $8 = 0, label = 0;
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($1) | 0)) label = 3; else {
  $20 = $0 & 255;
  $21 = $0 & 255;
  if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) label = 10; else {
   $26 = $1 + 20 | 0;
   $27 = HEAP32[$26 >> 2] | 0;
   if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$26 >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $20;
    $33 = $21;
   } else label = 10;
  }
  if ((label | 0) == 10) $33 = ___overflow($1, $0) | 0;
  ___unlockfile($1);
  $$0 = $33;
 }
 do if ((label | 0) == 3) {
  $7 = $0 & 255;
  $8 = $0 & 255;
  if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
   $13 = $1 + 20 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$13 >> 2] = $14 + 1;
    HEAP8[$14 >> 0] = $7;
    $$0 = $8;
    break;
   }
  }
  $$0 = ___overflow($1, $0) | 0;
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 2) << 2) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $4$1 = getTempRet0() | 0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, getTempRet0() | 0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $10$1 = getTempRet0() | 0;
 STACKTOP = __stackBase__;
 return (setTempRet0($10$1 | 0), $10$0) | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$pn = 0, $11 = 0, $12 = 0, $14 = 0, $21 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $3 = $0 + 12 | 0;
 $4 = $0 + 16 | 0;
 $$0 = $1;
 $$023 = 0;
 while (1) {
  if (($$023 | 0) >= ($2 | 0)) break;
  $6 = HEAP32[$3 >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  if ($6 >>> 0 < $7 >>> 0) {
   $11 = $7 - $6 | 0;
   $12 = $2 - $$023 | 0;
   $14 = ($12 | 0) < ($11 | 0) ? $12 : $11;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $6, $14) | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $14;
   $$1 = $$0 + $14 | 0;
   $$pn = $14;
  } else {
   $21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 127]($0) | 0;
   if (($21 | 0) == -1) break;
   HEAP8[$$0 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($21) | 0;
   $$1 = $$0 + 1 | 0;
   $$pn = 1;
  }
  $$0 = $$1;
  $$023 = $$pn + $$023 | 0;
 }
 return $$023 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1;
 do if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
  HEAP8[$1 + 52 >> 0] = 1;
  $10 = $1 + 16 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if (!$11) {
   HEAP32[$10 >> 2] = $2;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 36 >> 2] = 1;
   if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  if (($11 | 0) != ($2 | 0)) {
   $30 = $1 + 36 | 0;
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  $21 = $1 + 24 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  if (($22 | 0) == 2) {
   HEAP32[$21 >> 2] = $4;
   $27 = $4;
  } else $27 = $22;
  if (($27 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) HEAP8[$1 + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $13 = 0, $20 = 0, $21 = 0, $5 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $5 = sp;
 HEAP32[$4 >> 2] = $2;
 $8 = ___uselocale(HEAP32[$0 + 8 >> 2] | 0) | 0;
 $9 = _wcrtomb($5, 0, $1) | 0;
 if ($8 | 0) ___uselocale($8) | 0;
 L4 : do if (($9 + 1 | 0) >>> 0 < 2) $$019 = 2; else {
  $13 = $9 + -1 | 0;
  if ($13 >>> 0 > ($3 - (HEAP32[$4 >> 2] | 0) | 0) >>> 0) $$019 = 1; else {
   $$0 = $5;
   $$018 = $13;
   while (1) {
    if (!$$018) {
     $$019 = 0;
     break L4;
    }
    $20 = HEAP8[$$0 >> 0] | 0;
    $21 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $21 + 1;
    HEAP8[$21 >> 0] = $20;
    $$0 = $$0 + 1 | 0;
    $$018 = $$018 + -1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$019 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    HEAP32[$13 >> 2] = $2;
    $19 = $1 + 40 | 0;
    HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
    if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) HEAP8[$1 + 54 >> 0] = 1;
    HEAP32[$1 + 44 >> 2] = 4;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__211__stdoutbufIwE4syncEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $1 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = $0 + 36 | 0;
 $4 = $0 + 40 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1;
 $7 = $0 + 32 | 0;
 L1 : while (1) {
  $8 = HEAP32[$3 >> 2] | 0;
  $13 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 31]($8, HEAP32[$4 >> 2] | 0, $1, $5, $2) | 0;
  $15 = (HEAP32[$2 >> 2] | 0) - $6 | 0;
  if ((_fwrite($1, 1, $15, HEAP32[$7 >> 2] | 0) | 0) != ($15 | 0)) {
   $$2 = -1;
   break;
  }
  switch ($13 | 0) {
  case 1:
   break;
  case 2:
   {
    $$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $$2 = ((_fflush(HEAP32[$7 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__211__stdoutbufIcE4syncEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $1 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = $0 + 36 | 0;
 $4 = $0 + 40 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1;
 $7 = $0 + 32 | 0;
 L1 : while (1) {
  $8 = HEAP32[$3 >> 2] | 0;
  $13 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 31]($8, HEAP32[$4 >> 2] | 0, $1, $5, $2) | 0;
  $15 = (HEAP32[$2 >> 2] | 0) - $6 | 0;
  if ((_fwrite($1, 1, $15, HEAP32[$7 >> 2] | 0) | 0) != ($15 | 0)) {
   $$2 = -1;
   break;
  }
  switch ($13 | 0) {
  case 1:
   break;
  case 2:
   {
    $$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $$2 = ((_fflush(HEAP32[$7 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$2 | 0;
}

function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $1 = 0, $10 = 0, $19 = 0, $22 = 0, $6 = 0, label = 0;
 $1 = $0;
 L1 : do if (!($1 & 3)) {
  $$015$lcssa = $0;
  label = 5;
 } else {
  $$01518 = $0;
  $22 = $1;
  while (1) {
   if (!(HEAP8[$$01518 >> 0] | 0)) {
    $$pn = $22;
    break L1;
   }
   $6 = $$01518 + 1 | 0;
   $22 = $6;
   if (!($22 & 3)) {
    $$015$lcssa = $6;
    label = 5;
    break;
   } else $$01518 = $6;
  }
 } while (0);
 if ((label | 0) == 5) {
  $$0 = $$015$lcssa;
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0;
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) $$0 = $$0 + 4 | 0; else break;
  }
  if (!(($10 & 255) << 24 >> 24)) $$1$lcssa = $$0; else {
   $$pn29 = $$0;
   while (1) {
    $19 = $$pn29 + 1 | 0;
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19;
     break;
    } else $$pn29 = $19;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $1 | 0;
}

function __ZN6spdlog7details2os17is_color_terminalEv() {
 var $$0$i = 0, $$02 = 0, $0 = 0;
 $0 = _getenv(20752) | 0;
 if (!$0) {
  $$02 = 0;
  return $$02 | 0;
 }
 if (!(HEAP8[30240] | 0)) if (___cxa_guard_acquire(30240) | 0) {
  if (!(_strstr($0, 20757) | 0)) if (!(_strstr($0, 20762) | 0)) if (!(_strstr($0, 20768) | 0)) if (!(_strstr($0, 20776) | 0)) if (!(_strstr($0, 20783) | 0)) if (!(_strstr($0, 20789) | 0)) if (!(_strstr($0, 20797) | 0)) if (!(_strstr($0, 20803) | 0)) if (!(_strstr($0, 20809) | 0)) if (!(_strstr($0, 20814) | 0)) if (!(_strstr($0, 20820) | 0)) if (!(_strstr($0, 20825) | 0)) if (!(_strstr($0, 20832) | 0)) $$0$i = (_strstr($0, 20838) | 0) != 0 & 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1; else $$0$i = 1;
  HEAP8[33128] = $$0$i;
 }
 $$02 = (HEAP8[33128] | 0) != 0;
 return $$02 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $17 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] & 127]($7) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $17 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $11 + 288 | 0, $5, $4, 0) | 0) - $11 | 0;
 if (($17 | 0) < 288) HEAP32[$1 >> 2] = (($17 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $17 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] & 127]($7) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $17 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $11 + 288 | 0, $5, $4, 0) | 0) - $11 | 0;
 if (($17 | 0) < 288) HEAP32[$1 >> 2] = (($17 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $16 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $6 = sp;
 $7 = sp + 116 | 0;
 $8 = sp + 104 | 0;
 $9 = sp + 112 | 0;
 HEAP32[$7 >> 2] = $6 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0, $6, $7, $3, $4, $5);
 $11 = $8;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$11 + 4 >> 2] = 0;
 HEAP32[$9 >> 2] = $6;
 $16 = __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($1, HEAP32[$2 >> 2] | 0) | 0;
 $18 = ___uselocale(HEAP32[$0 >> 2] | 0) | 0;
 $19 = _mbsrtowcs($1, $9, $16, $8) | 0;
 if ($18 | 0) ___uselocale($18) | 0;
 if (($19 | 0) == -1) __ZNSt3__221__throw_runtime_errorEPKc(0); else {
  HEAP32[$2 >> 2] = $1 + ($19 << 2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EEclESB_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $2 = sp + 144 | 0;
 $3 = sp + 100 | 0;
 $4 = sp;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = _time(0) | 0;
 HEAP32[$2 >> 2] = $7;
 $8 = $6 + 64 | 0;
 if (($7 - (HEAP32[$8 >> 2] | 0) | 0) < 60) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 _localtime_r($2 | 0, $3 | 0) | 0;
 _strftime($4 | 0, 100, 18501, $3 | 0) | 0;
 __ZN3fmt2v55printIA34_cJA100_cNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_EEENS4_9enable_ifIXsr8internal9is_stringIT_EE5valueEvE4typeEP8_IO_FILERKSC_DpRKT0_(HEAP32[2895] | 0, 18519, $4, $6 + 4 | 0, $1);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $9 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $9 = HEAP32[$0 + 12 >> 2] | 0;
  $10 = $0 + 16 + ($9 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3);
  if (($9 | 0) > 1) {
   $13 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3);
    if (HEAP8[$13 >> 0] | 0) break L1;
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $10 >>> 0);
  }
 } while (0);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $16 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $10 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $16 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $10, $10 + 168 | 0, $5, $4, 0) | 0) - $10 | 0;
 if (($16 | 0) < 168) HEAP32[$1 >> 2] = (($16 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $16 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $10 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $16 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $10, $10 + 168 | 0, $5, $4, 0) | 0) - $10 | 0;
 if (($16 | 0) < 168) HEAP32[$1 >> 2] = (($16 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$018$lcssa = 0, $$01820 = 0, $$021 = 0, $$lcssa = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $40 = 0, $43 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0);
 $32 = $0 + 3 | 0;
 $33 = HEAP8[$32 >> 0] | 0;
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255;
 $36 = $33 << 24 >> 24 == 0;
 if (($35 | 0) == ($18 | 0) | $36) {
  $$018$lcssa = $32;
  $$lcssa = $36;
 } else {
  $$01820 = $32;
  $$021 = $35;
  while (1) {
   $39 = $$01820 + 1 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   $$021 = $$021 << 8 | $40 & 255;
   $43 = $40 << 24 >> 24 == 0;
   if (($$021 | 0) == ($18 | 0) | $43) {
    $$018$lcssa = $39;
    $$lcssa = $43;
    break;
   } else $$01820 = $39;
  }
 }
 return ($$lcssa ? 0 : $$018$lcssa + -3 | 0) | 0;
}

function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = $1 & 255;
 HEAP8[$2 >> 0] = $3;
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$5) if (!(___towrite($0) | 0)) {
  $12 = HEAP32[$4 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $12 = $5;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $9 = $0 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) {
   $13 = $1 & 255;
   if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $3;
    $$0 = $13;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, $2, 1) | 0) == 1) $$0 = HEAPU8[$2 >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0.0;
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $9 = +_strtold_l($0, $3, __ZNSt3__26__clocEv() | 0);
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$11) HEAP32[(___errno_location() | 0) >> 2] = $6;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) if (($11 | 0) == 34) {
   $$0$ph = $9;
   label = 6;
  } else $$0 = $9; else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0.0;
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $9 = +_strtof_l($0, $3, __ZNSt3__26__clocEv() | 0);
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$11) HEAP32[(___errno_location() | 0) >> 2] = $6;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) if (($11 | 0) == 34) {
   $$0$ph = $9;
   label = 6;
  } else $$0 = $9; else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0.0;
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $9 = +_strtod_l($0, $3, __ZNSt3__26__clocEv() | 0);
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$11) HEAP32[(___errno_location() | 0) >> 2] = $6;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) if (($11 | 0) == 34) {
   $$0$ph = $9;
   label = 6;
  } else $$0 = $9; else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $25 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $0 + 4 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) != 234;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7;
 $9 = (HEAP32[$2 >> 2] | 0) - $8 | 0;
 $11 = $9 << 1;
 $13 = $9 >>> 0 < 2147483647 ? (($11 | 0) == 0 ? 4 : $11) : -1;
 $16 = (HEAP32[$1 >> 2] | 0) - $8 >> 2;
 $17 = _realloc($5 ? $7 : 0, $13) | 0;
 if (!$17) __ZSt17__throw_bad_allocv();
 if ($5) {
  HEAP32[$0 >> 2] = $17;
  $25 = $17;
 } else {
  $$pr = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $17;
  if (!$$pr) $25 = $17; else {
   FUNCTION_TABLE_vi[HEAP32[$3 >> 2] & 255]($$pr);
   $25 = HEAP32[$0 >> 2] | 0;
  }
 }
 HEAP32[$3 >> 2] = 235;
 HEAP32[$1 >> 2] = $25 + ($16 << 2);
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + ($13 >>> 2 << 2);
 return;
}

function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $25 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $0 + 4 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) != 234;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7;
 $9 = (HEAP32[$2 >> 2] | 0) - $8 | 0;
 $11 = $9 << 1;
 $13 = $9 >>> 0 < 2147483647 ? (($11 | 0) == 0 ? 4 : $11) : -1;
 $16 = (HEAP32[$1 >> 2] | 0) - $8 >> 2;
 $17 = _realloc($5 ? $7 : 0, $13) | 0;
 if (!$17) __ZSt17__throw_bad_allocv();
 if ($5) {
  HEAP32[$0 >> 2] = $17;
  $25 = $17;
 } else {
  $$pr = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $17;
  if (!$$pr) $25 = $17; else {
   FUNCTION_TABLE_vi[HEAP32[$3 >> 2] & 255]($$pr);
   $25 = HEAP32[$0 >> 2] | 0;
  }
 }
 HEAP32[$3 >> 2] = 235;
 HEAP32[$1 >> 2] = $25 + ($16 << 2);
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + ($13 >>> 2 << 2);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $10 = HEAP32[$0 + 4 >> 2] | 0; else $10 = $5 & 255;
 do if ($10 >>> 0 < $1 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0, $1 - $10 | 0, $2) | 0; else if ($6) {
  $14 = (HEAP32[$0 >> 2] | 0) + $1 | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($14, $3);
  HEAP32[$0 + 4 >> 2] = $1;
  break;
 } else {
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0 + $1 | 0, $3);
  HEAP8[$4 >> 0] = $1;
  break;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog17pattern_formatterD0Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i$i$i = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 9992;
 $1 = $0 + 88 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 | 0) {
  $4 = $0 + 92 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  if (($5 | 0) == ($2 | 0)) $14 = $2; else {
   $$08$i$i$i$i = $5;
   do {
    $$08$i$i$i$i = $$08$i$i$i$i + -4 | 0;
    $8 = HEAP32[$$08$i$i$i$i >> 2] | 0;
    HEAP32[$$08$i$i$i$i >> 2] = 0;
    if ($8 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] & 255]($8);
   } while (($$08$i$i$i$i | 0) != ($2 | 0));
   $14 = HEAP32[$1 >> 2] | 0;
  }
  HEAP32[$4 >> 2] = $2;
  __ZdlPv($14);
 }
 $15 = $0 + 16 | 0;
 if ((HEAP8[$15 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$15 >> 2] | 0);
 $20 = $0 + 4 | 0;
 if ((HEAP8[$20 + 11 >> 0] | 0) >= 0) {
  __ZdlPv($0);
  return;
 }
 __ZdlPv(HEAP32[$20 >> 2] | 0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $23 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $0 + 4 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) != 234;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7;
 $9 = (HEAP32[$2 >> 2] | 0) - $8 | 0;
 $11 = $9 << 1;
 $13 = $9 >>> 0 < 2147483647 ? (($11 | 0) == 0 ? 1 : $11) : -1;
 $15 = (HEAP32[$1 >> 2] | 0) - $8 | 0;
 $16 = _realloc($5 ? $7 : 0, $13) | 0;
 if (!$16) __ZSt17__throw_bad_allocv();
 if ($5) {
  HEAP32[$0 >> 2] = $16;
  $23 = $16;
 } else {
  $$pr = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $16;
  if (!$$pr) $23 = $16; else {
   FUNCTION_TABLE_vi[HEAP32[$3 >> 2] & 255]($$pr);
   $23 = HEAP32[$0 >> 2] | 0;
  }
 }
 HEAP32[$3 >> 2] = 235;
 HEAP32[$1 >> 2] = $23 + $15;
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + $13;
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5, $1);
 $6 = __ZNKSt3__26locale9use_facetERNS0_2idE($5, 32720) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 48 >> 2] & 7]($6, 6320, 6352, $2) | 0;
 $10 = __ZNKSt3__26locale9use_facetERNS0_2idE($5, 32728) | 0;
 HEAP32[$3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 127]($10) | 0;
 HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 127]($0, $10);
 __ZNSt3__26localeD2Ev($5);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5, $1);
 $6 = __ZNKSt3__26locale9use_facetERNS0_2idE($5, 32688) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] & 7]($6, 6320, 6352, $2) | 0;
 $10 = __ZNKSt3__26locale9use_facetERNS0_2idE($5, 32704) | 0;
 HEAP8[$3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 127]($10) | 0;
 HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 127]($0, $10);
 __ZNSt3__26localeD2Ev($5);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($2 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 do if ($2 >>> 0 < 2) {
  HEAP8[$0 + 8 + 3 >> 0] = $2;
  $$0 = $0;
 } else {
  $10 = $2 + 4 & -4;
  if ($10 >>> 0 > 1073741823) _abort(); else {
   $13 = __Znwm($10 << 2) | 0;
   HEAP32[$0 >> 2] = $13;
   HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $2;
   $$0 = $13;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwm($$0, $1, $2) | 0;
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0 + ($2 << 2) | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($1 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 do if ($1 >>> 0 < 2) {
  HEAP8[$0 + 8 + 3 >> 0] = $1;
  $$0 = $0;
 } else {
  $10 = $1 + 4 & -4;
  if ($10 >>> 0 > 1073741823) _abort(); else {
   $13 = __Znwm($10 << 2) | 0;
   HEAP32[$0 >> 2] = $13;
   HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $1;
   $$0 = $13;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE6assignEPwmw($$0, $1, $2) | 0;
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0 + ($1 << 2) | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZN3sgl10EventQueue9PushEventEPNS_5EventE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $25 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = (HEAP32[$0 + 8 >> 2] | 0) - $6 | 0;
 $11 = $0 + 16 | 0;
 $13 = $0 + 20 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $14 + (HEAP32[$11 >> 2] | 0) | 0;
 if (((($7 | 0) == 0 ? 0 : ($7 << 8) + -1 | 0) | 0) == ($15 | 0)) {
  __ZNSt3__25dequeIPN3sgl5EventENS_9allocatorIS3_EEE19__add_back_capacityEv($0);
  $$pre$i = HEAP32[$13 >> 2] | 0;
  $$pre$phi$iZ2D = (HEAP32[$11 >> 2] | 0) + $$pre$i | 0;
  $20 = HEAP32[$5 >> 2] | 0;
  $25 = $$pre$i;
 } else {
  $$pre$phi$iZ2D = $15;
  $20 = $6;
  $25 = $14;
 }
 HEAP32[(HEAP32[$20 + ($$pre$phi$iZ2D >>> 10 << 2) >> 2] | 0) + (($$pre$phi$iZ2D & 1023) << 2) >> 2] = $1;
 HEAP32[$13 >> 2] = $25 + 1;
 return;
}

function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $35 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8;
 $23 = $0 + 2 | 0;
 $24 = HEAP8[$23 >> 0] | 0;
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8;
 $28 = $24 << 24 >> 24 == 0;
 if (($27 | 0) == ($14 | 0) | $28) {
  $$016$lcssa = $23;
  $$lcssa = $28;
 } else {
  $$01618 = $23;
  $$019 = $27;
  while (1) {
   $30 = $$01618 + 1 | 0;
   $31 = HEAP8[$30 >> 0] | 0;
   $$019 = ($$019 | $31 & 255) << 8;
   $35 = $31 << 24 >> 24 == 0;
   if (($$019 | 0) == ($14 | 0) | $35) {
    $$016$lcssa = $30;
    $$lcssa = $35;
    break;
   } else $$01618 = $30;
  }
 }
 return ($$lcssa ? 0 : $$016$lcssa + -2 | 0) | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, 24169, 24177) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 $7 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32720) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 16 | 0, $1, $$byval_copy, $4, $7);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 $7 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32720) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 24 | 0, $1, $$byval_copy, $4, $7);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, 6544, 6576) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 $7 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32688) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 16 | 0, $1, $$byval_copy, $4, $7);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 $7 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32688) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 24 | 0, $1, $$byval_copy, $4, $7);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 $7 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32720) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 20 | 0, $1, $$byval_copy, $4, $7);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 $7 = __ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy, 32688) | 0;
 __ZNSt3__26localeD2Ev($$byval_copy);
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 20 | 0, $1, $$byval_copy, $4, $7);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZN6spdlog17pattern_formatterD2Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i$i = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 9992;
 $1 = $0 + 88 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 | 0) {
  $4 = $0 + 92 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  if (($5 | 0) == ($2 | 0)) $14 = $2; else {
   $$08$i$i$i = $5;
   do {
    $$08$i$i$i = $$08$i$i$i + -4 | 0;
    $8 = HEAP32[$$08$i$i$i >> 2] | 0;
    HEAP32[$$08$i$i$i >> 2] = 0;
    if ($8 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] & 255]($8);
   } while (($$08$i$i$i | 0) != ($2 | 0));
   $14 = HEAP32[$1 >> 2] | 0;
  }
  HEAP32[$4 >> 2] = $2;
  __ZdlPv($14);
 }
 $15 = $0 + 16 | 0;
 if ((HEAP8[$15 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$15 >> 2] | 0);
 $20 = $0 + 4 | 0;
 if ((HEAP8[$20 + 11 >> 0] | 0) >= 0) return;
 __ZdlPv(HEAP32[$20 >> 2] | 0);
 return;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 getTempRet0() | 0;
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709551616.0, $1);
    $$016 = $9;
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function __ZN9MainLayerD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $17 = 0, $2 = 0, $22 = 0, $26 = 0, $5 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 11504;
 $2 = HEAP32[$0 + 64 >> 2] | 0;
 if ($2 | 0) __ZdlPv($2);
 $5 = HEAP32[$0 + 56 >> 2] | 0;
 if ($5 | 0) {
  __ZN3sgl9Texture2DD2Ev($5);
  __ZdlPv($5);
 }
 $8 = HEAP32[$0 + 60 >> 2] | 0;
 if ($8 | 0) {
  __ZN3sgl9Texture2DD2Ev($8);
  __ZdlPv($8);
 }
 $11 = HEAP32[$0 + 16 >> 2] | 0;
 if ($11 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] & 255]($11);
 $17 = HEAP32[$0 + 148 >> 2] | 0;
 if ($17 | 0) {
  HEAP32[$0 + 152 >> 2] = $17;
  __ZdlPv($17);
 }
 $22 = HEAP32[$0 + 100 >> 2] | 0;
 if (!$22) {
  $26 = $0 + 20 | 0;
  __ZN3sgl6ShaderD2Ev($26);
  __ZN3sgl5LayerD2Ev($0);
  return;
 }
 HEAP32[$0 + 104 >> 2] = $22;
 __ZdlPv($22);
 $26 = $0 + 20 | 0;
 __ZN3sgl6ShaderD2Ev($26);
 __ZN3sgl5LayerD2Ev($0);
 return;
}

function _ungetc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$pr = 0, $14 = 0, $16 = 0, $19 = 0, $7 = 0, $8 = 0, label = 0;
 do if (($0 | 0) == -1) $$1 = -1; else {
  if ((HEAP32[$1 + 76 >> 2] | 0) > -1) $16 = ___lockfile($1) | 0; else $16 = 0;
  $7 = $1 + 4 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if (!$8) {
   ___toread($1) | 0;
   $$pr = HEAP32[$7 >> 2] | 0;
   if ($$pr | 0) {
    $14 = $$pr;
    label = 6;
   }
  } else {
   $14 = $8;
   label = 6;
  }
  if ((label | 0) == 6) if ($14 >>> 0 > ((HEAP32[$1 + 44 >> 2] | 0) + -8 | 0) >>> 0) {
   $19 = $14 + -1 | 0;
   HEAP32[$7 >> 2] = $19;
   HEAP8[$19 >> 0] = $0;
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
   if (!$16) {
    $$1 = $0;
    break;
   }
   ___unlockfile($1);
   $$1 = $0;
   break;
  }
  if (!$16) $$1 = -1; else {
   ___unlockfile($1);
   $$1 = -1;
  }
 } while (0);
 return $$1 | 0;
}

function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8988465674311579538646525.0e283;
  $5 = ($1 | 0) > 2046;
  $7 = $1 + -2046 | 0;
  $$0 = $5 ? $3 * 8988465674311579538646525.0e283 : $3;
  $$020 = $5 ? (($7 | 0) < 1023 ? $7 : 1023) : $1 + -1023 | 0;
 } else if (($1 | 0) < -1022) {
  $10 = $0 * 2.2250738585072014e-308;
  $12 = ($1 | 0) < -2044;
  $14 = $1 + 2044 | 0;
  $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10;
  $$020 = $12 ? (($14 | 0) > -1022 ? $14 : -1022) : $1 + 1022 | 0;
 } else {
  $$0 = $0;
  $$020 = $1;
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0;
 $18 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $17;
 HEAP32[tempDoublePtr + 4 >> 2] = $18;
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZN3sgl10EventQueue3PopEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = $0 + 20 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) return;
 $4 = $0 + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $0 + 16 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $13 = HEAP32[(HEAP32[$5 + ($7 >>> 10 << 2) >> 2] | 0) + (($7 & 1023) << 2) >> 2] | 0;
 if (!$13) {
  $19 = $2;
  $21 = $7;
  $24 = $5;
 } else {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] & 255]($13);
  $19 = HEAP32[$1 >> 2] | 0;
  $21 = HEAP32[$6 >> 2] | 0;
  $24 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$1 >> 2] = $19 + -1;
 $20 = $21 + 1 | 0;
 HEAP32[$6 >> 2] = $20;
 if ($20 >>> 0 <= 2047) return;
 __ZdlPv(HEAP32[$24 >> 2] | 0);
 HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 4;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1024;
 return;
}

function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $3 = 0, $6 = 0, $9 = 0;
 $3 = $1 + 4 | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 $6 = $0 + 8 | 0;
 $9 = HEAP32[$6 >> 2] | 0;
 if ((HEAP32[$0 + 12 >> 2] | 0) - $9 >> 2 >>> 0 > $2 >>> 0) {
  $$pre$phiZ2D = $6;
  $16 = $9;
 } else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($6, $2 + 1 | 0);
  $$pre$phiZ2D = $6;
  $16 = HEAP32[$6 >> 2] | 0;
 }
 $17 = HEAP32[$16 + ($2 << 2) >> 2] | 0;
 if ($17 | 0) {
  $19 = $17 + 4 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  HEAP32[$19 >> 2] = $20 + -1;
  if (!$20) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$17 >> 2] | 0) + 8 >> 2] & 255]($17);
 }
 HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($2 << 2) >> 2] = $1;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $25 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 if (HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($1, $0);
  if (HEAP8[$1 >> 0] | 0) {
   $16 = HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 24 >> 2] & 127]($16) | 0) == -1) {
    $25 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj($25, HEAP32[$25 + 16 >> 2] | 1);
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0;
 if (!(HEAP32[$4 >> 2] & 4)) {
  if (($8 | 0) < 69) $$0 = $8 + 2e3 | 0; else $$0 = ($8 | 0) < 100 ? $8 + 1900 | 0 : $8;
  HEAP32[$1 >> 2] = $$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0;
 if (!(HEAP32[$4 >> 2] & 4)) {
  if (($8 | 0) < 69) $$0 = $8 + 2e3 | 0; else $$0 = ($8 | 0) < 100 ? $8 + 1900 | 0 : $8;
  HEAP32[$1 >> 2] = $$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZN3sgl10LayerStack9PushLayerEPNS_5LayerE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $15 = 0, $17 = 0, $19 = 0, $24 = 0, $26 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0;
 $3 = $0 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) {
  __ZNSt3__25dequeIPN3sgl5LayerENS_9allocatorIS3_EEE20__add_front_capacityEv($0);
  $9 = HEAP32[$3 >> 2] | 0;
 } else $9 = $4;
 $7 = HEAP32[$0 + 4 >> 2] | 0;
 $10 = $7 + ($9 >>> 10 << 2) | 0;
 if ((HEAP32[$0 + 8 >> 2] | 0) == ($7 | 0)) {
  $17 = 0;
  $19 = HEAP32[$10 >> 2] | 0;
 } else {
  $15 = HEAP32[$10 >> 2] | 0;
  $17 = $15 + (($9 & 1023) << 2) | 0;
  $19 = $15;
 }
 if (($17 | 0) == ($19 | 0)) $24 = (HEAP32[$10 + -4 >> 2] | 0) + 4096 | 0; else $24 = $17;
 HEAP32[$24 + -4 >> 2] = $1;
 HEAP32[$3 >> 2] = $9 + -1;
 $26 = $0 + 20 | 0;
 HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $5 = __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0;
 $6 = $2 + 11 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $12 = $7 << 24 >> 24 < 0 ? HEAP32[$2 + 4 >> 2] | 0 : $7 & 255;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($0, $1, $5, $12 + $5 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0, (HEAP8[$6 >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2, $12) | 0;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 + -1 | 0) >>> 0 < 12 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 + -1 | 0) >>> 0 < 12 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 if ($3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($3 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $10 = $3 + 16 & -16;
  $11 = __Znwm($10) | 0;
  HEAP32[$0 >> 2] = $11;
  HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $11;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $1, $2) | 0;
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $4);
 STACKTOP = sp;
 return;
}

function __ZN3sgl11Application3RunEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $1 = sp + 24 | 0;
 $2 = sp + 32 | 0;
 $3 = sp;
 HEAPF64[$1 >> 3] = +_glfwGetTime();
 HEAP32[$2 >> 2] = 0;
 $5 = $3 + 16 | 0;
 HEAP32[$3 >> 2] = 9716;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$5 >> 2] = $3;
 _emscripten_set_main_loop_arg(230, $3 | 0, 0, 1);
 $6 = HEAP32[$5 >> 2] | 0;
 if (($3 | 0) == ($6 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] & 255]($6);
  STACKTOP = sp;
  return;
 }
 if (!$6) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] & 255]($6);
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEE4growEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$010$i = 0, $$089$i = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0;
 $2 = $0 + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = ($3 >>> 1) + $3 | 0;
 $spec$select = $5 >>> 0 < $1 >>> 0 ? $1 : $5;
 $7 = $0 + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = __Znwm($spec$select) | 0;
 $11 = HEAP32[$0 + 8 >> 2] | 0;
 $12 = $8 + $11 | 0;
 if ($11 | 0) {
  $$010$i = $8;
  $$089$i = $9;
  while (1) {
   HEAP8[$$089$i >> 0] = HEAP8[$$010$i >> 0] | 0;
   $$010$i = $$010$i + 1 | 0;
   if (($$010$i | 0) == ($12 | 0)) break; else $$089$i = $$089$i + 1 | 0;
  }
 }
 HEAP32[$7 >> 2] = $9;
 HEAP32[$2 >> 2] = $spec$select;
 if (($8 | 0) == ($0 + 16 | 0)) return;
 __ZdlPv($8);
 return;
}

function __ZN3fmt2v519basic_memory_bufferIcLm128ENSt3__29allocatorIcEEE4growEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$010$i = 0, $$089$i = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0;
 $2 = $0 + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = ($3 >>> 1) + $3 | 0;
 $spec$select = $5 >>> 0 < $1 >>> 0 ? $1 : $5;
 $7 = $0 + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = __Znwm($spec$select) | 0;
 $11 = HEAP32[$0 + 8 >> 2] | 0;
 $12 = $8 + $11 | 0;
 if ($11 | 0) {
  $$010$i = $8;
  $$089$i = $9;
  while (1) {
   HEAP8[$$089$i >> 0] = HEAP8[$$010$i >> 0] | 0;
   $$010$i = $$010$i + 1 | 0;
   if (($$010$i | 0) == ($12 | 0)) break; else $$089$i = $$089$i + 1 | 0;
  }
 }
 HEAP32[$7 >> 2] = $9;
 HEAP32[$2 >> 2] = $spec$select;
 if (($8 | 0) == ($0 + 16 | 0)) return;
 __ZdlPv($8);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 + -1 | 0) >>> 0 < 31 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 3) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 366 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 + -1 | 0) >>> 0 < 31 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 3) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 366 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $4$1 = getTempRet0() | 0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, getTempRet0() | 0, 0) | 0) ^ $7$0 | 0, (getTempRet0() | 0) ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
}

function __ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEEclEOSJ_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i$i$i$i$i = 0, $$unpack4$i$i$i$i$i = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0;
 $$unpack$i$i$i$i$i = HEAP32[$0 + 4 >> 2] | 0;
 $$unpack4$i$i$i$i$i = HEAP32[$0 + 8 >> 2] | 0;
 $5 = (HEAP32[$0 + 12 >> 2] | 0) + ($$unpack4$i$i$i$i$i >> 1) | 0;
 if (!($$unpack4$i$i$i$i$i & 1)) {
  $13 = $$unpack$i$i$i$i$i;
  $12 = HEAP32[$1 >> 2] | 0;
  $14 = FUNCTION_TABLE_iii[$13 & 31]($5, $12) | 0;
  return $14 | 0;
 } else {
  $13 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i$i$i$i$i >> 2] | 0;
  $12 = HEAP32[$1 >> 2] | 0;
  $14 = FUNCTION_TABLE_iii[$13 & 31]($5, $12) | 0;
  return $14 | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 13 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8 + -1; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 13 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8 + -1; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 1) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 7 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 61 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 60 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 1) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 7 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 61 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 60 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZN9MainLayer8OnUpdateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $17 = 0, $2 = 0, $23 = 0, $27 = 0, $6 = 0;
 $1 = $0 + 16 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] & 255]($2);
 $6 = HEAP32[$1 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] & 127]($6, $0 + 68 | 0);
 $11 = HEAP32[$1 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$11 >> 2] | 0) + 32 >> 2] & 127]($11, HEAP32[$0 + 56 >> 2] | 0);
 $17 = HEAP32[$1 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] & 127]($17, HEAP32[$0 + 60 >> 2] | 0);
 $23 = HEAP32[$1 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] & 255]($23);
 $27 = HEAP32[$1 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$27 >> 2] | 0) + 28 >> 2] & 255]($27);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 24 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 24 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($2 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwm($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZN3sgl9WebWindow16ToggleFullScreenEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $1 = sp;
 $2 = $0 + 57 | 0;
 if (!(HEAP8[$2 >> 0] | 0)) {
  HEAP32[$1 >> 2] = HEAP32[2766];
  HEAP32[$1 + 4 >> 2] = HEAP32[2767];
  HEAP32[$1 + 8 >> 2] = HEAP32[2768];
  HEAP32[$1 + 12 >> 2] = HEAP32[2769];
  HEAP32[$1 + 16 >> 2] = HEAP32[2770];
  HEAP32[$1 + 20 >> 2] = HEAP32[2771];
  _emscripten_enter_soft_fullscreen(0, $1 | 0) | 0;
  $5 = HEAP8[$2 >> 0] | 0;
  $6 = $5 ^ 1;
  HEAP8[$2 >> 0] = $6;
  STACKTOP = sp;
  return;
 } else {
  _emscripten_exit_soft_fullscreen() | 0;
  $5 = HEAP8[$2 >> 0] | 0;
  $6 = $5 ^ 1;
  HEAP8[$2 >> 0] = $6;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($1 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($1 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $1;
  $$0 = $0;
 } else {
  $9 = $1 + 16 & -16;
  $10 = __Znwm($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $1;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE6assignEPcmc($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $1 | 0, $3);
 STACKTOP = sp;
 return;
}

function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0;
 do if (!($2 << 24 >> 24)) $$0 = $0; else {
  $5 = _strchr($0, $2 << 24 >> 24) | 0;
  if (!$5) $$0 = 0; else if (!(HEAP8[$1 + 1 >> 0] | 0)) $$0 = $5; else if (!(HEAP8[$5 + 1 >> 0] | 0)) $$0 = 0; else {
   if (!(HEAP8[$1 + 2 >> 0] | 0)) {
    $$0 = _twobyte_strstr($5, $1) | 0;
    break;
   }
   if (!(HEAP8[$5 + 2 >> 0] | 0)) $$0 = 0; else {
    if (!(HEAP8[$1 + 3 >> 0] | 0)) {
     $$0 = _threebyte_strstr($5, $1) | 0;
     break;
    }
    if (!(HEAP8[$5 + 3 >> 0] | 0)) $$0 = 0; else if (!(HEAP8[$1 + 4 >> 0] | 0)) {
     $$0 = _fourbyte_strstr($5, $1) | 0;
     break;
    } else {
     $$0 = _twoway_strstr($5, $1) | 0;
     break;
    }
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $18 = 0, $2 = 0, $24 = 0, $30 = 0, $34 = 0, $6 = 0;
 $1 = $0 + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $6 = $2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[$6 + 24 >> 2] | 0) if (!(HEAP32[$6 + 16 >> 2] | 0)) if (HEAP32[$6 + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $18 = HEAP32[$1 >> 2] | 0;
  $24 = HEAP32[$18 + (HEAP32[(HEAP32[$18 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] & 127]($24) | 0) == -1) {
   $30 = HEAP32[$1 >> 2] | 0;
   $34 = $30 + (HEAP32[(HEAP32[$30 >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj($34, HEAP32[$34 + 16 >> 2] | 1);
  }
 }
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$sink = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0;
 $5 = $3;
 $6 = $0 + 8 | 0;
 $$029 = 0;
 $$030 = 0;
 $$034 = $2;
 L1 : while (1) {
  if (($$034 | 0) == ($3 | 0) | $$029 >>> 0 >= $4 >>> 0) break;
  $12 = ___uselocale(HEAP32[$6 >> 2] | 0) | 0;
  $13 = _mbrlen($$034, $5 - $$034 | 0, $1) | 0;
  if ($12 | 0) ___uselocale($12) | 0;
  switch ($13 | 0) {
  case -2:
  case -1:
   {
    break L1;
    break;
   }
  case 0:
   {
    $$sink = 1;
    break;
   }
  default:
   $$sink = $13;
  }
  $$029 = $$029 + 1 | 0;
  $$030 = $$sink + $$030 | 0;
  $$034 = $$034 + $$sink | 0;
 }
 return $$030 | 0;
}

function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $6 = 0, label = 0;
 L1 : do switch ((HEAP32[$2 + 4 >> 2] & 176) << 24 >> 24) {
 case 16:
  {
   $6 = HEAP8[$0 >> 0] | 0;
   switch ($6 << 24 >> 24) {
   case 43:
   case 45:
    {
     $$0 = $0 + 1 | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($1 - $0 | 0) > 1 & $6 << 24 >> 24 == 48) {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      label = 7;
      break L1;
     }
    }
    $$0 = $0 + 2 | 0;
   } else label = 7;
   break;
  }
 case 32:
  {
   $$0 = $1;
   break;
  }
 default:
  label = 7;
 } while (0);
 if ((label | 0) == 7) $$0 = $0;
 return $$0 | 0;
}

function __ZNSt3__215recursive_mutexC2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$ph = 0, $1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = _pthread_mutexattr_init($1 | 0) | 0;
 do if (!$2) {
  $4 = _pthread_mutexattr_settype($1 | 0, 1) | 0;
  if ($4 | 0) {
   _pthread_mutexattr_destroy($1 | 0) | 0;
   $$0$i$ph = $4;
   break;
  }
  $6 = _pthread_mutex_init($0, $1) | 0;
  $8 = _pthread_mutexattr_destroy($1 | 0) | 0;
  if (!$6) if (!$8) {
   STACKTOP = sp;
   return;
  } else {
   _pthread_mutex_destroy($0) | 0;
   $$0$i$ph = $8;
   break;
  } else $$0$i$ph = $6;
 } else $$0$i$ph = $2; while (0);
 __ZNSt3__220__throw_system_errorEiPKc($$0$i$ph, 25607);
}

function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 15168;
 $1 = $0 + 8 | 0;
 $2 = $0 + 12 | 0;
 $$0 = 0;
 while (1) {
  $4 = HEAP32[$1 >> 2] | 0;
  if ($$0 >>> 0 >= (HEAP32[$2 >> 2] | 0) - $4 >> 2 >>> 0) break;
  $11 = HEAP32[$4 + ($$0 << 2) >> 2] | 0;
  if ($11 | 0) {
   $13 = $11 + 4 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$13 >> 2] = $14 + -1;
   if (!$14) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 255]($11);
  }
  $$0 = $$0 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 144 | 0);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function _strtox($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0.0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $3 = sp;
 dest = $3;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = $0;
 $5 = $3 + 8 | 0;
 HEAP32[$5 >> 2] = -1;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 76 >> 2] = -1;
 ___shlim($3, 0);
 $8 = +___floatscan($3, $2, 1);
 $14 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) + (HEAP32[$3 + 108 >> 2] | 0) | 0;
 if ($1 | 0) HEAP32[$1 >> 2] = ($14 | 0) == 0 ? $0 : $0 + $14 | 0;
 STACKTOP = sp;
 return +$8;
}

function __ZN6spdlog6logger8sink_it_ERNS_7details7log_msgE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$sroa$012$016 = 0, $12 = 0, $3 = 0, $5 = 0, $9 = 0;
 $3 = HEAP32[$0 + 16 >> 2] | 0;
 $5 = HEAP32[$0 + 20 >> 2] | 0;
 $$pre = $1 + 4 | 0;
 if (($3 | 0) != ($5 | 0)) {
  $$sroa$012$016 = $3;
  do {
   $12 = HEAP32[$$sroa$012$016 >> 2] | 0;
   if ((HEAP32[$12 + 4 >> 2] | 0) <= (HEAP32[$$pre >> 2] | 0)) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] & 127]($12, $1);
   $$sroa$012$016 = $$sroa$012$016 + 8 | 0;
  } while (($$sroa$012$016 | 0) != ($5 | 0));
 }
 $9 = HEAP32[$$pre >> 2] | 0;
 if (!(($9 | 0) != 6 ? ($9 | 0) >= (HEAP32[$0 + 32 >> 2] | 0) : 0)) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0);
 return;
}

function __ZZN3sgl9WebWindow4InitEvEN3__08__invokeEP10GLFWwindowii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = _glfwGetWindowUserPointer($0 | 0) | 0;
 $5 = __Znwm(16) | 0;
 HEAP8[$5 + 4 >> 0] = 0;
 HEAP32[$5 >> 2] = 11288;
 HEAP32[$5 + 8 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $2;
 HEAP32[$3 >> 2] = $5;
 $10 = HEAP32[$4 + 24 >> 2] | 0;
 if (!$10) {
  $12 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$12 >> 2] = 12364;
  ___cxa_throw($12 | 0, 8032, 141);
 } else {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 127]($10, $3);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $$byval_copy = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp;
 $3 = sp + 16 | 0;
 HEAP32[$3 >> 2] = 232;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($2, $$byval_copy, $0);
 if ((HEAP32[$0 >> 2] | 0) != -1) {
  HEAP32[$$byval_copy >> 2] = $2;
  HEAP32[$1 >> 2] = $$byval_copy;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0, $1, 233);
 }
 STACKTOP = sp;
 return (HEAP32[$0 + 4 >> 2] | 0) + -1 | 0;
}

function __ZN6spdlog13set_formatterENSt3__210unique_ptrINS_9formatterENS0_14default_deleteIS2_EEEE($0) {
 $0 = $0 | 0;
 var $1 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 if (!(HEAP8[30056] | 0)) if (___cxa_guard_acquire(30056) | 0) __ZN6spdlog7details8registryC2Ev(30064);
 $6 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$1 >> 2] = $6;
 __ZN6spdlog7details8registry13set_formatterENSt3__210unique_ptrINS_9formatterENS2_14default_deleteIS4_EEEE(30064, $1);
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 if (!$7) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] & 255]($7);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$013 = 0, $$2 = 0, $$2$ph = 0, $$sink = 0, $10 = 0;
 if (!($3 & 2048)) $$0 = $0; else {
  HEAP8[$0 >> 0] = 43;
  $$0 = $0 + 1 | 0;
 }
 if (!($3 & 512)) $$2$ph = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$2$ph = $$0 + 1 | 0;
 }
 $$013 = $1;
 $$2 = $$2$ph;
 while (1) {
  $10 = HEAP8[$$013 >> 0] | 0;
  if (!($10 << 24 >> 24)) break;
  HEAP8[$$2 >> 0] = $10;
  $$013 = $$013 + 1 | 0;
  $$2 = $$2 + 1 | 0;
 }
 switch ($3 & 74) {
 case 64:
  {
   $$sink = 111;
   break;
  }
 case 8:
  {
   $$sink = $3 >>> 9 & 32 ^ 120;
   break;
  }
 default:
  $$sink = $2 ? 100 : 117;
 }
 HEAP8[$$2 >> 0] = $$sink;
 return;
}

function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $12 = 0, $14 = 0, $15 = 0;
 L1 : do if (!(HEAP8[$0 + 44 >> 0] | 0)) {
  $$0 = 0;
  $$011 = $1;
  while (1) {
   if (($$0 | 0) >= ($2 | 0)) {
    $$010 = $$0;
    break L1;
   }
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0;
   $14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$$011 >> 2] | 0) | 0;
   $15 = FUNCTION_TABLE_iii[$12 & 31]($0, $14) | 0;
   if (($15 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) {
    $$010 = $$0;
    break L1;
   }
   $$0 = $$0 + 1 | 0;
   $$011 = $$011 + 4 | 0;
  }
 } else $$010 = _fwrite($1, 4, $2, HEAP32[$0 + 32 >> 2] | 0) | 0; while (0);
 return $$010 | 0;
}

function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $12 = 0, $14 = 0, $15 = 0;
 L1 : do if (!(HEAP8[$0 + 44 >> 0] | 0)) {
  $$0 = 0;
  $$011 = $1;
  while (1) {
   if (($$0 | 0) >= ($2 | 0)) {
    $$010 = $$0;
    break L1;
   }
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0;
   $14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$$011 >> 0] | 0) | 0;
   $15 = FUNCTION_TABLE_iii[$12 & 31]($0, $14) | 0;
   if (($15 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
    $$010 = $$0;
    break L1;
   }
   $$0 = $$0 + 1 | 0;
   $$011 = $$011 + 1 | 0;
  }
 } else $$010 = _fwrite($1, 1, $2, HEAP32[$0 + 32 >> 2] | 0) | 0; while (0);
 return $$010 | 0;
}

function _strtox_753($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $5 = sp;
 HEAP32[$5 >> 2] = 0;
 $6 = $5 + 4 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$5 + 44 >> 2] = $0;
 $10 = $5 + 8 | 0;
 HEAP32[$10 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0;
 HEAP32[$5 + 76 >> 2] = -1;
 ___shlim($5, 0);
 $12 = ___intscan($5, $2, 1, $3, $4) | 0;
 $13 = getTempRet0() | 0;
 if ($1 | 0) HEAP32[$1 >> 2] = $0 + ((HEAP32[$6 >> 2] | 0) + (HEAP32[$5 + 108 >> 2] | 0) - (HEAP32[$10 >> 2] | 0));
 setTempRet0($13 | 0);
 STACKTOP = sp;
 return $12 | 0;
}

function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, label = 0;
 $1 = $0 + 20 | 0;
 $3 = $0 + 28 | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0;
  if (!(HEAP32[$1 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $10 = $0 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $0 + 8 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($11 >>> 0 < $13 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 31]($0, $11 - $13 | 0, 1) | 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EEclEOS6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i$i$i$i$i = 0, $$unpack4$i$i$i$i$i = 0, $12 = 0, $13 = 0, $5 = 0;
 $$unpack$i$i$i$i$i = HEAP32[$0 + 4 >> 2] | 0;
 $$unpack4$i$i$i$i$i = HEAP32[$0 + 8 >> 2] | 0;
 $5 = (HEAP32[$0 + 12 >> 2] | 0) + ($$unpack4$i$i$i$i$i >> 1) | 0;
 if (!($$unpack4$i$i$i$i$i & 1)) {
  $13 = $$unpack$i$i$i$i$i;
  $12 = HEAP32[$1 >> 2] | 0;
  FUNCTION_TABLE_vii[$13 & 127]($5, $12);
  return;
 } else {
  $13 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i$i$i$i$i >> 2] | 0;
  $12 = HEAP32[$1 >> 2] | 0;
  FUNCTION_TABLE_vii[$13 & 127]($5, $12);
  return;
 }
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0;
 if (!(HEAP32[$4 >> 2] & 4)) HEAP32[$1 >> 2] = $8 + -1900;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0;
 if (!(HEAP32[$4 >> 2] & 4)) HEAP32[$1 >> 2] = $8 + -1900;
 STACKTOP = sp;
 return;
}

function __ZN3fmt2v58internal13specs_checkerINS1_13specs_handlerINS0_20basic_format_contextINSt3__220back_insert_iteratorINS1_12basic_bufferIcEEEEcEEEEE10check_signEv($0) {
 $0 = $0 | 0;
 var $$off$i$i = 0, $2 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if (($2 | 0) == 1) ___assert_fail(18052, 18966, 546, 18111);
 $$off$i$i = $2 + -1 | 0;
 if ($$off$i$i >>> 0 >= 9) {
  $5 = ___cxa_allocate_exception(8) | 0;
  __ZN3fmt2v512format_errorC2EPKc($5, 18009);
  ___cxa_throw($5 | 0, 6792, 18);
 }
 if ($$off$i$i >>> 0 >= 7) return;
 switch ($2 | 0) {
 case 7:
 case 4:
 case 2:
  return;
 default:
  {
   $7 = ___cxa_allocate_exception(8) | 0;
   __ZN3fmt2v512format_errorC2EPKc($7, 18125);
   ___cxa_throw($7 | 0, 6792, 18);
  }
 }
}

function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $6 = sp;
 HEAP8[$6 >> 0] = 37;
 $7 = $6 + 1 | 0;
 HEAP8[$7 >> 0] = $4;
 $8 = $6 + 2 | 0;
 HEAP8[$8 >> 0] = $5;
 HEAP8[$6 + 3 >> 0] = 0;
 if ($5 << 24 >> 24) {
  HEAP8[$7 >> 0] = $5;
  HEAP8[$8 >> 0] = $4;
 }
 $12 = __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($1, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = $1 + (_strftime_l($1 | 0, $12 | 0, $6 | 0, $3 | 0, HEAP32[$0 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZN3sgl6ShaderD2Ev($0) {
 $0 = $0 | 0;
 var $$018$i$i$i = 0, $12 = 0, $13 = 0, $15 = 0, $3 = 0, $6 = 0, $$018$i$i$i$looptemp = 0;
 _glDeleteProgram(HEAP32[$0 >> 2] | 0);
 $3 = HEAP32[$0 + 24 >> 2] | 0;
 if ($3 | 0) {
  $$018$i$i$i = $3;
  do {
   $$018$i$i$i$looptemp = $$018$i$i$i;
   $$018$i$i$i = HEAP32[$$018$i$i$i >> 2] | 0;
   $6 = $$018$i$i$i$looptemp + 8 | 0;
   if ((HEAP8[$6 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$6 >> 2] | 0);
   __ZdlPv($$018$i$i$i$looptemp);
  } while (($$018$i$i$i | 0) != 0);
 }
 $12 = $0 + 16 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 HEAP32[$12 >> 2] = 0;
 if ($13 | 0) __ZdlPv($13);
 $15 = $0 + 4 | 0;
 if ((HEAP8[$15 + 11 >> 0] | 0) >= 0) return;
 __ZdlPv(HEAP32[$15 >> 2] | 0);
 return;
}

function _getc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $15 = 0, $16 = 0, $24 = 0, $6 = 0, $7 = 0, label = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($0) | 0)) label = 3; else {
  $15 = $0 + 4 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  if ($16 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
   HEAP32[$15 >> 2] = $16 + 1;
   $24 = HEAPU8[$16 >> 0] | 0;
  } else $24 = ___uflow($0) | 0;
  ___unlockfile($0);
  $$0 = $24;
 }
 do if ((label | 0) == 3) {
  $6 = $0 + 4 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if ($7 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
   HEAP32[$6 >> 2] = $7 + 1;
   $$0 = HEAPU8[$7 >> 0] | 0;
   break;
  } else {
   $$0 = ___uflow($0) | 0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$in16 = 0, $$01415 = 0, $10 = 0, $17 = 0, $20 = 0, $21 = 0, $26 = 0, $8 = 0, $9 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0);
 $9 = $0 + 1 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 L1 : do if (!($10 << 24 >> 24)) $26 = 0; else {
  $$0$in16 = (HEAPU8[$0 >> 0] | 0) << 8 | $10 & 255;
  $$01415 = $9;
  while (1) {
   $17 = $$0$in16 & 65535;
   if (($17 | 0) == ($8 | 0)) break;
   $20 = $$01415 + 1 | 0;
   $21 = HEAP8[$20 >> 0] | 0;
   if (!($21 << 24 >> 24)) {
    $26 = 0;
    break L1;
   } else {
    $$0$in16 = $17 << 8 | $21 & 255;
    $$01415 = $20;
   }
  }
  $26 = $$01415 + -1 | 0;
 } while (0);
 return $26 | 0;
}

function _pad_661($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $5 = sp;
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0;
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0;
   $$011 = $9;
   do {
    _out($0, $5, 256);
    $$011 = $$011 + -256 | 0;
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255;
  } else $$0$lcssa = $9;
  _out($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $4 = 0;
 $1 = $0 + 44 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$0 + 24 >> 2] | 0;
 if ($2 >>> 0 < $4 >>> 0) {
  HEAP32[$1 >> 2] = $4;
  $13 = $4;
 } else $13 = $2;
 if (!(HEAP32[$0 + 48 >> 2] & 8)) {
  $$0 = -1;
  return $$0 | 0;
 }
 $10 = $0 + 16 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if ($11 >>> 0 < $13 >>> 0) {
  HEAP32[$10 >> 2] = $13;
  $17 = $13;
 } else $17 = $11;
 $15 = HEAP32[$0 + 12 >> 2] | 0;
 if ($15 >>> 0 >= $17 >>> 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 $$0 = HEAPU8[$15 >> 0] | 0;
 return $$0 | 0;
}

function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0 >> 2] = 12832;
 HEAP32[$0 + 32 >> 2] = $1;
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0);
 $7 = __ZNKSt3__26locale9use_facetERNS0_2idE($3, 32992) | 0;
 __ZNSt3__26localeD2Ev($3);
 HEAP32[$0 + 36 >> 2] = $7;
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 127]($7) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0 >> 2] = 12768;
 HEAP32[$0 + 32 >> 2] = $1;
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0);
 $7 = __ZNKSt3__26locale9use_facetERNS0_2idE($3, 33e3) | 0;
 __ZNSt3__26localeD2Ev($3);
 HEAP32[$0 + 36 >> 2] = $7;
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 127]($7) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZZN3sgl9WebWindow4InitEvEN3__28__invokeEP10GLFWwindowiPPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = _glfwGetWindowUserPointer($0 | 0) | 0;
 $5 = __Znwm(20) | 0;
 __ZN3sgl9DropEventC2EiPPKc($5, $1, $2);
 HEAP32[$3 >> 2] = $5;
 $7 = HEAP32[$4 + 24 >> 2] | 0;
 if (!$7) {
  $9 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$9 >> 2] = 12364;
  ___cxa_throw($9 | 0, 8032, 141);
 } else {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] & 127]($7, $3);
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $7 = 0, $8 = 0, label = 0;
 $$011 = $3;
 $$012 = $1;
 while (1) {
  if (($$011 | 0) == ($4 | 0)) {
   label = 7;
   break;
  }
  if (($$012 | 0) == ($2 | 0)) {
   $$0 = -1;
   break;
  }
  $7 = HEAP8[$$012 >> 0] | 0;
  $8 = HEAP8[$$011 >> 0] | 0;
  if ($7 << 24 >> 24 < $8 << 24 >> 24) {
   $$0 = -1;
   break;
  }
  if ($8 << 24 >> 24 < $7 << 24 >> 24) {
   $$0 = 1;
   break;
  }
  $$011 = $$011 + 1 | 0;
  $$012 = $$012 + 1 | 0;
 }
 if ((label | 0) == 7) $$0 = ($$012 | 0) != ($2 | 0) & 1;
 return $$0 | 0;
}

function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0 >> 2] = 12896;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP8[$0 + 52 >> 0] = 0;
 $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0);
 FUNCTION_TABLE_vii[$11 & 127]($0, $3);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0 >> 2] = 12960;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP8[$0 + 52 >> 0] = 0;
 $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0);
 FUNCTION_TABLE_vii[$11 & 127]($0, $3);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;
 return;
}

function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = $0 + 20 | 0;
 $9 = $0 + 28 | 0;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 $15 = HEAP32[$0 >> 2] | 0;
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0;
  HEAP32[$0 + 8 >> 2] = $23;
  HEAP32[$0 + 4 >> 2] = $23;
  $$0 = $15 << 27 >> 31;
 } else {
  HEAP32[$0 >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__26chrono12system_clock3nowEv() {
 var $0 = 0, $10 = 0, $13 = 0, $15 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $0 = sp;
 if (!(_clock_gettime(0, $0 | 0) | 0)) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = (HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0;
  $13 = ___muldi3($5 | 0, (($5 | 0) < 0) << 31 >> 31 | 0, 1e6, 0) | 0;
  $15 = _i64Add($13 | 0, getTempRet0() | 0, $10 | 0, (($10 | 0) < 0) << 31 >> 31 | 0) | 0;
  setTempRet0(getTempRet0() | 0);
  STACKTOP = sp;
  return $15 | 0;
 } else __ZNSt3__220__throw_system_errorEiPKc(HEAP32[(___errno_location() | 0) >> 2] | 0, 22701);
 return 0;
}

function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0;
  return $$1 | 0;
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $$1 = 0;
  return $$1 | 0;
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0;
 if ($11 | 0) {
  $$1 = $11 + 8 | 0;
  return $$1 | 0;
 }
 $14 = _malloc($1) | 0;
 if (!$14) {
  $$1 = 0;
  return $$1 | 0;
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0;
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0;
 _free($0);
 $$1 = $14;
 return $$1 | 0;
}

function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $7 = 0, $8 = 0, label = 0;
 $$011 = $3;
 $$012 = $1;
 while (1) {
  if (($$011 | 0) == ($4 | 0)) {
   label = 7;
   break;
  }
  if (($$012 | 0) == ($2 | 0)) {
   $$0 = -1;
   break;
  }
  $7 = HEAP32[$$012 >> 2] | 0;
  $8 = HEAP32[$$011 >> 2] | 0;
  if (($7 | 0) < ($8 | 0)) {
   $$0 = -1;
   break;
  }
  if (($8 | 0) < ($7 | 0)) {
   $$0 = 1;
   break;
  }
  $$011 = $$011 + 4 | 0;
  $$012 = $$012 + 4 | 0;
 }
 if ((label | 0) == 7) $$0 = ($$012 | 0) != ($2 | 0) & 1;
 return $$0 | 0;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $1;
 HEAP32[$vararg_buffer + 12 >> 2] = $3;
 HEAP32[$vararg_buffer + 16 >> 2] = $2;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1;
  $10 = -1;
 } else $10 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $5;
 $10 = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0;
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $5;
 $10 = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0;
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $5;
 $10 = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0;
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $5;
 $10 = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0;
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 STACKTOP = sp;
 return $10 | 0;
}

function __ZZN3sgl9WebWindow4InitEvEN3__58__invokeEP10GLFWwindow($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = _glfwGetWindowUserPointer($0 | 0) | 0;
 $3 = __Znwm(8) | 0;
 HEAP8[$3 + 4 >> 0] = 0;
 HEAP32[$3 >> 2] = 11144;
 HEAP32[$1 >> 2] = $3;
 $6 = HEAP32[$2 + 24 >> 2] | 0;
 if (!$6) {
  $8 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$8 >> 2] = 12364;
  ___cxa_throw($8 | 0, 8032, 141);
 } else {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 127]($6, $1);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $$018$i$i = 0, $11 = 0, $2 = 0, $5 = 0, $$018$i$i$looptemp = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if ($2 | 0) {
  $$018$i$i = $2;
  do {
   $$018$i$i$looptemp = $$018$i$i;
   $$018$i$i = HEAP32[$$018$i$i >> 2] | 0;
   $5 = $$018$i$i$looptemp + 8 | 0;
   if ((HEAP8[$5 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$5 >> 2] | 0);
   __ZdlPv($$018$i$i$looptemp);
  } while (($$018$i$i | 0) != 0);
 }
 $11 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 if (!$11) return;
 __ZdlPv($11);
 return;
}

function __ZN3sgl12GenericInput20GetMousePositionImplEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $15 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp + 8 | 0;
 $3 = sp;
 $6 = HEAP32[(HEAP32[7736] | 0) + 4 >> 2] | 0;
 _glfwGetCursorPos(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 127]($6) | 0, $2 | 0, $3 | 0);
 $15 = +(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 127]($6) | 0);
 $17 = $15 - +HEAPF64[$3 >> 3];
 HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3];
 HEAPF64[$0 + 8 >> 3] = $17;
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $4 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[$4 >> 2] = 10864;
 $5 = $4 + 64 | 0;
 HEAP32[$5 >> 2] = 10904;
 HEAP32[$4 + 8 >> 2] = 10884;
 $7 = $4 + 12 | 0;
 HEAP32[$7 >> 2] = 10960;
 $8 = $4 + 44 | 0;
 if ((HEAP8[$8 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$8 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($7);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5);
 __ZdlPv($4);
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $14 = 0, $4 = 0, $7 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $13 = 0; else {
  $7 = $3 + 112 | 0;
  if ($1 >>> 0 < 29 & (HEAP8[$7 >> 0] | 0) == 0) {
   HEAP8[$7 >> 0] = 1;
   $13 = $3;
   break;
  } else {
   $13 = __Znwm($1 << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[$0 >> 2] = $13;
 $14 = $13 + ($2 << 2) | 0;
 HEAP32[$0 + 8 >> 2] = $14;
 HEAP32[$0 + 4 >> 2] = $14;
 HEAP32[$4 >> 2] = $13 + ($1 << 2);
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 do if (!$5) {
  HEAP32[$4 >> 2] = $2;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 36 >> 2] = 1;
 } else {
  if (($5 | 0) != ($2 | 0)) {
   $13 = $1 + 36 | 0;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
   HEAP32[$1 + 24 >> 2] = 2;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  $10 = $1 + 24 | 0;
  if ((HEAP32[$10 >> 2] | 0) == 2) HEAP32[$10 >> 2] = $3;
 } while (0);
 return;
}

function __ZN6spdlog7details15periodic_workerD2Ev($0) {
 $0 = $0 | 0;
 var $$pre$phi5Z2D = 0, $$pre$phi7Z2D = 0, $1 = 0, $4 = 0, $5 = 0;
 $1 = $0 + 4 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  $$pre$phi5Z2D = $0 + 36 | 0;
  $$pre$phi7Z2D = $0 + 8 | 0;
 } else {
  $4 = $0 + 8 | 0;
  __ZNSt3__25mutex4lockEv($4);
  HEAP8[$0 >> 0] = 0;
  __ZNSt3__25mutex6unlockEv($4);
  $5 = $0 + 36 | 0;
  __ZNSt3__218condition_variable10notify_oneEv($5);
  __ZNSt3__26thread4joinEv($1);
  $$pre$phi5Z2D = $5;
  $$pre$phi7Z2D = $4;
 }
 __ZNSt3__218condition_variableD2Ev($$pre$phi5Z2D);
 __ZNSt3__25mutexD2Ev($$pre$phi7Z2D);
 __ZNSt3__26threadD2Ev($1);
 return;
}

function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $4 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[$4 >> 2] = 10864;
 $5 = $4 + 64 | 0;
 HEAP32[$5 >> 2] = 10904;
 HEAP32[$4 + 8 >> 2] = 10884;
 $7 = $4 + 12 | 0;
 HEAP32[$7 >> 2] = 10960;
 $8 = $4 + 44 | 0;
 if ((HEAP8[$8 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$8 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($7);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5);
 return;
}

function __ZNSt3__2L11init_wam_pmEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[30416] | 0)) if (___cxa_guard_acquire(30416) | 0) {
  $4 = 29248;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 29536);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29248, 13684) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(29260, 13696) | 0;
 return;
}

function __ZNSt3__2L10init_am_pmEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[30336] | 0)) if (___cxa_guard_acquire(30336) | 0) {
  $4 = 28496;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 28784);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28496, 23908) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(28508, 23911) | 0;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$in = 0, $4 = 0;
 if ((__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0) | 0) >>> 0 < $1 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $4 = $0 + 128 | 0;
 if ($1 >>> 0 < 29 & (HEAP8[$4 >> 0] | 0) == 0) {
  HEAP8[$4 >> 0] = 1;
  $$0$i$i$in = $0 + 16 | 0;
 } else $$0$i$i$in = __Znwm($1 << 2) | 0;
 HEAP32[$0 + 4 >> 2] = $$0$i$i$in;
 HEAP32[$0 >> 2] = $$0$i$i$in;
 HEAP32[$0 + 8 >> 2] = $$0$i$i$in + ($1 << 2);
 return;
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  do {
   $$0710 = $$0710 + 1 | 0;
   $$011 = $$011 + 1 | 0;
   $8 = HEAP8[$$0710 >> 0] | 0;
   $9 = HEAP8[$$011 >> 0] | 0;
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9;
  $$lcssa8 = $8;
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory(newDynamicTop | 0) | 0;
  ___setErrNo(12);
  return -1;
 }
 if ((newDynamicTop | 0) <= (_emscripten_get_heap_size() | 0)) HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; else if (!(_emscripten_resize_heap(newDynamicTop | 0) | 0)) {
  ___setErrNo(12);
  return -1;
 }
 return oldDynamicTop | 0;
}

function __ZN3sgl9DropEventD0Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i$i$i = 0, $1 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 11264;
 $1 = $0 + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  __ZdlPv($0);
  return;
 }
 $4 = $0 + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) == ($2 | 0)) $13 = $2; else {
  $$08$i$i$i$i = $5;
  do {
   $$08$i$i$i$i = $$08$i$i$i$i + -12 | 0;
   if ((HEAP8[$$08$i$i$i$i + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$$08$i$i$i$i >> 2] | 0);
  } while (($$08$i$i$i$i | 0) != ($2 | 0));
  $13 = HEAP32[$1 >> 2] | 0;
 }
 HEAP32[$4 >> 2] = $2;
 __ZdlPv($13);
 __ZdlPv($0);
 return;
}

function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 HEAP32[$0 + 36 >> 2] = 5;
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$0 + 75 >> 0] = -1;
 }
 $14 = ___stdio_write($0, $1, $2) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0;
 $1 = $0 + -8 | 0;
 HEAP32[$1 >> 2] = 10864;
 $2 = $1 + 64 | 0;
 HEAP32[$2 >> 2] = 10904;
 HEAP32[$1 + 8 >> 2] = 10884;
 $4 = $1 + 12 | 0;
 HEAP32[$4 >> 2] = 10960;
 $5 = $1 + 44 | 0;
 if ((HEAP8[$5 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$5 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($4);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($1, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($2);
 __ZdlPv($1);
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3, $1);
 $4 = __ZNKSt3__26locale9use_facetERNS0_2idE($3, 32728) | 0;
 HEAP32[$2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 127]($4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 127]($0, $4);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3, $1);
 $4 = __ZNKSt3__26locale9use_facetERNS0_2idE($3, 32704) | 0;
 HEAP8[$2 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 127]($4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 127]($0, $4);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE13set_formatterENSt3__210unique_ptrINS_9formatterENS6_14default_deleteIS8_EEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$0 + 304 >> 2] | 0;
 __ZNSt3__25mutex4lockEv($3);
 $4 = $0 + 8 | 0;
 $5 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 $6 = HEAP32[$4 >> 2] | 0;
 HEAP32[$4 >> 2] = $5;
 if (!$6) {
  __ZNSt3__25mutex6unlockEv($3);
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] & 255]($6);
 __ZNSt3__25mutex6unlockEv($3);
 return;
}

function __ZN3sgl14Renderer2D_ES2D0Ev($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 11312;
 $2 = HEAP32[$0 + 168 >> 2] | 0;
 if ($2 | 0) {
  HEAP32[$0 + 172 >> 2] = $2;
  __ZdlPv($2);
 }
 HEAP32[$0 >> 2] = 11360;
 $7 = HEAP32[$0 + 156 >> 2] | 0;
 if ($7 | 0) {
  HEAP32[$0 + 160 >> 2] = $7;
  __ZdlPv($7);
 }
 __ZN3sgl6ShaderD2Ev($0 + 32 | 0);
 __ZN3sgl11IndexBufferD2Ev($0 + 24 | 0);
 __ZN3sgl12VertexBufferD2Ev($0 + 20 | 0);
 $15 = HEAP32[$0 + 4 >> 2] | 0;
 if (!$15) {
  __ZdlPv($0);
  return;
 }
 HEAP32[$0 + 8 >> 2] = $15;
 __ZdlPv($15);
 __ZdlPv($0);
 return;
}

function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0;
 $1 = $0 + -8 | 0;
 HEAP32[$1 >> 2] = 10864;
 $2 = $1 + 64 | 0;
 HEAP32[$2 >> 2] = 10904;
 HEAP32[$1 + 8 >> 2] = 10884;
 $4 = $1 + 12 | 0;
 HEAP32[$4 >> 2] = 10960;
 $5 = $1 + 44 | 0;
 if ((HEAP8[$5 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$5 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($4);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($1, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($2);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $10 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 15]($10, $1, $2, $3, $4, $5);
 }
 return;
}

function _wmemmove($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01416 = 0, $$018 = 0, $$117 = 0, $$in = 0;
 if ($0 - $1 >> 2 >>> 0 < $2 >>> 0) {
  $$in = $2;
  do {
   $$in = $$in + -1 | 0;
   HEAP32[$0 + ($$in << 2) >> 2] = HEAP32[$1 + ($$in << 2) >> 2];
  } while (($$in | 0) != 0);
 } else if ($2 | 0) {
  $$01416 = $1;
  $$018 = $0;
  $$117 = $2;
  while (1) {
   $$117 = $$117 + -1 | 0;
   HEAP32[$$018 >> 2] = HEAP32[$$01416 >> 2];
   if (!$$117) break; else {
    $$01416 = $$01416 + 4 | 0;
    $$018 = $$018 + 4 | 0;
   }
  }
 }
 return $0 | 0;
}

function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do if (!$2) $14 = 0; else {
  $$01318 = $0;
  $$01417 = $2;
  $$019 = $1;
  while (1) {
   $4 = HEAP8[$$01318 >> 0] | 0;
   $5 = HEAP8[$$019 >> 0] | 0;
   if ($4 << 24 >> 24 != $5 << 24 >> 24) break;
   $$01417 = $$01417 + -1 | 0;
   if (!$$01417) {
    $14 = 0;
    break L1;
   } else {
    $$01318 = $$01318 + 1 | 0;
    $$019 = $$019 + 1 | 0;
   }
  }
  $14 = ($4 & 255) - ($5 & 255) | 0;
 } while (0);
 return $14 | 0;
}

function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 10864;
 $1 = $0 + 64 | 0;
 HEAP32[$1 >> 2] = 10904;
 HEAP32[$0 + 8 >> 2] = 10884;
 $3 = $0 + 12 | 0;
 HEAP32[$3 >> 2] = 10960;
 $4 = $0 + 44 | 0;
 if ((HEAP8[$4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 __ZdlPv($0);
 return;
}

function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $15 = 0, $4 = 0, $phitmp = 0, $spec$select = 0;
 $4 = Math_imul($2, $1) | 0;
 $spec$select = ($1 | 0) == 0 ? 0 : $2;
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0;
  $11 = ___fwritex($0, $4, $3) | 0;
  if ($phitmp) $12 = $11; else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else $12 = ___fwritex($0, $4, $3) | 0;
 if (($12 | 0) == ($4 | 0)) $15 = $spec$select; else $15 = ($12 >>> 0) / ($1 >>> 0) | 0;
 return $15 | 0;
}

function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 32992) | 0;
 $3 = $0 + 36 | 0;
 HEAP32[$3 >> 2] = $2;
 $8 = $0 + 44 | 0;
 HEAP32[$8 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 127]($2) | 0;
 $9 = HEAP32[$3 >> 2] | 0;
 HEAP8[$0 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 127]($9) | 0) & 1;
 if ((HEAP32[$8 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(23275); else return;
}

function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 33e3) | 0;
 $3 = $0 + 36 | 0;
 HEAP32[$3 >> 2] = $2;
 $8 = $0 + 44 | 0;
 HEAP32[$8 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 127]($2) | 0;
 $9 = HEAP32[$3 >> 2] | 0;
 HEAP8[$0 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 127]($9) | 0) & 1;
 if ((HEAP32[$8 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(23275); else return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -4 | 0;
  HEAP32[$3 >> 2] = $6;
  $4 = $6;
 }
 $7 = HEAP32[$0 >> 2] | 0;
 do if ($7 | 0) {
  $10 = HEAP32[$0 + 16 >> 2] | 0;
  if (($7 | 0) == ($10 | 0)) {
   HEAP8[$10 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv($7);
   break;
  }
 } while (0);
 return;
}

function __ZN3sgl9DropEventD2Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i$i = 0, $1 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 11264;
 $1 = $0 + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) return;
 $4 = $0 + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) == ($2 | 0)) $13 = $2; else {
  $$08$i$i$i = $5;
  do {
   $$08$i$i$i = $$08$i$i$i + -12 | 0;
   if ((HEAP8[$$08$i$i$i + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$$08$i$i$i >> 2] | 0);
  } while (($$08$i$i$i | 0) != ($2 | 0));
  $13 = HEAP32[$1 >> 2] | 0;
 }
 HEAP32[$4 >> 2] = $2;
 __ZdlPv($13);
 return;
}

function _store_int($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do if ($0 | 0) switch ($1 | 0) {
 case -2:
  {
   HEAP8[$0 >> 0] = $2;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[$0 >> 1] = $2;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[$0 >> 2] = $2;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$0 >> 2] = $2;
   break L1;
   break;
  }
 case 3:
  {
   $7 = $0;
   HEAP32[$7 >> 2] = $2;
   HEAP32[$7 + 4 >> 2] = $3;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 10864;
 $1 = $0 + 64 | 0;
 HEAP32[$1 >> 2] = 10904;
 HEAP32[$0 + 8 >> 2] = 10884;
 $3 = $0 + 12 | 0;
 HEAP32[$3 >> 2] = 10960;
 $4 = $0 + 44 | 0;
 if ((HEAP8[$4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0, 10916);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}

function __ZN3sgl14Renderer2D_ES2D2Ev($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 11312;
 $2 = HEAP32[$0 + 168 >> 2] | 0;
 if ($2 | 0) {
  HEAP32[$0 + 172 >> 2] = $2;
  __ZdlPv($2);
 }
 HEAP32[$0 >> 2] = 11360;
 $7 = HEAP32[$0 + 156 >> 2] | 0;
 if ($7 | 0) {
  HEAP32[$0 + 160 >> 2] = $7;
  __ZdlPv($7);
 }
 __ZN3sgl6ShaderD2Ev($0 + 32 | 0);
 __ZN3sgl11IndexBufferD2Ev($0 + 24 | 0);
 __ZN3sgl12VertexBufferD2Ev($0 + 20 | 0);
 $15 = HEAP32[$0 + 4 >> 2] | 0;
 if (!$15) return;
 HEAP32[$0 + 8 >> 2] = $15;
 __ZdlPv($15);
 return;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = HEAPU8[1920 + ($8 & 15) >> 0] | 0 | $3;
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $15 = getTempRet0() | 0;
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14;
    break;
   } else $$056 = $14;
  }
 }
 return $$05$lcssa | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 4 >> 2] | 0;
 $8 = $7 >> 8;
 if (!($7 & 1)) $$0 = $8; else $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0;
 $14 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 15]($14, $1, $2, $3 + $$0 | 0, ($7 & 2 | 0) == 0 ? 2 : $4, $5);
 return;
}

function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $3 = sp;
 dest = $3;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 28;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 84 >> 2] = $0;
 $8 = _vfscanf($3, $1, $2) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function __ZNK6spdlog17pattern_formatter5cloneEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 __ZN6spdlog7details11make_uniqueINS_17pattern_formatterEJRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKNS_17pattern_time_typeESB_EEENS3_10unique_ptrIT_NS3_14default_deleteISG_EEEEDpOT0_($2, $1 + 4 | 0, $1 + 28 | 0, $1 + 16 | 0);
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__call_onceERVmPvPFvS2_E($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _pthread_mutex_lock(33040) | 0;
 while (1) {
  if ((HEAP32[$0 >> 2] | 0) != 1) break;
  _pthread_cond_wait(33068, 33040) | 0;
 }
 if (!(HEAP32[$0 >> 2] | 0)) {
  HEAP32[$0 >> 2] = 1;
  _pthread_mutex_unlock(33040) | 0;
  FUNCTION_TABLE_vi[$2 & 255]($1);
  _pthread_mutex_lock(33040) | 0;
  HEAP32[$0 >> 2] = -1;
  _pthread_mutex_unlock(33040) | 0;
  _pthread_cond_broadcast(33068) | 0;
 } else _pthread_mutex_unlock(33040) | 0;
 return;
}

function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$select = 0;
 $3 = $0 + 84 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 256 | 0;
 $6 = _memchr($4, 0, $5) | 0;
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0;
 $spec$select = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2;
 _memcpy($1 | 0, $4 | 0, $spec$select | 0) | 0;
 HEAP32[$0 + 4 >> 2] = $4 + $spec$select;
 $14 = $4 + $$027 | 0;
 HEAP32[$0 + 8 >> 2] = $14;
 HEAP32[$3 >> 2] = $14;
 return $spec$select | 0;
}

function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa = 0, $7 = 0;
 $$0 = $2;
 while (1) {
  if (($$0 | 0) == ($3 | 0)) {
   $$0$lcssa = $3;
   break;
  }
  if ((HEAP32[$$0 >> 2] | 0) >>> 0 >= 128) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  if (!((HEAP16[$7 + (HEAP32[$$0 >> 2] << 1) >> 1] & $1) << 16 >> 16)) {
   $$0$lcssa = $$0;
   break;
  }
  $$0 = $$0 + 4 | 0;
 }
 return $$0$lcssa | 0;
}

function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3, $1);
 $4 = __ZNKSt3__26locale9use_facetERNS0_2idE($3, 32720) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 48 >> 2] & 7]($4, 6320, 6346, $2) | 0;
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN3sgl6Window6CreateEjjPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0;
 $3 = __Znwm(64) | 0;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 >> 2] = 11024;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 48 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 HEAP8[$3 + 56 >> 0] = 1;
 HEAP8[$3 + 57 >> 0] = 0;
 if ((__ZN3sgl9WebWindow4InitEv($3) | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] & 255]($3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = $3;
  return $$0 | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 63]($8, $1, $2, $3);
 }
 return;
}

function __ZN3sgl10LayerStack3endEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $18 = 0, $6 = 0, $8 = 0;
 $6 = (HEAP32[$1 + 16 >> 2] | 0) + (HEAP32[$1 + 20 >> 2] | 0) | 0;
 $8 = HEAP32[$1 + 4 >> 2] | 0;
 $10 = $8 + ($6 >>> 10 << 2) | 0;
 if ((HEAP32[$1 + 8 >> 2] | 0) == ($8 | 0)) {
  $18 = 0;
  HEAP32[$0 >> 2] = $10;
  $17 = $0 + 4 | 0;
  HEAP32[$17 >> 2] = $18;
  return;
 }
 $18 = (HEAP32[$10 >> 2] | 0) + (($6 & 1023) << 2) | 0;
 HEAP32[$0 >> 2] = $10;
 $17 = $0 + 4 | 0;
 HEAP32[$17 >> 2] = $18;
 return;
}

function _vasprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 $4 = _vsnprintf(0, 0, $1, $3) | 0;
 if (($4 | 0) < 0) $$0 = -1; else {
  $6 = $4 + 1 | 0;
  $7 = _malloc($6) | 0;
  HEAP32[$0 >> 2] = $7;
  if (!$7) $$0 = -1; else $$0 = _vsnprintf($7, $6, $1, $2) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $6 >> 8;
 if (!($6 & 1)) $$0 = $7; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0;
 $13 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 7]($13, $1, $2 + $$0 | 0, ($6 & 2 | 0) == 0 ? 2 : $3, $4);
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 8 | 0;
 $3 = ___uselocale(HEAP32[$1 >> 2] | 0) | 0;
 $4 = _mbtowc(0, 0, 4) | 0;
 if ($3 | 0) ___uselocale($3) | 0;
 if (!$4) {
  $7 = HEAP32[$1 >> 2] | 0;
  if (!$7) $$0 = 1; else {
   $9 = ___uselocale($7) | 0;
   $10 = ___ctype_get_mb_cur_max() | 0;
   if ($9 | 0) ___uselocale($9) | 0;
   return ($10 | 0) == 1 | 0;
  }
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $5 = 0, $6 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $5 >> 8;
 if (!($5 & 1)) $$0 = $6; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0;
 $12 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 63]($12, $1, $2 + $$0 | 0, ($5 & 2 | 0) == 0 ? 2 : $3);
 return;
}

function __ZN3sgl9Texture2D7SetDataEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i4 = 0;
 _glBindTexture(3553, HEAP32[$0 >> 2] | 0);
 switch (HEAP32[$0 + 32 >> 2] | 0) {
 case 0:
  {
   $$0$i4 = 6408;
   break;
  }
 case 1:
  {
   $$0$i4 = 6407;
   break;
  }
 case 3:
  {
   $$0$i4 = 6409;
   break;
  }
 case 4:
  {
   $$0$i4 = 6410;
   break;
  }
 default:
  $$0$i4 = 0;
 }
 _glTexImage2D(3553, 0, $$0$i4 | 0, HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 20 >> 2] | 0, 0, $$0$i4 | 0, 5121, $1 | 0);
 return;
}

function __ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $13 = 0, $8 = 0;
 $8 = HEAP32[$2 >> 2] | 0;
 $$0 = $0;
 $$014 = $1 - $0 >> 2;
 while (1) {
  if (!$$014) break;
  $10 = ($$014 | 0) / 2 | 0;
  $11 = $$0 + ($10 << 2) | 0;
  $13 = (HEAP32[$11 >> 2] | 0) >>> 0 < $8 >>> 0;
  $$0 = $13 ? $11 + 4 | 0 : $$0;
  $$014 = $13 ? $$014 + -1 - $10 | 0 : $10;
 }
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0); else {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 return;
}

function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa = 0, $7 = 0;
 $$0 = $2;
 while (1) {
  if (($$0 | 0) == ($3 | 0)) {
   $$0$lcssa = $3;
   break;
  }
  if ((HEAP32[$$0 >> 2] | 0) >>> 0 < 128) {
   $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   if ((HEAP16[$7 + (HEAP32[$$0 >> 2] << 1) >> 1] & $1) << 16 >> 16) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $$0 = $$0 + 4 | 0;
 }
 return $$0$lcssa | 0;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 28 >> 2] = $14;
  HEAP32[$0 + 20 >> 2] = $14;
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$0 >> 2] = $7 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $7 & 7 | 48;
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $11 = getTempRet0() | 0;
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10;
    break;
   } else $$06 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($0, $1, $2, $3, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $varargs = $varargs | 0;
 var $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 HEAP32[$4 >> 2] = $varargs;
 $5 = ___uselocale($2) | 0;
 $6 = _vsnprintf($0, $1, $3, $4) | 0;
 if ($5 | 0) ___uselocale($5) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$08 = 0, $13 = 0, $7 = 0;
 $$0 = $3;
 $$08 = $1;
 while (1) {
  if (($$08 | 0) == ($2 | 0)) break;
  if ((HEAP32[$$08 >> 2] | 0) >>> 0 < 128) {
   $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   $13 = HEAPU16[$7 + (HEAP32[$$08 >> 2] << 1) >> 1] | 0;
  } else $13 = 0;
  HEAP16[$$0 >> 1] = $13;
  $$0 = $$0 + 2 | 0;
  $$08 = $$08 + 4 | 0;
 }
 return $2 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $8 = 0, $9 = 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0;
 if (($4 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) $$0 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else {
  $8 = $0 + 12 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  HEAP32[$8 >> 2] = $9 + 4;
  $$0 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$9 >> 2] | 0) | 0;
 }
 return $$0 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $8 = 0, $9 = 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0;
 if (($4 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) $$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  $8 = $0 + 12 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  HEAP32[$8 >> 2] = $9 + 1;
  $$0 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0;
 }
 return $$0 | 0;
}

function __ZN3sgl9WebWindowD0Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 11024;
 _glfwDestroyWindow(HEAP32[$0 + 40 >> 2] | 0);
 _glfwTerminate();
 HEAP32[$0 >> 2] = 11096;
 $4 = HEAP32[$0 + 24 >> 2] | 0;
 if (($0 + 8 | 0) == ($4 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 255]($4);
  __ZdlPv($0);
  return;
 }
 if (!$4) {
  __ZdlPv($0);
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 255]($4);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28ios_base4initEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, dest = 0, stop = 0;
 HEAP32[$0 + 24 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = ($1 | 0) == 0 & 1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 4098;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 6;
 $11 = $0 + 28 | 0;
 dest = $0 + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__26localeC2Ev($11);
 return;
}

function _arg_n($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 $$0 = $1;
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $10 = HEAP32[$9 >> 2] | 0;
  HEAP32[$2 >> 2] = $9 + 4;
  if ($$0 >>> 0 > 1) $$0 = $$0 + -1 | 0; else break;
 }
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = ___uselocale($1) | 0;
 $5 = _vasprintf($0, $2, $3) | 0;
 if ($4 | 0) ___uselocale($4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = ___uselocale($1) | 0;
 $5 = _vsscanf($0, $2, $3) | 0;
 if ($4 | 0) ___uselocale($4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _getint($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) $$0$lcssa = 0; else {
  $$04 = 0;
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0;
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0;
   $12 = $7 + 1 | 0;
   HEAP32[$0 >> 2] = $12;
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11;
    break;
   } else $$04 = $11;
  }
 }
 return $$0$lcssa | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $4 = 0, $6 = 0;
 $$0 = $1;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  $4 = HEAP8[$$0 >> 0] | 0;
  if ($4 << 24 >> 24 > -1) {
   $6 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   $12 = HEAP32[$6 + (HEAP8[$$0 >> 0] << 2) >> 2] & 255;
  } else $12 = $4;
  HEAP8[$$0 >> 0] = $12;
  $$0 = $$0 + 1 | 0;
 }
 return $2 | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $4 = 0, $6 = 0;
 $$0 = $1;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  $4 = HEAP8[$$0 >> 0] | 0;
  if ($4 << 24 >> 24 > -1) {
   $6 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   $12 = HEAP32[$6 + (HEAP8[$$0 >> 0] << 2) >> 2] & 255;
  } else $12 = $4;
  HEAP8[$$0 >> 0] = $12;
  $$0 = $$0 + 1 | 0;
 }
 return $2 | 0;
}

function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $6 = 0;
 $$0 = $1;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  $4 = HEAP32[$$0 >> 2] | 0;
  if ($4 >>> 0 < 128) {
   $6 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   $10 = HEAP32[$6 + (HEAP32[$$0 >> 2] << 2) >> 2] | 0;
  } else $10 = $4;
  HEAP32[$$0 >> 2] = $10;
  $$0 = $$0 + 4 | 0;
 }
 return $2 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $6 = 0;
 $$0 = $1;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  $4 = HEAP32[$$0 >> 2] | 0;
  if ($4 >>> 0 < 128) {
   $6 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   $10 = HEAP32[$6 + (HEAP32[$$0 >> 2] << 2) >> 2] | 0;
  } else $10 = $4;
  HEAP32[$$0 >> 2] = $10;
  $$0 = $$0 + 4 | 0;
 }
 return $2 | 0;
}

function __ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __Znwm(16) | 0;
 $2 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 9760;
 $3 = $1 + 4 | 0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 return $1 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = (HEAP32[$2 >> 2] | 0) - $4 >> 2;
 $8 = $4;
 if ($6 >>> 0 < $1 >>> 0) __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($0, $1 - $6 | 0); else if ($6 >>> 0 > $1 >>> 0) HEAP32[$2 >> 2] = $8 + ($1 << 2);
 return;
}

function __ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE7__cloneEPNS0_6__baseISK_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 9760;
 $3 = $1 + 4 | 0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 return;
}

function __ZNSt3__28numpunctIwEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $6 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1;
 HEAP32[$0 >> 2] = 15280;
 HEAP32[$0 + 8 >> 2] = 46;
 HEAP32[$0 + 12 >> 2] = 44;
 $6 = $0 + 16 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN3sgl11ApplicationD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 9656;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if ($2 | 0) {
  __ZN3sgl10LayerStackD2Ev($2);
  __ZdlPv($2);
 }
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 if (!$5) {
  $10 = $0 + 12 | 0;
  __ZN3sgl10EventQueueD2Ev($10);
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] & 255]($5);
 $10 = $0 + 12 | 0;
 __ZN3sgl10EventQueueD2Ev($10);
 return;
}

function __ZNSt3__28numpunctIcEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $6 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1;
 HEAP32[$0 >> 2] = 15240;
 HEAP8[$0 + 8 >> 0] = 46;
 HEAP8[$0 + 9 >> 0] = 44;
 $6 = $0 + 12 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _isatty($0) {
 $0 = $0 | 0;
 var $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $0;
 HEAP32[$vararg_buffer + 4 >> 2] = 21523;
 HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
 $6 = (___syscall_ret(___syscall54(54, $vararg_buffer | 0) | 0) | 0) == 0 & 1;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $8 = 0;
 $8 = ($2 - $1 | 0) >>> 2;
 $$0 = $4;
 $$09 = $1;
 while (1) {
  if (($$09 | 0) == ($2 | 0)) break;
  $10 = HEAP32[$$09 >> 2] | 0;
  HEAP8[$$0 >> 0] = $10 >>> 0 < 128 ? $10 & 255 : $3;
  $$0 = $$0 + 1 | 0;
  $$09 = $$09 + 4 | 0;
 }
 return $1 + ($8 << 2) | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 128 >> 0] = 0;
 if ($1 | 0) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm($0, $1);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0, $1);
 }
 return;
}

function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 $8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 31]($0, $1, $3) | 0;
 if ($8) HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return $8 & 1 | 0;
}

function __ZN6spdlog6logger6flush_Ev($0) {
 $0 = $0 | 0;
 var $$sroa$08$012 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 16 >> 2] | 0;
 $4 = HEAP32[$0 + 20 >> 2] | 0;
 if (($2 | 0) == ($4 | 0)) return;
 $$sroa$08$012 = $2;
 do {
  $6 = HEAP32[$$sroa$08$012 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] & 255]($6);
  $$sroa$08$012 = $$sroa$08$012 + 8 | 0;
 } while (($$sroa$08$012 | 0) != ($4 | 0));
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __Znwm(16) | 0;
 $2 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 9672;
 $3 = $1 + 4 | 0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 return $1 | 0;
}

function __ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE7__cloneEPNS0_6__baseISI_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 9672;
 $3 = $1 + 4 | 0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 return;
}

function __ZN3sgl9WebWindowD2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 11024;
 _glfwDestroyWindow(HEAP32[$0 + 40 >> 2] | 0);
 _glfwTerminate();
 HEAP32[$0 >> 2] = 11096;
 $4 = HEAP32[$0 + 24 >> 2] | 0;
 if (($0 + 8 | 0) == ($4 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 255]($4);
  return;
 }
 if (!$4) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 255]($4);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $6 = 0;
 HEAP8[$0 >> 0] = 0;
 HEAP32[$0 + 4 >> 2] = $1;
 $6 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[$6 + 16 >> 2] | 0)) {
  $11 = HEAP32[$6 + 72 >> 2] | 0;
  if ($11 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11) | 0;
  HEAP8[$0 >> 0] = 1;
 }
 return;
}

function __GLOBAL__sub_I_GenericInput_cpp() {
 var $0 = 0;
 HEAP32[6588] = 22424;
 HEAP32[6589] = 5;
 HEAP32[6590] = 22430;
 HEAP32[6591] = 5;
 HEAP32[6592] = 22436;
 HEAP32[6593] = 4;
 HEAP32[6594] = 22441;
 HEAP32[6595] = 7;
 HEAP32[6596] = 22449;
 HEAP32[6597] = 5;
 HEAP32[6598] = 22455;
 HEAP32[6599] = 8;
 HEAP32[6600] = 22464;
 HEAP32[6601] = 3;
 $0 = __Znwm(4) | 0;
 HEAP32[$0 >> 2] = 11416;
 HEAP32[7749] = $0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
 return;
}

function __ZN3sgl10Renderer2DD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 11360;
 $2 = HEAP32[$0 + 156 >> 2] | 0;
 if ($2 | 0) {
  HEAP32[$0 + 160 >> 2] = $2;
  __ZdlPv($2);
 }
 __ZN3sgl6ShaderD2Ev($0 + 32 | 0);
 __ZN3sgl11IndexBufferD2Ev($0 + 24 | 0);
 __ZN3sgl12VertexBufferD2Ev($0 + 20 | 0);
 $10 = HEAP32[$0 + 4 >> 2] | 0;
 if (!$10) return;
 HEAP32[$0 + 8 >> 2] = $10;
 __ZdlPv($10);
 return;
}

function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $5 = 0, $7 = 0;
 $4 = $0 + 32 | 0;
 $5 = $0 + 36 | 0;
 $$0 = HEAP32[$0 + 40 >> 2] | 0;
 while (1) {
  if (!$$0) break;
  $7 = $$0 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$4 >> 2] | 0) + ($7 << 2) >> 2] & 7]($1, $0, HEAP32[(HEAP32[$5 >> 2] | 0) + ($7 << 2) >> 2] | 0);
  $$0 = $7;
 }
 return;
}

function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $8;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0;
 if (($0 | 0) != ($1 | 0)) {
  $4 = HEAP8[$1 + 11 >> 0] | 0;
  $5 = $4 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255) | 0;
 }
 return $0 | 0;
}

function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 30280;
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0;
 $8 = _i64Add($6 | 0, getTempRet0() | 0, 1, 0) | 0;
 $9 = getTempRet0() | 0;
 $10 = 30280;
 HEAP32[$10 >> 2] = $8;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0;
 getTempRet0() | 0;
 return $14 | 0;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = _strlen($1) | 0;
 $4 = __Znwm($2 + 13 | 0) | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 + 8 >> 2] = 0;
 $7 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4) | 0;
 _memcpy($7 | 0, $1 | 0, $2 + 1 | 0) | 0;
 HEAP32[$0 >> 2] = $7;
 return;
}

function ___munmap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $0;
 HEAP32[$vararg_buffer + 4 >> 2] = $1;
 $4 = ___syscall_ret(___syscall91(91, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($0) {
 $0 = $0 | 0;
 var $$unpack = 0, $$unpack2 = 0, $10 = 0, $3 = 0;
 $$unpack = HEAP32[$0 + 4 >> 2] | 0;
 $$unpack2 = HEAP32[$0 + 8 >> 2] | 0;
 $3 = (HEAP32[$0 >> 2] | 0) + ($$unpack2 >> 1) | 0;
 if (!($$unpack2 & 1)) $10 = $$unpack; else $10 = HEAP32[(HEAP32[$3 >> 2] | 0) + $$unpack >> 2] | 0;
 FUNCTION_TABLE_vi[$10 & 255]($3);
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$09 = 0, $6 = 0;
 $$0 = $4;
 $$09 = $1;
 while (1) {
  if (($$09 | 0) == ($2 | 0)) break;
  $6 = HEAP8[$$09 >> 0] | 0;
  HEAP8[$$0 >> 0] = $6 << 24 >> 24 > -1 ? $6 : $3;
  $$0 = $$0 + 1 | 0;
  $$09 = $$09 + 1 | 0;
 }
 return $2 | 0;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy_723(HEAP32[$0 + 60 >> 2] | 0) | 0;
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZSt9terminatev() {
 var $0 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 | 0) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) | 0) {
  $3 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1040(HEAP32[$0 >> 2] | 0) | 0;
  $4 = $3 + 8 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + -1;
  if (($5 + -1 | 0) < 0) __ZdlPv($3);
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 8 | 0;
 $$0 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 do {
  HEAP32[$3 >> 2] = 0;
  $3 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  HEAP32[$2 >> 2] = $3;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($0) | 0;
 $5 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 32992) | 0;
 HEAP32[$0 + 36 >> 2] = $5;
 HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 127]($5) | 0) & 1;
 return;
}

function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($0) | 0;
 $5 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 33e3) | 0;
 HEAP32[$0 + 36 >> 2] = $5;
 HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 127]($5) | 0) & 1;
 return;
}

function __ZN3sgl10LayerStack5beginEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $15 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = HEAP32[$1 + 4 >> 2] | 0;
 $5 = HEAP32[$1 + 16 >> 2] | 0;
 $7 = $3 + ($5 >>> 10 << 2) | 0;
 if ((HEAP32[$1 + 8 >> 2] | 0) == ($3 | 0)) $15 = 0; else $15 = (HEAP32[$7 >> 2] | 0) + (($5 & 1023) << 2) | 0;
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $15;
 return;
}

function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 if (!(___toread($0) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) $$0 = HEAPU8[$1 >> 0] | 0; else $$0 = -1; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $spec$select = 0;
 $5 = $0 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0;
 $spec$select = $7 >>> 0 > $2 >>> 0 ? $2 : $7;
 _memcpy($6 | 0, $1 | 0, $spec$select | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $spec$select;
 return $2 | 0;
}

function __ZNKSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __Znwm(16) | 0;
 $2 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 9716;
 $3 = $1 + 4 | 0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 return $1 | 0;
}

function __Znwm($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $4 = 0, $spec$store$select = 0;
 $spec$store$select = ($0 | 0) == 0 ? 1 : $0;
 while (1) {
  $2 = _malloc($spec$store$select) | 0;
  if ($2 | 0) {
   $$lcssa = $2;
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0;
  if (!$4) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 7]();
 }
 return $$lcssa | 0;
}

function __ZNKSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE7__cloneEPNS0_6__baseIS7_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 9716;
 $3 = $1 + 4 | 0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 return;
}

function __ZNSt3__219__shared_weak_count14__release_weakEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $7 = 0;
 $1 = $0 + 8 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0); else {
  $7 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $7 + -1;
  if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0);
 }
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 4 | 0;
 $$0 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 do {
  HEAP32[$3 >> 2] = 0;
  $3 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  HEAP32[$2 >> 2] = $3;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZN3sgl11ApplicationD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 9656;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if ($2 | 0) {
  __ZN3sgl10LayerStackD2Ev($2);
  __ZdlPv($2);
 }
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 if ($5 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] & 255]($5);
 __ZN3sgl10EventQueueD2Ev($0 + 12 | 0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$020 = 0, $6 = 0, $7 = 0;
 $$0 = 0;
 $$020 = $1;
 while (1) {
  if (($$020 | 0) == ($2 | 0)) break;
  $6 = (HEAP32[$$020 >> 2] | 0) + ($$0 << 4) | 0;
  $7 = $6 & -268435456;
  $$0 = ($7 >>> 24 | $7) ^ $6;
  $$020 = $$020 + 4 | 0;
 }
 return $$0 | 0;
}

function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0, $2, $3);
 return;
}

function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0, $2, $3);
 return;
}

function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$020 = 0, $7 = 0, $8 = 0;
 $$0 = 0;
 $$020 = $1;
 while (1) {
  if (($$020 | 0) == ($2 | 0)) break;
  $7 = ($$0 << 4) + (HEAP8[$$020 >> 0] | 0) | 0;
  $8 = $7 & -268435456;
  $$0 = ($8 >>> 24 | $8) ^ $7;
  $$020 = $$020 + 1 | 0;
 }
 return $$0 | 0;
}

function __ZN3sgl6Shader15SetUniformMat4fERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3glm3matILi4ELi4EfLNSA_9qualifierE0EEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _glUniformMatrix4fv(__ZN3sgl6Shader18GetUniformLocationERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) | 0, 1, 0, $2 | 0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $6 = 0;
 $6 = $0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 $11 = $0 + 8 | 0;
 HEAP32[$11 >> 2] = -1;
 HEAP32[$11 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $6 = 0;
 $6 = $0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 $11 = $0 + 8 | 0;
 HEAP32[$11 >> 2] = -1;
 HEAP32[$11 + 4 >> 2] = -1;
 return;
}

function _wmemcpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$058 = 0, $$067 = 0, $$09 = 0;
 if ($2 | 0) {
  $$058 = $2;
  $$067 = $1;
  $$09 = $0;
  while (1) {
   $$058 = $$058 + -1 | 0;
   HEAP32[$$09 >> 2] = HEAP32[$$067 >> 2];
   if (!$$058) break; else {
    $$067 = $$067 + 4 | 0;
    $$09 = $$09 + 4 | 0;
   }
  }
 }
 return $0 | 0;
}

function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = _vsnprintf($0, $1, $2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30384] | 0)) if (___cxa_guard_acquire(30384) | 0) {
  HEAP32[8210] = 0;
  HEAP32[8211] = 0;
  HEAP32[8212] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(32840, 13516, __ZNSt3__211char_traitsIwE6lengthEPKw(13516) | 0);
 }
 return 32840;
}

function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30392] | 0)) if (___cxa_guard_acquire(30392) | 0) {
  HEAP32[8213] = 0;
  HEAP32[8214] = 0;
  HEAP32[8215] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(32852, 13552, __ZNSt3__211char_traitsIwE6lengthEPKw(13552) | 0);
 }
 return 32852;
}

function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30400] | 0)) if (___cxa_guard_acquire(30400) | 0) {
  HEAP32[8216] = 0;
  HEAP32[8217] = 0;
  HEAP32[8218] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(32864, 13600, __ZNSt3__211char_traitsIwE6lengthEPKw(13600) | 0);
 }
 return 32864;
}

function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30376] | 0)) if (___cxa_guard_acquire(30376) | 0) {
  HEAP32[8207] = 0;
  HEAP32[8208] = 0;
  HEAP32[8209] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(32828, 13480, __ZNSt3__211char_traitsIwE6lengthEPKw(13480) | 0);
 }
 return 32828;
}

function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30304] | 0)) if (___cxa_guard_acquire(30304) | 0) {
  HEAP32[8193] = 0;
  HEAP32[8194] = 0;
  HEAP32[8195] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(32772, 23866, __ZNSt3__211char_traitsIcE6lengthEPKc(23866) | 0);
 }
 return 32772;
}

function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30312] | 0)) if (___cxa_guard_acquire(30312) | 0) {
  HEAP32[8196] = 0;
  HEAP32[8197] = 0;
  HEAP32[8198] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(32784, 23875, __ZNSt3__211char_traitsIcE6lengthEPKc(23875) | 0);
 }
 return 32784;
}

function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30320] | 0)) if (___cxa_guard_acquire(30320) | 0) {
  HEAP32[8199] = 0;
  HEAP32[8200] = 0;
  HEAP32[8201] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(32796, 23887, __ZNSt3__211char_traitsIcE6lengthEPKc(23887) | 0);
 }
 return 32796;
}

function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30296] | 0)) if (___cxa_guard_acquire(30296) | 0) {
  HEAP32[8190] = 0;
  HEAP32[8191] = 0;
  HEAP32[8192] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(32760, 23857, __ZNSt3__211char_traitsIcE6lengthEPKc(23857) | 0);
 }
 return 32760;
}

function __ZNSt3__220__shared_ptr_emplaceIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEENS_9allocatorIS7_EEED0Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 9844;
 __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEED2Ev($0 + 12 | 0);
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0;
 $8 = $2 + 8 | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 15]($0, $1, HEAP32[$8 >> 2] | 0, HEAP32[$8 + 4 >> 2] | 0, 0, $3);
 return;
}

function __ZN3sgl12GenericInput21GetMousePositionYImplEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 127]($1, $0);
 STACKTOP = sp;
 return +(+HEAPF64[$1 + 8 >> 3]);
}

function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $varargs;
 $2 = HEAP32[2895] | 0;
 _vfprintf($2, $0, $1) | 0;
 _fputc(10, $2) | 0;
 _abort();
}

function __ZNSt3__220__shared_ptr_emplaceIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEENS_9allocatorIS7_EEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 9844;
 __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEED2Ev($0 + 12 | 0);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}

function __ZN3sgl6Shader13SetUniform1ivERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiPKi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 _glUniform1iv(__ZN3sgl6Shader18GetUniformLocationERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) | 0, $2 | 0, $3 | 0);
 return;
}

function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $4 - $6 | 0;
 HEAP32[$0 + 108 >> 2] = $7;
 if (($1 | 0) != 0 & ($7 | 0) > ($1 | 0)) HEAP32[$0 + 100 >> 2] = $6 + $1; else HEAP32[$0 + 100 >> 2] = $4;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 12464;
 __ZNSt3__26localeC2Ev($0 + 4 | 0);
 $2 = $0 + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 12400;
 __ZNSt3__26localeC2Ev($0 + 4 | 0);
 $2 = $0 + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 return;
}

function __ZN3sgl12GenericInput21GetMousePositionXImplEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 127]($1, $0);
 STACKTOP = sp;
 return +(+HEAPF64[$1 >> 3]);
}

function __ZN3sgl14Renderer2D_ES2C2EiiRKNS_6ShaderE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 __ZN3sgl10Renderer2DC2EiiRKNS_6ShaderE($0, $1, $2, $3);
 HEAP32[$0 >> 2] = 11312;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP32[$0 + 172 >> 2] = 0;
 HEAP32[$0 + 176 >> 2] = 0;
 __ZN3sgl14Renderer2D_ES24InitEv($0);
 return;
}

function __GLOBAL__sub_I_Log_cpp() {
 HEAP32[6572] = 22424;
 HEAP32[6573] = 5;
 HEAP32[6574] = 22430;
 HEAP32[6575] = 5;
 HEAP32[6576] = 22436;
 HEAP32[6577] = 4;
 HEAP32[6578] = 22441;
 HEAP32[6579] = 7;
 HEAP32[6580] = 22449;
 HEAP32[6581] = 5;
 HEAP32[6582] = 22455;
 HEAP32[6583] = 8;
 HEAP32[6584] = 22464;
 HEAP32[6585] = 3;
 return;
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_once(33116, 4) | 0)) {
  $3 = _pthread_getspecific(HEAP32[8280] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(25937, sp);
 return 0;
}

function __ZN3sgl6WindowD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 11096;
 $2 = HEAP32[$0 + 24 >> 2] | 0;
 if (($0 + 8 | 0) == ($2 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] & 255]($2);
  return;
 }
 if (!$2) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 255]($2);
 return;
}

function __ZNSt3__25ctypeIcEC2EPKtbm($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 HEAP32[$0 + 4 >> 2] = $3 + -1;
 HEAP32[$0 >> 2] = 15188;
 $7 = $0 + 8 | 0;
 HEAP32[$7 >> 2] = $1;
 HEAP8[$0 + 12 >> 0] = $2 & 1;
 if (!$1) HEAP32[$7 >> 2] = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
 return;
}

function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 $3 = _vsscanf($0, $1, $2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  if (($1 | 0) == ($0 + 16 | 0)) {
   HEAP8[$0 + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv($1);
   break;
  }
 } while (0);
 return;
}
function globalCtors() {
 __GLOBAL__I_000101();
 ___cxx_global_var_init_14();
 ___cxx_global_var_init_15();
 ___cxx_global_var_init_16();
 __GLOBAL__sub_I_Log_cpp();
 ___cxx_global_var_init_20();
 ___cxx_global_var_init_21();
 __GLOBAL__sub_I_GenericInput_cpp();
 ___emscripten_environ_constructor();
 __GLOBAL__sub_I_iostream_cpp();
}

function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack = 0, $$unpack5 = 0;
 $$unpack = HEAP32[$1 >> 2] | 0;
 $$unpack5 = HEAP32[$1 + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $$unpack;
 HEAP32[$0 + 8 >> 2] = $$unpack5;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if (!$2) $7 = 1; else {
  $4 = ___uselocale($2) | 0;
  $5 = ___ctype_get_mb_cur_max() | 0;
  if (!$4) $7 = $5; else {
   ___uselocale($4) | 0;
   $7 = $5;
  }
 }
 return $7 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0;
  if ((HEAP32[$7 >> 2] | 0) != 1) HEAP32[$7 >> 2] = $3;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _free($0);
 if (!(_pthread_setspecific(HEAP32[8280] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(26036, sp);
}

function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $0 + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $0 + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$07 = 0;
 $$0 = $3;
 $$07 = $1;
 while (1) {
  if (($$07 | 0) == ($2 | 0)) break;
  HEAP8[$$0 >> 0] = HEAP8[$$07 >> 0] | 0;
  $$0 = $$0 + 1 | 0;
  $$07 = $$07 + 1 | 0;
 }
 return $2 | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$07 = 0;
 $$0 = $3;
 $$07 = $1;
 while (1) {
  if (($$07 | 0) == ($2 | 0)) break;
  HEAP32[$$0 >> 2] = HEAP8[$$07 >> 0];
  $$0 = $$0 + 4 | 0;
  $$07 = $$07 + 1 | 0;
 }
 return $2 | 0;
}

function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12384;
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0, 0);
 __ZNSt3__26localeD2Ev($0 + 28 | 0);
 _free(HEAP32[$0 + 32 >> 2] | 0);
 _free(HEAP32[$0 + 36 >> 2] | 0);
 _free(HEAP32[$0 + 48 >> 2] | 0);
 _free(HEAP32[$0 + 60 >> 2] | 0);
 return;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZN3sglL8CallMainEPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 16 >> 2] | 0;
 if (!$2) {
  $4 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$4 >> 2] = 12364;
  ___cxa_throw($4 | 0, 8032, 141);
 } else {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 255]($2);
  return;
 }
}

function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__28numpunctIwE12do_falsenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0, 15312, __ZNSt3__211char_traitsIwE6lengthEPKw(15312) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE12do_falsenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, 25481, __ZNSt3__211char_traitsIcE6lengthEPKc(25481) | 0);
 return;
}

function __ZNSt3__26thread4joinEv($0) {
 $0 = $0 | 0;
 var $$0$ph = 0, $1 = 0, $3 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) $$0$ph = 22; else {
  $3 = _pthread_join($1 | 0, 0) | 0;
  if (!$3) {
   HEAP32[$0 >> 2] = 0;
   return;
  } else $$0$ph = $3;
 }
 __ZNSt3__220__throw_system_errorEiPKc($$0$ph, 25642);
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 10960;
 $1 = $0 + 32 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$1 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__28numpunctIwE11do_truenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0, 15336, __ZNSt3__211char_traitsIwE6lengthEPKw(15336) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_truenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, 25487, __ZNSt3__211char_traitsIcE6lengthEPKc(25487) | 0);
 return;
}

function __ZN3sgl10EventQueue7GetNextEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0;
 if (!(HEAP32[$0 + 20 >> 2] | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = HEAP32[$0 + 16 >> 2] | 0;
 $$0 = HEAP32[(HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + ($7 >>> 10 << 2) >> 2] | 0) + (($7 & 1023) << 2) >> 2] | 0;
 return $$0 | 0;
}

function __ZNKSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwm(8) | 0;
 HEAP32[$1 >> 2] = 9948;
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 return $1 | 0;
}

function __ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16790 ? $0 + 4 | 0 : 0) | 0;
}

function __ZNSt3__220__shared_ptr_emplaceIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEENS_9allocatorIS7_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEED2Ev($0 + 12 | 0);
 return;
}

function __ZNKSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE7__cloneEPNS0_6__baseISE_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 9948;
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 10960;
 $1 = $0 + 32 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$1 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 return;
}

function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 switch (HEAP32[$0 + 4 >> 2] & 74) {
 case 64:
  {
   $$0 = 8;
   break;
  }
 case 8:
  {
   $$0 = 16;
   break;
  }
 case 0:
  {
   $$0 = 0;
   break;
  }
 default:
  $$0 = 10;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_key_create(33120, 236) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(25986, sp);
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 15120;
 $1 = $0 + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[$1 >> 2] | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZN3sgl17CreateApplicationEv() {
 var $0 = 0, $1 = 0;
 $0 = __Znwm(40) | 0;
 __ZN3sgl11ApplicationC2EiiPKc($0, 1280, 720, 22549);
 HEAP32[$0 >> 2] = 11488;
 $1 = __Znwm(168) | 0;
 __ZN9MainLayerC2Ev($1);
 __ZN3sgl11Application9PushLayerEPNS_5LayerE($0, $1);
 return $0 | 0;
}

function __ZN3sgl12GenericInput24IsMouseButtonPressedImplEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 $4 = HEAP32[(HEAP32[7736] | 0) + 4 >> 2] | 0;
 return (_glfwGetMouseButton(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] & 127]($4) | 0, $1 | 0) | 0) == 1 | 0;
}

function __ZN3sgl12GenericInput16IsKeyPressedImplEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 $4 = HEAP32[(HEAP32[7736] | 0) + 4 >> 2] | 0;
 return ((_glfwGetKey(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] & 127]($4) | 0, $1 | 0) | 0) + -1 | 0) >>> 0 < 2 | 0;
}

function _wmemset($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$056 = 0, $$07 = 0;
 if ($2 | 0) {
  $$056 = $2;
  $$07 = $0;
  while (1) {
   $$056 = $$056 + -1 | 0;
   HEAP32[$$07 >> 2] = $1;
   if (!$$056) break; else $$07 = $$07 + 4 | 0;
  }
 }
 return $0 | 0;
}

function __ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE($0) {
 $0 = $0 | 0;
 var $1 = 0, $7 = 0;
 $1 = $0;
 $7 = ___divdi3(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, 1e6, 0) | 0;
 getTempRet0() | 0;
 return $7 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$7 >> 2] = $5;
 return 3;
}

function __ZNKSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 18399 ? $0 + 4 | 0 : 0) | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$7 >> 2] = $5;
 return 3;
}

function __ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16206 ? $0 + 4 | 0 : 0) | 0;
}

function __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE5flushEv($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 304 >> 2] | 0;
 __ZNSt3__25mutex4lockEv($2);
 _fflush(HEAP32[$0 + 300 >> 2] | 0) | 0;
 __ZNSt3__25mutex6unlockEv($2);
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function __ZN6spdlog7details14full_formatterD0Ev($0) {
 $0 = $0 | 0;
 var $3 = 0;
 HEAP32[$0 >> 2] = 10016;
 HEAP32[$0 + 24 >> 2] = 10036;
 $3 = HEAP32[$0 + 28 >> 2] | 0;
 if (($3 | 0) == ($0 + 40 | 0)) {
  __ZdlPv($0);
  return;
 }
 __ZdlPv($3);
 __ZdlPv($0);
 return;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0, 1, 45);
 return;
}

function __ZN6spdlog7details21color_start_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 return;
}

function __ZNSt3__26localeD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (!$3) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 255]($1);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($0, $1, __ZNSt3__211char_traitsIwE6lengthEPKw($1) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}

function __ZN6spdlog7details20color_stop_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$1 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
 return;
}

function __ZN6spdlog5sinks4sinkD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 10796;
 $1 = $0 + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 if (!$2) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] & 255]($2);
 return;
}

function __ZN3fmt2v519basic_memory_bufferIcLm128ENSt3__29allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 10036;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 if (($2 | 0) == ($0 + 16 | 0)) {
  __ZdlPv($0);
  return;
 }
 __ZdlPv($2);
 __ZdlPv($0);
 return;
}

function __ZN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 9804;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 if (($2 | 0) == ($0 + 16 | 0)) {
  __ZdlPv($0);
  return;
 }
 __ZdlPv($2);
 __ZdlPv($0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[7677] = 0;
 HEAP32[7676] = 15364;
 __ZNSt3__220__time_get_c_storageIwEC2Ev(30712);
 HEAP32[7676] = 13404;
 HEAP32[7678] = 13452;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[7673] = 0;
 HEAP32[7672] = 15364;
 __ZNSt3__220__time_get_c_storageIcEC2Ev(30696);
 HEAP32[7672] = 13320;
 HEAP32[7674] = 13368;
 return;
}

function _pthread_key_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0;
 if (!$0) {
  $$0 = 22;
  return $$0 | 0;
 }
 $3 = _malloc(8) | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 38177486;
 HEAP32[$0 >> 2] = $3;
 $$0 = 0;
 return $$0 | 0;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0 + 8 | 0, $1 + 12 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, $1 + 4 | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($2, $3, $4, 1114111, 0) | 0;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($2, $3, $4, 1114111, 0) | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEtw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $9 = 0;
 if ($2 >>> 0 < 128) $9 = (HEAP16[(__ZNSt3__25ctypeIcE13classic_tableEv() | 0) + ($2 << 1) >> 1] & $1) << 16 >> 16 != 0; else $9 = 0;
 return $9 | 0;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32968) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32960) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32952) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32944) | 0);
 return;
}

function __ZN3sgl5LayerC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 11456;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0 + 4 | 0, $1);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32904) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32896) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32888) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32820) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32752) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32744) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32736) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32712) | 0);
 return;
}

function __ZNSt3__211char_traitsIwE7not_eofEj($0) {
 $0 = $0 | 0;
 var $5 = 0;
 if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($0, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) $5 = ~(__ZNSt3__211char_traitsIwE3eofEv() | 0); else $5 = $0;
 return $5 | 0;
}

function __ZNSt3__211char_traitsIcE7not_eofEi($0) {
 $0 = $0 | 0;
 var $5 = 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($0, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) $5 = ~(__ZNSt3__211char_traitsIcE3eofEv() | 0); else $5 = $0;
 return $5 | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $8 = 0;
 if ($1 << 24 >> 24 > -1) $8 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; else $8 = $1;
 return $8 | 0;
}

function __ZN6spdlog7details19aggregate_formatterD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 10056;
 $1 = $0 + 12 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) >= 0) {
  __ZdlPv($0);
  return;
 }
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 __ZdlPv($0);
 return;
}

function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $8 = 0;
 if ($1 << 24 >> 24 > -1) $8 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + (($1 & 255) << 2) >> 2] & 255; else $8 = $1;
 return $8 | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function ___uselocale($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0;
 $2 = (___pthread_self_231() | 0) + 188 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($0 | 0) HEAP32[$2 >> 2] = ($0 | 0) == (-1 | 0) ? 31040 : $0;
 return (($3 | 0) == 31040 ? -1 : $3) | 0;
}

function __ZN3sgl11Application9PushLayerEPNS_5LayerE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN3sgl10LayerStack9PushLayerEPNS_5LayerE(HEAP32[$0 + 8 >> 2] | 0, $1);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 255]($1);
 return;
}

function __ZN3sgl14Renderer2D_ES23EndEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 20 | 0;
 __ZNK3sgl12VertexBuffer4BindEv($1);
 _glBufferSubData(34962, 0, 16e4, HEAP32[$0 + 168 >> 2] | 0);
 __ZNK3sgl12VertexBuffer6UnbindEv($1);
 return;
}

function __ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0;
 $7 = $3 - $2 | 0;
 return ($7 >>> 0 < $4 >>> 0 ? $7 : $4) | 0;
}

function _llvm_ctlz_i64(l, h, isZeroUndef) {
 l = l | 0;
 h = h | 0;
 isZeroUndef = isZeroUndef | 0;
 var ret = 0;
 ret = Math_clz32(h) | 0;
 if ((ret | 0) == 32) ret = ret + (Math_clz32(l) | 0) | 0;
 setTempRet0(0);
 return ret | 0;
}

function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 FUNCTION_TABLE_v[$0 & 7]();
 _abort_message(26089, sp);
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[7685] = 0;
 HEAP32[7684] = 15364;
 HEAP32[7686] = __ZNSt3__26__clocEv() | 0;
 HEAP32[7684] = 14600;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[7681] = 0;
 HEAP32[7680] = 15364;
 HEAP32[7682] = __ZNSt3__26__clocEv() | 0;
 HEAP32[7680] = 14576;
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0;
 if ($1 >>> 0 < 128) $6 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + ($1 << 2) >> 2] | 0; else $6 = $1;
 return $6 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0;
 if ($1 >>> 0 < 128) $6 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($1 << 2) >> 2] | 0; else $6 = $1;
 return $6 | 0;
}

function __ZN6spdlog7details14full_formatterD2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0;
 HEAP32[$0 >> 2] = 10016;
 HEAP32[$0 + 24 >> 2] = 10036;
 $3 = HEAP32[$0 + 28 >> 2] | 0;
 if (($3 | 0) == ($0 + 40 | 0)) return;
 __ZdlPv($3);
 return;
}

function __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEED0Ev($0) {
 $0 = $0 | 0;
 __ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNK6spdlog9spdlog_ex4whatEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $6 = 0;
 $1 = $0 + 4 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) {
  $6 = HEAP32[$1 >> 2] | 0;
  return $6 | 0;
 } else {
  $6 = $1;
  return $6 | 0;
 }
 return 0;
}

function __ZN6spdlog9spdlog_exD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 9872;
 $1 = $0 + 4 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) >= 0) {
  __ZdlPv($0);
  return;
 }
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 __ZdlPv($0);
 return;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function _pthread_setspecific($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0;
 $2 = $0;
 if ((HEAP32[$2 + 4 >> 2] | 0) != 38177486) {
  $$0 = 22;
  return $$0 | 0;
 }
 HEAP32[$2 >> 2] = $1;
 $$0 = 0;
 return $$0 | 0;
}

function __ZNSt3__26localeC2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0;
 $2 = HEAP32[(__ZNSt3__26locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 return;
}

function __ZN3fmt2v519basic_memory_bufferIcLm128ENSt3__29allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 10036;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 if (($2 | 0) == ($0 + 16 | 0)) return;
 __ZdlPv($2);
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30424] | 0)) if (___cxa_guard_acquire(30424) | 0) {
  __ZNSt3__2L12init_wmonthsEv();
  HEAP32[8220] = 29536;
 }
 return HEAP32[8220] | 0;
}

function __ZN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 9804;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 if (($2 | 0) == ($0 + 16 | 0)) return;
 __ZdlPv($2);
 return;
}

function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30344] | 0)) if (___cxa_guard_acquire(30344) | 0) {
  __ZNSt3__2L11init_monthsEv();
  HEAP32[8203] = 28784;
 }
 return HEAP32[8203] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30440] | 0)) if (___cxa_guard_acquire(30440) | 0) {
  __ZNSt3__2L11init_wweeksEv();
  HEAP32[8221] = 29824;
 }
 return HEAP32[8221] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30408] | 0)) if (___cxa_guard_acquire(30408) | 0) {
  __ZNSt3__2L11init_wam_pmEv();
  HEAP32[8219] = 29248;
 }
 return HEAP32[8219] | 0;
}

function __ZN3sgl5LayerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 11456;
 $1 = $0 + 4 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) >= 0) {
  __ZdlPv($0);
  return;
 }
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 __ZdlPv($0);
 return;
}

function ___cxx_global_var_init_15() {
 var $2 = 0, $6 = 0;
 if (HEAP8[30024] | 0) return;
 $2 = 30016;
 HEAP32[$2 >> 2] = 3002;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = 30024;
 HEAP32[$6 >> 2] = 1;
 HEAP32[$6 + 4 >> 2] = 0;
 return;
}

function __ZNSt3__211char_traitsIcE6assignEPcmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($1 | 0) _memset($0 | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc($2) | 0) & 255 | 0, $1 | 0) | 0;
 return $0 | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30360] | 0)) if (___cxa_guard_acquire(30360) | 0) {
  __ZNSt3__2L10init_weeksEv();
  HEAP32[8204] = 29072;
 }
 return HEAP32[8204] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0 | 0;
 if (!(HEAP8[30328] | 0)) if (___cxa_guard_acquire(30328) | 0) {
  __ZNSt3__2L10init_am_pmEv();
  HEAP32[8202] = 28496;
 }
 return HEAP32[8202] | 0;
}

function ___cxx_global_var_init_16() {
 var $2 = 0, $6 = 0;
 if (HEAP8[30040] | 0) return;
 $2 = 30032;
 HEAP32[$2 >> 2] = 136;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = 30040;
 HEAP32[$6 >> 2] = 1;
 HEAP32[$6 + 4 >> 2] = 0;
 return;
}

function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function ___cxx_global_var_init_21() {
 var $2 = 0, $6 = 0;
 if (HEAP8[30264] | 0) return;
 $2 = 30256;
 HEAP32[$2 >> 2] = 58;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = 30264;
 HEAP32[$6 >> 2] = 1;
 HEAP32[$6 + 4 >> 2] = 0;
 return;
}

function ___cxx_global_var_init_20() {
 var $2 = 0, $6 = 0;
 if (HEAP8[30272] | 0) return;
 $2 = 30248;
 HEAP32[$2 >> 2] = 11;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = 30272;
 HEAP32[$6 >> 2] = 1;
 HEAP32[$6 + 4 >> 2] = 0;
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(33008) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(33016) | 0);
 return;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0, 12732);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0 + 12 | 0);
 return;
}

function __ZNKSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16540 ? $0 + 4 | 0 : 0) | 0;
}

function __ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 6728;
}

function __ZN3sgl10Renderer2D6CreateEiiRKNS_6ShaderE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __Znwm(180) | 0;
 __ZN3sgl14Renderer2D_ES2C2EiiRKNS_6ShaderE($3, $0, $1, $2);
 return $3 | 0;
}

function _getpid() {
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $0 = ___syscall20(20, sp | 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32992) | 0);
 return;
}

function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 15188;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if ($2 | 0) if (HEAP8[$0 + 12 >> 0] | 0) __ZdaPv($2);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function ___cxx_global_var_init_14() {
 var $2 = 0, $6 = 0;
 if (HEAP8[30008] | 0) return;
 $2 = 3e4;
 HEAP32[$2 >> 2] = 2;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = 30008;
 HEAP32[$6 >> 2] = 1;
 HEAP32[$6 + 4 >> 2] = 0;
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(33e3) | 0);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIN6spdlog6loggerENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 16 | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[$1 >> 2] >> 2] & 255]($1);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0, 12664);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0 + 4 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0, 12616);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0 + 4 | 0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0, 12608);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0 + 8 | 0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, 12560);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0 + 8 | 0);
 return;
}

function __ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNKSt3__26locale9use_facetERNS0_2idE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 return __ZNKSt3__26locale5__imp9use_facetEl($2, __ZNSt3__26locale2id5__getEv($1) | 0) | 0;
}

function __ZN3sgl10LayerStackC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 return;
}

function __ZN3sgl10EventQueueC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__26localeC2ERKS0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details19aggregate_formatterD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 10056;
 $1 = $0 + 12 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) >= 0) return;
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 return;
}

function __ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32936) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32928) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32920) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32912) | 0);
 return;
}

function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEENS_9allocatorIS7_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}

function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 15280;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 16 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 15240;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 12 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($0, $1, $2) | 0;
}

function __ZNSt3__26locale8__globalEv() {
 if (!(HEAP8[30936] | 0)) if (___cxa_guard_acquire(30936) | 0) {
  __ZNSt3__26locale5__imp11make_globalEv() | 0;
  HEAP32[8259] = 33032;
 }
 return HEAP32[8259] | 0;
}

function __ZNSt3__26locale7classicEv() {
 if (!(HEAP8[30768] | 0)) if (___cxa_guard_acquire(30768) | 0) {
  __ZNSt3__26locale5__imp12make_classicEv() | 0;
  HEAP32[8257] = 33024;
 }
 return HEAP32[8257] | 0;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32728) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32704) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32984) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32976) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32680) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32672) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32720) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(32688) | 0);
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1;
 HEAP32[$0 >> 2] = 15120;
 HEAP32[$0 + 8 >> 2] = __ZNSt3__26__clocEv() | 0;
 return;
}

function __ZNSt3__210shared_ptrIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEEE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 return;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__211char_traitsIwE4moveEPwPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0;
 if (!$2) $5 = $0; else {
  _wmemmove($0, $1, $2) | 0;
  $5 = $0;
 }
 return $5 | 0;
}

function __ZNKSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE11target_typeEv($0) {
 $0 = $0 | 0;
 return 6840;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNSt3__211char_traitsIwE6assignEPwmw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0;
 if (!$1) $5 = $0; else {
  _wmemset($0, $2, $1) | 0;
  $5 = $0;
 }
 return $5 | 0;
}

function __ZNSt3__211char_traitsIwE4copyEPwPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0;
 if (!$2) $5 = $0; else {
  _wmemcpy($0, $1, $2) | 0;
  $5 = $0;
 }
 return $5 | 0;
}

function __ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE11target_typeEv($0) {
 $0 = $0 | 0;
 return 6632;
}

function __ZN3sgl11IndexBuffer4LoadEPKjj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _glBindBuffer(34963, HEAP32[$0 >> 2] | 0);
 _glBufferData(34963, $2 << 2 | 0, $1 | 0, 35044);
 return;
}

function __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($0, $1, $2) | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0 | 0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[$0 >> 2] >> 2] | 0);
 return;
}

function __ZNSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}

function __ZN3sgl9Texture2DD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 _glDeleteTextures(1, $0 | 0);
 $1 = $0 + 4 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) >= 0) return;
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 return;
}

function __ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}

function ___DOUBLE_BITS_662($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $1 | 0;
}

function ___DOUBLE_BITS_273($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $1 | 0;
}

function __ZN6spdlog9spdlog_exD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 9872;
 $1 = $0 + 4 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) >= 0) return;
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 return;
}

function b10(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(10);
 return 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}

function _strtoull_l($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = _strtoull($0, $1, $2) | 0;
 setTempRet0(getTempRet0() | 0);
 return $4 | 0;
}

function _main() {
 var $0 = 0;
 $0 = __ZN3sgl17CreateApplicationEv() | 0;
 __ZN3sgl11Application3RunEv($0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] & 255]($0);
 return 0;
}

function __ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}

function __ZN3sgl5LayerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 11456;
 $1 = $0 + 4 | 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) >= 0) return;
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 return;
}

function _strtoll_l($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = _strtoll($0, $1, $2) | 0;
 setTempRet0(getTempRet0() | 0);
 return $4 | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function _strtoll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _strtox_753($0, $1, $2, 0, -2147483648) | 0;
 setTempRet0(getTempRet0() | 0);
 return $3 | 0;
}

function _pthread_getspecific($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[$0 + 4 >> 2] | 0) != 38177486) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = HEAP32[$0 >> 2] | 0;
 return $$0 | 0;
}

function __ZNKSt3__28numpunctIwE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1 + 16 | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1 + 12 | 0);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0;
  $$0 = -1;
 } else $$0 = $0;
 return $$0 | 0;
}

function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[$0 >> 2] | 0);
 return;
}

function __ZN3sgl12VertexBuffer15InitDynamicDrawEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _glBindBuffer(34962, HEAP32[$0 >> 2] | 0);
 _glBufferData(34962, $1 | 0, 0, 35048);
 return;
}

function _pthread_once($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ((HEAP32[$0 >> 2] | 0) == 324508639) return 0;
 FUNCTION_TABLE_v[$1 & 7]();
 HEAP32[$0 >> 2] = 324508639;
 return 0;
}

function _strtoull($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _strtox_753($0, $1, $2, -1, -1) | 0;
 setTempRet0(getTempRet0() | 0);
 return $3 | 0;
}

function __ZNSt3__26__clocEv() {
 if (!(HEAP8[30288] | 0)) if (___cxa_guard_acquire(30288) | 0) HEAP32[8174] = ___newlocale(2147483647, 23426, 0) | 0;
 return HEAP32[8174] | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 8 + 3 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 return;
}

function __ZN3sgl9WebWindow8SetVSyncEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ($1) _glfwSwapInterval(1); else _glfwSwapInterval(0);
 HEAP8[$0 + 56 >> 0] = $1 & 1;
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function b9(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(9);
 return 0;
}

function __ZNSt3__25mutex4lockEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = _pthread_mutex_lock($0) | 0;
 if (!$1) return; else __ZNSt3__220__throw_system_errorEiPKc($1, 25589);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0;
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memmove($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memcpy($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[7671] = 0;
 HEAP32[7670] = 14932;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[7669] = 0;
 HEAP32[7668] = 14904;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[7667] = 0;
 HEAP32[7666] = 14876;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[7665] = 0;
 HEAP32[7664] = 14848;
 return;
}

function __ZZN3sgl9WebWindow4InitEvEN3__18__invokeEP10GLFWwindowii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _glViewport(0, 0, $1 | 0, $2 | 0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 16 | 0;
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 1;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[7655] = 0;
 HEAP32[7654] = 13268;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[7653] = 0;
 HEAP32[7652] = 13216;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[7651] = 0;
 HEAP32[7650] = 13152;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[7649] = 0;
 HEAP32[7648] = 13088;
 return;
}

function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0 + -8 | 0);
 return;
}

function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0 + -8 | 0);
 return;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) $$0 = 0; else {
  HEAP8[$0 >> 0] = 1;
  $$0 = 1;
 }
 return $$0 | 0;
}

function __ZNSt13runtime_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 15772;
 __ZNSt3__218__libcpp_refstringC2EPKc($0 + 4 | 0, $1);
 return;
}

function __ZNK3sgl9WebWindow5ClearEv($0) {
 $0 = $0 | 0;
 _glClearColor(.10000000149011612, .10000000149011612, .10000000149011612, 1.0);
 _glClear(16640);
 return;
}

function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 if ($0 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] & 255]($0);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $1 >>> 0 <= $0 >>> 0 & $0 >>> 0 < $2 >>> 0 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $1 >>> 0 <= $0 >>> 0 & $0 >>> 0 < $2 >>> 0 | 0;
}

function __ZNSt11logic_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 15752;
 __ZNSt3__218__libcpp_refstringC2EPKc($0 + 4 | 0, $1);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0);
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNK3sgl9Texture2D4BindEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _glActiveTexture($1 + 33984 | 0);
 _glBindTexture(3553, HEAP32[$0 >> 2] | 0);
 return;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function _wcslen($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 $$0 = $0;
 while (1) if (!(HEAP32[$$0 >> 2] | 0)) break; else $$0 = $$0 + 4 | 0;
 return $$0 - $0 >> 2 | 0;
}

function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $3 = 0;
 if (!$0) $3 = 0; else $3 = (___dynamic_cast($0, 9512, 9616, 0) | 0) != 0 & 1;
 return $3 | 0;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[8175] | 0;
 HEAP32[8175] = $1 + 1;
 HEAP32[$0 + 4 >> 2] = $1 + 1;
 return;
}

function __ZN3sgl11Application7OnEventEPNS_5EventE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN3sgl10EventQueue9PushEventEPNS_5EventE($0 + 12 | 0, $1);
 return;
}

function __ZNSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function b8(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(8);
 return 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12464;
 __ZNSt3__26localeD2Ev($0 + 4 | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12400;
 __ZNSt3__26localeD2Ev($0 + 4 | 0);
 return;
}

function __ZN3sgl9WebWindow15GetWindowHeightEv($0) {
 $0 = $0 | 0;
 return HEAP32[((HEAP8[$0 + 57 >> 0] | 0) == 0 ? $0 + 48 | 0 : $0 + 36 | 0) >> 2] | 0;
}

function _fileno($0) {
 $0 = $0 | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) if (___lockfile($0) | 0) ___unlockfile($0);
 return HEAP32[$0 + 60 >> 2] | 0;
}

function __ZN3sgl9WebWindow14GetWindowWidthEv($0) {
 $0 = $0 | 0;
 return HEAP32[((HEAP8[$0 + 57 >> 0] | 0) == 0 ? $0 + 44 | 0 : $0 + 32 | 0) >> 2] | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function b7(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 nullFunc_iiiiiid(7);
 return 0;
}

function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[8256] = 30776;
 return 33024;
}

function __ZN3fmt2v512format_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt13runtime_errorC2EPKc($0, $1);
 HEAP32[$0 >> 2] = 9824;
 return;
}

function ___ctype_get_mb_cur_max() {
 var $4 = 0;
 $4 = (HEAP32[HEAP32[(___pthread_self() | 0) + 188 >> 2] >> 2] | 0) == 0;
 return ($4 ? 1 : 4) | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNKSt3__26locale5__imp9use_facetEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) >> 2] | 0;
}

function __ZN3sgl12GenericInput21IsJoystickPresentImplEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (_glfwJoystickPresent($1 | 0) | 0) != 0 | 0;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIN6spdlog6loggerENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0;
}

function b17(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(17);
}

function __ZNSt3__28ios_base5clearEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 16 >> 2] = (HEAP32[$0 + 24 >> 2] | 0) == 0 | $1;
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEwc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 >>> 0 < 128 ? $1 & 255 : $2) | 0;
}

function __ZNSt3__211__stdoutbufIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__211__stdoutbufIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEcc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 << 24 >> 24 > -1 ? $1 : $2) | 0;
}

function __ZNKSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 6672;
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(30504, 1);
 return;
}

function __ZNSt3__210__stdinbufIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210__stdinbufIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1, 0) | 0;
 return $$0 | 0;
}

function __ZNSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 15772;
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
 return;
}

function __ZN3sgl11IndexBufferC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 _glGenBuffers(1, $0 | 0);
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0);
 __ZdlPv($0);
 return;
}

function _out($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0) | 0;
 return;
}

function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(33032, __ZNSt3__26locale7classicEv() | 0);
 return 33032;
}

function __ZNSt3__210shared_ptrIN6spdlog6loggerEE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 return;
}

function __ZNSt3__210__function6__baseIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 15752;
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 127](a1 | 0, a2 | 0);
}

function b6(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6);
 return 0;
}

function __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return 6320;
}

function _mbrlen($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbrtowc(0, $0, $1, ($2 | 0) == 0 ? 31120 : $2) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[7631] = 0;
 HEAP32[7630] = 15500;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[7633] = 0;
 HEAP32[7632] = 15548;
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
 return;
}

function b5(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 nullFunc_iiiiid(5);
 return 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[7625] = 0;
 HEAP32[7624] = 15452;
 return;
}

function __ZNSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}

function __ZNK3sgl9WebWindow8IsClosedEv($0) {
 $0 = $0 | 0;
 return (_glfwWindowShouldClose(HEAP32[$0 + 40 >> 2] | 0) | 0) != 0 | 0;
}

function __ZN3sgl11Application13OnWindowCloseEPNS_5EventE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 36 >> 0] = 0;
 return 1;
}

function __ZNSt3__211char_traitsIwE6assignERwRKw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 return;
}

function __ZNK3sgl9WebWindow6UpdateEv($0) {
 $0 = $0 | 0;
 _glfwSwapBuffers(HEAP32[$0 + 40 >> 2] | 0);
 _glfwPollEvents();
 return;
}

function __ZNKSt3__28ios_base6getlocEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26localeC2ERKS0_($0, $1 + 28 | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbm(30472, 0, 0, 1);
 return;
}

function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 1073741823;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0 | 0;
 return 2;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0 | 0;
 return 2;
}

function b16(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(16);
}

function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) $4 = 1; else $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1;
 return $4 | 0;
}

function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__217__widen_from_utf8ILm32EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[7663] = 0;
 HEAP32[7662] = 14792;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[7661] = 0;
 HEAP32[7660] = 14736;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[7659] = 0;
 HEAP32[7658] = 14680;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[7657] = 0;
 HEAP32[7656] = 14624;
 return;
}

function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__217bad_function_callD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__217bad_function_callD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 30280;
 HEAP32[$2 >> 2] = $0 + -1;
 HEAP32[$2 + 4 >> 2] = 0;
 return;
}

function __ZNSt3__210__stdinbufIwE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($0, 0) | 0;
}

function __ZNSt3__210__stdinbufIcE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($0, 0) | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0 | 0;
 return $0 + 12 | 0;
}

function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 | 0) == ($1 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 | 0) == ($1 | 0) | 0;
}

function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}

function ___loc_is_allocated($0) {
 $0 = $0 | 0;
 return ($0 | 0) != 11556 & (($0 | 0) != 0 & ($0 | 0) != 31064) & 1 | 0;
}

function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}

function __ZNSt3__210__stdinbufIwE5uflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($0, 1) | 0;
}

function __ZNSt3__210__stdinbufIcE5uflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($0, 1) | 0;
}

function __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[7691] = 0;
 HEAP32[7690] = 14992;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[7689] = 0;
 HEAP32[7688] = 14960;
 return;
}

function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 127](a1 | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[7617] = 0;
 HEAP32[7616] = 13056;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[7615] = 0;
 HEAP32[7614] = 13024;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Em(30776, 1);
 return;
}

function __ZNSt3__218condition_variable10notify_oneEv($0) {
 $0 = $0 | 0;
 _pthread_cond_signal($0 | 0) | 0;
 return;
}

function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 - $0 >> 2 | 0;
}

function b4(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(4);
 return 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1040($0) {
 $0 = $0 | 0;
 return $0 + -12 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Em(30560, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Em(30536, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[7623] = 0;
 HEAP32[7622] = 15384;
 return;
}

function _isxdigit($0) {
 $0 = $0 | 0;
 return ((($0 | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($0) | 0) != 0) & 1 | 0;
}

function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[index & 3](a1 | 0);
}

function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[8281] | 0;
 HEAP32[8281] = $0 + 0;
 return $0 | 0;
}

function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5__impD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN3fmt2v512format_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__26threadD2Ev($0) {
 $0 = $0 | 0;
 if (!(HEAP32[$0 >> 2] | 0)) return; else __ZSt9terminatev();
}

function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 return HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0;
}

function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 return HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0;
}

function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 - $0 | 0;
}

function __ZNK3sgl12VertexBuffer4BindEv($0) {
 $0 = $0 | 0;
 _glBindBuffer(34962, HEAP32[$0 >> 2] | 0);
 return;
}

function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[3915] | 0;
 HEAP32[3915] = $0 + 0;
 return $0 | 0;
}

function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28numpunctIwED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28numpunctIcED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNK3sgl11IndexBuffer4BindEv($0) {
 $0 = $0 | 0;
 _glBindBuffer(34963, HEAP32[$0 >> 2] | 0);
 return;
}

function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27collateIwED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27collateIcED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__218condition_variableD2Ev($0) {
 $0 = $0 | 0;
 _pthread_cond_destroy($0 | 0) | 0;
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0);
}

function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(15);
}

function _catgets($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return $3 | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt12length_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 12 >> 2] | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 << 24 >> 24 | 0;
}

function _strtold_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtold($0, $1));
}

function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__25ctypeIcED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 8 >> 2] | 0;
}

function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 9 >> 0] | 0;
}

function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 8 >> 0] | 0;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 _abort();
}

function _strtof_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtof($0, $1));
}

function _strtod_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtod($0, $1));
}

function __ZNSt3__220__time_get_c_storageIwEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 15632;
 return;
}

function __ZNSt3__220__time_get_c_storageIcEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 15596;
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 _abort();
}

function __ZNSt3__215recursive_mutexD2Ev($0) {
 $0 = $0 | 0;
 _pthread_mutex_destroy($0) | 0;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZN6spdlog7details25source_location_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details25source_funcname_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details25source_filename_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function __ZNSt3__210__function6__baseIFbPN3sgl16WindowCloseEventEEED2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNK3sgl9WebWindow15GetNativeWindowEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0;
}

function __ZN6spdlog7details24source_linenum_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function __ZN6NESAppD0Ev($0) {
 $0 = $0 | 0;
 __ZN3sgl11ApplicationD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__25ctypeIcE13classic_tableEv() {
 return HEAP32[(___ctype_b_loc() | 0) >> 2] | 0;
}

function __ZNK3sgl6Shader4BindEv($0) {
 $0 = $0 | 0;
 _glUseProgram(HEAP32[$0 >> 2] | 0);
 return;
}

function __ZN6spdlog7details21short_level_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details21color_start_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function b3(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(3);
 return 0;
}

function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 >> 2] | 0;
}

function __ZN6spdlog7details20color_stop_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 1;
}

function __ZNK3sgl12VertexBuffer6UnbindEv($0) {
 $0 = $0 | 0;
 _glBindBuffer(34962, 0);
 return;
}

function __ZNSt3__25mutex6unlockEv($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0) | 0;
 return;
}

function __ZNSt3__220__throw_system_errorEiPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _abort();
}

function __ZNK3sgl11IndexBuffer6UnbindEv($0) {
 $0 = $0 | 0;
 _glBindBuffer(34963, 0);
 return;
}

function __ZN9MainLayerD0Ev($0) {
 $0 = $0 | 0;
 __ZN9MainLayerD2Ev($0);
 __ZdlPv($0);
 return;
}

function _freelocale($0) {
 $0 = $0 | 0;
 if (___loc_is_allocated($0) | 0) _free($0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 4;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 4;
}

function __ZNKSt3__25ctypeIcE8do_widenEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 | 0;
}

function __ZN3sgl12VertexBufferD2Ev($0) {
 $0 = $0 | 0;
 _glDeleteBuffers(1, $0 | 0);
 return;
}

function __ZNSt3__211char_traitsIcE12to_char_typeEi($0) {
 $0 = $0 | 0;
 return $0 & 255 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 1;
}

function __ZN3sgl11IndexBufferD2Ev($0) {
 $0 = $0 | 0;
 _glDeleteBuffers(1, $0 | 0);
 return;
}

function __ZSt18uncaught_exceptionv() {
 return (__ZSt19uncaught_exceptionsv() | 0) > 0 | 0;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0 | 0;
 return $0 & 255 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 127;
}

function __ZNK3sgl9Texture2D6UnbindEv($0) {
 $0 = $0 | 0;
 _glBindTexture(3553, 0);
 return;
}

function __ZN6spdlog7details15level_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZSt19uncaught_exceptionsv() {
 return (___cxa_uncaught_exception() | 0) & 1 | 0;
}

function __ZNSt3__25mutexD2Ev($0) {
 $0 = $0 | 0;
 _pthread_mutex_destroy($0) | 0;
 return;
}

function __ZNSt3__211char_traitsIwE6lengthEPKw($0) {
 $0 = $0 | 0;
 return _wcslen($0) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0 | 0;
 return _strlen($0) | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 1;
}

function __ZN6spdlog7details14name_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN3sgl12VertexBufferC2Ev($0) {
 $0 = $0 | 0;
 _glGenBuffers(1, $0 | 0);
 return;
}

function __ZNKSt3__28messagesIwE8do_closeEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNKSt3__28messagesIcE8do_closeEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0 | 0;
 return 1;
}

function __ZN6spdlog7details13pid_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN3sgl5Layer7OnEventERNS_5EventE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__210__function6__baseIFvPN3sgl5EventEEED2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZN6spdlog7details12ch_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function b14(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(14);
}

function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZN6spdlog7details11z_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11v_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11t_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11r_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11p_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11m_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11f_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11e_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11d_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11c_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11b_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11a_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11Y_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11T_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11S_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11R_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11M_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11I_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11H_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11F_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11E_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11D_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11C_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11B_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN6spdlog7details11A_formatterD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function _strtold($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox($0, $1, 2));
}

function __ZNSt3__211char_traitsIwE12to_char_typeEj($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function _strtof($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox($0, $1, 0));
}

function _strtod($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox($0, $1, 1));
}

function __ZNSt3__211char_traitsIwE11to_int_typeEw($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function __ZNK3sgl19MouseButtonReleased12GetEventTypeEv($0) {
 $0 = $0 | 0;
 return 6;
}

function __ZNK3sgl18WindowResizedEvent12GetEventTypeEv($0) {
 $0 = $0 | 0;
 return 10;
}

function _isxdigit_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _isxdigit($0) | 0;
}

function __ZNK3sgl18MouseButtonPressed12GetEventTypeEv($0) {
 $0 = $0 | 0;
 return 5;
}

function __ZN3sgl19MouseButtonReleasedD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function ___emscripten_environ_constructor() {
 ___buildEnvironment(31636);
 return;
}

function __ZN3sgl18WindowResizedEventD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN3sgl18MouseButtonPressedD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function _isdigit_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _isdigit($0) | 0;
}

function __ZNK3sgl16WindowCloseEvent12GetEventTypeEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNK3sgl16KeyReleasedEvent12GetEventTypeEv($0) {
 $0 = $0 | 0;
 return 2;
}

function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}

function __ZNK3sgl15KeyPressedEvent12GetEventTypeEv($0) {
 $0 = $0 | 0;
 return 1;
}

function __ZN3sgl16WindowCloseEventD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZN3sgl16KeyReleasedEventD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}

function __ZNKSt3__217bad_function_call4whatEv($0) {
 $0 = $0 | 0;
 return 22738;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZN3sgl15KeyPressedEventD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7]();
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(2);
 return 0;
}

function ___cxx_global_var_init() {
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}

function _pthread_mutex_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}

function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0 | 0;
 _abort();
}

function __ZNSt3__210__function6__baseIFvvEED2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZN6spdlog7details14flag_formatterD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNK3sgl9DropEvent12GetEventTypeEv($0) {
 $0 = $0 | 0;
 return 9;
}

function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}

function _catopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -1 | 0;
}

function ___cxa_deleted_virtual__wrapper() {
 ___cxa_deleted_virtual();
}

function __ZNSt3__217bad_function_callD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZN6spdlog5sinks4sinkD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap();
}

function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(13);
}

function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZN3sgl10Renderer2DD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap();
}

function __GLOBAL__I_000101() {
 ___cxx_global_var_init();
 return;
}

function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}

function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function __ZN3sgl6WindowD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap();
}

function __ZN3sgl5Layer8OnUpdateEv($0) {
 $0 = $0 | 0;
 return;
}

function __ZN3sgl5Layer8OnDetachEv($0) {
 $0 = $0 | 0;
 return;
}

function __ZN3sgl5Layer8OnAttachEv($0) {
 $0 = $0 | 0;
 return;
}

function _pthread_mutex_destroy($0) {
 $0 = $0 | 0;
 return 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b0(p0) {
 p0 = p0 | 0;
 nullFunc_di(0);
 return 0.0;
}

function _pthread_mutex_unlock($0) {
 $0 = $0 | 0;
 return 0;
}

function ___pthread_self_440() {
 return _pthread_self() | 0;
}

function ___pthread_self_437() {
 return _pthread_self() | 0;
}

function ___pthread_self_434() {
 return _pthread_self() | 0;
}

function ___pthread_self_431() {
 return _pthread_self() | 0;
}

function ___pthread_self_231() {
 return _pthread_self() | 0;
}

function _pthread_cond_broadcast(x) {
 x = x | 0;
 return 0;
}

function b1(p0) {
 p0 = p0 | 0;
 nullFunc_ii(1);
 return 0;
}

function _pthread_mutex_lock($0) {
 $0 = $0 | 0;
 return 0;
}

function __Znam($0) {
 $0 = $0 | 0;
 return __Znwm($0) | 0;
}

function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9exceptionD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function ___pthread_self() {
 return _pthread_self() | 0;
}

function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function __ZNSt3__211char_traitsIwE3eofEv() {
 return -1;
}

function __ZNSt3__211char_traitsIcE3eofEv() {
 return -1;
}

function ___ofl_lock() {
 ___lock(31108);
 return 31116;
}

function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}

function __ZN3sgl5EventD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function _dummy_723($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function ___ofl_unlock() {
 ___unlock(31108);
 return;
}

function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}

function ___lockfile($0) {
 $0 = $0 | 0;
 return 1;
}

function b12(p0) {
 p0 = p0 | 0;
 nullFunc_vi(12);
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function _catclose($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZSt17__throw_bad_allocv() {
 _abort();
}

function ___ctype_toupper_loc() {
 return 12344;
}

function ___ctype_tolower_loc() {
 return 12340;
}

function ___errno_location() {
 return 31088;
}

function stackSave() {
 return STACKTOP | 0;
}

function __get_timezone() {
 return 31632;
}

function __get_daylight() {
 return 31628;
}

function ___ctype_b_loc() {
 return 12336;
}

function _pthread_self() {
 return 12092;
}

function __get_environ() {
 return 31636;
}

function __get_tzname() {
 return 31620;
}

function b11() {
 nullFunc_v(11);
}

function _dummy() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_di = [b0,__ZN3sgl12GenericInput21GetMousePositionXImplEv,__ZN3sgl12GenericInput21GetMousePositionYImplEv,b0];
var FUNCTION_TABLE_ii = [b1,__ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE7__cloneEv,__ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE11target_typeEv,__ZNKSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE7__cloneEv,__ZNKSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE11target_typeEv,__ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE7__cloneEv,__ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE11target_typeEv,__ZNKSt13runtime_error4whatEv,__ZNK6spdlog9spdlog_ex4whatEv,__ZNKSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE7__cloneEv,__ZNKSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE11target_typeEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNK3sgl9WebWindow8IsClosedEv,__ZNK3sgl9WebWindow15GetNativeWindowEv,__ZN3sgl9WebWindow14GetWindowWidthEv,__ZN3sgl9WebWindow15GetWindowHeightEv,__ZNK3sgl16WindowCloseEvent12GetEventTypeEv,__ZNK3sgl15KeyPressedEvent12GetEventTypeEv,__ZNK3sgl16KeyReleasedEvent12GetEventTypeEv,__ZNK3sgl18MouseButtonPressed12GetEventTypeEv,__ZNK3sgl19MouseButtonReleased12GetEventTypeEv,__ZNK3sgl9DropEvent12GetEventTypeEv,__ZNK3sgl18WindowResizedEvent12GetEventTypeEv,___stdio_close,__ZNKSt3__217bad_function_call4whatEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv
,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv
,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt11logic_error4whatEv,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,__ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE6targetERKSt9type_info,__ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEEclEOSJ_,__ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE6targetERKSt9type_info,__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info,__ZNKSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE6targetERKSt9type_info,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZN3sgl12GenericInput16IsKeyPressedImplEi,__ZN3sgl12GenericInput21IsJoystickPresentImplEi,__ZN3sgl12GenericInput24IsMouseButtonPressedImplEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,__ZN3sgl11Application13OnWindowCloseEPNS_5EventE,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,__ZN3sgl12GenericInput27IsJoystickButtonPressedImplEii,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZN3sglL24EmscriptenResizeCallbackEiPK31EmscriptenFullscreenChangeEventPv,_do_read
,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b4,b4];
var FUNCTION_TABLE_iiiiid = [b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b5,b5,b5];
var FUNCTION_TABLE_iiiiii = [b6,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiiiid = [b7,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b7];
var FUNCTION_TABLE_iiiiiii = [b8,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiiiii = [b9,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9];
var FUNCTION_TABLE_iiiiiiiii = [b10,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_v = [b11,___cxa_pure_virtual__wrapper,___cxa_deleted_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b11,b11,b11];
var FUNCTION_TABLE_vi = [b12,__ZN3sgl11ApplicationD2Ev,__ZN3sgl11ApplicationD0Ev,__ZNSt3__210__function6__baseIFvPN3sgl5EventEEED2Ev,__ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EED0Ev,__ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE7destroyEv,__ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE18destroy_deallocateEv,__ZNSt3__210__function6__baseIFvvEED2Ev,__ZNSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEED0Ev,__ZNSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE7destroyEv,__ZNSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEEclEv,__ZNSt3__210__function6__baseIFbPN3sgl16WindowCloseEventEEED2Ev,__ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEED0Ev,__ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE7destroyEv,__ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE18destroy_deallocateEv,__ZN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEED2Ev,__ZN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEED0Ev,__ZNSt13runtime_errorD2Ev,__ZN3fmt2v512format_errorD0Ev,__ZNSt3__220__shared_ptr_emplaceIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEENS_9allocatorIS7_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEENS_9allocatorIS7_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEENS_9allocatorIS7_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceIN6spdlog5sinks14ansicolor_sinkINS1_7details14console_stdoutENS4_13console_mutexEEENS_9allocatorIS7_EEE21__on_zero_shared_weakEv,__ZN6spdlog9spdlog_exD2Ev,__ZN6spdlog9spdlog_exD0Ev,__ZNSt3__220__shared_ptr_emplaceIN6spdlog6loggerENS_9allocatorIS2_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceIN6spdlog6loggerENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceIN6spdlog6loggerENS_9allocatorIS2_EEE16__on_zero_sharedEv
,__ZNSt3__220__shared_ptr_emplaceIN6spdlog6loggerENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN6spdlog6loggerD2Ev,__ZN6spdlog6loggerD0Ev,__ZN6spdlog6logger6flush_Ev,__ZNSt3__210__function6__baseIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev,__ZNSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EED0Ev,__ZNSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE7destroyEv,__ZNSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE18destroy_deallocateEv,__ZN6spdlog17pattern_formatterD2Ev,__ZN6spdlog17pattern_formatterD0Ev,__ZN6spdlog7details14full_formatterD2Ev,__ZN6spdlog7details14full_formatterD0Ev,__ZN3fmt2v519basic_memory_bufferIcLm128ENSt3__29allocatorIcEEED2Ev,__ZN3fmt2v519basic_memory_bufferIcLm128ENSt3__29allocatorIcEEED0Ev,__ZN6spdlog7details19aggregate_formatterD2Ev,__ZN6spdlog7details19aggregate_formatterD0Ev,__ZN6spdlog7details14flag_formatterD2Ev,__ZN6spdlog7details14name_formatterD0Ev,__ZN6spdlog7details15level_formatterD0Ev,__ZN6spdlog7details21short_level_formatterD0Ev,__ZN6spdlog7details11t_formatterD0Ev,__ZN6spdlog7details11v_formatterD0Ev,__ZN6spdlog7details11a_formatterD0Ev,__ZN6spdlog7details11A_formatterD0Ev,__ZN6spdlog7details11b_formatterD0Ev,__ZN6spdlog7details11B_formatterD0Ev,__ZN6spdlog7details11c_formatterD0Ev,__ZN6spdlog7details11C_formatterD0Ev,__ZN6spdlog7details11Y_formatterD0Ev,__ZN6spdlog7details11D_formatterD0Ev
,__ZN6spdlog7details11m_formatterD0Ev,__ZN6spdlog7details11d_formatterD0Ev,__ZN6spdlog7details11H_formatterD0Ev,__ZN6spdlog7details11I_formatterD0Ev,__ZN6spdlog7details11M_formatterD0Ev,__ZN6spdlog7details11S_formatterD0Ev,__ZN6spdlog7details11e_formatterD0Ev,__ZN6spdlog7details11f_formatterD0Ev,__ZN6spdlog7details11F_formatterD0Ev,__ZN6spdlog7details11E_formatterD0Ev,__ZN6spdlog7details11p_formatterD0Ev,__ZN6spdlog7details11r_formatterD0Ev,__ZN6spdlog7details11R_formatterD0Ev,__ZN6spdlog7details11T_formatterD0Ev,__ZN6spdlog7details11z_formatterD0Ev,__ZN6spdlog7details13pid_formatterD0Ev,__ZN6spdlog7details21color_start_formatterD0Ev,__ZN6spdlog7details20color_stop_formatterD0Ev,__ZN6spdlog7details25source_location_formatterD0Ev,__ZN6spdlog7details25source_filename_formatterD0Ev,__ZN6spdlog7details24source_linenum_formatterD0Ev,__ZN6spdlog7details25source_funcname_formatterD0Ev,__ZN6spdlog7details12ch_formatterD0Ev,__ZN6spdlog5sinks4sinkD2Ev,__ZN6spdlog5sinks4sinkD0Ev,__ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEED2Ev,__ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEED0Ev,__ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE5flushEv,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZN3sgl9WebWindowD2Ev,__ZN3sgl9WebWindowD0Ev,__ZNK3sgl9WebWindow5ClearEv,__ZNK3sgl9WebWindow6UpdateEv,__ZN3sgl9WebWindow16ToggleFullScreenEv,__ZN3sgl6WindowD2Ev,__ZN3sgl6WindowD0Ev,__ZN3sgl5EventD2Ev,__ZN3sgl16WindowCloseEventD0Ev,__ZN3sgl15KeyPressedEventD0Ev
,__ZN3sgl16KeyReleasedEventD0Ev,__ZN3sgl18MouseButtonPressedD0Ev,__ZN3sgl19MouseButtonReleasedD0Ev,__ZN3sgl9DropEventD2Ev,__ZN3sgl9DropEventD0Ev,__ZN3sgl18WindowResizedEventD0Ev,__ZN3sgl14Renderer2D_ES2D2Ev,__ZN3sgl14Renderer2D_ES2D0Ev,__ZN3sgl14Renderer2D_ES25BeginEv,__ZN3sgl14Renderer2D_ES23EndEv,__ZN3sgl14Renderer2D_ES25FlushEv,__ZN3sgl10Renderer2DD2Ev,__ZN3sgl10Renderer2DD0Ev,__ZN3sgl5LayerD2Ev,__ZN3sgl5LayerD0Ev,__ZN3sgl5Layer8OnAttachEv,__ZN3sgl5Layer8OnDetachEv,__ZN3sgl5Layer8OnUpdateEv,__ZN6NESAppD0Ev,__ZN9MainLayerD2Ev,__ZN9MainLayerD0Ev,__ZN9MainLayer8OnUpdateEv,__ZNSt3__217bad_function_callD2Ev,__ZNSt3__217bad_function_callD0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev
,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev
,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev
,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN3sglL8CallMainEPv,__ZZN3sgl9WebWindow4InitEvEN3__58__invokeEP10GLFWwindow,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_vii = [b13,__ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EE7__cloneEPNS0_6__baseISI_EE,__ZNSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFvPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFvS6_EEclEOS6_,__ZNKSt3__210__function6__funcIZN3sgl11Application3RunEvE3__0NS_9allocatorIS4_EEFvvEE7__cloneEPNS0_6__baseIS7_EE,__ZNKSt3__210__function6__funcINS_6__bindIMN3sgl11ApplicationEFbPNS3_5EventEEJPS4_RKNS_12placeholders4__phILi1EEEEEENS_9allocatorISF_EEFbPNS3_16WindowCloseEventEEE7__cloneEPNS0_6__baseISK_EE,__ZN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEE4growEm,__ZN6spdlog6logger8sink_it_ERNS_7details7log_msgE,__ZNKSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EE7__cloneEPNS0_6__baseISE_EE,__ZNSt3__210__function6__funcIN6spdlog6logger12err_handler_MUlRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE_ENS7_ISC_EEFvSB_EEclESB_,__ZNK6spdlog17pattern_formatter5cloneEv,__ZN3fmt2v519basic_memory_bufferIcLm128ENSt3__29allocatorIcEEE4growEm,__ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE3logERKNS2_7log_msgE,__ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE11set_patternERKNSt3__212basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE,__ZN6spdlog5sinks14ansicolor_sinkINS_7details14console_stdoutENS2_13console_mutexEE13set_formatterENSt3__210unique_ptrINS_9formatterENS6_14default_deleteIS8_EEEE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZN3sgl9WebWindow8SetVSyncEb,__ZNK3sgl16WindowCloseEvent8ToStringEv,__ZNK3sgl15KeyPressedEvent8ToStringEv,__ZNK3sgl16KeyReleasedEvent8ToStringEv,__ZNK3sgl18MouseButtonPressed8ToStringEv,__ZNK3sgl19MouseButtonReleased8ToStringEv,__ZNK3sgl9DropEvent8ToStringEv,__ZNK3sgl18WindowResizedEvent8ToStringEv,__ZN3sgl14Renderer2D_ES26SubmitERNS_12Renderable2DE,__ZN3sgl14Renderer2D_ES213SubmitTextureEPKNS_9Texture2DE,__ZN3sgl12GenericInput20GetMousePositionImplEv,__ZN3sgl5Layer7OnEventERNS_5EventE,__ZN9MainLayer7OnEventERN3sgl5EventE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE
,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEl,__ZNKSt3__28messagesIwE8do_closeEl
,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,__ZN3sgl11Application7OnEventEPNS_5EventE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viii = [b14,__ZN6spdlog6logger5cloneENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN6spdlog17pattern_formatter6formatERKNS_7details7log_msgERN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN3sgl12GenericInput19GetJoystickAxisImplEi,__ZZN3sgl9WebWindow4InitEvEN3__08__invokeEP10GLFWwindowii,__ZZN3sgl9WebWindow4InitEvEN3__18__invokeEP10GLFWwindowii,__ZZN3sgl9WebWindow4InitEvEN3__28__invokeEP10GLFWwindowiPPKc,b14];
var FUNCTION_TABLE_viiii = [b15,__ZN6spdlog7details14full_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details19aggregate_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details14name_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details15level_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details21short_level_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11t_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11v_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11a_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11A_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11b_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11B_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11c_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11C_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11Y_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11D_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11m_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11d_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11H_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11I_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11M_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11S_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11e_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11f_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11F_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11E_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11p_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11r_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11R_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE
,__ZN6spdlog7details11T_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details11z_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details13pid_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details21color_start_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details20color_stop_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details25source_location_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details25source_filename_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details24source_linenum_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details25source_funcname_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZN6spdlog7details12ch_formatter6formatERKNS0_7log_msgERK2tmRN3fmt2v519basic_memory_bufferIcLm500ENSt3__29allocatorIcEEEE,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZN3sgl14Renderer2D_ES213DrawRectangleERKN3glm3vecILi2EfLNS1_9qualifierE0EEES6_RKNS2_ILi4EfLS3_0EEE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZZN3sgl9WebWindow4InitEvEN3__38__invokeEP10GLFWwindowiii,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiiii = [b16,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZZN3sgl9WebWindow4InitEvEN3__48__invokeEP10GLFWwindowiiii,b16,b16,b16];
var FUNCTION_TABLE_viiiiii = [b17,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZN3sgl14Renderer2D_ES28DrawQuadERKN3glm3vecILi3EfLNS1_9qualifierE0EEES6_S6_S6_RKNS2_ILi4EfLS3_0EEE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17,b17,b17,b17,b17,b17];

  return { __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___divdi3: ___divdi3, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___remdi3: ___remdi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_environ: __get_environ, __get_timezone: __get_timezone, __get_tzname: __get_tzname, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_ctlz_i64: _llvm_ctlz_i64, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _sbrk: _sbrk, dynCall_di: dynCall_di, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"]; asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____divdi3 = asm["___divdi3"]; asm["___divdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____divdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____remdi3 = asm["___remdi3"]; asm["___remdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____remdi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_daylight = asm["__get_daylight"]; asm["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_environ = asm["__get_environ"]; asm["__get_environ"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_environ.apply(null, arguments);
};

var real___get_timezone = asm["__get_timezone"]; asm["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real___get_tzname = asm["__get_tzname"]; asm["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_ctlz_i64 = asm["_llvm_ctlz_i64"]; asm["_llvm_ctlz_i64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_ctlz_i64.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_globalCtors = asm["globalCtors"]; asm["globalCtors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_globalCtors.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_ctlz_i64 = Module["_llvm_ctlz_i64"] = asm["_llvm_ctlz_i64"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}






